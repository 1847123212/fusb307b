
FUSB307B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c70c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800c894  0800c894  0001c894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c944  0800c944  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c944  0800c944  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c944  0800c944  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c944  0800c944  0001c944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c948  0800c948  0001c948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800c94c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000000c  0800c958  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800c958  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c2c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035c1  00000000  00000000  00051c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  00055230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a8  00000000  00000000  00056480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026529  00000000  00000000  00057528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb60  00000000  00000000  0007da51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9521  00000000  00000000  000895b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172ad2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a68  00000000  00000000  00172b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c87c 	.word	0x0800c87c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800c87c 	.word	0x0800c87c

080001c8 <WakeOnTimer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void WakeOnTimer() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  FSC_U32 timeout_value;
  FSC_U32 timer_value;
  FSC_U8 j = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	72fb      	strb	r3, [r7, #11]

  /* Set to the largest value */
  timeout_value = ~0U;
 80001d2:	f04f 33ff 	mov.w	r3, #4294967295
 80001d6:	60fb      	str	r3, [r7, #12]
  g_IdleIdx = -1;
 80001d8:	4b23      	ldr	r3, [pc, #140]	; (8000268 <WakeOnTimer+0xa0>)
 80001da:	22ff      	movs	r2, #255	; 0xff
 80001dc:	701a      	strb	r2, [r3, #0]

  /* Go through all Ports and find the shortest timer  */
  for (j = 0; j < FSC_NUMBER_OF_PORTS; j++) {
 80001de:	2300      	movs	r3, #0
 80001e0:	72fb      	strb	r3, [r7, #11]
 80001e2:	e02a      	b.n	800023a <WakeOnTimer+0x72>
    timer_value = core_get_next_timeout(&g_ports[j]);
 80001e4:	7afb      	ldrb	r3, [r7, #11]
 80001e6:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 80001ea:	fb02 f303 	mul.w	r3, r2, r3
 80001ee:	4a1f      	ldr	r2, [pc, #124]	; (800026c <WakeOnTimer+0xa4>)
 80001f0:	4413      	add	r3, r2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f003 f8a4 	bl	8003340 <core_get_next_timeout>
 80001f8:	6078      	str	r0, [r7, #4]
    /* Get the shortest timer.
     * 0 - No active timer
     * 1 - An active timer has expired, set port to active
     * Other - Set timer interrupt */
    if (timer_value == 0) {
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d018      	beq.n	8000232 <WakeOnTimer+0x6a>
      continue;
    } else if (timer_value == 1) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d10a      	bne.n	800021c <WakeOnTimer+0x54>
      g_ports[j].idle_ = FALSE;
 8000206:	7afb      	ldrb	r3, [r7, #11]
 8000208:	4a18      	ldr	r2, [pc, #96]	; (800026c <WakeOnTimer+0xa4>)
 800020a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800020e:	fb01 f303 	mul.w	r3, r1, r3
 8000212:	4413      	add	r3, r2
 8000214:	337c      	adds	r3, #124	; 0x7c
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
 800021a:	e00b      	b.n	8000234 <WakeOnTimer+0x6c>
    } else if (timer_value < timeout_value) {
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	429a      	cmp	r2, r3
 8000222:	d207      	bcs.n	8000234 <WakeOnTimer+0x6c>
      /* New shorter timer found */
      timeout_value = timer_value;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	60fb      	str	r3, [r7, #12]
      g_IdleIdx = j;
 8000228:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <WakeOnTimer+0xa0>)
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	e000      	b.n	8000234 <WakeOnTimer+0x6c>
      continue;
 8000232:	bf00      	nop
  for (j = 0; j < FSC_NUMBER_OF_PORTS; j++) {
 8000234:	7afb      	ldrb	r3, [r7, #11]
 8000236:	3301      	adds	r3, #1
 8000238:	72fb      	strb	r3, [r7, #11]
 800023a:	7afb      	ldrb	r3, [r7, #11]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d0d1      	beq.n	80001e4 <WakeOnTimer+0x1c>
    }
  }

  if ((timeout_value < ~0U) &&
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000246:	d00a      	beq.n	800025e <WakeOnTimer+0x96>
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d007      	beq.n	800025e <WakeOnTimer+0x96>
      (timeout_value > 0) &&
      (g_IdleIdx > -1)) {
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <WakeOnTimer+0xa0>)
 8000250:	f993 3000 	ldrsb.w	r3, [r3]
      (timeout_value > 0) &&
 8000254:	2b00      	cmp	r3, #0
 8000256:	db02      	blt.n	800025e <WakeOnTimer+0x96>
    /* Wake up port[g_IdleIdx] after timeout */
    SetTimeInterrupt(timeout_value);
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f000 fb1d 	bl	8000898 <SetTimeInterrupt>
  }
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	2000037c 	.word	0x2000037c
 800026c:	2000008c 	.word	0x2000008c

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fc96 	bl	8000ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f8bd 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f95f 	bl	8000540 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000282:	f000 f91f 	bl	80004c4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  FSC_U8 i = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	71fb      	strb	r3, [r7, #7]
  FSC_U32 check_idle = FALSE;
 800028a:	2300      	movs	r3, #0
 800028c:	603b      	str	r3, [r7, #0]

  PlatformInitialize();
 800028e:	f000 f9b4 	bl	80005fa <PlatformInitialize>
  InitializeVars(&g_ports[0], 1, I2C_ADDRESS_PORT1);
 8000292:	22a0      	movs	r2, #160	; 0xa0
 8000294:	2101      	movs	r1, #1
 8000296:	4855      	ldr	r0, [pc, #340]	; (80003ec <main+0x17c>)
 8000298:	f006 fd0e 	bl	8006cb8 <InitializeVars>
  g_port_active[0] = TRUE;
 800029c:	4b54      	ldr	r3, [pc, #336]	; (80003f0 <main+0x180>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (i = 0; i < FSC_NUMBER_OF_PORTS; ++i) {
 80002a2:	2300      	movs	r3, #0
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	e091      	b.n	80003cc <main+0x15c>
	        /* Initializing */
	        if (g_ports[i].initialized_ == FALSE) {
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4a50      	ldr	r2, [pc, #320]	; (80003ec <main+0x17c>)
 80002ac:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80002b0:	fb01 f303 	mul.w	r3, r1, r3
 80002b4:	4413      	add	r3, r2
 80002b6:	337d      	adds	r3, #125	; 0x7d
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d134      	bne.n	8000328 <main+0xb8>
	          /* If we haven't been initialized yet, wait on the init interrupt */
	          if (ReadRegister(&g_ports[i], regPWRSTAT) != FALSE) {
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	4a48      	ldr	r2, [pc, #288]	; (80003ec <main+0x17c>)
 80002ca:	4413      	add	r3, r2
 80002cc:	211e      	movs	r1, #30
 80002ce:	4618      	mov	r0, r3
 80002d0:	f006 ff8d 	bl	80071ee <ReadRegister>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d074      	beq.n	80003c4 <main+0x154>
	            if (g_ports[i].registers_.PwrStat.TCPC_INIT == 0) {
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a43      	ldr	r2, [pc, #268]	; (80003ec <main+0x17c>)
 80002de:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80002e2:	fb01 f303 	mul.w	r3, r1, r3
 80002e6:	4413      	add	r3, r2
 80002e8:	3318      	adds	r3, #24
 80002ea:	789b      	ldrb	r3, [r3, #2]
 80002ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d166      	bne.n	80003c4 <main+0x154>
	              /* Chip is ready - initialize and continue. */
	              InitializePort(&g_ports[i]);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 80002fc:	fb02 f303 	mul.w	r3, r2, r3
 8000300:	4a3a      	ldr	r2, [pc, #232]	; (80003ec <main+0x17c>)
 8000302:	4413      	add	r3, r2
 8000304:	4618      	mov	r0, r3
 8000306:	f006 ff11 	bl	800712c <InitializePort>
	              platform_printf(g_ports[i].port_id_, "Port Initialized.\n", -1);
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4a37      	ldr	r2, [pc, #220]	; (80003ec <main+0x17c>)
 800030e:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8000312:	fb01 f303 	mul.w	r3, r1, r3
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	f04f 32ff 	mov.w	r2, #4294967295
 800031e:	4935      	ldr	r1, [pc, #212]	; (80003f4 <main+0x184>)
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fb1f 	bl	8000964 <platform_printf>
	            }
	          }
	          continue;
 8000326:	e04d      	b.n	80003c4 <main+0x154>
	        }

	        /* State Machine Processing */
	        if (g_port_active[i] || !g_ports[i].idle_) {
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <main+0x180>)
 800032c:	5cd3      	ldrb	r3, [r2, r3]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d10a      	bne.n	800034a <main+0xda>
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	4a2d      	ldr	r2, [pc, #180]	; (80003ec <main+0x17c>)
 8000338:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800033c:	fb01 f303 	mul.w	r3, r1, r3
 8000340:	4413      	add	r3, r2
 8000342:	337c      	adds	r3, #124	; 0x7c
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d13d      	bne.n	80003c6 <main+0x156>
	          /* Disable interrupt to prevent conflict */
	          ClearTimeInterrupt();
 800034a:	f000 fac9 	bl	80008e0 <ClearTimeInterrupt>

	          /* Reset for next interrupt */
	          g_port_active[i] = FALSE;
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4a27      	ldr	r2, [pc, #156]	; (80003f0 <main+0x180>)
 8000352:	2100      	movs	r1, #0
 8000354:	54d1      	strb	r1, [r2, r3]

	          platform_SetDebugPin(TRUE);
 8000356:	2001      	movs	r0, #1
 8000358:	f000 f9ff 	bl	800075a <platform_SetDebugPin>

	          /* Process port */
	          core_state_machine(&g_ports[i]);
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8000362:	fb02 f303 	mul.w	r3, r2, r3
 8000366:	4a21      	ldr	r2, [pc, #132]	; (80003ec <main+0x17c>)
 8000368:	4413      	add	r3, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f002 ffb4 	bl	80032d8 <core_state_machine>

	          //g_ports[i].idle_ = FALSE;

	          /* Wait on the next alert/interrupt */
	          /* This also allows a final state machine run if still active. */
	          if (g_ports[i].idle_) {
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	4a1e      	ldr	r2, [pc, #120]	; (80003ec <main+0x17c>)
 8000374:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8000378:	fb01 f303 	mul.w	r3, r1, r3
 800037c:	4413      	add	r3, r2
 800037e:	337c      	adds	r3, #124	; 0x7c
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d01f      	beq.n	80003c6 <main+0x156>
	            if (platform_get_device_irq_state(g_ports[i].port_id_))
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a18      	ldr	r2, [pc, #96]	; (80003ec <main+0x17c>)
 800038a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800038e:	fb01 f303 	mul.w	r3, r1, r3
 8000392:	4413      	add	r3, r2
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f9ac 	bl	80006f4 <platform_get_device_irq_state>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00a      	beq.n	80003b8 <main+0x148>
	            {
	              g_ports[i].idle_ = FALSE;
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <main+0x17c>)
 80003a6:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80003aa:	fb01 f303 	mul.w	r3, r1, r3
 80003ae:	4413      	add	r3, r2
 80003b0:	337c      	adds	r3, #124	; 0x7c
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
 80003b6:	e006      	b.n	80003c6 <main+0x156>
	            }
	            else
	            {
	              check_idle = TRUE;
 80003b8:	2301      	movs	r3, #1
 80003ba:	603b      	str	r3, [r7, #0]
	              platform_SetDebugPin(FALSE);
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 f9cc 	bl	800075a <platform_SetDebugPin>
 80003c2:	e000      	b.n	80003c6 <main+0x156>
	          continue;
 80003c4:	bf00      	nop
	  for (i = 0; i < FSC_NUMBER_OF_PORTS; ++i) {
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	3301      	adds	r3, #1
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	f43f af6a 	beq.w	80002a8 <main+0x38>
	            }
	          }
	        }
	      }

	      if (check_idle == TRUE)
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d103      	bne.n	80003e2 <main+0x172>
	      {
	        /* Looks like State Machine can Idle */
	        WakeOnTimer();
 80003da:	f7ff fef5 	bl	80001c8 <WakeOnTimer>
	        check_idle = FALSE;
 80003de:	2300      	movs	r3, #0
 80003e0:	603b      	str	r3, [r7, #0]
	      }

	      /* System Policy process function to handle debug/system IO, etc. */
	      SystemPolicyProcess(g_ports);
 80003e2:	4802      	ldr	r0, [pc, #8]	; (80003ec <main+0x17c>)
 80003e4:	f008 fe06 	bl	8008ff4 <SystemPolicyProcess>
	  for (i = 0; i < FSC_NUMBER_OF_PORTS; ++i) {
 80003e8:	e75b      	b.n	80002a2 <main+0x32>
 80003ea:	bf00      	nop
 80003ec:	2000008c 	.word	0x2000008c
 80003f0:	20000088 	.word	0x20000088
 80003f4:	0800c894 	.word	0x0800c894

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b0b8      	sub	sp, #224	; 0xe0
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000402:	2244      	movs	r2, #68	; 0x44
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f00c fa30 	bl	800c86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	463b      	mov	r3, r7
 800041e:	2288      	movs	r2, #136	; 0x88
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f00c fa22 	bl	800c86c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000428:	2310      	movs	r3, #16
 800042a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800042e:	2301      	movs	r3, #1
 8000430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800043a:	2360      	movs	r3, #96	; 0x60
 800043c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000440:	2300      	movs	r3, #0
 8000442:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000446:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fcfe 	bl	8001e4c <HAL_RCC_OscConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000456:	f000 f8c9 	bl	80005ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045a:	230f      	movs	r3, #15
 800045c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000460:	2300      	movs	r3, #0
 8000462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000478:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f002 f894 	bl	80025ac <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800048a:	f000 f8af 	bl	80005ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800048e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000492:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000494:	2300      	movs	r3, #0
 8000496:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fa52 	bl	8002944 <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004a6:	f000 f8a1 	bl	80005ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004ae:	f001 fc77 	bl	8001da0 <HAL_PWREx_ControlVoltageScaling>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80004b8:	f000 f898 	bl	80005ec <Error_Handler>
  }
}
 80004bc:	bf00      	nop
 80004be:	37e0      	adds	r7, #224	; 0xe0
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_I2C3_Init+0x74>)
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <MX_I2C3_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_I2C3_Init+0x74>)
 80004d0:	f640 6214 	movw	r2, #3604	; 0xe14
 80004d4:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_I2C3_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_I2C3_Init+0x74>)
 80004de:	2201      	movs	r2, #1
 80004e0:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_I2C3_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_I2C3_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_I2C3_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_I2C3_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_I2C3_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <MX_I2C3_Init+0x74>)
 8000502:	f000 fece 	bl	80012a2 <HAL_I2C_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800050c:	f000 f86e 	bl	80005ec <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000510:	2100      	movs	r1, #0
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <MX_I2C3_Init+0x74>)
 8000514:	f001 fb9e 	bl	8001c54 <HAL_I2CEx_ConfigAnalogFilter>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800051e:	f000 f865 	bl	80005ec <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000522:	2100      	movs	r1, #0
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <MX_I2C3_Init+0x74>)
 8000526:	f001 fbe0 	bl	8001cea <HAL_I2CEx_ConfigDigitalFilter>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000530:	f000 f85c 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000038 	.word	0x20000038
 800053c:	40005c00 	.word	0x40005c00

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xa4>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <MX_GPIO_Init+0xa4>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <MX_GPIO_Init+0xa4>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0xa4>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_GPIO_Init+0xa4>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0xa4>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_5, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	21a0      	movs	r1, #160	; 0xa0
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fe4d 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	4619      	mov	r1, r3
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f000 fc7e 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005b0:	2340      	movs	r3, #64	; 0x40
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_GPIO_Init+0xa8>)
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f000 fc71 	bl	8000eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2017      	movs	r0, #23
 80005d0:	f000 fc35 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005d4:	2017      	movs	r0, #23
 80005d6:	f000 fc4e 	bl	8000e76 <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	10210000 	.word	0x10210000

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <PlatformInitialize>:
#ifdef FSC_HAVE_UART
void InitializeUART(void);
#endif /* FSC_HAVE_UART */

void PlatformInitialize(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  //HAL_Init();
  //HAL_InitTick(1);

  //InitializeI2C();
  //InitializeGPIO();
  InitializeTickTimer();
 80005fe:	f000 f8e5 	bl	80007cc <InitializeTickTimer>
  InitializeTSTimer();
 8000602:	f000 f97d 	bl	8000900 <InitializeTSTimer>
  InitializeUART();
#endif /* FSC_HAVE_UART */
#ifdef FSC_HAVE_6295
  FAN6295_Initialize();
#endif /* FSC_HAVE_6295 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <platform_i2c_read>:

FSC_BOOL platform_i2c_read(FSC_U8 slaveaddress, FSC_U8 regaddr,
                           FSC_U8 length, FSC_U8 *data)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b09b      	sub	sp, #108	; 0x6c
 8000610:	af04      	add	r7, sp, #16
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4603      	mov	r3, r0
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	460b      	mov	r3, r1
 800061a:	71bb      	strb	r3, [r7, #6]
 800061c:	4613      	mov	r3, r2
 800061e:	717b      	strb	r3, [r7, #5]
  I2C_HandleTypeDef i2chandle = {};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	224c      	movs	r2, #76	; 0x4c
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f00c f91f 	bl	800c86c <memset>
  HAL_StatusTypeDef result = HAL_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* To prevent storing a global, re-initialize the basic items here. */
  i2chandle.Instance = I2C3;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <platform_i2c_read+0x70>)
 8000636:	60bb      	str	r3, [r7, #8]
  i2chandle.State    = HAL_I2C_STATE_READY;
 8000638:	2320      	movs	r3, #32
 800063a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

  result = HAL_I2C_Mem_Read(&i2chandle, slaveaddress,
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	b299      	uxth	r1, r3
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	b29c      	uxth	r4, r3
 8000646:	797b      	ldrb	r3, [r7, #5]
 8000648:	b29b      	uxth	r3, r3
 800064a:	f107 0008 	add.w	r0, r7, #8
 800064e:	2210      	movs	r2, #16
 8000650:	9202      	str	r2, [sp, #8]
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	4622      	mov	r2, r4
 800065c:	f000 ffc4 	bl	80015e8 <HAL_I2C_Mem_Read>
 8000660:	4603      	mov	r3, r0
 8000662:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                            regaddr, 1, data, length, 0x10);

  return ((result == HAL_OK) ? TRUE : FALSE);
 8000666:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800066a:	2b00      	cmp	r3, #0
 800066c:	bf0c      	ite	eq
 800066e:	2301      	moveq	r3, #1
 8000670:	2300      	movne	r3, #0
 8000672:	b2db      	uxtb	r3, r3
}
 8000674:	4618      	mov	r0, r3
 8000676:	375c      	adds	r7, #92	; 0x5c
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	40005c00 	.word	0x40005c00

08000680 <platform_i2c_write>:

FSC_BOOL platform_i2c_write(FSC_U8 slaveaddress, FSC_U8 regaddr,
                            FSC_U8 length, FSC_U8 *data)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b09b      	sub	sp, #108	; 0x6c
 8000684:	af04      	add	r7, sp, #16
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4603      	mov	r3, r0
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	460b      	mov	r3, r1
 800068e:	71bb      	strb	r3, [r7, #6]
 8000690:	4613      	mov	r3, r2
 8000692:	717b      	strb	r3, [r7, #5]
  I2C_HandleTypeDef i2chandle = {};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	224c      	movs	r2, #76	; 0x4c
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f00c f8e5 	bl	800c86c <memset>
  HAL_StatusTypeDef result = HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* To prevent storing a global, re-initialize the basic items here. */
  i2chandle.Instance = I2C3;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <platform_i2c_write+0x70>)
 80006aa:	60bb      	str	r3, [r7, #8]
  i2chandle.State    = HAL_I2C_STATE_READY;
 80006ac:	2320      	movs	r3, #32
 80006ae:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

  result = HAL_I2C_Mem_Write(&i2chandle, slaveaddress,
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	b299      	uxth	r1, r3
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	b29c      	uxth	r4, r3
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	f107 0008 	add.w	r0, r7, #8
 80006c2:	2210      	movs	r2, #16
 80006c4:	9202      	str	r2, [sp, #8]
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	4622      	mov	r2, r4
 80006d0:	f000 fe76 	bl	80013c0 <HAL_I2C_Mem_Write>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                             regaddr, 1, data, length, 0x10);

  return ((result == HAL_OK) ? TRUE : FALSE);
 80006da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf0c      	ite	eq
 80006e2:	2301      	moveq	r3, #1
 80006e4:	2300      	movne	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	375c      	adds	r7, #92	; 0x5c
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	40005c00 	.word	0x40005c00

080006f4 <platform_get_device_irq_state>:

FSC_BOOL platform_get_device_irq_state(FSC_U8 port)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  GPIO_PinState state = GPIO_PIN_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]

  switch(port) {
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d00c      	beq.n	8000722 <platform_get_device_irq_state+0x2e>
 8000708:	2b03      	cmp	r3, #3
 800070a:	d013      	beq.n	8000734 <platform_get_device_irq_state+0x40>
 800070c:	2b01      	cmp	r3, #1
 800070e:	d000      	beq.n	8000712 <platform_get_device_irq_state+0x1e>
    break;
  case 3:
    state = HAL_GPIO_ReadPin(GPIOA, PIN_ALERT_3);
    break;
  default:
    break;
 8000710:	e019      	b.n	8000746 <platform_get_device_irq_state+0x52>
    state = HAL_GPIO_ReadPin(GPIOA, PIN_ALERT_1);
 8000712:	2140      	movs	r1, #64	; 0x40
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f000 fd70 	bl	80011fc <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	73fb      	strb	r3, [r7, #15]
    break;
 8000720:	e011      	b.n	8000746 <platform_get_device_irq_state+0x52>
    state = HAL_GPIO_ReadPin(GPIOA, PIN_ALERT_2);
 8000722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fd67 	bl	80011fc <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	73fb      	strb	r3, [r7, #15]
    break;
 8000732:	e008      	b.n	8000746 <platform_get_device_irq_state+0x52>
    state = HAL_GPIO_ReadPin(GPIOA, PIN_ALERT_3);
 8000734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f000 fd5e 	bl	80011fc <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
    break;
 8000744:	bf00      	nop
  }

  /* ALERT signals are active low, so this looks backwards! */
  return (state == GPIO_PIN_SET) ? FALSE : TRUE;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	2b01      	cmp	r3, #1
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <platform_SetDebugPin>:

void platform_SetDebugPin(FSC_BOOL enable)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, PIN_DEBUG,
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	2102      	movs	r1, #2
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 fd58 	bl	800122c <HAL_GPIO_WritePin>
                    enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <platform_setHVSwitch>:

void platform_setHVSwitch(FSC_BOOL enable)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, PIN_HV_ENABLE,
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <platform_setHVSwitch+0x2c>)
 80007a2:	f000 fd43 	bl	800122c <HAL_GPIO_WritePin>
                    enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	48000400 	.word	0x48000400

080007b4 <platform_setPPSVoltage>:
  GPIO_PinState state = HAL_GPIO_ReadPin(GPIOB, PIN_HV_ENABLE);
  return (state == GPIO_PIN_SET) ? TRUE : FALSE;
}

void platform_setPPSVoltage(FSC_U8 port, FSC_U32 mv)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
#ifdef FSC_HAVE_6295
    FAN6295_SetVoltage(mv);
    FAN6295_SetEnable(TRUE);
#endif /* FSC_HAVE_6295 */
  }
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <InitializeTickTimer>:
  return 0;
#endif /* FSC_HAVE_6295 */
}

void InitializeTickTimer(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* Disable */
  TIM2->CR1 = 0x00000000;
 80007d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]

  /* SystemCoreClock is 48MHz. */
  /* Prescaler - 48 gives 1us resolution */
  TIM2->PSC = 48;
 80007d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007dc:	2230      	movs	r2, #48	; 0x30
 80007de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Start the count at the end.  Certain registers (PSC,ARR,...) are */
  /* "shadowed" and only get updated on a rollover or other event. */
  TIM2->CNT = 0xFFFFFFFF;
 80007e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Period/Reload - a long period give a free-running time-stamp-mode timer */
  TIM2->ARR = 0xFFFFFFFF;
 80007ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ee:	f04f 32ff 	mov.w	r2, #4294967295
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable! */
  EnableTickTimer(TRUE);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 f80e 	bl	8000816 <EnableTickTimer>

  /* Enable and set TIM2 Interrupt */
  TIM2->SR = 0;
 80007fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2101      	movs	r1, #1
 8000806:	201c      	movs	r0, #28
 8000808:	f000 fb19 	bl	8000e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800080c:	201c      	movs	r0, #28
 800080e:	f000 fb32 	bl	8000e76 <HAL_NVIC_EnableIRQ>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}

08000816 <EnableTickTimer>:

void EnableTickTimer(FSC_BOOL enable)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  if (enable) {
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d008      	beq.n	8000838 <EnableTickTimer+0x22>
    TIM2->CR1 |= TIM_CR1_CEN;
 8000826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6013      	str	r3, [r2, #0]
  }
  else {
    TIM2->CR1 &= ~TIM_CR1_CEN;
  }
}
 8000836:	e007      	b.n	8000848 <EnableTickTimer+0x32>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 8000838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000842:	f023 0301 	bic.w	r3, r3, #1
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <platform_current_time>:

FSC_U32 platform_current_time(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return TIM2->CNT;
 8000858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <platform_delay>:

void platform_delay(FSC_U32 microseconds)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  FSC_U32 currentTime = TIM2->CNT;
 8000870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	60fb      	str	r3, [r7, #12]
  while((FSC_U32)(TIM2->CNT - currentTime) < microseconds);
 8000878:	bf00      	nop
 800087a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800087e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	d8f7      	bhi.n	800087a <platform_delay+0x12>
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <SetTimeInterrupt>:

void SetTimeInterrupt(FSC_U32 microseconds)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Set the offset for the next interrupt request */
  TIM2->CCR1 = TIM2->CNT + microseconds;
 80008a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	634b      	str	r3, [r1, #52]	; 0x34
  /* Clear the previous and enable the next CC1 Interrupt */
  TIM2->SR = 0;
 80008b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  TIM2->DIER |= TIM_DIER_CC1IE;
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c2:	f043 0302 	orr.w	r3, r3, #2
 80008c6:	60d3      	str	r3, [r2, #12]
  g_timer_int_active = TRUE;
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <SetTimeInterrupt+0x44>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000084 	.word	0x20000084

080008e0 <ClearTimeInterrupt>:

void ClearTimeInterrupt()
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  TIM2->DIER &= ~TIM_DIER_CC1IE;
 80008e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ee:	f023 0302 	bic.w	r3, r3, #2
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <InitializeTSTimer>:

void InitializeTSTimer(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* Use Timer1 to count at 0.1ms resolution up to one second. */
  /* Use Timer3, triggered by Timer16, to count seconds. */

  /* SystemCoreClock is 48MHz. */
  TIM1->PSC = 4800;               /* A prescaler of 4800 gives 0.1ms res */
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <InitializeTSTimer+0x5c>)
 8000906:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM1->ARR = 10000;              /* A period of 10000 gives 1sec intervals */
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <InitializeTSTimer+0x5c>)
 800090e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->CR2 |= TIM_CR2_MMS_1;     /* MMS = 0b010 generates TRGO */
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <InitializeTSTimer+0x5c>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <InitializeTSTimer+0x5c>)
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	6053      	str	r3, [r2, #4]

  /* Start the count at the end.  Certain registers (PSC,ARR,...) are */
  /* "shadowed" and only get updated on a rollover or other event. */
  TIM1->CNT = 0xFFFFFFFF;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <InitializeTSTimer+0x5c>)
 8000922:	f04f 32ff 	mov.w	r2, #4294967295
 8000926:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Timer3 up as a slave to Timer1.  Timer3 will count in seconds. */
  TIM3->SMCR |= TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <InitializeTSTimer+0x60>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <InitializeTSTimer+0x60>)
 800092e:	f043 0307 	orr.w	r3, r3, #7
 8000932:	6093      	str	r3, [r2, #8]
  TIM3->CNT = 0;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <InitializeTSTimer+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable both. */
  TIM1->CR1 |= TIM_CR1_CEN;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <InitializeTSTimer+0x5c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <InitializeTSTimer+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <InitializeTSTimer+0x60>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <InitializeTSTimer+0x60>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6013      	str	r3, [r2, #0]
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40012c00 	.word	0x40012c00
 8000960:	40000400 	.word	0x40000400

08000964 <platform_printf>:
  return;
}
#endif /* FSC_HAVE_UART */

void platform_printf(FSC_U8 port, const char *msg, FSC_S32 value)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	73fb      	strb	r3, [r7, #15]
  WriteUART('\r');
  WriteUART('\n');

  return;
#endif /* FSC_HAVE_UART */
}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <platform_dp_enable_pins>:
#endif /* FSC_HAVE_UART */


#ifdef FSC_HAVE_DP
FSC_BOOL platform_dp_enable_pins(FSC_BOOL enable, FSC_U32 config)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	6039      	str	r1, [r7, #0]
 8000988:	71fb      	strb	r3, [r7, #7]
  return TRUE;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <platform_dp_status_update>:

void platform_dp_status_update(FSC_U32 status)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6613      	str	r3, [r2, #96]	; 0x60
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6593      	str	r3, [r2, #88]	; 0x58
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_I2C_MspInit+0x7c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d127      	bne.n	8000a66 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a32:	2312      	movs	r3, #18
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_I2C_MspInit+0x84>)
 8000a4a:	f000 fa2f 	bl	8000eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a58:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40005c00 	.word	0x40005c00
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000800 	.word	0x48000800

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad0:	f000 f8bc 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000adc:	2040      	movs	r0, #64	; 0x40
 8000ade:	f000 fbbd 	bl	800125c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <SystemInit+0x64>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <SystemInit+0x64>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <SystemInit+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <SystemInit+0x68>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <SystemInit+0x68>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <SystemInit+0x68>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <SystemInit+0x68>)
 8000b14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <SystemInit+0x68>)
 8000b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <SystemInit+0x68>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <SystemInit+0x68>)
 8000b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <SystemInit+0x68>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SystemInit+0x64>)
 8000b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00
 8000b50:	40021000 	.word	0x40021000

08000b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b5a:	e003      	b.n	8000b64 <LoopCopyDataInit>

08000b5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b62:	3104      	adds	r1, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b6c:	d3f6      	bcc.n	8000b5c <CopyDataInit>
	ldr	r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b70:	e002      	b.n	8000b78 <LoopFillZerobss>

08000b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b74:	f842 3b04 	str.w	r3, [r2], #4

08000b78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <LoopForever+0x16>)
	cmp	r2, r3
 8000b7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b7c:	d3f9      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b7e:	f7ff ffb3 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f00b fe4f 	bl	800c824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b86:	f7ff fb73 	bl	8000270 <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b90:	0800c94c 	.word	0x0800c94c
	ldr	r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b98:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ba0:	20000384 	.word	0x20000384

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>

08000ba6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f939 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f80e 	bl	8000bd8 <HAL_InitTick>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	e001      	b.n	8000bcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc8:	f7ff fef0 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_InitTick+0x68>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d022      	beq.n	8000c32 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_InitTick+0x6c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_InitTick+0x68>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f946 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10f      	bne.n	8000c2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b0f      	cmp	r3, #15
 8000c10:	d809      	bhi.n	8000c26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c12:	2200      	movs	r2, #0
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1a:	f000 f910 	bl	8000e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_InitTick+0x70>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e007      	b.n	8000c36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e004      	b.n	8000c36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e001      	b.n	8000c36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c5c:	6013      	str	r3, [r2, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	20000380 	.word	0x20000380
 8000c6c:	20000008 	.word	0x20000008

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000380 	.word	0x20000380

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eba:	e17f      	b.n	80011bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 8171 	beq.w	80011b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x38>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b12      	cmp	r3, #18
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	6939      	ldr	r1, [r7, #16]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d00b      	beq.n	8000f80 <HAL_GPIO_Init+0xd4>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d007      	beq.n	8000f80 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f74:	2b11      	cmp	r3, #17
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b12      	cmp	r3, #18
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 0201 	and.w	r2, r3, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d118      	bne.n	8001020 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80ac 	beq.w	80011b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b5e      	ldr	r3, [pc, #376]	; (80011d8 <HAL_GPIO_Init+0x32c>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	4a5d      	ldr	r2, [pc, #372]	; (80011d8 <HAL_GPIO_Init+0x32c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6613      	str	r3, [r2, #96]	; 0x60
 800106a:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <HAL_GPIO_Init+0x32c>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001076:	4a59      	ldr	r2, [pc, #356]	; (80011dc <HAL_GPIO_Init+0x330>)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x242>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_GPIO_Init+0x334>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x23e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x338>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x23a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_GPIO_Init+0x33c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x236>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_GPIO_Init+0x340>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x232>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <HAL_GPIO_Init+0x344>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x22e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x348>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x22a>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x244>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x244>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x244>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x244>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x244>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x244>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x244>
 80010ee:	2300      	movs	r3, #0
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001100:	4936      	ldr	r1, [pc, #216]	; (80011dc <HAL_GPIO_Init+0x330>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800110e:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_GPIO_Init+0x34c>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa22 f303 	lsr.w	r3, r2, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f47f ae78 	bne.w	8000ebc <HAL_GPIO_Init+0x10>
  }
}
 80011cc:	bf00      	nop
 80011ce:	371c      	adds	r7, #28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000800 	.word	0x48000800
 80011e8:	48000c00 	.word	0x48000c00
 80011ec:	48001000 	.word	0x48001000
 80011f0:	48001400 	.word	0x48001400
 80011f4:	48001800 	.word	0x48001800
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e001      	b.n	800121e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001248:	e002      	b.n	8001250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f806 	bl	800128c <HAL_GPIO_EXTI_Callback>
  }
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e081      	b.n	80013b8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fb93 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2224      	movs	r2, #36	; 0x24
 80012d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001302:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d107      	bne.n	800131c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	e006      	b.n	800132a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001328:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d104      	bne.n	800133c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800133a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800135e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	ea42 0103 	orr.w	r1, r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	021a      	lsls	r2, r3, #8
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69d9      	ldr	r1, [r3, #28]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1a      	ldr	r2, [r3, #32]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	817b      	strh	r3, [r7, #10]
 80013d2:	460b      	mov	r3, r1
 80013d4:	813b      	strh	r3, [r7, #8]
 80013d6:	4613      	mov	r3, r2
 80013d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	f040 80f9 	bne.w	80015da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <HAL_I2C_Mem_Write+0x34>
 80013ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0ed      	b.n	80015dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_I2C_Mem_Write+0x4e>
 800140a:	2302      	movs	r3, #2
 800140c:	e0e6      	b.n	80015dc <HAL_I2C_Mem_Write+0x21c>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001416:	f7ff fc2b 	bl	8000c70 <HAL_GetTick>
 800141a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2319      	movs	r3, #25
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 fac3 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0d1      	b.n	80015dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2221      	movs	r2, #33	; 0x21
 800143c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2240      	movs	r2, #64	; 0x40
 8001444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a3a      	ldr	r2, [r7, #32]
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001460:	88f8      	ldrh	r0, [r7, #6]
 8001462:	893a      	ldrh	r2, [r7, #8]
 8001464:	8979      	ldrh	r1, [r7, #10]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4603      	mov	r3, r0
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f9d3 	bl	800181c <I2C_RequestMemoryWrite>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0a9      	b.n	80015dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148c:	b29b      	uxth	r3, r3
 800148e:	2bff      	cmp	r3, #255	; 0xff
 8001490:	d90e      	bls.n	80014b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	22ff      	movs	r2, #255	; 0xff
 8001496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149c:	b2da      	uxtb	r2, r3
 800149e:	8979      	ldrh	r1, [r7, #10]
 80014a0:	2300      	movs	r3, #0
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fba5 	bl	8001bf8 <I2C_TransferConfig>
 80014ae:	e00f      	b.n	80014d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	8979      	ldrh	r1, [r7, #10]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fb94 	bl	8001bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 faad 	bl	8001a34 <I2C_WaitOnTXISFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e07b      	b.n	80015dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3b01      	subs	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150c:	3b01      	subs	r3, #1
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001518:	b29b      	uxth	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d034      	beq.n	8001588 <HAL_I2C_Mem_Write+0x1c8>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001522:	2b00      	cmp	r3, #0
 8001524:	d130      	bne.n	8001588 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fa3f 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e04d      	b.n	80015dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001544:	b29b      	uxth	r3, r3
 8001546:	2bff      	cmp	r3, #255	; 0xff
 8001548:	d90e      	bls.n	8001568 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	22ff      	movs	r2, #255	; 0xff
 800154e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001554:	b2da      	uxtb	r2, r3
 8001556:	8979      	ldrh	r1, [r7, #10]
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 fb49 	bl	8001bf8 <I2C_TransferConfig>
 8001566:	e00f      	b.n	8001588 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	b2da      	uxtb	r2, r3
 8001578:	8979      	ldrh	r1, [r7, #10]
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 fb38 	bl	8001bf8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d19e      	bne.n	80014d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fa8c 	bl	8001ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e01a      	b.n	80015dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2220      	movs	r2, #32
 80015ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_I2C_Mem_Write+0x224>)
 80015ba:	400b      	ands	r3, r1
 80015bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015da:	2302      	movs	r3, #2
  }
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	fe00e800 	.word	0xfe00e800

080015e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	817b      	strh	r3, [r7, #10]
 80015fa:	460b      	mov	r3, r1
 80015fc:	813b      	strh	r3, [r7, #8]
 80015fe:	4613      	mov	r3, r2
 8001600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b20      	cmp	r3, #32
 800160c:	f040 80fd 	bne.w	800180a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <HAL_I2C_Mem_Read+0x34>
 8001616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001622:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0f1      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_I2C_Mem_Read+0x4e>
 8001632:	2302      	movs	r3, #2
 8001634:	e0ea      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800163e:	f7ff fb17 	bl	8000c70 <HAL_GetTick>
 8001642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2319      	movs	r3, #25
 800164a:	2201      	movs	r2, #1
 800164c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f9af 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0d5      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2222      	movs	r2, #34	; 0x22
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2240      	movs	r2, #64	; 0x40
 800166c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a3a      	ldr	r2, [r7, #32]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001688:	88f8      	ldrh	r0, [r7, #6]
 800168a:	893a      	ldrh	r2, [r7, #8]
 800168c:	8979      	ldrh	r1, [r7, #10]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4603      	mov	r3, r0
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f913 	bl	80018c4 <I2C_RequestMemoryRead>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0ad      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	d90e      	bls.n	80016d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	22ff      	movs	r2, #255	; 0xff
 80016be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	8979      	ldrh	r1, [r7, #10]
 80016c8:	4b52      	ldr	r3, [pc, #328]	; (8001814 <HAL_I2C_Mem_Read+0x22c>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fa91 	bl	8001bf8 <I2C_TransferConfig>
 80016d6:	e00f      	b.n	80016f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	4b4a      	ldr	r3, [pc, #296]	; (8001814 <HAL_I2C_Mem_Read+0x22c>)
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fa80 	bl	8001bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	2200      	movs	r2, #0
 8001700:	2104      	movs	r1, #4
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f956 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e07c      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d034      	beq.n	80017b8 <HAL_I2C_Mem_Read+0x1d0>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	2b00      	cmp	r3, #0
 8001754:	d130      	bne.n	80017b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	2200      	movs	r2, #0
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f927 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e04d      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	2bff      	cmp	r3, #255	; 0xff
 8001778:	d90e      	bls.n	8001798 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	b2da      	uxtb	r2, r3
 8001786:	8979      	ldrh	r1, [r7, #10]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 fa31 	bl	8001bf8 <I2C_TransferConfig>
 8001796:	e00f      	b.n	80017b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	8979      	ldrh	r1, [r7, #10]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 fa20 	bl	8001bf8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d19a      	bne.n	80016f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f974 	bl	8001ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e01a      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2220      	movs	r2, #32
 80017dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_I2C_Mem_Read+0x230>)
 80017ea:	400b      	ands	r3, r1
 80017ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	80002400 	.word	0x80002400
 8001818:	fe00e800 	.word	0xfe00e800

0800181c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	4608      	mov	r0, r1
 8001826:	4611      	mov	r1, r2
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	817b      	strh	r3, [r7, #10]
 800182e:	460b      	mov	r3, r1
 8001830:	813b      	strh	r3, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	8979      	ldrh	r1, [r7, #10]
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <I2C_RequestMemoryWrite+0xa4>)
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f9d7 	bl	8001bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	69b9      	ldr	r1, [r7, #24]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f8f0 	bl	8001a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e02c      	b.n	80018b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001864:	893b      	ldrh	r3, [r7, #8]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
 800186e:	e015      	b.n	800189c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001870:	893b      	ldrh	r3, [r7, #8]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b29b      	uxth	r3, r3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	69b9      	ldr	r1, [r7, #24]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f8d6 	bl	8001a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e012      	b.n	80018b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001892:	893b      	ldrh	r3, [r7, #8]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2200      	movs	r2, #0
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f884 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	80002000 	.word	0x80002000

080018c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	817b      	strh	r3, [r7, #10]
 80018d6:	460b      	mov	r3, r1
 80018d8:	813b      	strh	r3, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	8979      	ldrh	r1, [r7, #10]
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <I2C_RequestMemoryRead+0xa4>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f984 	bl	8001bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f89d 	bl	8001a34 <I2C_WaitOnTXISFlagUntilTimeout>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e02c      	b.n	800195e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d105      	bne.n	8001916 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800190a:	893b      	ldrh	r3, [r7, #8]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
 8001914:	e015      	b.n	8001942 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001916:	893b      	ldrh	r3, [r7, #8]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b29b      	uxth	r3, r3
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	69b9      	ldr	r1, [r7, #24]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f883 	bl	8001a34 <I2C_WaitOnTXISFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e012      	b.n	800195e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001938:	893b      	ldrh	r3, [r7, #8]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2200      	movs	r2, #0
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f831 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	80002000 	.word	0x80002000

0800196c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b02      	cmp	r3, #2
 8001980:	d103      	bne.n	800198a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2200      	movs	r2, #0
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d007      	beq.n	80019a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	619a      	str	r2, [r3, #24]
  }
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c4:	e022      	b.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d01e      	beq.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ce:	f7ff f94f 	bl	8000c70 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d302      	bcc.n	80019e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d113      	bne.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f043 0220 	orr.w	r2, r3, #32
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e00f      	b.n	8001a2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699a      	ldr	r2, [r3, #24]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4013      	ands	r3, r2
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d0cd      	beq.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a40:	e02c      	b.n	8001a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f870 	bl	8001b2c <I2C_IsAcknowledgeFailed>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e02a      	b.n	8001aac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d01e      	beq.n	8001a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5e:	f7ff f907 	bl	8000c70 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d302      	bcc.n	8001a74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d113      	bne.n	8001a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e007      	b.n	8001aac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d1cb      	bne.n	8001a42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ac0:	e028      	b.n	8001b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f830 	bl	8001b2c <I2C_IsAcknowledgeFailed>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e026      	b.n	8001b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad6:	f7ff f8cb 	bl	8000c70 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d302      	bcc.n	8001aec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d113      	bne.n	8001b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	f043 0220 	orr.w	r2, r3, #32
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e007      	b.n	8001b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b20      	cmp	r3, #32
 8001b20:	d1cf      	bne.n	8001ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d151      	bne.n	8001bea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b46:	e022      	b.n	8001b8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4e:	d01e      	beq.n	8001b8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b50:	f7ff f88e 	bl	8000c70 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d302      	bcc.n	8001b66 <I2C_IsAcknowledgeFailed+0x3a>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f043 0220 	orr.w	r2, r3, #32
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e02e      	b.n	8001bec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d1d5      	bne.n	8001b48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f7ff fedd 	bl	800196c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <I2C_IsAcknowledgeFailed+0xc8>)
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0204 	orr.w	r2, r3, #4
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	fe00e800 	.word	0xfe00e800

08001bf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	4613      	mov	r3, r2
 8001c08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	0d5b      	lsrs	r3, r3, #21
 8001c14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <I2C_TransferConfig+0x58>)
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	ea02 0103 	and.w	r1, r2, r3
 8001c22:	897b      	ldrh	r3, [r7, #10]
 8001c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c28:	7a7b      	ldrb	r3, [r7, #9]
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	03ff63ff 	.word	0x03ff63ff

08001c54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d138      	bne.n	8001cdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e032      	b.n	8001cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d139      	bne.n	8001d74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e033      	b.n	8001d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2224      	movs	r2, #36	; 0x24
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e000      	b.n	8001d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40007000 	.word	0x40007000

08001da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dae:	d130      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dbc:	d038      	beq.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2232      	movs	r2, #50	; 0x32
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0c9b      	lsrs	r3, r3, #18
 8001de0:	3301      	adds	r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de4:	e002      	b.n	8001dec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df8:	d102      	bne.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f2      	bne.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0c:	d110      	bne.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e00f      	b.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1e:	d007      	beq.n	8001e30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e28:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40007000 	.word	0x40007000
 8001e44:	20000000 	.word	0x20000000
 8001e48:	431bde83 	.word	0x431bde83

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e39d      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5e:	4ba4      	ldr	r3, [pc, #656]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e68:	4ba1      	ldr	r3, [pc, #644]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80e1 	beq.w	8002042 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4a>
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	f040 8088 	bne.w	8001f9e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 8084 	bne.w	8001f9e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e96:	4b96      	ldr	r3, [pc, #600]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x62>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e375      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	4b8f      	ldr	r3, [pc, #572]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x7c>
 8001ebe:	4b8c      	ldr	r3, [pc, #560]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCC_OscConfig+0x88>
 8001ec8:	4b89      	ldr	r3, [pc, #548]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d223      	bcs.n	8001f20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fcd1 	bl	8002884 <RCC_SetFlashLatencyFromMSIRange>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e356      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eec:	4b80      	ldr	r3, [pc, #512]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a7f      	ldr	r2, [pc, #508]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b7d      	ldr	r3, [pc, #500]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	497a      	ldr	r1, [pc, #488]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f0a:	4b79      	ldr	r3, [pc, #484]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	4975      	ldr	r1, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
 8001f1e:	e022      	b.n	8001f66 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f20:	4b73      	ldr	r3, [pc, #460]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a72      	ldr	r2, [pc, #456]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f26:	f043 0308 	orr.w	r3, r3, #8
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b70      	ldr	r3, [pc, #448]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	496d      	ldr	r1, [pc, #436]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f3e:	4b6c      	ldr	r3, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	4968      	ldr	r1, [pc, #416]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fc94 	bl	8002884 <RCC_SetFlashLatencyFromMSIRange>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e319      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f66:	f000 fc03 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 8001f6a:	4601      	mov	r1, r0
 8001f6c:	4b60      	ldr	r3, [pc, #384]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <HAL_RCC_OscConfig+0x2a8>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f82:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_RCC_OscConfig+0x2b0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fe24 	bl	8000bd8 <HAL_InitTick>
 8001f90:	4603      	mov	r3, r0
 8001f92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d052      	beq.n	8002040 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	e2fd      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d032      	beq.n	800200c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa6:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a51      	ldr	r2, [pc, #324]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fe5d 	bl	8000c70 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fba:	f7fe fe59 	bl	8000c70 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e2e6      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fcc:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd8:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a44      	ldr	r2, [pc, #272]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	493f      	ldr	r1, [pc, #252]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	493a      	ldr	r1, [pc, #232]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
 800200a:	e01a      	b.n	8002042 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800200c:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a37      	ldr	r2, [pc, #220]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002018:	f7fe fe2a 	bl	8000c70 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002020:	f7fe fe26 	bl	8000c70 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e2b3      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002032:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x1d4>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d074      	beq.n	8002138 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x214>
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d10e      	bne.n	8002078 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d064      	beq.n	8002136 <HAL_RCC_OscConfig+0x2ea>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d160      	bne.n	8002136 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e290      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x244>
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0x280>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x268>
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0x280>
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_RCC_OscConfig+0x2a4>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01c      	beq.n	800210e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe fdcc 	bl	8000c70 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020da:	e011      	b.n	8002100 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe fdc8 	bl	8000c70 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d90a      	bls.n	8002100 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e255      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	0800c904 	.word	0x0800c904
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002100:	4bae      	ldr	r3, [pc, #696]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0e7      	beq.n	80020dc <HAL_RCC_OscConfig+0x290>
 800210c:	e014      	b.n	8002138 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7fe fdaf 	bl	8000c70 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002116:	f7fe fdab 	bl	8000c70 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e238      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002128:	4ba4      	ldr	r3, [pc, #656]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x2ca>
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002136:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d060      	beq.n	8002206 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x30a>
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b0c      	cmp	r3, #12
 800214e:	d119      	bne.n	8002184 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002156:	4b99      	ldr	r3, [pc, #612]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x322>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e215      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b93      	ldr	r3, [pc, #588]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	061b      	lsls	r3, r3, #24
 800217c:	498f      	ldr	r1, [pc, #572]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002182:	e040      	b.n	8002206 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a8a      	ldr	r2, [pc, #552]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fd6a 	bl	8000c70 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a0:	f7fe fd66 	bl	8000c70 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1f3      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b2:	4b82      	ldr	r3, [pc, #520]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	061b      	lsls	r3, r3, #24
 80021cc:	497b      	ldr	r1, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
 80021d2:	e018      	b.n	8002206 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a78      	ldr	r2, [pc, #480]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80021da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fd46 	bl	8000c70 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe fd42 	bl	8000c70 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1cf      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021fa:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03c      	beq.n	800228c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01c      	beq.n	8002254 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	4a66      	ldr	r2, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7fe fd21 	bl	8000c70 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7fe fd1d 	bl	8000c70 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1aa      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002244:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ef      	beq.n	8002232 <HAL_RCC_OscConfig+0x3e6>
 8002252:	e01b      	b.n	800228c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe fd04 	bl	8000c70 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226c:	f7fe fd00 	bl	8000c70 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e18d      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ef      	bne.n	800226c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a5 	beq.w	80023e4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b44      	ldr	r3, [pc, #272]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	4a43      	ldr	r2, [pc, #268]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	; 0x58
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c6:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HAL_RCC_OscConfig+0x574>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_OscConfig+0x574>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a3a      	ldr	r2, [pc, #232]	; (80023c0 <HAL_RCC_OscConfig+0x574>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe fcc7 	bl	8000c70 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe fcc3 	bl	8000c70 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e150      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_OscConfig+0x574>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d108      	bne.n	800231e <HAL_RCC_OscConfig+0x4d2>
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	4a2a      	ldr	r2, [pc, #168]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231c:	e024      	b.n	8002368 <HAL_RCC_OscConfig+0x51c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b05      	cmp	r3, #5
 8002324:	d110      	bne.n	8002348 <HAL_RCC_OscConfig+0x4fc>
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002346:	e00f      	b.n	8002368 <HAL_RCC_OscConfig+0x51c>
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002358:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d016      	beq.n	800239e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7fe fc7e 	bl	8000c70 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7fe fc7a 	bl	8000c70 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e105      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x570>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ed      	beq.n	8002378 <HAL_RCC_OscConfig+0x52c>
 800239c:	e019      	b.n	80023d2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7fe fc67 	bl	8000c70 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a4:	e00e      	b.n	80023c4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fc63 	bl	8000c70 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d905      	bls.n	80023c4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0ee      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c4:	4b77      	ldr	r3, [pc, #476]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1e9      	bne.n	80023a6 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b72      	ldr	r3, [pc, #456]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	4a71      	ldr	r2, [pc, #452]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80d5 	beq.w	8002598 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	f000 808e 	beq.w	8002512 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d15b      	bne.n	80024b6 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b69      	ldr	r3, [pc, #420]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a68      	ldr	r2, [pc, #416]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7fe fc31 	bl	8000c70 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fc2d 	bl	8000c70 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0ba      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002424:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002430:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <HAL_RCC_OscConfig+0x75c>)
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002440:	3a01      	subs	r2, #1
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	4311      	orrs	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800244a:	0212      	lsls	r2, r2, #8
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002452:	0852      	lsrs	r2, r2, #1
 8002454:	3a01      	subs	r2, #1
 8002456:	0552      	lsls	r2, r2, #21
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	3a01      	subs	r2, #1
 8002462:	0652      	lsls	r2, r2, #25
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800246a:	0912      	lsrs	r2, r2, #4
 800246c:	0452      	lsls	r2, r2, #17
 800246e:	430a      	orrs	r2, r1
 8002470:	494c      	ldr	r1, [pc, #304]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002472:	4313      	orrs	r3, r2
 8002474:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002476:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 800247c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002480:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002482:	4b48      	ldr	r3, [pc, #288]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4a47      	ldr	r2, [pc, #284]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fbef 	bl	8000c70 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe fbeb 	bl	8000c70 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e078      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a8:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x64a>
 80024b4:	e070      	b.n	8002598 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a3a      	ldr	r2, [pc, #232]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80024bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024ce:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a34      	ldr	r2, [pc, #208]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80024d4:	f023 0303 	bic.w	r3, r3, #3
 80024d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 80024e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fbc1 	bl	8000c70 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fbbd 	bl	8000c70 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e04a      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x6a6>
 8002510:	e042      	b.n	8002598 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e03d      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCC_OscConfig+0x758>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0203 	and.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	429a      	cmp	r2, r3
 8002530:	d130      	bne.n	8002594 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	3b01      	subs	r3, #1
 800253e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d127      	bne.n	8002594 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d11f      	bne.n	8002594 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800255e:	2a07      	cmp	r2, #7
 8002560:	bf14      	ite	ne
 8002562:	2201      	movne	r2, #1
 8002564:	2200      	moveq	r2, #0
 8002566:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d113      	bne.n	8002594 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d109      	bne.n	8002594 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	f99d808c 	.word	0xf99d808c

080025ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0c8      	b.n	8002752 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_RCC_ClockConfig+0x1b0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <HAL_RCC_ClockConfig+0x1b0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4961      	ldr	r1, [pc, #388]	; (800275c <HAL_RCC_ClockConfig+0x1b0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_RCC_ClockConfig+0x1b0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b0      	b.n	8002752 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d04c      	beq.n	8002696 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002604:	4b56      	ldr	r3, [pc, #344]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d121      	bne.n	8002654 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e09e      	b.n	8002752 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d107      	bne.n	800262c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d115      	bne.n	8002654 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e092      	b.n	8002752 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002634:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e086      	b.n	8002752 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e07e      	b.n	8002752 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 0203 	bic.w	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	493f      	ldr	r1, [pc, #252]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002666:	f7fe fb03 	bl	8000c70 <HAL_GetTick>
 800266a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266c:	e00a      	b.n	8002684 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266e:	f7fe faff 	bl	8000c70 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	; 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e066      	b.n	8002752 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 020c 	and.w	r2, r3, #12
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	429a      	cmp	r2, r3
 8002694:	d1eb      	bne.n	800266e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a2:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	492c      	ldr	r1, [pc, #176]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b29      	ldr	r3, [pc, #164]	; (800275c <HAL_RCC_ClockConfig+0x1b0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_ClockConfig+0x1b0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4924      	ldr	r1, [pc, #144]	; (800275c <HAL_RCC_ClockConfig+0x1b0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <HAL_RCC_ClockConfig+0x1b0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e036      	b.n	8002752 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4918      	ldr	r1, [pc, #96]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4910      	ldr	r1, [pc, #64]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002722:	f000 f825 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 8002726:	4601      	mov	r1, r0
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_RCC_ClockConfig+0x1b4>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	fa21 f303 	lsr.w	r3, r1, r3
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fa46 	bl	8000bd8 <HAL_InitTick>
 800274c:	4603      	mov	r3, r0
 800274e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002750:	7afb      	ldrb	r3, [r7, #11]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40022000 	.word	0x40022000
 8002760:	40021000 	.word	0x40021000
 8002764:	0800c904 	.word	0x0800c904
 8002768:	20000000 	.word	0x20000000
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002788:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d121      	bne.n	80027e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d11e      	bne.n	80027e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027a4:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e005      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027c0:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10d      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d102      	bne.n	80027ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027e8:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e004      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <HAL_RCC_GetSysClockFreq+0x110>)
 80027f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d133      	bne.n	8002866 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d002      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0xa4>
 800280e:	2b03      	cmp	r3, #3
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0xaa>
 8002812:	e005      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002816:	617b      	str	r3, [r7, #20]
      break;
 8002818:	e005      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_GetSysClockFreq+0x110>)
 800281c:	617b      	str	r3, [r7, #20]
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	617b      	str	r3, [r7, #20]
      break;
 8002824:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	3301      	adds	r3, #1
 8002832:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	fb02 f203 	mul.w	r2, r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_GetSysClockFreq+0x104>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0e5b      	lsrs	r3, r3, #25
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	3301      	adds	r3, #1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002866:	69bb      	ldr	r3, [r7, #24]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3724      	adds	r7, #36	; 0x24
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40021000 	.word	0x40021000
 8002878:	0800c914 	.word	0x0800c914
 800287c:	00f42400 	.word	0x00f42400
 8002880:	007a1200 	.word	0x007a1200

08002884 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800289c:	f7ff fa72 	bl	8001d84 <HAL_PWREx_GetVoltageRange>
 80028a0:	6178      	str	r0, [r7, #20]
 80028a2:	e014      	b.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6593      	str	r3, [r2, #88]	; 0x58
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028bc:	f7ff fa62 	bl	8001d84 <HAL_PWREx_GetVoltageRange>
 80028c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	4a1d      	ldr	r2, [pc, #116]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d4:	d10b      	bne.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d919      	bls.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2ba0      	cmp	r3, #160	; 0xa0
 80028e0:	d902      	bls.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e2:	2302      	movs	r3, #2
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	e013      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e010      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b80      	cmp	r3, #128	; 0x80
 80028f2:	d902      	bls.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028f4:	2303      	movs	r3, #3
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e00a      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d102      	bne.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002900:	2302      	movs	r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e004      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b70      	cmp	r3, #112	; 0x70
 800290a:	d101      	bne.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800290c:	2301      	movs	r3, #1
 800290e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 0207 	bic.w	r2, r3, #7
 8002918:	4909      	ldr	r1, [pc, #36]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	40022000 	.word	0x40022000

08002944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800294c:	2300      	movs	r3, #0
 800294e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002950:	2300      	movs	r3, #0
 8002952:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295c:	2b00      	cmp	r3, #0
 800295e:	d03f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002964:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002968:	d01c      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800296a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296e:	d802      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002974:	e01f      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002976:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800297a:	d003      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800297c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002980:	d01c      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002982:	e018      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002984:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a84      	ldr	r2, [pc, #528]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002990:	e015      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3304      	adds	r3, #4
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fab9 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 800299e:	4603      	mov	r3, r0
 80029a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a2:	e00c      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3320      	adds	r3, #32
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fba0 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b4:	e003      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	74fb      	strb	r3, [r7, #19]
      break;
 80029ba:	e000      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80029bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c4:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d2:	4972      	ldr	r1, [pc, #456]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029da:	e001      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03f      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f4:	d01c      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80029f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fa:	d802      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a00:	e01f      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a06:	d003      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a0c:	d01c      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a0e:	e018      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a10:	4b62      	ldr	r3, [pc, #392]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a61      	ldr	r2, [pc, #388]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a1c:	e015      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fa73 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a2e:	e00c      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3320      	adds	r3, #32
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fb5a 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a40:	e003      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	74fb      	strb	r3, [r7, #19]
      break;
 8002a46:	e000      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a50:	4b52      	ldr	r3, [pc, #328]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5e:	494f      	ldr	r1, [pc, #316]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a66:	e001      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a0 	beq.w	8002bba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a94:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa0:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a3a      	ldr	r2, [pc, #232]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002abc:	f7fe f8d8 	bl	8000c70 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe f8d4 	bl	8000c70 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad8:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d15c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aea:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01f      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d019      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe f893 	bl	8000c70 <HAL_GetTick>
 8002b4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fe f88f 	bl	8000c70 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d902      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	74fb      	strb	r3, [r7, #19]
            break;
 8002b64:	e006      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ec      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8a:	4904      	ldr	r1, [pc, #16]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b92:	e009      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	74bb      	strb	r3, [r7, #18]
 8002b98:	e006      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba8:	7c7b      	ldrb	r3, [r7, #17]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bae:	4b9e      	ldr	r3, [pc, #632]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	4a9d      	ldr	r2, [pc, #628]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc6:	4b98      	ldr	r3, [pc, #608]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	f023 0203 	bic.w	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	4994      	ldr	r1, [pc, #592]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be8:	4b8f      	ldr	r3, [pc, #572]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f023 020c 	bic.w	r2, r3, #12
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	498c      	ldr	r1, [pc, #560]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c0a:	4b87      	ldr	r3, [pc, #540]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	4983      	ldr	r1, [pc, #524]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c2c:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	497b      	ldr	r1, [pc, #492]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	4972      	ldr	r1, [pc, #456]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c70:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	496a      	ldr	r1, [pc, #424]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c92:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	4961      	ldr	r1, [pc, #388]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cb4:	4b5c      	ldr	r3, [pc, #368]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	4959      	ldr	r1, [pc, #356]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd6:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce4:	4950      	ldr	r1, [pc, #320]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf8:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	4948      	ldr	r1, [pc, #288]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d1a:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	493f      	ldr	r1, [pc, #252]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d028      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d3c:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4a:	4937      	ldr	r1, [pc, #220]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
 8002d68:	e011      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d72:	d10c      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f8c8 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d028      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d9a:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	491f      	ldr	r1, [pc, #124]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc4:	60d3      	str	r3, [r2, #12]
 8002dc6:	e011      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f899 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02b      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e16:	d109      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a02      	ldr	r2, [pc, #8]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e22:	60d3      	str	r3, [r2, #12]
 8002e24:	e014      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 f867 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d02f      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6a:	4928      	ldr	r1, [pc, #160]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e7a:	d10d      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	2102      	movs	r1, #2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f844 	bl	8002f10 <RCCEx_PLLSAI1_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d014      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	74bb      	strb	r3, [r7, #18]
 8002e96:	e011      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3320      	adds	r3, #32
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f921 	bl	80030f0 <RCCEx_PLLSAI2_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ec8:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed6:	490d      	ldr	r1, [pc, #52]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efa:	4904      	ldr	r1, [pc, #16]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f02:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000

08002f10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f1e:	4b73      	ldr	r3, [pc, #460]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d018      	beq.n	8002f5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f2a:	4b70      	ldr	r3, [pc, #448]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0203 	and.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d10d      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f42:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
       ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d044      	beq.n	8002fe0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e041      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d00c      	beq.n	8002f7e <RCCEx_PLLSAI1_Config+0x6e>
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d013      	beq.n	8002f90 <RCCEx_PLLSAI1_Config+0x80>
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d120      	bne.n	8002fae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f6c:	4b5f      	ldr	r3, [pc, #380]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11d      	bne.n	8002fb4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7c:	e01a      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f7e:	4b5b      	ldr	r3, [pc, #364]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8e:	e013      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f90:	4b56      	ldr	r3, [pc, #344]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10f      	bne.n	8002fbc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fac:	e006      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb2:	e004      	b.n	8002fbe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fb4:	bf00      	nop
 8002fb6:	e002      	b.n	8002fbe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fb8:	bf00      	nop
 8002fba:	e000      	b.n	8002fbe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fbc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10d      	bne.n	8002fe0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fc4:	4b49      	ldr	r3, [pc, #292]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	4944      	ldr	r1, [pc, #272]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d17d      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a40      	ldr	r2, [pc, #256]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff2:	f7fd fe3d 	bl	8000c70 <HAL_GetTick>
 8002ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ff8:	e009      	b.n	800300e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ffa:	f7fd fe39 	bl	8000c70 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d902      	bls.n	800300e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	73fb      	strb	r3, [r7, #15]
        break;
 800300c:	e005      	b.n	800301a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ef      	bne.n	8002ffa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d160      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d111      	bne.n	800304a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003026:	4b31      	ldr	r3, [pc, #196]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6892      	ldr	r2, [r2, #8]
 8003036:	0211      	lsls	r1, r2, #8
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68d2      	ldr	r2, [r2, #12]
 800303c:	0912      	lsrs	r2, r2, #4
 800303e:	0452      	lsls	r2, r2, #17
 8003040:	430a      	orrs	r2, r1
 8003042:	492a      	ldr	r1, [pc, #168]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	610b      	str	r3, [r1, #16]
 8003048:	e027      	b.n	800309a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d112      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003058:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6892      	ldr	r2, [r2, #8]
 8003060:	0211      	lsls	r1, r2, #8
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6912      	ldr	r2, [r2, #16]
 8003066:	0852      	lsrs	r2, r2, #1
 8003068:	3a01      	subs	r2, #1
 800306a:	0552      	lsls	r2, r2, #21
 800306c:	430a      	orrs	r2, r1
 800306e:	491f      	ldr	r1, [pc, #124]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	610b      	str	r3, [r1, #16]
 8003074:	e011      	b.n	800309a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800307e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	0211      	lsls	r1, r2, #8
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6952      	ldr	r2, [r2, #20]
 800308c:	0852      	lsrs	r2, r2, #1
 800308e:	3a01      	subs	r2, #1
 8003090:	0652      	lsls	r2, r2, #25
 8003092:	430a      	orrs	r2, r1
 8003094:	4915      	ldr	r1, [pc, #84]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fd fde3 	bl	8000c70 <HAL_GetTick>
 80030aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ac:	e009      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ae:	f7fd fddf 	bl	8000c70 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d902      	bls.n	80030c2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	73fb      	strb	r3, [r7, #15]
          break;
 80030c0:	e005      	b.n	80030ce <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ef      	beq.n	80030ae <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	4903      	ldr	r1, [pc, #12]	; (80030ec <RCCEx_PLLSAI1_Config+0x1dc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030fe:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d018      	beq.n	800313c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800310a:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0203 	and.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d10d      	bne.n	8003136 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
       ||
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
       ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d044      	beq.n	80031c0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	e041      	b.n	80031c0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d00c      	beq.n	800315e <RCCEx_PLLSAI2_Config+0x6e>
 8003144:	2b03      	cmp	r3, #3
 8003146:	d013      	beq.n	8003170 <RCCEx_PLLSAI2_Config+0x80>
 8003148:	2b01      	cmp	r3, #1
 800314a:	d120      	bne.n	800318e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314c:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11d      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315c:	e01a      	b.n	8003194 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800315e:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003166:	2b00      	cmp	r3, #0
 8003168:	d116      	bne.n	8003198 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316e:	e013      	b.n	8003198 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003170:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10f      	bne.n	800319c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317c:	4b48      	ldr	r3, [pc, #288]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800318c:	e006      	b.n	800319c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      break;
 8003192:	e004      	b.n	800319e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003194:	bf00      	nop
 8003196:	e002      	b.n	800319e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003198:	bf00      	nop
 800319a:	e000      	b.n	800319e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800319c:	bf00      	nop
    }

    if(status == HAL_OK)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	430b      	orrs	r3, r1
 80031ba:	4939      	ldr	r1, [pc, #228]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d167      	bne.n	8003296 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a35      	ldr	r2, [pc, #212]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d2:	f7fd fd4d 	bl	8000c70 <HAL_GetTick>
 80031d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031d8:	e009      	b.n	80031ee <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031da:	f7fd fd49 	bl	8000c70 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d902      	bls.n	80031ee <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	73fb      	strb	r3, [r7, #15]
        break;
 80031ec:	e005      	b.n	80031fa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ef      	bne.n	80031da <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d14a      	bne.n	8003296 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d111      	bne.n	800322a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800320e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6892      	ldr	r2, [r2, #8]
 8003216:	0211      	lsls	r1, r2, #8
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68d2      	ldr	r2, [r2, #12]
 800321c:	0912      	lsrs	r2, r2, #4
 800321e:	0452      	lsls	r2, r2, #17
 8003220:	430a      	orrs	r2, r1
 8003222:	491f      	ldr	r1, [pc, #124]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003224:	4313      	orrs	r3, r2
 8003226:	614b      	str	r3, [r1, #20]
 8003228:	e011      	b.n	800324e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003232:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6892      	ldr	r2, [r2, #8]
 800323a:	0211      	lsls	r1, r2, #8
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6912      	ldr	r2, [r2, #16]
 8003240:	0852      	lsrs	r2, r2, #1
 8003242:	3a01      	subs	r2, #1
 8003244:	0652      	lsls	r2, r2, #25
 8003246:	430a      	orrs	r2, r1
 8003248:	4915      	ldr	r1, [pc, #84]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800324a:	4313      	orrs	r3, r2
 800324c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003258:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325a:	f7fd fd09 	bl	8000c70 <HAL_GetTick>
 800325e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003260:	e009      	b.n	8003276 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003262:	f7fd fd05 	bl	8000c70 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d902      	bls.n	8003276 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	73fb      	strb	r3, [r7, #15]
          break;
 8003274:	e005      	b.n	8003282 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ef      	beq.n	8003262 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003292:	4313      	orrs	r3, r2
 8003294:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000

080032a4 <core_initialize>:
#include "core.h"
#include "typec.h"
#include "dpm.h"

void core_initialize(struct Port *port)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  InitializeVars(port, 1, 0xA0);
 80032ac:	22a0      	movs	r2, #160	; 0xa0
 80032ae:	2101      	movs	r1, #1
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f003 fd01 	bl	8006cb8 <InitializeVars>
  InitializePort(port);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f003 ff38 	bl	800712c <InitializePort>
  platform_printf(port->port_id_, "Port Initialized.\n", -1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <core_initialize+0x30>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fb4c 	bl	8000964 <platform_printf>
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	0800c8a8 	.word	0x0800c8a8

080032d8 <core_state_machine>:

void core_state_machine(struct Port *port)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  FSC_U8 data = TRANSMIT_HARDRESET;
 80032e0:	2305      	movs	r3, #5
 80032e2:	73fb      	strb	r3, [r7, #15]

  if (port->tc_enabled_ == TRUE) {
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d125      	bne.n	800333a <core_state_machine+0x62>
    /* Hard reset timeout shortcut.
     * Helps prevent driver interrupt latency issues
     */
    if (port->waiting_on_hr_ && TimerExpired(&port->policy_state_timer_)) {
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00f      	beq.n	8003318 <core_state_machine+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	338c      	adds	r3, #140	; 0x8c
 80032fc:	4618      	mov	r0, r3
 80032fe:	f005 fecd 	bl	800909c <TimerExpired>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <core_state_machine+0x40>
      /* Don't disable the timer here as we expect the states might be waiting for
       * expiration. */
      platform_i2c_write(port->i2c_addr_, regTRANSMIT, 1, &data);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7858      	ldrb	r0, [r3, #1]
 800330c:	f107 030f 	add.w	r3, r7, #15
 8003310:	2201      	movs	r2, #1
 8003312:	2150      	movs	r1, #80	; 0x50
 8003314:	f7fd f9b4 	bl	8000680 <platform_i2c_write>
    }

    /* Read status registers for ALL chip features */
    ReadStatusRegisters(port);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f003 ff9e 	bl	800725a <ReadStatusRegisters>

    /* Check and handle a chip reset */
    if (port->registers_.FaultStat.ALL_REGS_RESET) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7edb      	ldrb	r3, [r3, #27]
 8003322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <core_state_machine+0x5c>
      core_initialize(port);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ffb9 	bl	80032a4 <core_initialize>
 8003332:	e002      	b.n	800333a <core_state_machine+0x62>
      return;
    }

    /* TypeC/PD state machines */
    StateMachineTypeC(port);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f005 feff 	bl	8009138 <StateMachineTypeC>
  }
}
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <core_get_next_timeout>:
{
  port->tc_enabled_ = enable;
}

FSC_U32 core_get_next_timeout(struct Port *port)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  FSC_U32 time = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
  FSC_U32 nexttime = 0xFFFFFFFF;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->pps_timer_);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	33e0      	adds	r3, #224	; 0xe0
 8003356:	4618      	mov	r0, r3
 8003358:	f005 febd 	bl	80090d6 <TimerRemaining>
 800335c:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <core_get_next_timeout+0x30>
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	429a      	cmp	r2, r3
 800336a:	d201      	bcs.n	8003370 <core_get_next_timeout+0x30>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->tc_state_timer_);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3380      	adds	r3, #128	; 0x80
 8003374:	4618      	mov	r0, r3
 8003376:	f005 feae 	bl	80090d6 <TimerRemaining>
 800337a:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <core_get_next_timeout+0x4e>
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	429a      	cmp	r2, r3
 8003388:	d201      	bcs.n	800338e <core_get_next_timeout+0x4e>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->policy_state_timer_);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	338c      	adds	r3, #140	; 0x8c
 8003392:	4618      	mov	r0, r3
 8003394:	f005 fe9f 	bl	80090d6 <TimerRemaining>
 8003398:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <core_get_next_timeout+0x6c>
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d201      	bcs.n	80033ac <core_get_next_timeout+0x6c>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60fb      	str	r3, [r7, #12]

#ifdef FSC_HAVE_VDM
  time = TimerRemaining(&port->vdm_timer_);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80033b2:	4618      	mov	r0, r3
 80033b4:	f005 fe8f 	bl	80090d6 <TimerRemaining>
 80033b8:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <core_get_next_timeout+0x8c>
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d201      	bcs.n	80033cc <core_get_next_timeout+0x8c>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60fb      	str	r3, [r7, #12]
#endif /* FSC_HAVE_VDM */

  time = TimerRemaining(&port->no_response_timer_);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	33bc      	adds	r3, #188	; 0xbc
 80033d0:	4618      	mov	r0, r3
 80033d2:	f005 fe80 	bl	80090d6 <TimerRemaining>
 80033d6:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <core_get_next_timeout+0xaa>
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d201      	bcs.n	80033ea <core_get_next_timeout+0xaa>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->swap_source_start_timer_);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	33c8      	adds	r3, #200	; 0xc8
 80033ee:	4618      	mov	r0, r3
 80033f0:	f005 fe71 	bl	80090d6 <TimerRemaining>
 80033f4:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <core_get_next_timeout+0xc8>
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	429a      	cmp	r2, r3
 8003402:	d201      	bcs.n	8003408 <core_get_next_timeout+0xc8>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->pd_debounce_timer_);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	33b0      	adds	r3, #176	; 0xb0
 800340c:	4618      	mov	r0, r3
 800340e:	f005 fe62 	bl	80090d6 <TimerRemaining>
 8003412:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <core_get_next_timeout+0xe6>
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	429a      	cmp	r2, r3
 8003420:	d201      	bcs.n	8003426 <core_get_next_timeout+0xe6>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->cc_debounce_timer_);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	33a4      	adds	r3, #164	; 0xa4
 800342a:	4618      	mov	r0, r3
 800342c:	f005 fe53 	bl	80090d6 <TimerRemaining>
 8003430:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <core_get_next_timeout+0x104>
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d201      	bcs.n	8003444 <core_get_next_timeout+0x104>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->policy_sinktx_timer_);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3398      	adds	r3, #152	; 0x98
 8003448:	4618      	mov	r0, r3
 800344a:	f005 fe44 	bl	80090d6 <TimerRemaining>
 800344e:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <core_get_next_timeout+0x122>
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	429a      	cmp	r2, r3
 800345c:	d201      	bcs.n	8003462 <core_get_next_timeout+0x122>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	60fb      	str	r3, [r7, #12]

  if (nexttime == 0xFFFFFFFF) nexttime = 0;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d101      	bne.n	800346e <core_get_next_timeout+0x12e>
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]

  return nexttime;
 800346e:	68fb      	ldr	r3, [r7, #12]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <DP_Initialize>:
#include "port.h"
#include "vdm.h"
#include "vdm_types.h"

void DP_Initialize(struct Port *port)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  DisplayPortCaps_t *cap = &port->display_port_data_.DpCap;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003486:	60fb      	str	r3, [r7, #12]
  /* Initialize display port capabilities */
  cap->word = 0;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
  cap->UfpDCapable = DisplayPort_UFP_Capable;
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	7813      	ldrb	r3, [r2, #0]
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	7013      	strb	r3, [r2, #0]
  cap->DfpDCapable = DisplayPort_DFP_Capable;
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	7813      	ldrb	r3, [r2, #0]
 800349c:	f36f 0341 	bfc	r3, #1, #1
 80034a0:	7013      	strb	r3, [r2, #0]
  cap->Transport = DisplayPort_Signaling;
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	7813      	ldrb	r3, [r2, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	f361 0385 	bfi	r3, r1, #2, #4
 80034ac:	7013      	strb	r3, [r2, #0]
  cap->ReceptacleIndication = DisplayPort_Receptacle;
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	7813      	ldrb	r3, [r2, #0]
 80034b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b6:	7013      	strb	r3, [r2, #0]
  cap->USB2p0NotUsed = !DisplayPort_USBr2p0Signal_Req;
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	7813      	ldrb	r3, [r2, #0]
 80034bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c0:	7013      	strb	r3, [r2, #0]
  cap->DFP_DPinAssignments = DisplayPort_DFP_Pin_Mask;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	221c      	movs	r2, #28
 80034c6:	705a      	strb	r2, [r3, #1]
  cap->UFP_DPinAssignments = DisplayPort_UFP_Pin_Mask;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2204      	movs	r2, #4
 80034cc:	709a      	strb	r2, [r3, #2]
  /* Initialize other variables */
  port->display_port_data_.DpConfigured = FALSE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
  port->display_port_data_.DpStatus.word = 0;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
  port->display_port_data_.DpCapMatched = FALSE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
  port->display_port_data_.DpPpConfig.word = 0;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
  port->display_port_data_.DpPpStatus.word = 0;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  port->display_port_data_.DpModeEntered = 0;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  if (cap->UfpDCapable)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00f      	beq.n	800352c <DP_Initialize+0xb4>
  {
    port->display_port_data_.DpStatus.Connection |= DP_MODE_UFP_D;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 8003512:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	b2d9      	uxtb	r1, r3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 8003524:	f361 0301 	bfi	r3, r1, #0, #2
 8003528:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
  }
  if (cap->DfpDCapable)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00f      	beq.n	800355a <DP_Initialize+0xe2>
  {
    port->display_port_data_.DpStatus.Connection |= DP_MODE_DFP_D;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 8003540:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	b2d9      	uxtb	r1, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 8003552:	f361 0301 	bfi	r3, r1, #0, #2
 8003556:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
  }

  platform_dp_enable_pins(FALSE, 0);
 800355a:	2100      	movs	r1, #0
 800355c:	2000      	movs	r0, #0
 800355e:	f7fd fa0e 	bl	800097e <platform_dp_enable_pins>
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <DP_RequestPartnerStatus>:

void DP_RequestPartnerStatus(struct Port *port)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b088      	sub	sp, #32
 800356e:	af02      	add	r7, sp, #8
 8003570:	6078      	str	r0, [r7, #4]
  doDataObject_t svdmh = {0};
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
  FSC_U32 length = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[2] = {0};
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
  svdmh.SVDM.SVID = DP_SID;
 8003584:	f64f 7301 	movw	r3, #65281	; 0xff01
 8003588:	827b      	strh	r3, [r7, #18]
  svdmh.SVDM.VDMType = STRUCTURED_VDM;
 800358a:	7c7b      	ldrb	r3, [r7, #17]
 800358c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003590:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.Version = CurrentSVDMVersion(port, SOP_TYPE_SOP);
 8003592:	2100      	movs	r1, #0
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f006 fae5 	bl	8009b64 <CurrentSVDMVersion>
 800359a:	4603      	mov	r3, r0
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	7c7b      	ldrb	r3, [r7, #17]
 80035a4:	f362 1346 	bfi	r3, r2, #5, #2
 80035a8:	747b      	strb	r3, [r7, #17]
  /* saved mode position */
  svdmh.SVDM.ObjPos = port->display_port_data_.DpModeEntered & 0x7;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	7c7b      	ldrb	r3, [r7, #17]
 80035b8:	f362 0302 	bfi	r3, r2, #0, #3
 80035bc:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.CommandType = INITIATOR;
 80035be:	7c3b      	ldrb	r3, [r7, #16]
 80035c0:	f36f 1387 	bfc	r3, #6, #2
 80035c4:	743b      	strb	r3, [r7, #16]
  svdmh.SVDM.Command = DP_COMMAND_STATUS;
 80035c6:	7c3b      	ldrb	r3, [r7, #16]
 80035c8:	2210      	movs	r2, #16
 80035ca:	f362 0304 	bfi	r3, r2, #0, #5
 80035ce:	743b      	strb	r3, [r7, #16]
  arr[0] = svdmh.object;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	60bb      	str	r3, [r7, #8]
  length++;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3301      	adds	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
  arr[1] = port->display_port_data_.DpStatus.word;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80035e0:	60fb      	str	r3, [r7, #12]
  length++;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	3301      	adds	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
  port->original_policy_state_ = port->policy_state_;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  SendVdmMessageWithTimeout(port, SOP_TYPE_SOP, arr, length,
 80035f4:	f107 0208 	add.w	r2, r7, #8
 80035f8:	238a      	movs	r3, #138	; 0x8a
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2100      	movs	r1, #0
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f008 f8a2 	bl	800b74a <SendVdmMessageWithTimeout>
                            PE_DFP_VDM_DP_Status_Request);
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <DP_RequestPartnerConfig>:

void DP_RequestPartnerConfig(struct Port *port, DisplayPortConfig_t in)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b088      	sub	sp, #32
 8003612:	af02      	add	r7, sp, #8
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  doDataObject_t svdmh = {0};
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  FSC_U32 length = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[2] = {0};
 8003620:	f107 0308 	add.w	r3, r7, #8
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
  svdmh.SVDM.SVID = DP_SID;
 800362a:	f64f 7301 	movw	r3, #65281	; 0xff01
 800362e:	827b      	strh	r3, [r7, #18]
  svdmh.SVDM.VDMType = STRUCTURED_VDM;
 8003630:	7c7b      	ldrb	r3, [r7, #17]
 8003632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003636:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.Version = CurrentSVDMVersion(port, SOP_TYPE_SOP);
 8003638:	2100      	movs	r1, #0
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f006 fa92 	bl	8009b64 <CurrentSVDMVersion>
 8003640:	4603      	mov	r3, r0
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	b2da      	uxtb	r2, r3
 8003648:	7c7b      	ldrb	r3, [r7, #17]
 800364a:	f362 1346 	bfi	r3, r2, #5, #2
 800364e:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.ObjPos = port->display_port_data_.DpModeEntered & 0x7;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	b2da      	uxtb	r2, r3
 800365c:	7c7b      	ldrb	r3, [r7, #17]
 800365e:	f362 0302 	bfi	r3, r2, #0, #3
 8003662:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.CommandType = INITIATOR;
 8003664:	7c3b      	ldrb	r3, [r7, #16]
 8003666:	f36f 1387 	bfc	r3, #6, #2
 800366a:	743b      	strb	r3, [r7, #16]
  svdmh.SVDM.Command = DP_COMMAND_CONFIG;
 800366c:	7c3b      	ldrb	r3, [r7, #16]
 800366e:	2211      	movs	r2, #17
 8003670:	f362 0304 	bfi	r3, r2, #0, #5
 8003674:	743b      	strb	r3, [r7, #16]
  arr[0] = svdmh.object;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	60bb      	str	r3, [r7, #8]
  length++;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3301      	adds	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
  arr[1] = in.word;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	60fb      	str	r3, [r7, #12]
  length++;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3301      	adds	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
  port->original_policy_state_ = port->policy_state_;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  SendVdmMessageWithTimeout(port, SOP_TYPE_SOP, arr, length,
 8003696:	f107 0208 	add.w	r2, r7, #8
 800369a:	238d      	movs	r3, #141	; 0x8d
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2100      	movs	r1, #0
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f008 f851 	bl	800b74a <SendVdmMessageWithTimeout>
                            PE_DFP_VDM_DP_Config_Request);
}
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <DP_SetPortMode>:


void DP_SetPortMode(struct Port *port, DisplayPortMode_t conn)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  switch (conn)
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	f200 8086 	bhi.w	80037d0 <DP_SetPortMode+0x120>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <DP_SetPortMode+0x1c>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	08003757 	.word	0x08003757
 80036d4:	08003719 	.word	0x08003719
 80036d8:	08003795 	.word	0x08003795
  {
  case DP_MODE_DISABLED:
    port->display_port_data_.DpCap.UfpDCapable = 0;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 80036e2:	f36f 0300 	bfc	r3, #0, #1
 80036e6:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.DfpDCapable = 0;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 80036f0:	f36f 0341 	bfc	r3, #1, #1
 80036f4:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.UFP_DPinAssignments = 0;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
    port->display_port_data_.DpCap.DFP_DPinAssignments = 0;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
    port->display_port_data_.DpStatus.Connection = DP_MODE_DISABLED;
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 800370e:	f36f 0301 	bfc	r3, #0, #2
 8003712:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
    break;
 8003716:	e05c      	b.n	80037d2 <DP_SetPortMode+0x122>
  case DP_MODE_UFP_D:
    port->display_port_data_.DpCap.UfpDCapable = DisplayPort_UFP_Capable;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.DfpDCapable = 0;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 800372c:	f36f 0341 	bfc	r3, #1, #1
 8003730:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.UFP_DPinAssignments = DisplayPort_UFP_Pin_Mask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2204      	movs	r2, #4
 8003738:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
    port->display_port_data_.DpCap.DFP_DPinAssignments = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
    port->display_port_data_.DpStatus.Connection = DP_MODE_UFP_D;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 800374a:	2102      	movs	r1, #2
 800374c:	f361 0301 	bfi	r3, r1, #0, #2
 8003750:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
    break;
 8003754:	e03d      	b.n	80037d2 <DP_SetPortMode+0x122>
  case DP_MODE_DFP_D:
    port->display_port_data_.DpCap.UfpDCapable = 0;
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 800375c:	f36f 0300 	bfc	r3, #0, #1
 8003760:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.DfpDCapable = DisplayPort_DFP_Capable;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 800376a:	f36f 0341 	bfc	r3, #1, #1
 800376e:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.UFP_DPinAssignments = 0;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
    port->display_port_data_.DpCap.DFP_DPinAssignments = DisplayPort_DFP_Pin_Mask;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	221c      	movs	r2, #28
 800377e:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
    port->display_port_data_.DpStatus.Connection = DP_MODE_DFP_D;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 8003788:	2101      	movs	r1, #1
 800378a:	f361 0301 	bfi	r3, r1, #0, #2
 800378e:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
    break;
 8003792:	e01e      	b.n	80037d2 <DP_SetPortMode+0x122>
  case DP_MODE_BOTH:
    port->display_port_data_.DpCap.UfpDCapable = DisplayPort_UFP_Capable;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.DfpDCapable = DisplayPort_DFP_Capable;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 80037a8:	f36f 0341 	bfc	r3, #1, #1
 80037ac:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.UFP_DPinAssignments = DisplayPort_UFP_Pin_Mask;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2204      	movs	r2, #4
 80037b4:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
    port->display_port_data_.DpCap.DFP_DPinAssignments = DisplayPort_DFP_Pin_Mask;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	221c      	movs	r2, #28
 80037bc:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
    port->display_port_data_.DpStatus.Connection = DP_MODE_BOTH;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 80037c6:	f043 0303 	orr.w	r3, r3, #3
 80037ca:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
    break;
 80037ce:	e000      	b.n	80037d2 <DP_SetPortMode+0x122>
  default:
    break;
 80037d0:	bf00      	nop
  }
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <DP_SelectPinAssignment>:

static FSC_BOOL DP_SelectPinAssignment(struct Port *port)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  DisplayPortConfig_t *config;        /* sent to port partner Type-C UFP_U */
  DisplayPortCaps_t   *dpPartnerCap;    /* type-C UFP capability */
  FSC_U32 dp_pin_match;

  dpPartnerCap = &port->display_port_data_.DpPpCap;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80037ee:	613b      	str	r3, [r7, #16]
  config = &port->display_port_data_.DpPpConfig;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Plug indicates connections receptacle must use */
  config->PinAssign = DP_PIN_ASSIGN_NS;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	705a      	strb	r2, [r3, #1]
  if (config->Mode == DP_CONF_UFP_D)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d118      	bne.n	800383e <DP_SelectPinAssignment+0x5e>
  {
     /* Configuring as display port sink */
     if (dpPartnerCap->ReceptacleIndication == DP_Plug)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <DP_SelectPinAssignment+0x4c>
     {
       /* Plug describes receptacle's pin assignment */
       dp_pin_match = dpPartnerCap->DFP_DPinAssignments &
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	785a      	ldrb	r2, [r3, #1]
                      port->display_port_data_.DpCap.DFP_DPinAssignments;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 32d9 	ldrb.w	r3, [r3, #729]	; 0x2d9
       dp_pin_match = dpPartnerCap->DFP_DPinAssignments &
 8003824:	4013      	ands	r3, r2
 8003826:	b2db      	uxtb	r3, r3
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e020      	b.n	800386e <DP_SelectPinAssignment+0x8e>
     }
     else
     {
       dp_pin_match = dpPartnerCap->UFP_DPinAssignments &
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	789a      	ldrb	r2, [r3, #2]
                      port->display_port_data_.DpCap.DFP_DPinAssignments;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 32d9 	ldrb.w	r3, [r3, #729]	; 0x2d9
       dp_pin_match = dpPartnerCap->UFP_DPinAssignments &
 8003836:	4013      	ands	r3, r2
 8003838:	b2db      	uxtb	r3, r3
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e017      	b.n	800386e <DP_SelectPinAssignment+0x8e>
     }
   }
   else
   {
     if (dpPartnerCap->ReceptacleIndication == DP_Plug)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d108      	bne.n	800385e <DP_SelectPinAssignment+0x7e>
     {
       dp_pin_match = dpPartnerCap->UFP_DPinAssignments &
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	789a      	ldrb	r2, [r3, #2]
                      port->display_port_data_.DpCap.UFP_DPinAssignments;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
       dp_pin_match = dpPartnerCap->UFP_DPinAssignments &
 8003856:	4013      	ands	r3, r2
 8003858:	b2db      	uxtb	r3, r3
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e007      	b.n	800386e <DP_SelectPinAssignment+0x8e>
     }
     else
     {
       dp_pin_match = dpPartnerCap->DFP_DPinAssignments &
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	785a      	ldrb	r2, [r3, #1]
                      port->display_port_data_.DpCap.UFP_DPinAssignments;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
       dp_pin_match = dpPartnerCap->DFP_DPinAssignments &
 8003868:	4013      	ands	r3, r2
 800386a:	b2db      	uxtb	r3, r3
 800386c:	617b      	str	r3, [r7, #20]

   /* Match pins assignment C, D, E in order of preference. Lets start with
    * lowest preference available and then move up */
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'E') &&
                        (dp_pin_match & DP_PIN_ASSIGN_E)) ?
                         DP_PIN_ASSIGN_E : DP_PIN_ASSIGN_NS;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	b2da      	uxtb	r2, r3
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'E') &&
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	705a      	strb	r2, [r3, #1]
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'D') &&
                        (dp_pin_match & DP_PIN_ASSIGN_D)) ?
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0308 	and.w	r3, r3, #8
                         DP_PIN_ASSIGN_D : config->PinAssign;
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <DP_SelectPinAssignment+0xac>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	785a      	ldrb	r2, [r3, #1]
 800388a:	e000      	b.n	800388e <DP_SelectPinAssignment+0xae>
 800388c:	2208      	movs	r2, #8
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'D') &&
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	705a      	strb	r2, [r3, #1]
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'C') &&
                        (dp_pin_match & DP_PIN_ASSIGN_C)) ?
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0304 	and.w	r3, r3, #4
                         DP_PIN_ASSIGN_C : config->PinAssign;
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <DP_SelectPinAssignment+0xc2>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	785a      	ldrb	r2, [r3, #1]
 80038a0:	e000      	b.n	80038a4 <DP_SelectPinAssignment+0xc4>
 80038a2:	2204      	movs	r2, #4
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'C') &&
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	705a      	strb	r2, [r3, #1]

   if (config->PinAssign == DP_PIN_ASSIGN_NS)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	785b      	ldrb	r3, [r3, #1]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <DP_SelectPinAssignment+0xd4>
   {
     return FALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <DP_SelectPinAssignment+0xd6>
   }
   return TRUE;
 80038b4:	2301      	movs	r3, #1
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <DP_SelectRole>:

static FSC_BOOL DP_SelectRole(struct Port *port)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  DisplayPortConfig_t *config;        /* sent to port partner Type-C UFP_U */
  DisplayPortCaps_t *dpPartnerCap;    /* type-C UFP capability */

  dpPartnerCap = &port->display_port_data_.DpPpCap;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80038d0:	60fb      	str	r3, [r7, #12]
  config = &port->display_port_data_.DpPpConfig;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80038d8:	60bb      	str	r3, [r7, #8]

  /* Select whether to configure partner (UFP_U) as DPF_D or UFP_D */
  if (dpPartnerCap->UfpDCapable &&
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <DP_SelectRole+0x46>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <DP_SelectRole+0x46>
      /* DFP_D capable and preferred */
      config->Mode = DP_CONF_DFP_D;
    }
    else
    {
      config->Mode = DP_CONF_UFP_D;
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	7813      	ldrb	r3, [r2, #0]
 80038fc:	2102      	movs	r1, #2
 80038fe:	f361 0301 	bfi	r3, r1, #0, #2
 8003902:	7013      	strb	r3, [r2, #0]
    }
    return TRUE;
 8003904:	2301      	movs	r3, #1
 8003906:	e017      	b.n	8003938 <DP_SelectRole+0x76>
  }
  else if (dpPartnerCap->DfpDCapable &&
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00f      	beq.n	8003936 <DP_SelectRole+0x74>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <DP_SelectRole+0x74>
           port->display_port_data_.DpCap.UfpDCapable)
  {
    config->Mode = DP_CONF_DFP_D;
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	7813      	ldrb	r3, [r2, #0]
 800392a:	2101      	movs	r1, #1
 800392c:	f361 0301 	bfi	r3, r1, #0, #2
 8003930:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <DP_SelectRole+0x76>
  }

  return FALSE;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <DP_EvaluateSinkCapability>:
 * @brief This function Evaluates the UFP_U capability and selects UFP_U
 * configuration that will be used. The configuration is set in configuration
 * VDM.
 */
FSC_BOOL DP_EvaluateSinkCapability(struct Port *port, FSC_U32 mode_in)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  DisplayPortConfig_t *config;        /* sent to port partner Type-C UFP_U */
  DisplayPortCaps_t *dpPartnerCap;    /* type-C UFP capability */

  port->display_port_data_.DpCapMatched = FALSE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3

  /* If display port features are disabled return */
  if (port->display_port_data_.DpEnabled == FALSE) return FALSE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 32d1 	ldrb.w	r3, [r3, #721]	; 0x2d1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <DP_EvaluateSinkCapability+0x20>
 8003960:	2300      	movs	r3, #0
 8003962:	e02f      	b.n	80039c4 <DP_EvaluateSinkCapability+0x80>
  if (port->display_port_data_.DpAutoModeEntryEnabled == FALSE) return FALSE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <DP_EvaluateSinkCapability+0x2e>
 800396e:	2300      	movs	r3, #0
 8003970:	e028      	b.n	80039c4 <DP_EvaluateSinkCapability+0x80>

  dpPartnerCap = &port->display_port_data_.DpPpCap;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8003978:	60fb      	str	r3, [r7, #12]
  config = &port->display_port_data_.DpPpConfig;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8003980:	60bb      	str	r3, [r7, #8]

  /* Copy the capability from the mode ACK*/
  dpPartnerCap->word = mode_in;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	601a      	str	r2, [r3, #0]
  config->word = 0;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]

  if (FALSE == DP_SelectRole(port))
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff97 	bl	80038c2 <DP_SelectRole>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <DP_EvaluateSinkCapability+0x5a>
  {
    return FALSE;
 800399a:	2300      	movs	r3, #0
 800399c:	e012      	b.n	80039c4 <DP_EvaluateSinkCapability+0x80>
  /* Match USB 2.0 signaling */
  if (dpPartnerCap->USB2p0NotUsed == 0 && DisplayPort_USBr2p0Signal_Req)
  {
    return FALSE;
  }
  config->SignalConfig = DisplayPort_Signaling;
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	7813      	ldrb	r3, [r2, #0]
 80039a2:	2101      	movs	r1, #1
 80039a4:	f361 0385 	bfi	r3, r1, #2, #4
 80039a8:	7013      	strb	r3, [r2, #0]

  if (DP_SelectPinAssignment(port) != TRUE)
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ff18 	bl	80037e0 <DP_SelectPinAssignment>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <DP_EvaluateSinkCapability+0x76>
  {
    return FALSE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e004      	b.n	80039c4 <DP_EvaluateSinkCapability+0x80>
  }

  port->display_port_data_.DpCapMatched = TRUE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
  return TRUE;
 80039c2:	2301      	movs	r3, #1
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <DP_ProcessCommand>:

FSC_BOOL DP_ProcessCommand(struct Port *port, FSC_U32* arr_in)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  doDataObject_t svdmh_in = {0};
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  DisplayPortStatus_t stat;
  DisplayPortConfig_t config;
  FSC_BOOL is_ack = FALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]

  if (port->display_port_data_.DpEnabled == FALSE) return TRUE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 32d1 	ldrb.w	r3, [r3, #721]	; 0x2d1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <DP_ProcessCommand+0x20>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b6      	b.n	8003b5a <DP_ProcessCommand+0x18e>
  svdmh_in.object = arr_in[0];
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	613b      	str	r3, [r7, #16]
  is_ack = (svdmh_in.SVDM.CommandType == RESPONDER_ACK) ? TRUE : FALSE;
 80039f2:	7c3b      	ldrb	r3, [r7, #16]
 80039f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	75fb      	strb	r3, [r7, #23]

  switch (svdmh_in.SVDM.Command)
 8003a06:	7c3b      	ldrb	r3, [r7, #16]
 8003a08:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d040      	beq.n	8003a94 <DP_ProcessCommand+0xc8>
 8003a12:	2b11      	cmp	r3, #17
 8003a14:	d06c      	beq.n	8003af0 <DP_ProcessCommand+0x124>
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	f040 809b 	bne.w	8003b52 <DP_ProcessCommand+0x186>
  {
  case DP_COMMAND_ATTENTION:
    if (svdmh_in.SVDM.CommandType == INITIATOR)
 8003a1c:	7c3b      	ldrb	r3, [r7, #16]
 8003a1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d12d      	bne.n	8003a84 <DP_ProcessCommand+0xb8>
    {
      stat.word = arr_in[1];
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]
      /* Attention can occur anytime after enter mode */
      if (port->vdm_auto_state_ > AUTO_VDM_ENTER_MODE_PP &&
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d90a      	bls.n	8003a4e <DP_ProcessCommand+0x82>
          port->vdm_auto_state_ < AUTO_VDM_DONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
      if (port->vdm_auto_state_ > AUTO_VDM_ENTER_MODE_PP &&
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d805      	bhi.n	8003a4e <DP_ProcessCommand+0x82>
      {
        DP_UpdatePartnerStatus(port, stat, TRUE);
 8003a42:	2201      	movs	r2, #1
 8003a44:	68f9      	ldr	r1, [r7, #12]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f98d 	bl	8003d66 <DP_UpdatePartnerStatus>
        /* let vdm state machine continue if already active */
        break;
 8003a4c:	e084      	b.n	8003b58 <DP_ProcessCommand+0x18c>
      }
      else if (port->policy_state_ == PE_DFP_VDM_DP_Status_Request ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8003a54:	2b8a      	cmp	r3, #138	; 0x8a
 8003a56:	d004      	beq.n	8003a62 <DP_ProcessCommand+0x96>
               port->policy_state_ == PE_DFP_VDM_DP_Config_Request)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      else if (port->policy_state_ == PE_DFP_VDM_DP_Status_Request ||
 8003a5e:	2b8d      	cmp	r3, #141	; 0x8d
 8003a60:	d106      	bne.n	8003a70 <DP_ProcessCommand+0xa4>
      {
        /* Interrupted by attention during request for stat/config.
         * Restore the original policy and continue.
         */
        set_policy_state(port, port->original_policy_state_);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f004 fbbc 	bl	80081e8 <set_policy_state>
      }
      DP_ProcessPartnerAttention(port, stat);
 8003a70:	68f9      	ldr	r1, [r7, #12]
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f8f1 	bl	8003c5a <DP_ProcessPartnerAttention>
      DP_UpdatePartnerStatus(port, stat, TRUE);
 8003a78:	2201      	movs	r2, #1
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f972 	bl	8003d66 <DP_UpdatePartnerStatus>
    else
    {
      /* Restore policy state after getting response */
      set_policy_state(port, port->original_policy_state_);
    }
    break;
 8003a82:	e069      	b.n	8003b58 <DP_ProcessCommand+0x18c>
      set_policy_state(port, port->original_policy_state_);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f004 fbab 	bl	80081e8 <set_policy_state>
    break;
 8003a92:	e061      	b.n	8003b58 <DP_ProcessCommand+0x18c>
  case DP_COMMAND_STATUS:
    if (svdmh_in.SVDM.CommandType == INITIATOR)
 8003a94:	7c3b      	ldrb	r3, [r7, #16]
 8003a96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10c      	bne.n	8003aba <DP_ProcessCommand+0xee>
    {
      stat.word = arr_in[1];
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]
      /* Copy the partner status */
      DP_UpdatePartnerStatus(port, stat, TRUE);
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f95b 	bl	8003d66 <DP_UpdatePartnerStatus>
      /* Send the port status */
      DP_SendPortStatus(port, svdmh_in);
 8003ab0:	6939      	ldr	r1, [r7, #16]
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f855 	bl	8003b62 <DP_SendPortStatus>
      set_policy_state(port, (is_ack == TRUE) ? PE_DFP_VDM_DP_Status_ACKed :
                                                PE_DFP_VDM_DP_Status_NAKed);
      /* Restore policy state after getting response */
      set_policy_state(port, port->original_policy_state_);
    }
    break;
 8003ab8:	e04e      	b.n	8003b58 <DP_ProcessCommand+0x18c>
      stat.word = arr_in[1];
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]
      DP_UpdatePartnerStatus(port, stat, is_ack);
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68f9      	ldr	r1, [r7, #12]
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f94d 	bl	8003d66 <DP_UpdatePartnerStatus>
      set_policy_state(port, (is_ack == TRUE) ? PE_DFP_VDM_DP_Status_ACKed :
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <DP_ProcessCommand+0x10a>
 8003ad2:	238b      	movs	r3, #139	; 0x8b
 8003ad4:	e000      	b.n	8003ad8 <DP_ProcessCommand+0x10c>
 8003ad6:	238c      	movs	r3, #140	; 0x8c
 8003ad8:	4619      	mov	r1, r3
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f004 fb84 	bl	80081e8 <set_policy_state>
      set_policy_state(port, port->original_policy_state_);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f004 fb7d 	bl	80081e8 <set_policy_state>
    break;
 8003aee:	e033      	b.n	8003b58 <DP_ProcessCommand+0x18c>
  case DP_COMMAND_CONFIG:
    if (svdmh_in.SVDM.CommandType == INITIATOR)
 8003af0:	7c3b      	ldrb	r3, [r7, #16]
 8003af2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d113      	bne.n	8003b24 <DP_ProcessCommand+0x158>
    {
      config.word = arr_in[1];
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	60bb      	str	r3, [r7, #8]
      if (DP_ProcessConfigRequest(port, config) == TRUE)
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f966 	bl	8003dd6 <DP_ProcessConfigRequest>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d122      	bne.n	8003b56 <DP_ProcessCommand+0x18a>
      {
        /* if pin reconfig is successful */
        DP_SendPortConfig(port, svdmh_in, TRUE);
 8003b10:	2201      	movs	r2, #1
 8003b12:	6939      	ldr	r1, [r7, #16]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f860 	bl	8003bda <DP_SendPortConfig>
        port->display_port_data_.DpConfigured = TRUE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
      set_policy_state(port, (is_ack == TRUE) ? PE_DFP_VDM_DP_Config_ACKed :
                                                PE_DFP_VDM_DP_Config_NAKed);
      /* Restore policy state after getting response */
      set_policy_state(port, port->original_policy_state_);
    }
    break;
 8003b22:	e018      	b.n	8003b56 <DP_ProcessCommand+0x18a>
      DP_ProcessConfigResponse(port, is_ack);
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f934 	bl	8003d96 <DP_ProcessConfigResponse>
      set_policy_state(port, (is_ack == TRUE) ? PE_DFP_VDM_DP_Config_ACKed :
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <DP_ProcessCommand+0x16c>
 8003b34:	238e      	movs	r3, #142	; 0x8e
 8003b36:	e000      	b.n	8003b3a <DP_ProcessCommand+0x16e>
 8003b38:	238f      	movs	r3, #143	; 0x8f
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f004 fb53 	bl	80081e8 <set_policy_state>
      set_policy_state(port, port->original_policy_state_);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f004 fb4c 	bl	80081e8 <set_policy_state>
    break;
 8003b50:	e001      	b.n	8003b56 <DP_ProcessCommand+0x18a>
  default:
      /* command not recognized */
      return TRUE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e001      	b.n	8003b5a <DP_ProcessCommand+0x18e>
    break;
 8003b56:	bf00      	nop
    }
    return FALSE;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <DP_SendPortStatus>:

void DP_SendPortStatus(struct Port *port, doDataObject_t svdmh_in)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b088      	sub	sp, #32
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  doDataObject_t svdmh_out = {0};
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
  FSC_U32 length_out = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
  FSC_U32 arr_out[2] = {0};
 8003b74:	f107 0308 	add.w	r3, r7, #8
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]

  /*  Reflect most fields */
  svdmh_out.object = svdmh_in.object;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	613b      	str	r3, [r7, #16]
  svdmh_out.SVDM.Version = CurrentSVDMVersion(port, SOP_TYPE_SOP);
 8003b82:	2100      	movs	r1, #0
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f005 ffed 	bl	8009b64 <CurrentSVDMVersion>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	7c7b      	ldrb	r3, [r7, #17]
 8003b94:	f362 1346 	bfi	r3, r2, #5, #2
 8003b98:	747b      	strb	r3, [r7, #17]
  svdmh_out.SVDM.CommandType = RESPONDER_ACK;
 8003b9a:	7c3b      	ldrb	r3, [r7, #16]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f362 1387 	bfi	r3, r2, #6, #2
 8003ba2:	743b      	strb	r3, [r7, #16]
  arr_out[0] = svdmh_out.object;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	60bb      	str	r3, [r7, #8]
  length_out++;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3301      	adds	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
  arr_out[1] = port->display_port_data_.DpStatus.word;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8003bb4:	60fb      	str	r3, [r7, #12]
  length_out++;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]

  SendVdmMessage(port, SOP_TYPE_SOP, arr_out, length_out,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8003bc2:	f107 0208 	add.w	r2, r7, #8
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f007 fd77 	bl	800b6c0 <SendVdmMessage>
                 port->policy_state_);
}
 8003bd2:	bf00      	nop
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <DP_SendPortConfig>:

void DP_SendPortConfig(struct Port *port, doDataObject_t svdmh_in,
                                FSC_BOOL success)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b08a      	sub	sp, #40	; 0x28
 8003bde:	af02      	add	r7, sp, #8
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  doDataObject_t svdmh_out = {0};
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
  FSC_U32 length_out = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
  FSC_U32 arr_out[2] = {0};
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* a callback to platform to put all dp pins to safe state */
  platform_dp_enable_pins(FALSE, 0);
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f7fc febe 	bl	800097e <platform_dp_enable_pins>

  /*  Reflect most fields */
  svdmh_out.object = svdmh_in.object;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	61bb      	str	r3, [r7, #24]
  svdmh_out.SVDM.Version = CurrentSVDMVersion(port, SOP_TYPE_SOP);
 8003c06:	2100      	movs	r1, #0
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f005 ffab 	bl	8009b64 <CurrentSVDMVersion>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	7e7b      	ldrb	r3, [r7, #25]
 8003c18:	f362 1346 	bfi	r3, r2, #5, #2
 8003c1c:	767b      	strb	r3, [r7, #25]
  svdmh_out.SVDM.CommandType = success == TRUE ? RESPONDER_ACK : RESPONDER_NAK;
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <DP_SendPortConfig+0x4e>
 8003c24:	2201      	movs	r2, #1
 8003c26:	e000      	b.n	8003c2a <DP_SendPortConfig+0x50>
 8003c28:	2202      	movs	r2, #2
 8003c2a:	7e3b      	ldrb	r3, [r7, #24]
 8003c2c:	f362 1387 	bfi	r3, r2, #6, #2
 8003c30:	763b      	strb	r3, [r7, #24]
  arr_out[0] = svdmh_out.object;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	613b      	str	r3, [r7, #16]
  length_out++;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
  SendVdmMessage(port, SOP_TYPE_SOP, arr_out, length_out,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8003c42:	f107 0210 	add.w	r2, r7, #16
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f007 fd37 	bl	800b6c0 <SendVdmMessage>
                 port->policy_state_);
}
 8003c52:	bf00      	nop
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <DP_ProcessPartnerAttention>:

/**
 * The status update might be sent using attention or DP status message
 */
void DP_ProcessPartnerAttention(struct Port *port, DisplayPortStatus_t stat)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  DisplayPortStatus_t diff;
  /* Compare which bits has changed. Bits that are changed is set to 1 */
  diff.word =  (port->display_port_data_.DpPpStatus.word ^ stat.word);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	4053      	eors	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  if (diff.Connection)
 8003c70:	7b3b      	ldrb	r3, [r7, #12]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05d      	beq.n	8003d38 <DP_ProcessPartnerAttention+0xde>
  {
    /* Change in connection detected */
    switch(stat.Connection)
 8003c7c:	783b      	ldrb	r3, [r7, #0]
 8003c7e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d026      	beq.n	8003cd6 <DP_ProcessPartnerAttention+0x7c>
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d046      	beq.n	8003d1a <DP_ProcessPartnerAttention+0xc0>
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d000      	beq.n	8003c92 <DP_ProcessPartnerAttention+0x38>
      /* Connection lost by partner device*/
      if (port->display_port_data_.DpConfigured == TRUE)
      {
        /* disable display port data if active */
      }
      break;
 8003c90:	e052      	b.n	8003d38 <DP_ProcessPartnerAttention+0xde>
    case DP_MODE_DFP_D:
      /* TODO: handle DP source device present */
      if (port->display_port_data_.DpCapMatched == TRUE &&
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d14a      	bne.n	8003d32 <DP_ProcessPartnerAttention+0xd8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d042      	beq.n	8003d32 <DP_ProcessPartnerAttention+0xd8>
          port->display_port_data_.DpCap.UfpDCapable)
      {
        port->display_port_data_.DpPpConfig.Mode = DP_CONF_DFP_D;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	f892 32e4 	ldrb.w	r3, [r2, #740]	; 0x2e4
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	f361 0301 	bfi	r3, r1, #0, #2
 8003cb8:	f882 32e4 	strb.w	r3, [r2, #740]	; 0x2e4
        /* Select pin assignment again to make sure that capability match */
        if (DP_SelectPinAssignment(port) == TRUE)
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fd8f 	bl	80037e0 <DP_SelectPinAssignment>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d134      	bne.n	8003d32 <DP_ProcessPartnerAttention+0xd8>
        {
          DP_RequestPartnerConfig(port, port->display_port_data_.DpPpConfig);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fc9d 	bl	800360e <DP_RequestPartnerConfig>
        }
      }
      break;
 8003cd4:	e02d      	b.n	8003d32 <DP_ProcessPartnerAttention+0xd8>
    case DP_MODE_UFP_D:
      /* DP sink device present */
      if (port->display_port_data_.DpCapMatched == TRUE &&
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d12a      	bne.n	8003d36 <DP_ProcessPartnerAttention+0xdc>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d022      	beq.n	8003d36 <DP_ProcessPartnerAttention+0xdc>
          port->display_port_data_.DpCap.DfpDCapable)
      {
        port->display_port_data_.DpPpConfig.Mode = DP_CONF_UFP_D;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	f892 32e4 	ldrb.w	r3, [r2, #740]	; 0x2e4
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	f361 0301 	bfi	r3, r1, #0, #2
 8003cfc:	f882 32e4 	strb.w	r3, [r2, #740]	; 0x2e4
        if (DP_SelectPinAssignment(port) == TRUE)
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fd6d 	bl	80037e0 <DP_SelectPinAssignment>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d114      	bne.n	8003d36 <DP_ProcessPartnerAttention+0xdc>
        {
          DP_RequestPartnerConfig(port, port->display_port_data_.DpPpConfig);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fc7b 	bl	800360e <DP_RequestPartnerConfig>
        }
      }
      break;
 8003d18:	e00d      	b.n	8003d36 <DP_ProcessPartnerAttention+0xdc>
    case DP_MODE_BOTH:
      if (port->display_port_data_.DpCapMatched)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <DP_ProcessPartnerAttention+0xde>
      {
        /* Send previously selected configuration */
        DP_RequestPartnerConfig(port, port->display_port_data_.DpPpConfig);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fc6f 	bl	800360e <DP_RequestPartnerConfig>
 8003d30:	e002      	b.n	8003d38 <DP_ProcessPartnerAttention+0xde>
      break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <DP_ProcessPartnerAttention+0xde>
      break;
 8003d36:	bf00      	nop
      }
    }
  }

    if (stat.ExitDpModeRequest)
 8003d38:	783b      	ldrb	r3, [r7, #0]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <DP_ProcessPartnerAttention+0xfc>
    {
      RequestExitMode(port, SOP_TYPE_SOP, DP_SID, port->display_port_data_.DpModeEntered);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8003d4a:	f64f 7201 	movw	r2, #65281	; 0xff01
 8003d4e:	2100      	movs	r1, #0
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f006 fb3e 	bl	800a3d2 <RequestExitMode>
    }

    /* For all non-pd events do a callback */
    platform_dp_status_update(stat.word);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fc fe1d 	bl	8000998 <platform_dp_status_update>
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <DP_UpdatePartnerStatus>:

void DP_UpdatePartnerStatus(struct Port *port, DisplayPortStatus_t status,
                           FSC_BOOL success)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	4613      	mov	r3, r2
 8003d72:	71fb      	strb	r3, [r7, #7]
  /* If a device is both sink and source capable and our preferred connection
   * is not currently connected. It can be changed immediately after receiving
   * status and before sending config. For now we can wait for preferred
   * connection to be active.  */
  if (success == TRUE)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d109      	bne.n	8003d8e <DP_UpdatePartnerStatus+0x28>
  {
    port->display_port_data_.DpPpStatus = status;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    platform_dp_status_update(port->display_port_data_.DpPpStatus.word);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fc fe05 	bl	8000998 <platform_dp_status_update>
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <DP_ProcessConfigResponse>:

/**
 * The response is sent by partner device for config request
 */
void DP_ProcessConfigResponse(struct Port *port, FSC_BOOL success)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
  if (success == TRUE)
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d112      	bne.n	8003dce <DP_ProcessConfigResponse+0x38>
  {
    if (port->display_port_data_.DpPpStatus.Connection > 0)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <DP_ProcessConfigResponse+0x38>
       * was active then we can safely start sourcing DFP_D data. This can
       * happen with UFP_D devices that report plugged in or always plugged.
       * Otherwise wait for ATTENTION and connection status.
       * do a callback to start providing data */
      /* Just set active status here */
      port->display_port_data_.DpConfigured = TRUE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
      platform_dp_enable_pins(TRUE, port->display_port_data_.DpPpConfig.word);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f7fc fdd8 	bl	800097e <platform_dp_enable_pins>
    }
  }
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <DP_ProcessConfigRequest>:

/**
 * The request is sent by partner device for config request
 */
FSC_BOOL DP_ProcessConfigRequest(struct Port *port, DisplayPortConfig_t config)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
  return platform_dp_enable_pins(TRUE, config.word);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4619      	mov	r1, r3
 8003de4:	2001      	movs	r0, #1
 8003de6:	f7fc fdca 	bl	800097e <platform_dp_enable_pins>
 8003dea:	4603      	mov	r3, r0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <DPM_Initialize>:
#include "typec.h"
#include "vdm.h"
#include "vendor_info.h"

void DPM_Initialize(struct Port *port)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  port->dpm_active_ = FALSE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250

  DPM_Reset(port);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f804 	bl	8003e12 <DPM_Reset>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <DPM_Reset>:

void DPM_Reset(struct Port *port)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
    port->dpm_supply_ready_ = FALSE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
    port->dpm_alert_ = FALSE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    port->dpm_reject_count_ = 0;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
    port->dpm_initial_connected_ = TRUE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
    port->dpm_5a_possible_ = FALSE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
    port->dpm_5a_capsent_ = FALSE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
    port->dpm_disc_id_returned_ = FALSE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
    port->dpm_disc_id_done_ = FALSE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
    port->dpm_disc_id_count_ = 0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
    port->dpm_first_attach_ = TRUE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
    port->dpm_pd_30_ = (port->pd_preferred_rev_ == PDSpecRev3p0) ? TRUE : FALSE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    port->dpm_pd_30_srccab_ = (port->pd_preferred_rev_ == PDSpecRev3p0) ? TRUE : FALSE;;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
    port->dpm_pd_20_cabchk_ = FALSE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
#ifdef FSC_HAVE_VDM
    port->vdm_cbl_present_ = FALSE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
    port->vdm_check_cbl_ = DPM_IsSOPPAllowed(port);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f876 	bl	8003f9c <DPM_IsSOPPAllowed>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
#endif /* FSC_HAVE_VDM */
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <DPM_SetSOPVersion>:
{
  return port->is_vconn_source_;
}

void DPM_SetSOPVersion(struct Port *port, FSC_U8 ver)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	70fb      	strb	r3, [r7, #3]
  /* Catch a compliance trick where they send 4p0... */
  if (ver > PDSpecRev3p0) {
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <DPM_SetSOPVersion+0x16>
      ver = PDSpecRev3p0;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	70fb      	strb	r3, [r7, #3]
  }

  if (ver != PDSpecRev3p0) {
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d007      	beq.n	8003eee <DPM_SetSOPVersion+0x2c>
    port->dpm_pd_30_ = FALSE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    port->dpm_pd_30_srccab_ = FALSE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <DPM_SetSOP1Details>:

void DPM_SetSOP1Details(struct Port *port,
                        FSC_BOOL ack, FSC_U8 ver, FSC_BOOL is_5a_capable)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	4608      	mov	r0, r1
 8003f04:	4611      	mov	r1, r2
 8003f06:	461a      	mov	r2, r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	70fb      	strb	r3, [r7, #3]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70bb      	strb	r3, [r7, #2]
 8003f10:	4613      	mov	r3, r2
 8003f12:	707b      	strb	r3, [r7, #1]
  port->dpm_disc_id_returned_ = TRUE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
  port->dpm_disc_id_result_ = ack;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258

  if (ack) {
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <DPM_SetSOP1Details+0x46>
    if (ver != PDSpecRev3p0)
 8003f2a:	78bb      	ldrb	r3, [r7, #2]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d003      	beq.n	8003f38 <DPM_SetSOP1Details+0x3e>
      port->dpm_pd_30_srccab_ = FALSE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d

    port->dpm_5a_possible_ = is_5a_capable;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	787a      	ldrb	r2, [r7, #1]
 8003f3c:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
  }
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <DPM_CurrentSpecRev>:

FSC_U8 DPM_CurrentSpecRev(struct Port *port, SopType sop)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
    if (sop == SOP_TYPE_SOP) {
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <DPM_CurrentSpecRev+0x24>
      if (port->dpm_pd_30_) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <DPM_CurrentSpecRev+0x20>
        return PDSpecRev3p0;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e011      	b.n	8003f90 <DPM_CurrentSpecRev+0x44>
      }
      else {
          return PDSpecRev2p0;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e00f      	b.n	8003f90 <DPM_CurrentSpecRev+0x44>
      }
    }
    else if (sop == SOP_TYPE_SOP1 || sop == SOP_TYPE_SOP2) {
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d002      	beq.n	8003f7c <DPM_CurrentSpecRev+0x30>
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d108      	bne.n	8003f8e <DPM_CurrentSpecRev+0x42>
      if (port->dpm_pd_30_srccab_) {
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <DPM_CurrentSpecRev+0x3e>
          return PDSpecRev3p0;
 8003f86:	2302      	movs	r3, #2
 8003f88:	e002      	b.n	8003f90 <DPM_CurrentSpecRev+0x44>
      }
      else {
          return PDSpecRev2p0;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <DPM_CurrentSpecRev+0x44>
      }
    }
    else {
        return PDSpecRev2p0;
 8003f8e:	2301      	movs	r3, #1
    }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <DPM_IsSOPPAllowed>:
/**
 * @brief Returns true if allowed to talk to cable
 */
FSC_BOOL DPM_IsSOPPAllowed(struct Port *port)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if (SOP_P_Capable == FALSE) {
      return FALSE;
 8003fa4:	2300      	movs	r3, #0
      /* PD 2.0 dfp communicates with SOP' and SOP'' */
      return TRUE;
    }

  return FALSE;
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <DPM_ReConfigureRxDetect>:

void DPM_ReConfigureRxDetect(struct Port *port)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]

  if (DPM_IsSOPPAllowed(port)) {
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ffee 	bl	8003f9c <DPM_IsSOPPAllowed>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <DPM_ReConfigureRxDetect+0x26>
    set_sop_p_detect(port, TRUE);
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f004 f8ad 	bl	8008128 <set_sop_p_detect>
#ifdef FSC_HAVE_VDM
    port->discover_id_counter_ = 0;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
#endif /* FSC_HAVE_VDM */
  }
  else {
    set_sop_p_detect(port, FALSE);
  }
}
 8003fd6:	e003      	b.n	8003fe0 <DPM_ReConfigureRxDetect+0x2e>
    set_sop_p_detect(port, FALSE);
 8003fd8:	2100      	movs	r1, #0
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f004 f8a4 	bl	8008128 <set_sop_p_detect>
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <notify_observers>:
        observers.obs_count--;
    }
}

void notify_observers(Event_t event, FSC_U16 portId, void *app_ctx)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	817b      	strh	r3, [r7, #10]
    int i;
    for (i = 0; i < observers.obs_count; i++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e025      	b.n	8004048 <notify_observers+0x60>
    {
        if (observers.list[i].event & event)
 8003ffc:	4917      	ldr	r1, [pc, #92]	; (800405c <notify_observers+0x74>)
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	3304      	adds	r3, #4
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d015      	beq.n	8004042 <notify_observers+0x5a>
        {
            observers.list[i].event_handler(event, portId,
 8004016:	4911      	ldr	r1, [pc, #68]	; (800405c <notify_observers+0x74>)
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4613      	mov	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3308      	adds	r3, #8
 8004026:	681c      	ldr	r4, [r3, #0]
 8004028:	490c      	ldr	r1, [pc, #48]	; (800405c <notify_observers+0x74>)
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	330c      	adds	r3, #12
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	8979      	ldrh	r1, [r7, #10]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	47a0      	blx	r4
    for (i = 0; i < observers.obs_count; i++)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	3301      	adds	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <notify_observers+0x74>)
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4293      	cmp	r3, r2
 8004052:	dbd3      	blt.n	8003ffc <notify_observers+0x14>
                                            observers.list[i].context, app_ctx);
        }
    }
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	20000028 	.word	0x20000028

08004060 <USBPDPolicyEngine>:
#include "display_port.h"
#endif /* FSC_HAVE_DP */
#endif /* FSC_HAVE_VDM */

void USBPDPolicyEngine(struct Port *port)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  switch (port->policy_state_) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800406e:	3b0d      	subs	r3, #13
 8004070:	2b9d      	cmp	r3, #157	; 0x9d
 8004072:	f200 81c5 	bhi.w	8004400 <USBPDPolicyEngine+0x3a0>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <USBPDPolicyEngine+0x1c>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	080042fd 	.word	0x080042fd
 8004080:	08004325 	.word	0x08004325
 8004084:	0800432d 	.word	0x0800432d
 8004088:	08004335 	.word	0x08004335
 800408c:	0800433d 	.word	0x0800433d
 8004090:	08004345 	.word	0x08004345
 8004094:	0800434d 	.word	0x0800434d
 8004098:	08004305 	.word	0x08004305
 800409c:	0800431d 	.word	0x0800431d
 80040a0:	08004355 	.word	0x08004355
 80040a4:	0800435d 	.word	0x0800435d
 80040a8:	08004401 	.word	0x08004401
 80040ac:	08004401 	.word	0x08004401
 80040b0:	08004315 	.word	0x08004315
 80040b4:	0800430d 	.word	0x0800430d
 80040b8:	08004401 	.word	0x08004401
 80040bc:	08004401 	.word	0x08004401
 80040c0:	08004401 	.word	0x08004401
 80040c4:	08004395 	.word	0x08004395
 80040c8:	0800439d 	.word	0x0800439d
 80040cc:	08004401 	.word	0x08004401
 80040d0:	08004401 	.word	0x08004401
 80040d4:	08004401 	.word	0x08004401
 80040d8:	08004401 	.word	0x08004401
 80040dc:	08004401 	.word	0x08004401
 80040e0:	08004401 	.word	0x08004401
 80040e4:	08004401 	.word	0x08004401
 80040e8:	08004401 	.word	0x08004401
 80040ec:	08004401 	.word	0x08004401
 80040f0:	08004401 	.word	0x08004401
 80040f4:	08004401 	.word	0x08004401
 80040f8:	08004401 	.word	0x08004401
 80040fc:	08004401 	.word	0x08004401
 8004100:	08004401 	.word	0x08004401
 8004104:	08004401 	.word	0x08004401
 8004108:	08004401 	.word	0x08004401
 800410c:	08004401 	.word	0x08004401
 8004110:	08004401 	.word	0x08004401
 8004114:	08004401 	.word	0x08004401
 8004118:	08004401 	.word	0x08004401
 800411c:	08004401 	.word	0x08004401
 8004120:	08004401 	.word	0x08004401
 8004124:	08004401 	.word	0x08004401
 8004128:	08004401 	.word	0x08004401
 800412c:	08004401 	.word	0x08004401
 8004130:	08004401 	.word	0x08004401
 8004134:	08004401 	.word	0x08004401
 8004138:	08004401 	.word	0x08004401
 800413c:	08004401 	.word	0x08004401
 8004140:	08004401 	.word	0x08004401
 8004144:	08004401 	.word	0x08004401
 8004148:	08004401 	.word	0x08004401
 800414c:	08004401 	.word	0x08004401
 8004150:	08004401 	.word	0x08004401
 8004154:	08004401 	.word	0x08004401
 8004158:	0800437d 	.word	0x0800437d
 800415c:	08004401 	.word	0x08004401
 8004160:	08004401 	.word	0x08004401
 8004164:	08004375 	.word	0x08004375
 8004168:	08004401 	.word	0x08004401
 800416c:	08004401 	.word	0x08004401
 8004170:	08004401 	.word	0x08004401
 8004174:	08004401 	.word	0x08004401
 8004178:	08004401 	.word	0x08004401
 800417c:	08004401 	.word	0x08004401
 8004180:	08004401 	.word	0x08004401
 8004184:	08004401 	.word	0x08004401
 8004188:	0800438d 	.word	0x0800438d
 800418c:	08004401 	.word	0x08004401
 8004190:	08004401 	.word	0x08004401
 8004194:	08004401 	.word	0x08004401
 8004198:	08004401 	.word	0x08004401
 800419c:	08004385 	.word	0x08004385
 80041a0:	08004401 	.word	0x08004401
 80041a4:	08004401 	.word	0x08004401
 80041a8:	08004401 	.word	0x08004401
 80041ac:	08004401 	.word	0x08004401
 80041b0:	08004401 	.word	0x08004401
 80041b4:	08004401 	.word	0x08004401
 80041b8:	08004401 	.word	0x08004401
 80041bc:	08004401 	.word	0x08004401
 80041c0:	08004401 	.word	0x08004401
 80041c4:	08004401 	.word	0x08004401
 80041c8:	08004401 	.word	0x08004401
 80041cc:	08004401 	.word	0x08004401
 80041d0:	08004401 	.word	0x08004401
 80041d4:	08004401 	.word	0x08004401
 80041d8:	08004401 	.word	0x08004401
 80041dc:	08004365 	.word	0x08004365
 80041e0:	0800436d 	.word	0x0800436d
 80041e4:	08004401 	.word	0x08004401
 80041e8:	08004401 	.word	0x08004401
 80041ec:	080043a5 	.word	0x080043a5
 80041f0:	080043b7 	.word	0x080043b7
 80041f4:	08004401 	.word	0x08004401
 80041f8:	08004401 	.word	0x08004401
 80041fc:	08004401 	.word	0x08004401
 8004200:	08004401 	.word	0x08004401
 8004204:	08004401 	.word	0x08004401
 8004208:	08004401 	.word	0x08004401
 800420c:	08004401 	.word	0x08004401
 8004210:	08004401 	.word	0x08004401
 8004214:	08004401 	.word	0x08004401
 8004218:	08004401 	.word	0x08004401
 800421c:	08004401 	.word	0x08004401
 8004220:	08004401 	.word	0x08004401
 8004224:	08004401 	.word	0x08004401
 8004228:	08004401 	.word	0x08004401
 800422c:	08004401 	.word	0x08004401
 8004230:	08004401 	.word	0x08004401
 8004234:	08004401 	.word	0x08004401
 8004238:	08004401 	.word	0x08004401
 800423c:	08004401 	.word	0x08004401
 8004240:	08004401 	.word	0x08004401
 8004244:	08004401 	.word	0x08004401
 8004248:	08004401 	.word	0x08004401
 800424c:	08004401 	.word	0x08004401
 8004250:	08004401 	.word	0x08004401
 8004254:	08004401 	.word	0x08004401
 8004258:	08004401 	.word	0x08004401
 800425c:	08004401 	.word	0x08004401
 8004260:	08004401 	.word	0x08004401
 8004264:	08004401 	.word	0x08004401
 8004268:	08004401 	.word	0x08004401
 800426c:	08004401 	.word	0x08004401
 8004270:	08004401 	.word	0x08004401
 8004274:	08004401 	.word	0x08004401
 8004278:	08004401 	.word	0x08004401
 800427c:	08004401 	.word	0x08004401
 8004280:	08004401 	.word	0x08004401
 8004284:	08004401 	.word	0x08004401
 8004288:	08004401 	.word	0x08004401
 800428c:	08004401 	.word	0x08004401
 8004290:	08004401 	.word	0x08004401
 8004294:	08004401 	.word	0x08004401
 8004298:	08004401 	.word	0x08004401
 800429c:	08004401 	.word	0x08004401
 80042a0:	08004401 	.word	0x08004401
 80042a4:	08004401 	.word	0x08004401
 80042a8:	08004401 	.word	0x08004401
 80042ac:	08004401 	.word	0x08004401
 80042b0:	08004401 	.word	0x08004401
 80042b4:	08004401 	.word	0x08004401
 80042b8:	08004401 	.word	0x08004401
 80042bc:	08004401 	.word	0x08004401
 80042c0:	08004401 	.word	0x08004401
 80042c4:	08004401 	.word	0x08004401
 80042c8:	08004401 	.word	0x08004401
 80042cc:	08004401 	.word	0x08004401
 80042d0:	080043c9 	.word	0x080043c9
 80042d4:	080043d1 	.word	0x080043d1
 80042d8:	08004401 	.word	0x08004401
 80042dc:	080043f1 	.word	0x080043f1
 80042e0:	080042f5 	.word	0x080042f5
 80042e4:	080043f9 	.word	0x080043f9
 80042e8:	080043d9 	.word	0x080043d9
 80042ec:	080043e1 	.word	0x080043e1
 80042f0:	080043e9 	.word	0x080043e9
    case PE_ErrorRecovery:
      PolicyErrorRecovery(port);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f89d 	bl	8004434 <PolicyErrorRecovery>
      break;
 80042fa:	e096      	b.n	800442a <USBPDPolicyEngine+0x3ca>
      break;
#endif /* FSC_HAVE_SRC */
/* ###################### Sink States  ####################### */
#ifdef FSC_HAVE_SNK
    case PE_SNK_Startup:
      PolicySinkStartup(port);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8a4 	bl	800444a <PolicySinkStartup>
      break;
 8004302:	e092      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Hard_Reset:
      PolicySinkSendHardReset(port);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f96e 	bl	80045e6 <PolicySinkSendHardReset>
      break;
 800430a:	e08e      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Soft_Reset:
      PolicySinkSoftReset(port);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f97b 	bl	8004608 <PolicySinkSoftReset>
      break;
 8004312:	e08a      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Send_Soft_Reset:
      PolicySinkSendSoftReset(port);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f99d 	bl	8004654 <PolicySinkSendSoftReset>
      break;
 800431a:	e086      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Transition_To_Default:
      PolicySinkTransitionDefault(port);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fa17 	bl	8004750 <PolicySinkTransitionDefault>
      break;
 8004322:	e082      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Discovery:
      PolicySinkDiscovery(port);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fb63 	bl	80049f0 <PolicySinkDiscovery>
      break;
 800432a:	e07e      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Wait_For_Capabilities:
      PolicySinkWaitCaps(port);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb77 	bl	8004a20 <PolicySinkWaitCaps>
      break;
 8004332:	e07a      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Evaluate_Capability:
      PolicySinkEvaluateCaps(port);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fc15 	bl	8004b64 <PolicySinkEvaluateCaps>
      break;
 800433a:	e076      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Select_Capability:
      PolicySinkSelectCapability(port);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fded 	bl	8004f1c <PolicySinkSelectCapability>
      break;
 8004342:	e072      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Transition_Sink:
      PolicySinkTransitionSink(port);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 ff6f 	bl	8005228 <PolicySinkTransitionSink>
      break;
 800434a:	e06e      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Ready:
      PolicySinkReady(port);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 ffff 	bl	8005350 <PolicySinkReady>
      break;
 8004352:	e06a      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Give_Sink_Cap:
      PolicySinkGiveSinkCap(port);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f001 fa74 	bl	8005842 <PolicySinkGiveSinkCap>
      break;
 800435a:	e066      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Get_Source_Cap:
      PolicySinkGetSourceCap(port);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f001 fa91 	bl	8005884 <PolicySinkGetSourceCap>
      break;
 8004362:	e062      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_DR_SNK_Get_Sink_Cap:
      PolicySinkGetSinkCap(port);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f001 f9e1 	bl	800572c <PolicySinkGetSinkCap>
      break;
 800436a:	e05e      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_DR_SNK_Give_Source_Cap:
      PolicySinkGiveSourceCap(port);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f001 fb03 	bl	8005978 <PolicySinkGiveSourceCap>
      break;
 8004372:	e05a      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_DRS_UFP_DFP_Send_Swap:
      PolicySinkSendDRSwap(port);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f001 fb0a 	bl	800598e <PolicySinkSendDRSwap>
      break;
 800437a:	e056      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_DRS_UFP_DFP_Evaluate_Swap:
      PolicySinkEvaluateDRSwap(port);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 fbb7 	bl	8005af0 <PolicySinkEvaluateDRSwap>
      break;
 8004382:	e052      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_PRS_SNK_SRC_Send_Swap:
      PolicySinkSendPRSwap(port);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f001 fe43 	bl	8006010 <PolicySinkSendPRSwap>
      break;
 800438a:	e04e      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_PRS_SNK_SRC_Evaluate_Swap:
      PolicySinkEvaluatePRSwap(port);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f001 fe49 	bl	8006024 <PolicySinkEvaluatePRSwap>
      break;
 8004392:	e04a      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_FRS_SNK_SRC_Send_Swap:
      PolicySinkSendFRSwap(port);
      break;
#endif /* FSC_HAVE_FRSWAP */
    case PE_SNK_Send_Not_Supported:
      PolicySendNotSupported(port);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f001 fe50 	bl	800603a <PolicySendNotSupported>
      break;
 800439a:	e046      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Not_Supported_Received:
      PolicyNotSupported(port);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f001 fee0 	bl	8006162 <PolicyNotSupported>
      break;
 80043a2:	e042      	b.n	800442a <USBPDPolicyEngine+0x3ca>
#endif /* FSC_HAVE_SNK */
    case PE_VCS_Send_Swap:
      if (port->policy_is_source_) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d13a      	bne.n	8004424 <USBPDPolicyEngine+0x3c4>
        PolicySourceSendVCONNSwap(port);
#endif /* FSC_HAVE_SRC */
      }
      else {
#ifdef FSC_HAVE_SNK
        PolicySinkSendVCONNSwap(port);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 fc04 	bl	8005bbc <PolicySinkSendVCONNSwap>
#endif /* FSC_HAVE_SNK */
      }
      break;
 80043b4:	e036      	b.n	8004424 <USBPDPolicyEngine+0x3c4>
    case PE_VCS_Evaluate_Swap:
      if (port->policy_is_source_) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d133      	bne.n	8004428 <USBPDPolicyEngine+0x3c8>
        PolicySourceEvaluateVCONNSwap(port);
#endif /* FSC_HAVE_SRC */
      }
      else {
#ifdef FSC_HAVE_SNK
        PolicySinkEvaluateVCONNSwap(port);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f001 fd3b 	bl	8005e3c <PolicySinkEvaluateVCONNSwap>
#endif /* FSC_HAVE_SNK */
      }
      break;
 80043c6:	e02f      	b.n	8004428 <USBPDPolicyEngine+0x3c8>
    case PE_DFP_CBL_Send_Soft_Reset:
      PolicyDFPCBLSendSoftReset(port);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f001 fede 	bl	800618a <PolicyDFPCBLSendSoftReset>
      break;
 80043ce:	e02c      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_DFP_CBL_Send_Cable_Reset:
      PolicyDFPCBLSendReset(port);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f001 ff53 	bl	800627c <PolicyDFPCBLSendReset>
      break;
 80043d6:	e028      	b.n	800442a <USBPDPolicyEngine+0x3ca>
      PolicyGiveManufacturerInfo(port);
      break;
#endif /* FSC_HAVE_EXTENDED */
#ifdef FSC_HAVE_VDM
    case PE_GIVE_VDM:
      PolicyGiveVdm(port);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f005 fc5f 	bl	8009c9c <PolicyGiveVdm>
      break;
 80043de:	e024      	b.n	800442a <USBPDPolicyEngine+0x3ca>
#endif /* FSC_HAVE_VDM */

    case PE_Send_Generic_Cmd:
      PolicySendGenericCommand(port);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f002 f801 	bl	80063e8 <PolicySendGenericCommand>
      break;
 80043e6:	e020      	b.n	800442a <USBPDPolicyEngine+0x3ca>
    case PE_Send_Generic_Data:
      PolicySendGenericData(port);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f002 f872 	bl	80064d2 <PolicySendGenericData>
      break;
 80043ee:	e01c      	b.n	800442a <USBPDPolicyEngine+0x3ca>

    /* ---------- BIST Carrier Mode and Eye Pattern ----- */
    case PE_BIST_Carrier_Mode:     /* BIST Carrier Mode 2 */
      PolicyBISTCarrierMode2(port);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f002 fb37 	bl	8006a64 <PolicyBISTCarrierMode2>
      break;
 80043f6:	e018      	b.n	800442a <USBPDPolicyEngine+0x3ca>

    case PE_BIST_Test_Data:
      PolicyBISTTestData(port);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f002 fbb4 	bl	8006b66 <PolicyBISTTestData>
      break;
 80043fe:	e014      	b.n	800442a <USBPDPolicyEngine+0x3ca>

    default:
#ifdef FSC_HAVE_VDM
      if ((port->policy_state_ >= FIRST_VDM_STATE) &&
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004406:	2b70      	cmp	r3, #112	; 0x70
 8004408:	d908      	bls.n	800441c <USBPDPolicyEngine+0x3bc>
          (port->policy_state_ <= LAST_VDM_STATE) ) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      if ((port->policy_state_ >= FIRST_VDM_STATE) &&
 8004410:	2b98      	cmp	r3, #152	; 0x98
 8004412:	d803      	bhi.n	800441c <USBPDPolicyEngine+0x3bc>
        /* valid VDM state */
        PolicyVdm(port);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f005 fbba 	bl	8009b8e <PolicyVdm>
#endif /* FSC_HAVE_VDM */
      {
        /* invalid state, reset */
        PolicyInvalidState(port);
      }
      break;
 800441a:	e006      	b.n	800442a <USBPDPolicyEngine+0x3ca>
        PolicyInvalidState(port);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f002 fbac 	bl	8006b7a <PolicyInvalidState>
      break;
 8004422:	e002      	b.n	800442a <USBPDPolicyEngine+0x3ca>
      break;
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <USBPDPolicyEngine+0x3ca>
      break;
 8004428:	bf00      	nop
  }
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop

08004434 <PolicyErrorRecovery>:

void PolicyErrorRecovery(struct Port *port)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  SetStateErrorRecovery(port);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f005 f93d 	bl	80096bc <SetStateErrorRecovery>
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <PolicySinkStartup>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void PolicySinkStartup(struct Port *port)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  FSC_U8 i = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]

  /* Reset the protocol layer */
  for (i = SOP_TYPE_SOP; i < NUM_SOP_SUPPORTED; i++) {
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	e007      	b.n	800446c <PolicySinkStartup+0x22>
    ResetProtocolLayer(port, i);
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f003 fd12 	bl	8007e8a <ResetProtocolLayer>
  for (i = SOP_TYPE_SOP; i < NUM_SOP_SUPPORTED; i++) {
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	3301      	adds	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d9f4      	bls.n	800445c <PolicySinkStartup+0x12>
  }

  /* Enable Masks */
  port->registers_.AlertMskL.M_TX_DISC = 1;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	7c13      	ldrb	r3, [r2, #16]
 8004476:	f043 0320 	orr.w	r3, r3, #32
 800447a:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_TXFAIL = 1;
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	7c13      	ldrb	r3, [r2, #16]
 8004480:	f043 0310 	orr.w	r3, r3, #16
 8004484:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_TXSUCC = 1;
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	7c13      	ldrb	r3, [r2, #16]
 800448a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448e:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_RXSTAT = 1;
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	7c13      	ldrb	r3, [r2, #16]
 8004494:	f043 0304 	orr.w	r3, r3, #4
 8004498:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_RXHRDRST = 1;
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	7c13      	ldrb	r3, [r2, #16]
 800449e:	f043 0308 	orr.w	r3, r3, #8
 80044a2:	7413      	strb	r3, [r2, #16]
  WriteRegister(port, regALERTMSKL);
 80044a4:	2112      	movs	r1, #18
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f003 f804 	bl	80074b4 <WriteRegister>

  /* Disable BIST TMODE bit if needed */
  if(port->registers_.TcpcCtrl.BIST_TMODE == 1) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	7d5b      	ldrb	r3, [r3, #21]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <PolicySinkStartup+0x82>
    port->registers_.TcpcCtrl.BIST_TMODE = 0;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	7d53      	ldrb	r3, [r2, #21]
 80044be:	f36f 0341 	bfc	r3, #1, #1
 80044c2:	7553      	strb	r3, [r2, #21]
    WriteRegister(port, regTCPC_CTRL);
 80044c4:	2119      	movs	r1, #25
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f002 fff4 	bl	80074b4 <WriteRegister>
  }

  port->sink_selected_voltage_ = FSC_VBUS_05_V;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  port->usb_pd_contract_.object = 0;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  port->sink_partner_max_power_ = 0;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  port->partner_caps_.object = 0;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
#ifdef FSC_HAVE_FRSWAP
  port->is_fr_swap_ = FALSE;
#endif /* FSC_HAVE_FRSWAP */
  port->is_pr_swap_ = FALSE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  port->is_hard_reset_ = FALSE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  port->policy_is_source_ = FALSE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
  port->registers_.MsgHeadr.POWER_ROLE = port->policy_is_source_;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	b2d9      	uxtb	r1, r3
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8004518:	f361 0300 	bfi	r3, r1, #0, #1
 800451c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  port->registers_.MsgHeadr.DATA_ROLE = port->policy_is_dfp_;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	b2d9      	uxtb	r1, r3
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8004532:	f361 03c3 	bfi	r3, r1, #3, #1
 8004536:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  WriteRegister(port, regMSGHEADR);
 800453a:	212e      	movs	r1, #46	; 0x2e
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f002 ffb9 	bl	80074b4 <WriteRegister>

  /* If coming out of a hard reset, this will signal the Type-C state
   * machine to re-check the VBus level.
   */
  port->registers_.AlertL.I_PORT_PWR = 1;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	7b93      	ldrb	r3, [r2, #14]
 8004546:	f043 0302 	orr.w	r3, r3, #2
 800454a:	7393      	strb	r3, [r2, #14]

  port->caps_counter_ = 0;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  port->collision_counter_ = 0;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  TimerDisable(&port->no_response_timer_);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	33bc      	adds	r3, #188	; 0xbc
 8004560:	4618      	mov	r0, r3
 8004562:	f004 fd6f 	bl	8009044 <TimerDisable>
  TimerDisable(&port->policy_state_timer_);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	338c      	adds	r3, #140	; 0x8c
 800456a:	4618      	mov	r0, r3
 800456c:	f004 fd6a 	bl	8009044 <TimerDisable>
  TimerDisable(&port->pps_timer_);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	33e0      	adds	r3, #224	; 0xe0
 8004574:	4618      	mov	r0, r3
 8004576:	f004 fd65 	bl	8009044 <TimerDisable>
  set_policy_state(port, PE_SNK_Discovery);
 800457a:	210e      	movs	r1, #14
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f003 fe33 	bl	80081e8 <set_policy_state>

#ifdef FSC_HAVE_VDM
  port->vdm_auto_state_ = Attempts_Discov_SOP ? AUTO_VDM_INIT : AUTO_VDM_DONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2207      	movs	r2, #7
 8004586:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  port->mode_entered_ = FALSE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  port->core_svid_info_.num_svids = 0;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  for (i = 0; i < MAX_NUM_SVIDS; i++) {
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e00a      	b.n	80045b6 <PolicySinkStartup+0x16c>
    port->core_svid_info_.svids[i] = 0;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	2200      	movs	r2, #0
 80045ae:	809a      	strh	r2, [r3, #4]
  for (i = 0; i < MAX_NUM_SVIDS; i++) {
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	3301      	adds	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b0b      	cmp	r3, #11
 80045ba:	d9f1      	bls.n	80045a0 <PolicySinkStartup+0x156>
  }
  port->auto_mode_entry_pos_ = -1;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	22ff      	movs	r2, #255	; 0xff
 80045c0:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
  port->auto_mode_entry_pos_ = -1;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	22ff      	movs	r2, #255	; 0xff
 80045c8:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
  port->svid_discvry_done_ = FALSE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  port->svid_discv_idx_ = -1;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045da:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
#endif /* FSC_HAVE_VDM */
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <PolicySinkSendHardReset>:

void PolicySinkSendHardReset(struct Port *port)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  set_policy_state(port, PE_SNK_Hard_Reset);
 80045ee:	2114      	movs	r1, #20
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f003 fdf9 	bl	80081e8 <set_policy_state>

  PolicySendHardReset(port, PE_SNK_Transition_To_Default, FALSE);
 80045f6:	2200      	movs	r2, #0
 80045f8:	2115      	movs	r1, #21
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f001 fea7 	bl	800634e <PolicySendHardReset>
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <PolicySinkSoftReset>:

void PolicySinkSoftReset(struct Port *port)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af04      	add	r7, sp, #16
 800460e:	6078      	str	r0, [r7, #4]
  if (PolicySend(port, CMTAccept, 0, 0,  PE_SNK_Wait_For_Capabilities,
 8004610:	2300      	movs	r3, #0
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	2300      	movs	r3, #0
 8004616:	9302      	str	r3, [sp, #8]
 8004618:	2300      	movs	r3, #0
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	230f      	movs	r3, #15
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	2200      	movs	r2, #0
 8004624:	2103      	movs	r1, #3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f001 ffd6 	bl	80065d8 <PolicySend>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d109      	bne.n	8004646 <PolicySinkSoftReset+0x3e>
                 0, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
#ifdef FSC_HAVE_VDM
    port->discover_id_counter_ = 0;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
#endif /* FSC_HAVE_VDM */
    TimerStart(&port->policy_state_timer_, ktTypeCSinkWaitCap);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	338c      	adds	r3, #140	; 0x8c
 800463e:	4904      	ldr	r1, [pc, #16]	; (8004650 <PolicySinkSoftReset+0x48>)
 8004640:	4618      	mov	r0, r3
 8004642:	f004 fce1 	bl	8009008 <TimerStart>
  }
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	00055730 	.word	0x00055730

08004654 <PolicySinkSendSoftReset>:

void PolicySinkSendSoftReset(struct Port *port)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af04      	add	r7, sp, #16
 800465a:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <PolicySinkSendSoftReset+0x18>
 8004666:	2b01      	cmp	r3, #1
 8004668:	d01d      	beq.n	80046a6 <PolicySinkSendSoftReset+0x52>
 800466a:	e063      	b.n	8004734 <PolicySinkSendSoftReset+0xe0>
    case 0:
      if (PolicySend(port, CMTSoftReset, 0, 0, PE_SNK_Send_Soft_Reset,
 800466c:	2300      	movs	r3, #0
 800466e:	9303      	str	r3, [sp, #12]
 8004670:	2300      	movs	r3, #0
 8004672:	9302      	str	r3, [sp, #8]
 8004674:	2301      	movs	r3, #1
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	231a      	movs	r3, #26
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2300      	movs	r3, #0
 800467e:	2200      	movs	r2, #0
 8004680:	210d      	movs	r1, #13
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f001 ffa8 	bl	80065d8 <PolicySend>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d157      	bne.n	800473e <PolicySinkSendSoftReset+0xea>
                     1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	338c      	adds	r3, #140	; 0x8c
 8004692:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004696:	4618      	mov	r0, r3
 8004698:	f004 fcb6 	bl	8009008 <TimerStart>
        port->waiting_on_hr_ = TRUE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
      }
      break;
 80046a4:	e04b      	b.n	800473e <PolicySinkSendSoftReset+0xea>
    case 1:
      if (port->protocol_msg_rx_) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d02b      	beq.n	8004708 <PolicySinkSendSoftReset+0xb4>
        TimerDisable(&port->policy_state_timer_);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	338c      	adds	r3, #140	; 0x8c
 80046b4:	4618      	mov	r0, r3
 80046b6:	f004 fcc5 	bl	8009044 <TimerDisable>
        port->protocol_msg_rx_ = FALSE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        port->pd_tx_status_ = txIdle;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        if ((port->policy_rx_header_.NumDataObjects == 0) &&
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80046d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d133      	bne.n	8004742 <PolicySinkSendSoftReset+0xee>
            (port->policy_rx_header_.MessageType == CMTAccept)) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	b2db      	uxtb	r3, r3
        if ((port->policy_rx_header_.NumDataObjects == 0) &&
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d12b      	bne.n	8004742 <PolicySinkSendSoftReset+0xee>
#ifdef FSC_HAVE_VDM
          port->discover_id_counter_ = 0;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
#endif /* FSC_HAVE_VDM */
          set_policy_state(port, PE_SNK_Wait_For_Capabilities);
 80046f2:	210f      	movs	r1, #15
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f003 fd77 	bl	80081e8 <set_policy_state>
          TimerStart(&port->policy_state_timer_, ktTypeCSinkWaitCap);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	338c      	adds	r3, #140	; 0x8c
 80046fe:	4913      	ldr	r1, [pc, #76]	; (800474c <PolicySinkSendSoftReset+0xf8>)
 8004700:	4618      	mov	r0, r3
 8004702:	f004 fc81 	bl	8009008 <TimerStart>
        PolicySinkSendHardReset(port);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8004706:	e01c      	b.n	8004742 <PolicySinkSendSoftReset+0xee>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	338c      	adds	r3, #140	; 0x8c
 800470c:	4618      	mov	r0, r3
 800470e:	f004 fcc5 	bl	800909c <TimerExpired>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <PolicySinkSendSoftReset+0xd6>
        TimerDisable(&port->policy_state_timer_);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	338c      	adds	r3, #140	; 0x8c
 800471c:	4618      	mov	r0, r3
 800471e:	f004 fc91 	bl	8009044 <TimerDisable>
        PolicySinkSendHardReset(port);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff ff5f 	bl	80045e6 <PolicySinkSendHardReset>
      break;
 8004728:	e00b      	b.n	8004742 <PolicySinkSendSoftReset+0xee>
        port->idle_ = TRUE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8004732:	e006      	b.n	8004742 <PolicySinkSendSoftReset+0xee>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8004734:	21a6      	movs	r1, #166	; 0xa6
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f003 fd56 	bl	80081e8 <set_policy_state>
      break;
 800473c:	e002      	b.n	8004744 <PolicySinkSendSoftReset+0xf0>
      break;
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <PolicySinkSendSoftReset+0xf0>
      break;
 8004742:	bf00      	nop
  }
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	00055730 	.word	0x00055730

08004750 <PolicySinkTransitionDefault>:

void PolicySinkTransitionDefault(struct Port *port)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800475e:	2b01      	cmp	r3, #1
 8004760:	d079      	beq.n	8004856 <PolicySinkTransitionDefault+0x106>
 8004762:	2b02      	cmp	r3, #2
 8004764:	f000 80ca 	beq.w	80048fc <PolicySinkTransitionDefault+0x1ac>
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 8134 	bne.w	80049d6 <PolicySinkTransitionDefault+0x286>
    case 0:
      port->is_hard_reset_ = TRUE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      port->policy_has_contract_ = FALSE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

      DPM_Reset(port);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fb47 	bl	8003e12 <DPM_Reset>

      /* Disable auto-discharge system */
      port->registers_.PwrCtrl.AUTO_DISCH = 0;
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	7e13      	ldrb	r3, [r2, #24]
 8004788:	f36f 1304 	bfc	r3, #4, #1
 800478c:	7613      	strb	r3, [r2, #24]
      port->registers_.PwrCtrl.DIS_VALARM = 0;
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	7e13      	ldrb	r3, [r2, #24]
 8004792:	f36f 1345 	bfc	r3, #5, #1
 8004796:	7613      	strb	r3, [r2, #24]
      WriteRegister(port, regPWRCTRL);
 8004798:	211c      	movs	r1, #28
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f002 fe8a 	bl	80074b4 <WriteRegister>

      /* Timeout (Vbus Off) handling required for Type-C only connections */
      TimerStart(&port->policy_state_timer_, ktPSHardResetMax + ktSafe0V);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	338c      	adds	r3, #140	; 0x8c
 80047a4:	4990      	ldr	r1, [pc, #576]	; (80049e8 <PolicySinkTransitionDefault+0x298>)
 80047a6:	4618      	mov	r0, r3
 80047a8:	f004 fc2e 	bl	8009008 <TimerStart>

      if (port->policy_is_dfp_) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d014      	beq.n	80047e0 <PolicySinkTransitionDefault+0x90>
        port->policy_is_dfp_ = FALSE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        port->registers_.MsgHeadr.DATA_ROLE = port->policy_is_dfp_;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	b2d9      	uxtb	r1, r3
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80047d0:	f361 03c3 	bfi	r3, r1, #3, #1
 80047d4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
        WriteRegister(port, regMSGHEADR);
 80047d8:	212e      	movs	r1, #46	; 0x2e
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f002 fe6a 	bl	80074b4 <WriteRegister>
      }

      /* Disable VConn source */
      if (port->is_vconn_source_) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <PolicySinkTransitionDefault+0xb4>
        port->registers_.PwrCtrl.EN_VCONN = 0;
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	7e13      	ldrb	r3, [r2, #24]
 80047ee:	f36f 0300 	bfc	r3, #0, #1
 80047f2:	7613      	strb	r3, [r2, #24]
        WriteRegister(port, regPWRCTRL);
 80047f4:	211c      	movs	r1, #28
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f002 fe5c 	bl	80074b4 <WriteRegister>
        port->is_vconn_source_ = FALSE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      }

      /* Disable VBus sinking during the reset */
      SendCommand(port, DisableSinkVbus);
 8004804:	2144      	movs	r1, #68	; 0x44
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f002 febc 	bl	8007584 <SendCommand>

      /* Set up alert to wait for vSafe0V */
      SetVBusAlarm(port, FSC_VSAFE0V, FSC_VBUS_LVL_HIGHEST);
 800480c:	f44f 7252 	mov.w	r2, #840	; 0x348
 8004810:	2120      	movs	r1, #32
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f003 f824 	bl	8007860 <SetVBusAlarm>

      ClearInterrupt(port, regALERTL, MSK_I_ALARM_LO_ALL);
 8004818:	22ff      	movs	r2, #255	; 0xff
 800481a:	2110      	movs	r1, #16
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f002 fe94 	bl	800754a <ClearInterrupt>
      ClearInterrupt(port, regALERTH, MSK_I_ALARM_HI_ALL);
 8004822:	228f      	movs	r2, #143	; 0x8f
 8004824:	2111      	movs	r1, #17
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f002 fe8f 	bl	800754a <ClearInterrupt>

      port->registers_.AlertMskH.M_VBUS_ALRM_LO = 1;
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	7c53      	ldrb	r3, [r2, #17]
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	7453      	strb	r3, [r2, #17]
      WriteRegister(port, regALERTMSKH);
 8004836:	2113      	movs	r1, #19
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f002 fe3b 	bl	80074b4 <WriteRegister>
#ifdef FSC_HAVE_DP
      DP_Initialize(port);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fe fe1a 	bl	8003478 <DP_Initialize>
#endif /* FSC_HAVE_DP */
      port->policy_subindex_++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800484a:	3301      	adds	r3, #1
 800484c:	b2da      	uxtb	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 8004854:	e0c4      	b.n	80049e0 <PolicySinkTransitionDefault+0x290>
    case 1:
      if (port->registers_.AlertH.I_VBUS_ALRM_LO) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	7bdb      	ldrb	r3, [r3, #15]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d034      	beq.n	80048ce <PolicySinkTransitionDefault+0x17e>
        /* We've reached vSafe0V */
        ClearInterrupt(port, regALERTH, MSK_I_VBUS_ALRM_LO);
 8004864:	2201      	movs	r2, #1
 8004866:	2111      	movs	r1, #17
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f002 fe6e 	bl	800754a <ClearInterrupt>

        /* Set up to wait for vSafe5V */
        SetVBusAlarm(port, 0, FSC_VSAFE5V_L);
 800486e:	22be      	movs	r2, #190	; 0xbe
 8004870:	2100      	movs	r1, #0
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f002 fff4 	bl	8007860 <SetVBusAlarm>

        ClearInterrupt(port, regALERTL, MSK_I_VBUS_ALRM_HI | MSK_I_PORT_PWR);
 8004878:	2282      	movs	r2, #130	; 0x82
 800487a:	2110      	movs	r1, #16
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f002 fe64 	bl	800754a <ClearInterrupt>
        ClearInterrupt(port, regALERTH, MSK_I_VBUS_ALRM_LO);
 8004882:	2201      	movs	r2, #1
 8004884:	2111      	movs	r1, #17
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f002 fe5f 	bl	800754a <ClearInterrupt>

        port->registers_.AlertMskH.M_VBUS_ALRM_LO = 0;
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	7c53      	ldrb	r3, [r2, #17]
 8004890:	f36f 0300 	bfc	r3, #0, #1
 8004894:	7453      	strb	r3, [r2, #17]
        WriteRegister(port, regALERTMSKH);
 8004896:	2113      	movs	r1, #19
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f002 fe0b 	bl	80074b4 <WriteRegister>
        port->registers_.AlertMskL.M_VBUS_ALRM_HI = 1;
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	7c13      	ldrb	r3, [r2, #16]
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	7413      	strb	r3, [r2, #16]
        WriteRegister(port, regALERTMSKL);
 80048a8:	2112      	movs	r1, #18
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f002 fe02 	bl	80074b4 <WriteRegister>

        /* Timeout (Vbus On) handling required for Type-C only connections */
        TimerStart(&port->policy_state_timer_, ktSrcRecoverMax + ktSrcTurnOn);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	338c      	adds	r3, #140	; 0x8c
 80048b4:	494d      	ldr	r1, [pc, #308]	; (80049ec <PolicySinkTransitionDefault+0x29c>)
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 fba6 	bl	8009008 <TimerStart>

        port->policy_subindex_++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80048c2:	3301      	adds	r3, #1
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        set_policy_state(port, PE_SNK_Startup);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 80048cc:	e088      	b.n	80049e0 <PolicySinkTransitionDefault+0x290>
      else if (TimerExpired(&port->policy_state_timer_)) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	338c      	adds	r3, #140	; 0x8c
 80048d2:	4618      	mov	r0, r3
 80048d4:	f004 fbe2 	bl	800909c <TimerExpired>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <PolicySinkTransitionDefault+0x1a2>
        TimerDisable(&port->policy_state_timer_);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	338c      	adds	r3, #140	; 0x8c
 80048e2:	4618      	mov	r0, r3
 80048e4:	f004 fbae 	bl	8009044 <TimerDisable>
        set_policy_state(port, PE_SNK_Startup);
 80048e8:	210d      	movs	r1, #13
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f003 fc7c 	bl	80081e8 <set_policy_state>
      break;
 80048f0:	e076      	b.n	80049e0 <PolicySinkTransitionDefault+0x290>
        port->idle_ = TRUE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 80048fa:	e071      	b.n	80049e0 <PolicySinkTransitionDefault+0x290>
    case 2:
      if (port->registers_.AlertL.I_VBUS_ALRM_HI) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7b9b      	ldrb	r3, [r3, #14]
 8004900:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d04e      	beq.n	80049a8 <PolicySinkTransitionDefault+0x258>
        ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 800490a:	2202      	movs	r2, #2
 800490c:	2110      	movs	r1, #16
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f002 fe1b 	bl	800754a <ClearInterrupt>
        ClearInterrupt(port, regALERTL, MSK_I_VBUS_ALRM_HI);
 8004914:	2280      	movs	r2, #128	; 0x80
 8004916:	2110      	movs	r1, #16
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f002 fe16 	bl	800754a <ClearInterrupt>

        /* Re-enable sinking VBus and discharge system */
        SendCommand(port, SinkVbus);
 800491e:	2155      	movs	r1, #85	; 0x55
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f002 fe2f 	bl	8007584 <SendCommand>

        SetVBusSnkDisc(port, FSC_VSAFE5V_DISC);
 8004926:	2192      	movs	r1, #146	; 0x92
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f002 ff5f 	bl	80077ec <SetVBusSnkDisc>

        port->registers_.AlertMskL.M_VBUS_ALRM_HI = 0;
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	7c13      	ldrb	r3, [r2, #16]
 8004932:	f36f 13c7 	bfc	r3, #7, #1
 8004936:	7413      	strb	r3, [r2, #16]
        port->registers_.AlertMskL.M_PORT_PWR = 1;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	7c13      	ldrb	r3, [r2, #16]
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	7413      	strb	r3, [r2, #16]
        WriteRegister(port, regALERTMSKL);
 8004942:	2112      	movs	r1, #18
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f002 fdb5 	bl	80074b4 <WriteRegister>
        port->registers_.AlertMskH.M_VBUS_SNK_DISC = 1;
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	7c53      	ldrb	r3, [r2, #17]
 800494e:	f043 0308 	orr.w	r3, r3, #8
 8004952:	7453      	strb	r3, [r2, #17]
        WriteRegister(port, regALERTMSKH);
 8004954:	2113      	movs	r1, #19
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f002 fdac 	bl	80074b4 <WriteRegister>

        ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 800495c:	2202      	movs	r2, #2
 800495e:	2110      	movs	r1, #16
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f002 fdf2 	bl	800754a <ClearInterrupt>
        ClearInterrupt(port, regALERTH, MSK_I_VBUS_SNK_DISC);
 8004966:	2208      	movs	r2, #8
 8004968:	2111      	movs	r1, #17
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f002 fded 	bl	800754a <ClearInterrupt>

        port->registers_.PwrCtrl.AUTO_DISCH = 1;
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	7e13      	ldrb	r3, [r2, #24]
 8004974:	f043 0310 	orr.w	r3, r3, #16
 8004978:	7613      	strb	r3, [r2, #24]
        port->registers_.PwrCtrl.DIS_VALARM = 1;
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	7e13      	ldrb	r3, [r2, #24]
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	7613      	strb	r3, [r2, #24]
        WriteRegister(port, regPWRCTRL);
 8004984:	211c      	movs	r1, #28
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f002 fd94 	bl	80074b4 <WriteRegister>

        set_policy_state(port, PE_SNK_Startup);
 800498c:	210d      	movs	r1, #13
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f003 fc2a 	bl	80081e8 <set_policy_state>
        port->pd_tx_status_ = txIdle;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

        TimerDisable(&port->policy_state_timer_);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	338c      	adds	r3, #140	; 0x8c
 80049a0:	4618      	mov	r0, r3
 80049a2:	f004 fb4f 	bl	8009044 <TimerDisable>
        set_policy_state(port, PE_ErrorRecovery);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 80049a6:	e01b      	b.n	80049e0 <PolicySinkTransitionDefault+0x290>
      else if (TimerExpired(&port->policy_state_timer_)) {
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	338c      	adds	r3, #140	; 0x8c
 80049ac:	4618      	mov	r0, r3
 80049ae:	f004 fb75 	bl	800909c <TimerExpired>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <PolicySinkTransitionDefault+0x27c>
        TimerDisable(&port->policy_state_timer_);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	338c      	adds	r3, #140	; 0x8c
 80049bc:	4618      	mov	r0, r3
 80049be:	f004 fb41 	bl	8009044 <TimerDisable>
        set_policy_state(port, PE_ErrorRecovery);
 80049c2:	21a6      	movs	r1, #166	; 0xa6
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f003 fc0f 	bl	80081e8 <set_policy_state>
      break;
 80049ca:	e009      	b.n	80049e0 <PolicySinkTransitionDefault+0x290>
        port->idle_ = TRUE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 80049d4:	e004      	b.n	80049e0 <PolicySinkTransitionDefault+0x290>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 80049d6:	21a6      	movs	r1, #166	; 0xa6
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f003 fc05 	bl	80081e8 <set_policy_state>
      break;
 80049de:	bf00      	nop
  }
}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	000a73c8 	.word	0x000a73c8
 80049ec:	00137478 	.word	0x00137478

080049f0 <PolicySinkDiscovery>:

void PolicySinkDiscovery(struct Port *port)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  set_policy_state(port, PE_SNK_Wait_For_Capabilities);
 80049f8:	210f      	movs	r1, #15
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f003 fbf4 	bl	80081e8 <set_policy_state>
  port->is_hard_reset_ = FALSE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  TimerStart(&port->policy_state_timer_, ktTypeCSinkWaitCap);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	338c      	adds	r3, #140	; 0x8c
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <PolicySinkDiscovery+0x2c>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f004 fafa 	bl	8009008 <TimerStart>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	00055730 	.word	0x00055730

08004a20 <PolicySinkWaitCaps>:

void PolicySinkWaitCaps(struct Port *port)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if (port->protocol_msg_rx_) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d040      	beq.n	8004ab4 <PolicySinkWaitCaps+0x94>
    port->protocol_msg_rx_ = FALSE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8004a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01f      	beq.n	8004a8a <PolicySinkWaitCaps+0x6a>
        (port->policy_rx_header_.MessageType == DMTSourceCapabilities)) {
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	b2db      	uxtb	r3, r3
    if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d117      	bne.n	8004a8a <PolicySinkWaitCaps+0x6a>
      UpdateCapabilitiesRx(port, TRUE);
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f001 fc26 	bl	80062ae <UpdateCapabilitiesRx>
      set_policy_state(port, PE_SNK_Evaluate_Capability);
 8004a62:	2110      	movs	r1, #16
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f003 fbbf 	bl	80081e8 <set_policy_state>
      TimerDisable(&port->policy_state_timer_);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	338c      	adds	r3, #140	; 0x8c
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 fae8 	bl	8009044 <TimerDisable>
      DPM_SetSOPVersion(port, port->policy_rx_header_.SpecRevision);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8004a7a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fa1d 	bl	8003ec2 <DPM_SetSOPVersion>
 8004a88:	e067      	b.n	8004b5a <PolicySinkWaitCaps+0x13a>
    }
    else if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8004a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d15f      	bne.n	8004b5a <PolicySinkWaitCaps+0x13a>
             (port->policy_rx_header_.MessageType == CMTSoftReset)) {
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	b2db      	uxtb	r3, r3
    else if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8004aa6:	2b0d      	cmp	r3, #13
 8004aa8:	d157      	bne.n	8004b5a <PolicySinkWaitCaps+0x13a>
      set_policy_state(port, PE_SNK_Soft_Reset);
 8004aaa:	211b      	movs	r1, #27
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f003 fb9b 	bl	80081e8 <set_policy_state>
    TimerDisable(&port->no_response_timer_);
  }
  else {
    port->idle_ = TRUE;
  }
}
 8004ab2:	e052      	b.n	8004b5a <PolicySinkWaitCaps+0x13a>
  else if ((port->policy_has_contract_ == TRUE) &&
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d116      	bne.n	8004aec <PolicySinkWaitCaps+0xcc>
           TimerExpired(&port->no_response_timer_) &&
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	33bc      	adds	r3, #188	; 0xbc
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f004 faea 	bl	800909c <TimerExpired>
 8004ac8:	4603      	mov	r3, r0
  else if ((port->policy_has_contract_ == TRUE) &&
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <PolicySinkWaitCaps+0xcc>
           (port->hard_reset_counter_ > HARD_RESET_COUNT)) {
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
           TimerExpired(&port->no_response_timer_) &&
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d909      	bls.n	8004aec <PolicySinkWaitCaps+0xcc>
    TimerDisable(&port->no_response_timer_);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	33bc      	adds	r3, #188	; 0xbc
 8004adc:	4618      	mov	r0, r3
 8004ade:	f004 fab1 	bl	8009044 <TimerDisable>
    set_policy_state(port, PE_ErrorRecovery);
 8004ae2:	21a6      	movs	r1, #166	; 0xa6
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f003 fb7f 	bl	80081e8 <set_policy_state>
 8004aea:	e036      	b.n	8004b5a <PolicySinkWaitCaps+0x13a>
  else if (TimerExpired(&port->policy_state_timer_) &&
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	338c      	adds	r3, #140	; 0x8c
 8004af0:	4618      	mov	r0, r3
 8004af2:	f004 fad3 	bl	800909c <TimerExpired>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <PolicySinkWaitCaps+0xf8>
           (port->hard_reset_counter_ <= HARD_RESET_COUNT)) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
  else if (TimerExpired(&port->policy_state_timer_) &&
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d808      	bhi.n	8004b18 <PolicySinkWaitCaps+0xf8>
    TimerDisable(&port->policy_state_timer_);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	338c      	adds	r3, #140	; 0x8c
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f004 fa9a 	bl	8009044 <TimerDisable>
    PolicySinkSendHardReset(port);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fd68 	bl	80045e6 <PolicySinkSendHardReset>
 8004b16:	e020      	b.n	8004b5a <PolicySinkWaitCaps+0x13a>
  else if ((port->policy_has_contract_ == FALSE) &&
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <PolicySinkWaitCaps+0x130>
           TimerExpired(&port->no_response_timer_) &&
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	33bc      	adds	r3, #188	; 0xbc
 8004b26:	4618      	mov	r0, r3
 8004b28:	f004 fab8 	bl	800909c <TimerExpired>
 8004b2c:	4603      	mov	r3, r0
  else if ((port->policy_has_contract_ == FALSE) &&
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00e      	beq.n	8004b50 <PolicySinkWaitCaps+0x130>
           (port->hard_reset_counter_ > HARD_RESET_COUNT)) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
           TimerExpired(&port->no_response_timer_) &&
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d909      	bls.n	8004b50 <PolicySinkWaitCaps+0x130>
    port->idle_ = TRUE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    TimerDisable(&port->no_response_timer_);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	33bc      	adds	r3, #188	; 0xbc
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f004 fa7b 	bl	8009044 <TimerDisable>
 8004b4e:	e004      	b.n	8004b5a <PolicySinkWaitCaps+0x13a>
    port->idle_ = TRUE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8004b58:	e7ff      	b.n	8004b5a <PolicySinkWaitCaps+0x13a>
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <PolicySinkEvaluateCaps>:

void PolicySinkEvaluateCaps(struct Port *port)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* All math here should be in mv, ma, mw.  Conversion done on incoming
   * and outgoing values.
   */
  FSC_U8 i = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FSC_S32 req_position = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
  FSC_U32 obj_voltage = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
  FSC_U32 obj_current = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
  FSC_U32 sel_voltage = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
  FSC_U32 max_power = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
  FSC_U32 obj_power = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
  FSC_U32 req_current = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]

  TimerDisable(&port->no_response_timer_);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	33bc      	adds	r3, #188	; 0xbc
 8004b92:	4618      	mov	r0, r3
 8004b94:	f004 fa56 	bl	8009044 <TimerDisable>
  port->hard_reset_counter_ = 0;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151

  /* Select the highest power object that we are compatible with */
  for (i = 0; i < port->caps_header_received_.NumDataObjects; i++) {
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ba6:	e0a6      	b.n	8004cf6 <PolicySinkEvaluateCaps+0x192>
    switch (port->caps_received_[i].PDO.SupplyType) {
 8004ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	337e      	adds	r3, #126	; 0x7e
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	79db      	ldrb	r3, [r3, #7]
 8004bb6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d87e      	bhi.n	8004cbe <PolicySinkEvaluateCaps+0x15a>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <PolicySinkEvaluateCaps+0x64>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004cb3 	.word	0x08004cb3
 8004bd0:	08004c37 	.word	0x08004c37
 8004bd4:	08004cb9 	.word	0x08004cb9
      case pdoTypeFixed:
        obj_voltage = port->caps_received_[i].FPDOSupply.Voltage * 50;
 8004bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	337e      	adds	r3, #126	; 0x7e
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	2332      	movs	r3, #50	; 0x32
 8004bf0:	fb03 f302 	mul.w	r3, r3, r2
 8004bf4:	61fb      	str	r3, [r7, #28]
        if (obj_voltage > port->sink_request_max_voltage_) {
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d871      	bhi.n	8004ce6 <PolicySinkEvaluateCaps+0x182>
          continue;
        }
        else {
          obj_current = port->caps_received_[i].FPDOSupply.MaxCurrent * 10;
 8004c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	337e      	adds	r3, #126	; 0x7e
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	889b      	ldrh	r3, [r3, #4]
 8004c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	61bb      	str	r3, [r7, #24]
          obj_power = (obj_voltage * obj_current) / 1000;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	4ab9      	ldr	r2, [pc, #740]	; (8004f10 <PolicySinkEvaluateCaps+0x3ac>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004c34:	e046      	b.n	8004cc4 <PolicySinkEvaluateCaps+0x160>
      case pdoTypeVariable:
        obj_voltage = port->caps_received_[i].VPDO.MaxVoltage * 50;
 8004c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	337e      	adds	r3, #126	; 0x7e
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	88db      	ldrh	r3, [r3, #6]
 8004c44:	f3c3 1309 	ubfx	r3, r3, #4, #10
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2332      	movs	r3, #50	; 0x32
 8004c4e:	fb03 f302 	mul.w	r3, r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]
        if (obj_voltage > port->sink_request_max_voltage_) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d844      	bhi.n	8004cea <PolicySinkEvaluateCaps+0x186>
          continue;
        }
        else {
          obj_voltage = port->caps_received_[i].VPDO.MinVoltage * 50;
 8004c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	337e      	adds	r3, #126	; 0x7e
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	2332      	movs	r3, #50	; 0x32
 8004c78:	fb03 f302 	mul.w	r3, r3, r2
 8004c7c:	61fb      	str	r3, [r7, #28]
          obj_current = port->caps_received_[i].VPDO.MaxCurrent * 10;
 8004c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	337e      	adds	r3, #126	; 0x7e
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	889b      	ldrh	r3, [r3, #4]
 8004c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
          obj_power = (obj_voltage * obj_current) / 1000;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	4a9a      	ldr	r2, [pc, #616]	; (8004f10 <PolicySinkEvaluateCaps+0x3ac>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004cb0:	e008      	b.n	8004cc4 <PolicySinkEvaluateCaps+0x160>
      case pdoTypeBattery:
        /* Ignore battery powered sources (for now) */
        obj_power = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
        break;
 8004cb6:	e005      	b.n	8004cc4 <PolicySinkEvaluateCaps+0x160>
      case pdoTypeAugmented:
        //obj_voltage = port->caps_received_[i].PPSDOSupply.MaxVoltage * 100;
        //obj_current = port->caps_received_[i].PPSDOSupply.MaxCurrent * 50;
        //obj_power = (obj_voltage * obj_current) / 1000;
        /* Set object power to 0 to ignore Augmented/PPS sources (for now) */
        obj_power = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
        break;
 8004cbc:	e002      	b.n	8004cc4 <PolicySinkEvaluateCaps+0x160>
      default:
        /* Ignore undefined/unsupported supply types */
        obj_power = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
        break;
 8004cc2:	bf00      	nop
    }

    /* Track object with highest power */
    if (obj_power >= max_power) {
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d30f      	bcc.n	8004cec <PolicySinkEvaluateCaps+0x188>
      max_power = obj_power;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	613b      	str	r3, [r7, #16]
      sel_voltage = obj_voltage;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	617b      	str	r3, [r7, #20]
      req_position = i + 1;
 8004cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd8:	3301      	adds	r3, #1
 8004cda:	623b      	str	r3, [r7, #32]

      port->sink_partner_max_power_ = max_power;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 8004ce4:	e002      	b.n	8004cec <PolicySinkEvaluateCaps+0x188>
          continue;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <PolicySinkEvaluateCaps+0x188>
          continue;
 8004cea:	bf00      	nop
  for (i = 0; i < port->caps_header_received_.NumDataObjects; i++) {
 8004cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 8004cfc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	f4ff af4d 	bcc.w	8004ba8 <PolicySinkEvaluateCaps+0x44>
    }
  }

  /* If another port is sinking the highest power available, we'll just */
  /* request a basic low power PDO here. */
  if (port->sink_request_low_power_) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02d      	beq.n	8004d74 <PolicySinkEvaluateCaps+0x210>
    if (port->caps_received_[0].PDO.SupplyType == pdoTypeFixed) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8004d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10b      	bne.n	8004d40 <PolicySinkEvaluateCaps+0x1dc>
      sel_voltage = port->caps_received_[0].FPDOSupply.Voltage * 50;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8004d2e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	2332      	movs	r3, #50	; 0x32
 8004d38:	fb03 f302 	mul.w	r3, r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e012      	b.n	8004d66 <PolicySinkEvaluateCaps+0x202>
    }
    else if (port->caps_received_[0].PDO.SupplyType == pdoTypeVariable){
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8004d46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b80      	cmp	r3, #128	; 0x80
 8004d4e:	d10a      	bne.n	8004d66 <PolicySinkEvaluateCaps+0x202>
      sel_voltage = port->caps_received_[0].VPDO.MaxVoltage * 50;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 8004d56:	f3c3 1309 	ubfx	r3, r3, #4, #10
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2332      	movs	r3, #50	; 0x32
 8004d60:	fb03 f302 	mul.w	r3, r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
    else {
      /* Skipping battery sources for now... */
    }

    /* Make sure the first position is a 5V object */
    if (sel_voltage == (PD_05_V * 50)) {
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d101      	bne.n	8004d74 <PolicySinkEvaluateCaps+0x210>
      req_position = 1;
 8004d70:	2301      	movs	r3, #1
 8004d72:	623b      	str	r3, [r7, #32]
    }
  }

  if ((req_position > 0) && (sel_voltage > 0)) {
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f340 80b3 	ble.w	8004ee2 <PolicySinkEvaluateCaps+0x37e>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80af 	beq.w	8004ee2 <PolicySinkEvaluateCaps+0x37e>
    port->partner_caps_.object = port->caps_received_[0].object;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    port->sink_request_.FVRDO.ObjectPosition = req_position & 0x07;
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	b2d9      	uxtb	r1, r3
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8004d9e:	f361 1306 	bfi	r3, r1, #4, #3
 8004da2:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    port->sink_request_.FVRDO.GiveBack = port->sink_goto_min_compatible_;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	b2d9      	uxtb	r1, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8004db8:	f361 03c3 	bfi	r3, r1, #3, #1
 8004dbc:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    port->sink_request_.FVRDO.NoUSBSuspend = port->sink_usb_suspend_compatible_;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	b2d9      	uxtb	r1, r3
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8004dd2:	f361 0300 	bfi	r3, r1, #0, #1
 8004dd6:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    port->sink_request_.FVRDO.USBCommCapable = port->sink_usb_comm_capable_;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 323b 	ldrb.w	r3, [r3, #571]	; 0x23b
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	b2d9      	uxtb	r1, r3
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8004dec:	f361 0341 	bfi	r3, r1, #1, #1
 8004df0:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    req_current = (port->sink_request_op_power_ * 1000) / sel_voltage;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8004dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dfe:	fb02 f203 	mul.w	r2, r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	60bb      	str	r3, [r7, #8]
    /* Set the current based on the selected voltage (in 10mA units) */
    port->sink_request_.FVRDO.OpCurrent = ((req_current / 10) & 0x3FF);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a41      	ldr	r2, [pc, #260]	; (8004f14 <PolicySinkEvaluateCaps+0x3b0>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	08db      	lsrs	r3, r3, #3
 8004e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e18:	b299      	uxth	r1, r3
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 8004e20:	f361 2393 	bfi	r3, r1, #10, #10
 8004e24:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
    req_current = (port->sink_request_max_power_ * 1000) / sel_voltage;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e32:	fb02 f203 	mul.w	r2, r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	60bb      	str	r3, [r7, #8]
    /* Set the min/max current based on the selected voltage (in 10mA units) */
    port->sink_request_.FVRDO.MinMaxCurrent = ((req_current / 10) & 0x3FF);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4a34      	ldr	r2, [pc, #208]	; (8004f14 <PolicySinkEvaluateCaps+0x3b0>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	08db      	lsrs	r3, r3, #3
 8004e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e4c:	b299      	uxth	r1, r3
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	f8b2 321c 	ldrh.w	r3, [r2, #540]	; 0x21c
 8004e54:	f361 0309 	bfi	r3, r1, #0, #10
 8004e58:	f8a2 321c 	strh.w	r3, [r2, #540]	; 0x21c
    if (port->sink_goto_min_compatible_) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <PolicySinkEvaluateCaps+0x312>
      port->sink_request_.FVRDO.CapabilityMismatch = FALSE;
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8004e6c:	f36f 0382 	bfc	r3, #2, #1
 8004e70:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
 8004e74:	e030      	b.n	8004ed8 <PolicySinkEvaluateCaps+0x374>
    }
    else {
      if (obj_current < req_current) {
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d225      	bcs.n	8004eca <PolicySinkEvaluateCaps+0x366>
        /* Indicate that we need more power */
        port->sink_request_.FVRDO.CapabilityMismatch = TRUE;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8004e84:	f043 0304 	orr.w	r3, r3, #4
 8004e88:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
        port->sink_request_.FVRDO.MinMaxCurrent = obj_current / 10;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <PolicySinkEvaluateCaps+0x3b0>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e9a:	b299      	uxth	r1, r3
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	f8b2 321c 	ldrh.w	r3, [r2, #540]	; 0x21c
 8004ea2:	f361 0309 	bfi	r3, r1, #0, #10
 8004ea6:	f8a2 321c 	strh.w	r3, [r2, #540]	; 0x21c
        port->sink_request_.FVRDO.OpCurrent = obj_current / 10;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <PolicySinkEvaluateCaps+0x3b0>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	08db      	lsrs	r3, r3, #3
 8004eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eb8:	b299      	uxth	r1, r3
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 8004ec0:	f361 2393 	bfi	r3, r1, #10, #10
 8004ec4:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8004ec8:	e006      	b.n	8004ed8 <PolicySinkEvaluateCaps+0x374>
      }
      else {
        port->sink_request_.FVRDO.CapabilityMismatch = FALSE;
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8004ed0:	f36f 0382 	bfc	r3, #2, #1
 8004ed4:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
      }
    }
    set_policy_state(port, PE_SNK_Select_Capability);
 8004ed8:	2111      	movs	r1, #17
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f003 f984 	bl	80081e8 <set_policy_state>
 8004ee0:	e011      	b.n	8004f06 <PolicySinkEvaluateCaps+0x3a2>
  }
  else {
    /* TODO: For now, we just go back to the wait state instead of */
    /* sending a reject or reset (may change in future) */
    set_policy_state(port, PE_SNK_Wait_For_Capabilities);
 8004ee2:	210f      	movs	r1, #15
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f003 f97f 	bl	80081e8 <set_policy_state>
    TimerStart(&port->policy_state_timer_, ktTypeCSinkWaitCap);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	338c      	adds	r3, #140	; 0x8c
 8004eee:	490a      	ldr	r1, [pc, #40]	; (8004f18 <PolicySinkEvaluateCaps+0x3b4>)
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f004 f889 	bl	8009008 <TimerStart>
    port->idle_ = TRUE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    port->sink_partner_max_power_ = 0;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  }
}
 8004f06:	bf00      	nop
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	10624dd3 	.word	0x10624dd3
 8004f14:	cccccccd 	.word	0xcccccccd
 8004f18:	00055730 	.word	0x00055730

08004f1c <PolicySinkSelectCapability>:

void PolicySinkSelectCapability(struct Port *port)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af04      	add	r7, sp, #16
 8004f22:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <PolicySinkSelectCapability+0x18>
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d021      	beq.n	8004f76 <PolicySinkSelectCapability+0x5a>
 8004f32:	e167      	b.n	8005204 <PolicySinkSelectCapability+0x2e8>
    case 0:
      if (PolicySend(port, DMTRequest, 4, (FSC_U8 *)&port->sink_request_,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9303      	str	r3, [sp, #12]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9302      	str	r3, [sp, #8]
 8004f42:	2301      	movs	r3, #1
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	2311      	movs	r3, #17
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	2102      	movs	r1, #2
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 fb41 	bl	80065d8 <PolicySend>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 8158 	bne.w	800520e <PolicySinkSelectCapability+0x2f2>
            PE_SNK_Select_Capability, 1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	338c      	adds	r3, #140	; 0x8c
 8004f62:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004f66:	4618      	mov	r0, r3
 8004f68:	f004 f84e 	bl	8009008 <TimerStart>
        port->waiting_on_hr_ = TRUE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
      }
      break;
 8004f74:	e14b      	b.n	800520e <PolicySinkSelectCapability+0x2f2>
    case 1:
      if (port->protocol_msg_rx_) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 812b 	beq.w	80051d8 <PolicySinkSelectCapability+0x2bc>
        TimerDisable(&port->policy_state_timer_);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	338c      	adds	r3, #140	; 0x8c
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 f85c 	bl	8009044 <TimerDisable>
        port->protocol_msg_rx_ = FALSE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8004f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 80fe 	bne.w	80051a2 <PolicySinkSelectCapability+0x286>
          switch (port->policy_rx_header_.MessageType) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8004fac:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	3b03      	subs	r3, #3
 8004fb4:	2b0a      	cmp	r3, #10
 8004fb6:	f200 80ee 	bhi.w	8005196 <PolicySinkSelectCapability+0x27a>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <PolicySinkSelectCapability+0xa4>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fed 	.word	0x08004fed
 8004fc4:	08005157 	.word	0x08005157
 8004fc8:	08005197 	.word	0x08005197
 8004fcc:	08005197 	.word	0x08005197
 8004fd0:	08005197 	.word	0x08005197
 8004fd4:	08005197 	.word	0x08005197
 8004fd8:	08005197 	.word	0x08005197
 8004fdc:	08005197 	.word	0x08005197
 8004fe0:	08005197 	.word	0x08005197
 8004fe4:	08005157 	.word	0x08005157
 8004fe8:	0800518d 	.word	0x0800518d
            case CMTAccept:
              port->policy_has_contract_ = TRUE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
              port->source_is_apdo_ = FALSE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249

              port->usb_pd_contract_.object = port->sink_request_.object;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

              if ((port->caps_received_[
                port->usb_pd_contract_.FVRDO.ObjectPosition - 1].PDO.
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800500e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	337e      	adds	r3, #126	; 0x7e
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	79db      	ldrb	r3, [r3, #7]
 8005020:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8005024:	b2db      	uxtb	r3, r3
              if ((port->caps_received_[
 8005026:	2b03      	cmp	r3, #3
 8005028:	d12a      	bne.n	8005080 <PolicySinkSelectCapability+0x164>
                  SupplyType == pdoTypeAugmented) &&
                  (port->caps_received_[
                port->usb_pd_contract_.FVRDO.ObjectPosition - 1].APDO.
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8005030:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	337e      	adds	r3, #126	; 0x7e
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	79db      	ldrb	r3, [r3, #7]
 8005042:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005046:	b2db      	uxtb	r3, r3
                  SupplyType == pdoTypeAugmented) &&
 8005048:	2b00      	cmp	r3, #0
 800504a:	d119      	bne.n	8005080 <PolicySinkSelectCapability+0x164>
                  APDOType == apdoTypePPS)) {
                port->source_is_apdo_ = TRUE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
                /* Set to minimum in case of current fold back */
                port->sink_selected_voltage_ = FSC_VBUS_03_V;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800505a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
                port->sink_transition_up_ = FALSE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
                port->stored_apdo_.object = port->sink_request_.object;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
                TimerStart(&port->pps_timer_, ktPPSRequest);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	33e0      	adds	r3, #224	; 0xe0
 8005076:	4968      	ldr	r1, [pc, #416]	; (8005218 <PolicySinkSelectCapability+0x2fc>)
 8005078:	4618      	mov	r0, r3
 800507a:	f003 ffc5 	bl	8009008 <TimerStart>
 800507e:	e046      	b.n	800510e <PolicySinkSelectCapability+0x1f2>
              }
              else if (port->caps_received_[
                port->usb_pd_contract_.FVRDO.ObjectPosition - 1].PDO.SupplyType
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8005086:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	337e      	adds	r3, #126	; 0x7e
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	79db      	ldrb	r3, [r3, #7]
 8005098:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800509c:	b2db      	uxtb	r3, r3
              else if (port->caps_received_[
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d135      	bne.n	800510e <PolicySinkSelectCapability+0x1f2>
                  == pdoTypeFixed) {
                /* TODO - Not reliable if received caps have changed/cleared */
                port->sink_transition_up_ =
                    port->sink_selected_voltage_ < port->caps_received_[
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
                        port->usb_pd_contract_.FVRDO.ObjectPosition - 1].
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80050ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	3b01      	subs	r3, #1
                            FPDOSupply.Voltage * 50 ? TRUE : FALSE;
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	337e      	adds	r3, #126	; 0x7e
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	4619      	mov	r1, r3
 80050c8:	2332      	movs	r3, #50	; 0x32
 80050ca:	fb03 f301 	mul.w	r3, r3, r1
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf34      	ite	cc
 80050d2:	2301      	movcc	r3, #1
 80050d4:	2300      	movcs	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
                port->sink_transition_up_ =
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224

                port->sink_selected_voltage_ = port->caps_received_
                    [port->usb_pd_contract_.FVRDO.ObjectPosition - 1].
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80050e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3b01      	subs	r3, #1
                        FPDOSupply.Voltage * 50; /* mV */
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	337e      	adds	r3, #126	; 0x7e
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	2332      	movs	r3, #50	; 0x32
 8005102:	fb03 f302 	mul.w	r3, r3, r2
 8005106:	461a      	mov	r2, r3
                port->sink_selected_voltage_ = port->caps_received_
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
              }
              else {
                /* TODO - Other supply types */
              }

              if (!port->sink_transition_up_) {
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 8005114:	2b00      	cmp	r3, #0
 8005116:	d113      	bne.n	8005140 <PolicySinkSelectCapability+0x224>
                /* Set up the new disconnect level - before the level drops */
                SetVBusSnkDisc(port,
                               FSC_VBUS_LVL_DISC(port->sink_selected_voltage_));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005124:	493d      	ldr	r1, [pc, #244]	; (800521c <PolicySinkSelectCapability+0x300>)
 8005126:	fba1 1303 	umull	r1, r3, r1, r3
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <PolicySinkSelectCapability+0x304>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	08db      	lsrs	r3, r3, #3
                SetVBusSnkDisc(port,
 8005136:	b29b      	uxth	r3, r3
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f002 fb56 	bl	80077ec <SetVBusSnkDisc>
              }

              TimerStart(&port->policy_state_timer_, ktPSTransition);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	338c      	adds	r3, #140	; 0x8c
 8005144:	4937      	ldr	r1, [pc, #220]	; (8005224 <PolicySinkSelectCapability+0x308>)
 8005146:	4618      	mov	r0, r3
 8005148:	f003 ff5e 	bl	8009008 <TimerStart>
              set_policy_state(port, PE_SNK_Transition_Sink);
 800514c:	2112      	movs	r1, #18
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f003 f84a 	bl	80081e8 <set_policy_state>
              break;
 8005154:	e03b      	b.n	80051ce <PolicySinkSelectCapability+0x2b2>
            case CMTWait:
            case CMTReject:
              if (port->policy_has_contract_) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <PolicySinkSelectCapability+0x24e>
                set_policy_state(port, PE_SNK_Ready);
 8005160:	2113      	movs	r1, #19
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f003 f840 	bl	80081e8 <set_policy_state>
 8005168:	e007      	b.n	800517a <PolicySinkSelectCapability+0x25e>
              }
              else {
                set_policy_state(port, PE_SNK_Wait_For_Capabilities);
 800516a:	210f      	movs	r1, #15
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f003 f83b 	bl	80081e8 <set_policy_state>
                /* Set the counter to avoid a hard reset loop */
                port->hard_reset_counter_ = HARD_RESET_COUNT + 1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2203      	movs	r2, #3
 8005176:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
              }
              notify_observers(EVENT_PD_CONTRACT_FAILED, port->port_id_, 0);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	2200      	movs	r2, #0
 8005182:	4619      	mov	r1, r3
 8005184:	2040      	movs	r0, #64	; 0x40
 8005186:	f7fe ff2f 	bl	8003fe8 <notify_observers>
              break;
 800518a:	e020      	b.n	80051ce <PolicySinkSelectCapability+0x2b2>
            case CMTSoftReset:
              set_policy_state(port, PE_SNK_Soft_Reset);
 800518c:	211b      	movs	r1, #27
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f003 f82a 	bl	80081e8 <set_policy_state>
              break;
 8005194:	e01b      	b.n	80051ce <PolicySinkSelectCapability+0x2b2>
            default:
              set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8005196:	211a      	movs	r1, #26
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f003 f825 	bl	80081e8 <set_policy_state>
              break;
 800519e:	bf00      	nop
 80051a0:	e015      	b.n	80051ce <PolicySinkSelectCapability+0x2b2>
          }
        }
        else {
          switch (port->policy_rx_header_.MessageType) {
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80051a8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d108      	bne.n	80051c4 <PolicySinkSelectCapability+0x2a8>
            case DMTSourceCapabilities:
              UpdateCapabilitiesRx(port, TRUE);
 80051b2:	2101      	movs	r1, #1
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 f87a 	bl	80062ae <UpdateCapabilitiesRx>
              set_policy_state(port, PE_SNK_Evaluate_Capability);
 80051ba:	2110      	movs	r1, #16
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f003 f813 	bl	80081e8 <set_policy_state>
              break;
 80051c2:	e004      	b.n	80051ce <PolicySinkSelectCapability+0x2b2>
            default:
              set_policy_state(port, PE_SNK_Send_Soft_Reset);
 80051c4:	211a      	movs	r1, #26
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f003 f80e 	bl	80081e8 <set_policy_state>
              break;
 80051cc:	bf00      	nop
          }
        }
        port->pd_tx_status_ = txIdle;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        PolicySinkSendHardReset(port);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 80051d6:	e01b      	b.n	8005210 <PolicySinkSelectCapability+0x2f4>
      else if (TimerExpired(&port->policy_state_timer_)) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	338c      	adds	r3, #140	; 0x8c
 80051dc:	4618      	mov	r0, r3
 80051de:	f003 ff5d 	bl	800909c <TimerExpired>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <PolicySinkSelectCapability+0x2de>
        TimerDisable(&port->policy_state_timer_);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	338c      	adds	r3, #140	; 0x8c
 80051ec:	4618      	mov	r0, r3
 80051ee:	f003 ff29 	bl	8009044 <TimerDisable>
        PolicySinkSendHardReset(port);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff f9f7 	bl	80045e6 <PolicySinkSendHardReset>
      break;
 80051f8:	e00a      	b.n	8005210 <PolicySinkSelectCapability+0x2f4>
        port->idle_ = TRUE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005202:	e005      	b.n	8005210 <PolicySinkSelectCapability+0x2f4>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8005204:	21a6      	movs	r1, #166	; 0xa6
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f002 ffee 	bl	80081e8 <set_policy_state>
      break;
 800520c:	e000      	b.n	8005210 <PolicySinkSelectCapability+0x2f4>
      break;
 800520e:	bf00      	nop
  }
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	00989680 	.word	0x00989680
 800521c:	cccccccd 	.word	0xcccccccd
 8005220:	51eb851f 	.word	0x51eb851f
 8005224:	0007a120 	.word	0x0007a120

08005228 <PolicySinkTransitionSink>:

void PolicySinkTransitionSink(struct Port *port)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if (port->protocol_msg_rx_) {
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d06c      	beq.n	8005314 <PolicySinkTransitionSink+0xec>
    port->protocol_msg_rx_ = FALSE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    if (port->policy_rx_header_.NumDataObjects == 0) {
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005248:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d145      	bne.n	80052de <PolicySinkTransitionSink+0xb6>
      /* Disable the PSTransition timer */
      TimerDisable(&port->policy_state_timer_);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	338c      	adds	r3, #140	; 0x8c
 8005256:	4618      	mov	r0, r3
 8005258:	f003 fef4 	bl	8009044 <TimerDisable>
      switch (port->policy_rx_header_.MessageType) {
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005262:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b06      	cmp	r3, #6
 800526a:	d002      	beq.n	8005272 <PolicySinkTransitionSink+0x4a>
 800526c:	2b0d      	cmp	r3, #13
 800526e:	d02c      	beq.n	80052ca <PolicySinkTransitionSink+0xa2>
 8005270:	e030      	b.n	80052d4 <PolicySinkTransitionSink+0xac>
        case CMTPS_RDY:
          /* Set up the new disconnect level */
          /* FPDO Option only for now! */
          if (port->sink_transition_up_) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <PolicySinkTransitionSink+0x7c>
            /* Set up the new disconnect level - once we've reached our
             * new level */
            SetVBusSnkDisc(port,
                           FSC_VBUS_LVL_DISC(port->sink_selected_voltage_));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005288:	492f      	ldr	r1, [pc, #188]	; (8005348 <PolicySinkTransitionSink+0x120>)
 800528a:	fba1 1303 	umull	r1, r3, r1, r3
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	4a2e      	ldr	r2, [pc, #184]	; (800534c <PolicySinkTransitionSink+0x124>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	08db      	lsrs	r3, r3, #3
            SetVBusSnkDisc(port,
 800529a:	b29b      	uxth	r3, r3
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f002 faa4 	bl	80077ec <SetVBusSnkDisc>
          }

          SetVBusStopDisc(port, FSC_VSAFE0V_DISCH);
 80052a4:	211c      	movs	r1, #28
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f002 fabd 	bl	8007826 <SetVBusStopDisc>
          notify_observers(EVENT_PD_NEW_CONTRACT, port->port_id_,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b299      	uxth	r1, r3
                           &port->usb_pd_contract_);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f503 7306 	add.w	r3, r3, #536	; 0x218
          notify_observers(EVENT_PD_NEW_CONTRACT, port->port_id_,
 80052b8:	461a      	mov	r2, r3
 80052ba:	2020      	movs	r0, #32
 80052bc:	f7fe fe94 	bl	8003fe8 <notify_observers>

          set_policy_state(port, PE_SNK_Ready);
 80052c0:	2113      	movs	r1, #19
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f002 ff90 	bl	80081e8 <set_policy_state>
          break;
 80052c8:	e01f      	b.n	800530a <PolicySinkTransitionSink+0xe2>
        case CMTSoftReset:
          set_policy_state(port, PE_SNK_Soft_Reset);
 80052ca:	211b      	movs	r1, #27
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f002 ff8b 	bl	80081e8 <set_policy_state>
          break;
 80052d2:	e01a      	b.n	800530a <PolicySinkTransitionSink+0xe2>
        default:
          PolicySinkSendHardReset(port);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff f986 	bl	80045e6 <PolicySinkSendHardReset>
          break;
 80052da:	bf00      	nop
 80052dc:	e015      	b.n	800530a <PolicySinkTransitionSink+0xe2>
      }
    }
    else {
      switch (port->policy_rx_header_.MessageType) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80052e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d108      	bne.n	8005300 <PolicySinkTransitionSink+0xd8>
        case DMTSourceCapabilities:
          UpdateCapabilitiesRx(port, TRUE);
 80052ee:	2101      	movs	r1, #1
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 ffdc 	bl	80062ae <UpdateCapabilitiesRx>
          set_policy_state(port, PE_SNK_Evaluate_Capability);
 80052f6:	2110      	movs	r1, #16
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f002 ff75 	bl	80081e8 <set_policy_state>
          break;
 80052fe:	e004      	b.n	800530a <PolicySinkTransitionSink+0xe2>
        default:
          /* Unexpected data message */
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8005300:	211a      	movs	r1, #26
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f002 ff70 	bl	80081e8 <set_policy_state>
          break;
 8005308:	bf00      	nop
      }
    }
    port->pd_tx_status_ = txIdle;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    PolicySinkSendHardReset(port);
  }
  else {
    port->idle_ = TRUE;
  }
}
 8005312:	e014      	b.n	800533e <PolicySinkTransitionSink+0x116>
  else if (TimerExpired(&port->policy_state_timer_)) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	338c      	adds	r3, #140	; 0x8c
 8005318:	4618      	mov	r0, r3
 800531a:	f003 febf 	bl	800909c <TimerExpired>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <PolicySinkTransitionSink+0x10e>
    TimerDisable(&port->policy_state_timer_);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	338c      	adds	r3, #140	; 0x8c
 8005328:	4618      	mov	r0, r3
 800532a:	f003 fe8b 	bl	8009044 <TimerDisable>
    PolicySinkSendHardReset(port);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff f959 	bl	80045e6 <PolicySinkSendHardReset>
}
 8005334:	e003      	b.n	800533e <PolicySinkTransitionSink+0x116>
    port->idle_ = TRUE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	cccccccd 	.word	0xcccccccd
 800534c:	51eb851f 	.word	0x51eb851f

08005350 <PolicySinkReady>:

void PolicySinkReady(struct Port *port)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  if (port->protocol_msg_rx_) {
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80e0 	beq.w	8005524 <PolicySinkReady+0x1d4>
    port->protocol_msg_rx_ = FALSE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    if (port->policy_rx_header_.NumDataObjects == 0) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d158      	bne.n	800542e <PolicySinkReady+0xde>
      switch (port->policy_rx_header_.MessageType) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005382:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005386:	b2db      	uxtb	r3, r3
 8005388:	3b02      	subs	r3, #2
 800538a:	2b0e      	cmp	r3, #14
 800538c:	d844      	bhi.n	8005418 <PolicySinkReady+0xc8>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <PolicySinkReady+0x44>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053d1 	.word	0x080053d1
 8005398:	0800540f 	.word	0x0800540f
 800539c:	08005423 	.word	0x08005423
 80053a0:	08005423 	.word	0x08005423
 80053a4:	08005419 	.word	0x08005419
 80053a8:	08005419 	.word	0x08005419
 80053ac:	080053e7 	.word	0x080053e7
 80053b0:	080053f1 	.word	0x080053f1
 80053b4:	08005419 	.word	0x08005419
 80053b8:	080053fb 	.word	0x080053fb
 80053bc:	0800540f 	.word	0x0800540f
 80053c0:	08005405 	.word	0x08005405
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005419 	.word	0x08005419
 80053cc:	08005423 	.word	0x08005423
        case CMTGotoMin:
          set_policy_state(port, PE_SNK_Transition_Sink);
 80053d0:	2112      	movs	r1, #18
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f002 ff08 	bl	80081e8 <set_policy_state>
          TimerStart(&port->policy_state_timer_, ktPSTransition);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	338c      	adds	r3, #140	; 0x8c
 80053dc:	49ba      	ldr	r1, [pc, #744]	; (80056c8 <PolicySinkReady+0x378>)
 80053de:	4618      	mov	r0, r3
 80053e0:	f003 fe12 	bl	8009008 <TimerStart>
          break;
 80053e4:	e01e      	b.n	8005424 <PolicySinkReady+0xd4>
        case CMTGetSinkCap:
          set_policy_state(port, PE_SNK_Give_Sink_Cap);
 80053e6:	2116      	movs	r1, #22
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f002 fefd 	bl	80081e8 <set_policy_state>
          break;
 80053ee:	e019      	b.n	8005424 <PolicySinkReady+0xd4>
        case CMTGetSourceCap:
          set_policy_state(port, PE_DR_SNK_Give_Source_Cap);
          break;
#endif /* FSC_HAVE_SRC */
        case CMTDR_Swap:
          set_policy_state(port, PE_DRS_UFP_DFP_Evaluate_Swap);
 80053f0:	2144      	movs	r1, #68	; 0x44
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f002 fef8 	bl	80081e8 <set_policy_state>
          break;
 80053f8:	e014      	b.n	8005424 <PolicySinkReady+0xd4>
          set_policy_state(port, PE_DR_SNK_Give_Source_Cap_Ext);
          break;
#endif /* FSC_HAVE_EXTENDED */
#endif /* FSC_HAVE_SRC */
       case CMTVCONN_Swap:
          set_policy_state(port, PE_VCS_Evaluate_Swap);
 80053fa:	216a      	movs	r1, #106	; 0x6a
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f002 fef3 	bl	80081e8 <set_policy_state>
          break;
 8005402:	e00f      	b.n	8005424 <PolicySinkReady+0xd4>
        case CMTSoftReset:
          set_policy_state(port, PE_SNK_Soft_Reset);
 8005404:	211b      	movs	r1, #27
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f002 feee 	bl	80081e8 <set_policy_state>
          break;
 800540c:	e00a      	b.n	8005424 <PolicySinkReady+0xd4>
            /* Rx'd Reject/NS are ignored - notify DPM if needed */
            break;
        case CMTAccept:
        case CMTWait:
          /* Unexpected messages */
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 800540e:	211a      	movs	r1, #26
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f002 fee9 	bl	80081e8 <set_policy_state>
          break;
 8005416:	e005      	b.n	8005424 <PolicySinkReady+0xd4>
        default:
          /* Send a reject message for all other commands */
          set_policy_state(port, PE_SNK_Send_Not_Supported);
 8005418:	211f      	movs	r1, #31
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f002 fee4 	bl	80081e8 <set_policy_state>
          break;
 8005420:	e000      	b.n	8005424 <PolicySinkReady+0xd4>
            break;
 8005422:	bf00      	nop
      }
      port->pd_tx_status_ = txIdle;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  else {
    port->idle_ = TRUE;
    TimerDisable(&port->policy_state_timer_);
    TimerDisable(&port->no_response_timer_);
  }
}
 800542c:	e17a      	b.n	8005724 <PolicySinkReady+0x3d4>
    else if (port->policy_rx_header_.Extended == 1) {
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005434:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d02b      	beq.n	8005496 <PolicySinkReady+0x146>
      switch (port->policy_rx_header_.MessageType) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005444:	f3c3 0304 	ubfx	r3, r3, #0, #5
            port->policy_rx_data_obj_[0].byte[0];
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
        port->protocol_ext_header_.byte[0] =
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
            port->policy_rx_data_obj_[0].byte[1];
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 2161 	ldrb.w	r2, [r3, #353]	; 0x161
        port->protocol_ext_header_.byte[1] =
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if (port->protocol_ext_header_.DataSize > MAX_EXT_MSG_LEGACY_LEN) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b1a      	cmp	r3, #26
 800546e:	d904      	bls.n	800547a <PolicySinkReady+0x12a>
          port->wait_for_not_supported_ = TRUE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8005478:	e003      	b.n	8005482 <PolicySinkReady+0x132>
          port->wait_for_not_supported_ = FALSE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
        set_policy_state(port, PE_SNK_Send_Not_Supported);
 8005482:	211f      	movs	r1, #31
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f002 feaf 	bl	80081e8 <set_policy_state>
        break;
 800548a:	bf00      	nop
      port->pd_tx_status_ = txIdle;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 8005494:	e146      	b.n	8005724 <PolicySinkReady+0x3d4>
      switch (port->policy_rx_header_.MessageType) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800549c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	2b0e      	cmp	r3, #14
 80054a6:	d832      	bhi.n	800550e <PolicySinkReady+0x1be>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <PolicySinkReady+0x160>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054ed 	.word	0x080054ed
 80054b4:	0800550f 	.word	0x0800550f
 80054b8:	08005507 	.word	0x08005507
 80054bc:	08005519 	.word	0x08005519
 80054c0:	0800550f 	.word	0x0800550f
 80054c4:	0800550f 	.word	0x0800550f
 80054c8:	0800550f 	.word	0x0800550f
 80054cc:	0800550f 	.word	0x0800550f
 80054d0:	0800550f 	.word	0x0800550f
 80054d4:	0800550f 	.word	0x0800550f
 80054d8:	0800550f 	.word	0x0800550f
 80054dc:	0800550f 	.word	0x0800550f
 80054e0:	0800550f 	.word	0x0800550f
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	080054ff 	.word	0x080054ff
          UpdateCapabilitiesRx(port, TRUE);
 80054ec:	2101      	movs	r1, #1
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fedd 	bl	80062ae <UpdateCapabilitiesRx>
          set_policy_state(port, PE_SNK_Evaluate_Capability);
 80054f4:	2110      	movs	r1, #16
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f002 fe76 	bl	80081e8 <set_policy_state>
          break;
 80054fc:	e00d      	b.n	800551a <PolicySinkReady+0x1ca>
          ConvertAndProcessVdmMessage(port);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f004 fc46 	bl	8009d90 <ConvertAndProcessVdmMessage>
          break;
 8005504:	e009      	b.n	800551a <PolicySinkReady+0x1ca>
          ProcessDmtBist(port);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fa4c 	bl	80069a4 <ProcessDmtBist>
          break;
 800550c:	e005      	b.n	800551a <PolicySinkReady+0x1ca>
          set_policy_state(port, PE_SNK_Send_Not_Supported);
 800550e:	211f      	movs	r1, #31
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f002 fe69 	bl	80081e8 <set_policy_state>
          break;
 8005516:	e000      	b.n	800551a <PolicySinkReady+0x1ca>
          break;
 8005518:	bf00      	nop
      port->pd_tx_status_ = txIdle;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 8005522:	e0ff      	b.n	8005724 <PolicySinkReady+0x3d4>
  else if (port->pd_tx_flag_) {
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800552a:	2b00      	cmp	r3, #0
 800552c:	d072      	beq.n	8005614 <PolicySinkReady+0x2c4>
    if (port->pd_transmit_header_.NumDataObjects == 0) {
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8005534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d14b      	bne.n	80055d6 <PolicySinkReady+0x286>
      switch (port->pd_transmit_header_.MessageType) {
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8005544:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005548:	b2db      	uxtb	r3, r3
 800554a:	3b07      	subs	r3, #7
 800554c:	2b0d      	cmp	r3, #13
 800554e:	d83c      	bhi.n	80055ca <PolicySinkReady+0x27a>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <PolicySinkReady+0x208>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	08005591 	.word	0x08005591
 800555c:	0800559b 	.word	0x0800559b
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055cb 	.word	0x080055cb
 8005568:	080055af 	.word	0x080055af
 800556c:	080055cb 	.word	0x080055cb
 8005570:	080055b9 	.word	0x080055b9
 8005574:	080055cb 	.word	0x080055cb
 8005578:	080055cb 	.word	0x080055cb
 800557c:	080055cb 	.word	0x080055cb
 8005580:	080055cb 	.word	0x080055cb
 8005584:	080055cb 	.word	0x080055cb
 8005588:	080055cb 	.word	0x080055cb
 800558c:	080055c3 	.word	0x080055c3
          set_policy_state(port, PE_SNK_Get_Source_Cap);
 8005590:	2117      	movs	r1, #23
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f002 fe28 	bl	80081e8 <set_policy_state>
          break;
 8005598:	e018      	b.n	80055cc <PolicySinkReady+0x27c>
          set_policy_state(port, PE_DR_SNK_Get_Sink_Cap);
 800559a:	2165      	movs	r1, #101	; 0x65
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f002 fe23 	bl	80081e8 <set_policy_state>
          break;
 80055a2:	e013      	b.n	80055cc <PolicySinkReady+0x27c>
          set_policy_state(port, PE_DRS_UFP_DFP_Send_Swap);
 80055a4:	2147      	movs	r1, #71	; 0x47
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f002 fe1e 	bl	80081e8 <set_policy_state>
          break;
 80055ac:	e00e      	b.n	80055cc <PolicySinkReady+0x27c>
          set_policy_state(port, PE_VCS_Send_Swap);
 80055ae:	2169      	movs	r1, #105	; 0x69
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fe19 	bl	80081e8 <set_policy_state>
          break;
 80055b6:	e009      	b.n	80055cc <PolicySinkReady+0x27c>
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 80055b8:	211a      	movs	r1, #26
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f002 fe14 	bl	80081e8 <set_policy_state>
          break;
 80055c0:	e004      	b.n	80055cc <PolicySinkReady+0x27c>
          set_policy_state(port, PE_SNK_Get_PPS_Status);
 80055c2:	212d      	movs	r1, #45	; 0x2d
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f002 fe0f 	bl	80081e8 <set_policy_state>
          break;
 80055ca:	bf00      	nop
      port->pd_tx_status_ = txIdle;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 80055d4:	e019      	b.n	800560a <PolicySinkReady+0x2ba>
      switch (port->pd_transmit_header_.MessageType) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80055dc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d002      	beq.n	80055ec <PolicySinkReady+0x29c>
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	d00b      	beq.n	8005602 <PolicySinkReady+0x2b2>
          break;
 80055ea:	e00e      	b.n	800560a <PolicySinkReady+0x2ba>
          port->sink_request_.object = port->pd_transmit_objects_[0].object;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
          set_policy_state(port, PE_SNK_Select_Capability);
 80055f8:	2111      	movs	r1, #17
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f002 fdf4 	bl	80081e8 <set_policy_state>
          break;
 8005600:	e003      	b.n	800560a <PolicySinkReady+0x2ba>
          DoVdmCommand(port);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f004 fbff 	bl	8009e06 <DoVdmCommand>
          break;
 8005608:	bf00      	nop
    port->pd_tx_flag_ = FALSE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
}
 8005612:	e087      	b.n	8005724 <PolicySinkReady+0x3d4>
  else if (port->cbl_rst_state_ > CBL_RST_DISABLED)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <PolicySinkReady+0x2d6>
    ProcessCableResetState(port);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 fabc 	bl	8006b9c <ProcessCableResetState>
}
 8005624:	e07e      	b.n	8005724 <PolicySinkReady+0x3d4>
  else if ((port->port_type_ == USBTypeC_DRP) &&
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800562c:	2b02      	cmp	r3, #2
 800562e:	d111      	bne.n	8005654 <PolicySinkReady+0x304>
           (port->req_pr_swap_as_snk_ == TRUE) &&
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
  else if ((port->port_type_ == USBTypeC_DRP) &&
 8005636:	2b01      	cmp	r3, #1
 8005638:	d10c      	bne.n	8005654 <PolicySinkReady+0x304>
           (port->partner_caps_.FPDOSupply.DualRolePower == TRUE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 323f 	ldrb.w	r3, [r3, #575]	; 0x23f
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	b2db      	uxtb	r3, r3
           (port->req_pr_swap_as_snk_ == TRUE) &&
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <PolicySinkReady+0x304>
    set_policy_state(port, PE_PRS_SNK_SRC_Send_Swap);
 800564a:	2155      	movs	r1, #85	; 0x55
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f002 fdcb 	bl	80081e8 <set_policy_state>
 8005652:	e067      	b.n	8005724 <PolicySinkReady+0x3d4>
  else if (port->req_vconn_swap_to_on_as_sink_ == TRUE &&
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800565a:	2b01      	cmp	r3, #1
 800565c:	d104      	bne.n	8005668 <PolicySinkReady+0x318>
           GetVConn(port) == FALSE &&
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f002 fa46 	bl	8007af0 <GetVConn>
 8005664:	4603      	mov	r3, r0
  else if (port->req_vconn_swap_to_on_as_sink_ == TRUE &&
 8005666:	2b00      	cmp	r3, #0
  else if (port->vdm_check_cbl_ && DPM_IsSOPPAllowed(port)) {
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 329a 	ldrb.w	r3, [r3, #666]	; 0x29a
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00e      	beq.n	8005690 <PolicySinkReady+0x340>
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fe fc92 	bl	8003f9c <DPM_IsSOPPAllowed>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <PolicySinkReady+0x340>
    RequestDiscoverIdentity(port, SOP_TYPE_SOP1);
 800567e:	2101      	movs	r1, #1
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f004 fd19 	bl	800a0b8 <RequestDiscoverIdentity>
    port->vdm_check_cbl_ = FALSE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 800568e:	e049      	b.n	8005724 <PolicySinkReady+0x3d4>
  else if (port->policy_is_dfp_ == TRUE &&
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005696:	2b01      	cmp	r3, #1
 8005698:	d108      	bne.n	80056ac <PolicySinkReady+0x35c>
      port->vdm_auto_state_ != AUTO_VDM_DONE) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if (port->policy_is_dfp_ == TRUE &&
 80056a0:	2b07      	cmp	r3, #7
 80056a2:	d003      	beq.n	80056ac <PolicySinkReady+0x35c>
    AutoVdmDiscovery(port);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f004 fc21 	bl	8009eec <AutoVdmDiscovery>
 80056aa:	e03b      	b.n	8005724 <PolicySinkReady+0x3d4>
  else if (port->renegotiate_) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <PolicySinkReady+0x37c>
    port->renegotiate_ = FALSE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    set_policy_state(port, PE_SNK_Evaluate_Capability);
 80056be:	2110      	movs	r1, #16
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f002 fd91 	bl	80081e8 <set_policy_state>
}
 80056c6:	e02d      	b.n	8005724 <PolicySinkReady+0x3d4>
 80056c8:	0007a120 	.word	0x0007a120
  else if (port->source_is_apdo_ && TimerExpired(&port->pps_timer_)) {
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d017      	beq.n	8005706 <PolicySinkReady+0x3b6>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	33e0      	adds	r3, #224	; 0xe0
 80056da:	4618      	mov	r0, r3
 80056dc:	f003 fcde 	bl	800909c <TimerExpired>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00f      	beq.n	8005706 <PolicySinkReady+0x3b6>
    TimerDisable(&port->pps_timer_);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	33e0      	adds	r3, #224	; 0xe0
 80056ea:	4618      	mov	r0, r3
 80056ec:	f003 fcaa 	bl	8009044 <TimerDisable>
    port->sink_request_.object = port->stored_apdo_.object;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    set_policy_state(port, PE_SNK_Select_Capability);
 80056fc:	2111      	movs	r1, #17
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f002 fd72 	bl	80081e8 <set_policy_state>
 8005704:	e00e      	b.n	8005724 <PolicySinkReady+0x3d4>
    port->idle_ = TRUE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    TimerDisable(&port->policy_state_timer_);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	338c      	adds	r3, #140	; 0x8c
 8005712:	4618      	mov	r0, r3
 8005714:	f003 fc96 	bl	8009044 <TimerDisable>
    TimerDisable(&port->no_response_timer_);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	33bc      	adds	r3, #188	; 0xbc
 800571c:	4618      	mov	r0, r3
 800571e:	f003 fc91 	bl	8009044 <TimerDisable>
}
 8005722:	e7ff      	b.n	8005724 <PolicySinkReady+0x3d4>
 8005724:	bf00      	nop
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <PolicySinkGetSinkCap>:

void PolicySinkGetSinkCap(struct Port *port)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af04      	add	r7, sp, #16
 8005732:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <PolicySinkGetSinkCap+0x18>
 800573e:	2b01      	cmp	r3, #1
 8005740:	d019      	beq.n	8005776 <PolicySinkGetSinkCap+0x4a>
 8005742:	e074      	b.n	800582e <PolicySinkGetSinkCap+0x102>
    case 0:
      if (PolicySend(port, CMTGetSinkCap, 0, 0, PE_DR_SNK_Get_Sink_Cap,
 8005744:	2300      	movs	r3, #0
 8005746:	9303      	str	r3, [sp, #12]
 8005748:	2300      	movs	r3, #0
 800574a:	9302      	str	r3, [sp, #8]
 800574c:	2301      	movs	r3, #1
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	2365      	movs	r3, #101	; 0x65
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	2200      	movs	r2, #0
 8005758:	2108      	movs	r1, #8
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 ff3c 	bl	80065d8 <PolicySend>
 8005760:	4603      	mov	r3, r0
 8005762:	2b01      	cmp	r3, #1
 8005764:	d168      	bne.n	8005838 <PolicySinkGetSinkCap+0x10c>
                     1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	338c      	adds	r3, #140	; 0x8c
 800576a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800576e:	4618      	mov	r0, r3
 8005770:	f003 fc4a 	bl	8009008 <TimerStart>
      }
      break;
 8005774:	e060      	b.n	8005838 <PolicySinkGetSinkCap+0x10c>
    case 1:
      if (port->protocol_msg_rx_) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d03e      	beq.n	80057fe <PolicySinkGetSinkCap+0xd2>
        port->protocol_msg_rx_ = FALSE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        port->pd_tx_status_ = txIdle;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00c      	beq.n	80057ba <PolicySinkGetSinkCap+0x8e>
            (port->policy_rx_header_.MessageType == DMTSinkCapabilities)) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	b2db      	uxtb	r3, r3
        if ((port->policy_rx_header_.NumDataObjects > 0) &&
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d104      	bne.n	80057ba <PolicySinkGetSinkCap+0x8e>
          /* Process new sink caps here if necessary */
          set_policy_state(port, PE_SNK_Ready);
 80057b0:	2113      	movs	r1, #19
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f002 fd18 	bl	80081e8 <set_policy_state>
 80057b8:	e038      	b.n	800582c <PolicySinkGetSinkCap+0x100>
        }
        else if ((port->policy_rx_header_.NumDataObjects == 0) &&
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80057c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d114      	bne.n	80057f4 <PolicySinkGetSinkCap+0xc8>
                 (port->policy_rx_header_.MessageType == CMTReject ||
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80057d0:	f003 031f 	and.w	r3, r3, #31
 80057d4:	b2db      	uxtb	r3, r3
        else if ((port->policy_rx_header_.NumDataObjects == 0) &&
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d007      	beq.n	80057ea <PolicySinkGetSinkCap+0xbe>
                  port->policy_rx_header_.MessageType == CMTNotSupported)) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	b2db      	uxtb	r3, r3
                 (port->policy_rx_header_.MessageType == CMTReject ||
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d104      	bne.n	80057f4 <PolicySinkGetSinkCap+0xc8>
          set_policy_state(port, PE_SNK_Ready);
 80057ea:	2113      	movs	r1, #19
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f002 fcfb 	bl	80081e8 <set_policy_state>
 80057f2:	e01b      	b.n	800582c <PolicySinkGetSinkCap+0x100>
        }
        else {
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 80057f4:	211a      	movs	r1, #26
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f002 fcf6 	bl	80081e8 <set_policy_state>
        set_policy_state(port, PE_SNK_Ready);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 80057fc:	e01d      	b.n	800583a <PolicySinkGetSinkCap+0x10e>
      else if (TimerExpired(&port->policy_state_timer_)) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	338c      	adds	r3, #140	; 0x8c
 8005802:	4618      	mov	r0, r3
 8005804:	f003 fc4a 	bl	800909c <TimerExpired>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <PolicySinkGetSinkCap+0xf6>
        TimerDisable(&port->policy_state_timer_);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	338c      	adds	r3, #140	; 0x8c
 8005812:	4618      	mov	r0, r3
 8005814:	f003 fc16 	bl	8009044 <TimerDisable>
        set_policy_state(port, PE_SNK_Ready);
 8005818:	2113      	movs	r1, #19
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f002 fce4 	bl	80081e8 <set_policy_state>
      break;
 8005820:	e00b      	b.n	800583a <PolicySinkGetSinkCap+0x10e>
        port->idle_ = TRUE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 800582a:	e006      	b.n	800583a <PolicySinkGetSinkCap+0x10e>
 800582c:	e005      	b.n	800583a <PolicySinkGetSinkCap+0x10e>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 800582e:	21a6      	movs	r1, #166	; 0xa6
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f002 fcd9 	bl	80081e8 <set_policy_state>
      break;
 8005836:	e000      	b.n	800583a <PolicySinkGetSinkCap+0x10e>
      break;
 8005838:	bf00      	nop
  }
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <PolicySinkGiveSinkCap>:

void PolicySinkGiveSinkCap(struct Port *port)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b086      	sub	sp, #24
 8005846:	af04      	add	r7, sp, #16
 8005848:	6078      	str	r0, [r7, #4]
  PolicySend(port, DMTSinkCapabilities,
             port->caps_header_sink_.NumDataObjects * 4,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8005850:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005854:	b2db      	uxtb	r3, r3
  PolicySend(port, DMTSinkCapabilities,
 8005856:	b29b      	uxth	r3, r3
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	b29a      	uxth	r2, r3
             (FSC_U8 *)port->caps_sink_, PE_SNK_Ready, 0, SOP_TYPE_SOP, FALSE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
  PolicySend(port, DMTSinkCapabilities,
 8005862:	2300      	movs	r3, #0
 8005864:	9303      	str	r3, [sp, #12]
 8005866:	2300      	movs	r3, #0
 8005868:	9302      	str	r3, [sp, #8]
 800586a:	2300      	movs	r3, #0
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	2313      	movs	r3, #19
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	460b      	mov	r3, r1
 8005874:	2104      	movs	r1, #4
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 feae 	bl	80065d8 <PolicySend>
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <PolicySinkGetSourceCap>:

void PolicySinkGetSourceCap(struct Port *port)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af04      	add	r7, sp, #16
 800588a:	6078      	str	r0, [r7, #4]
    switch (port->policy_subindex_) {
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <PolicySinkGetSourceCap+0x18>
 8005896:	2b01      	cmp	r3, #1
 8005898:	d019      	beq.n	80058ce <PolicySinkGetSourceCap+0x4a>
 800589a:	e063      	b.n	8005964 <PolicySinkGetSourceCap+0xe0>
      case 0:
        if (PolicySend(port, CMTGetSourceCap, 0, 0, PE_SNK_Get_Source_Cap,
 800589c:	2300      	movs	r3, #0
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	2300      	movs	r3, #0
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	2301      	movs	r3, #1
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	2317      	movs	r3, #23
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	2300      	movs	r3, #0
 80058ae:	2200      	movs	r2, #0
 80058b0:	2107      	movs	r1, #7
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fe90 	bl	80065d8 <PolicySend>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d157      	bne.n	800596e <PolicySinkGetSourceCap+0xea>
                       1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
          TimerStart(&port->policy_state_timer_, ktSenderResponse);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	338c      	adds	r3, #140	; 0x8c
 80058c2:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80058c6:	4618      	mov	r0, r3
 80058c8:	f003 fb9e 	bl	8009008 <TimerStart>
        }
        break;
 80058cc:	e04f      	b.n	800596e <PolicySinkGetSourceCap+0xea>
      case 1:
        if (port->protocol_msg_rx_) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d02e      	beq.n	8005936 <PolicySinkGetSourceCap+0xb2>
          port->protocol_msg_rx_ = FALSE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
          port->pd_tx_status_ = txIdle;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
          if ((port->policy_rx_header_.NumDataObjects > 0) &&
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80058ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d019      	beq.n	800592c <PolicySinkGetSourceCap+0xa8>
              (port->policy_rx_header_.MessageType == DMTSourceCapabilities)) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	b2db      	uxtb	r3, r3
          if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8005904:	2b01      	cmp	r3, #1
 8005906:	d111      	bne.n	800592c <PolicySinkGetSourceCap+0xa8>
            UpdateCapabilitiesRx(port, FALSE);
 8005908:	2100      	movs	r1, #0
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fccf 	bl	80062ae <UpdateCapabilitiesRx>
            TimerDisable(&port->policy_state_timer_);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	338c      	adds	r3, #140	; 0x8c
 8005914:	4618      	mov	r0, r3
 8005916:	f003 fb95 	bl	8009044 <TimerDisable>
            port->partner_caps_available_ = TRUE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
            set_policy_state(port, PE_SNK_Evaluate_Capability);
 8005922:	2110      	movs	r1, #16
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f002 fc5f 	bl	80081e8 <set_policy_state>
          set_policy_state(port, PE_SNK_Ready);
        }
        else {
          port->idle_ = TRUE;
        }
        break;
 800592a:	e021      	b.n	8005970 <PolicySinkGetSourceCap+0xec>
              set_policy_state(port, PE_SNK_Send_Soft_Reset);
 800592c:	211a      	movs	r1, #26
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fc5a 	bl	80081e8 <set_policy_state>
        break;
 8005934:	e01c      	b.n	8005970 <PolicySinkGetSourceCap+0xec>
        else if (TimerExpired(&port->policy_state_timer_)) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	338c      	adds	r3, #140	; 0x8c
 800593a:	4618      	mov	r0, r3
 800593c:	f003 fbae 	bl	800909c <TimerExpired>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <PolicySinkGetSourceCap+0xd6>
          TimerDisable(&port->policy_state_timer_);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	338c      	adds	r3, #140	; 0x8c
 800594a:	4618      	mov	r0, r3
 800594c:	f003 fb7a 	bl	8009044 <TimerDisable>
          set_policy_state(port, PE_SNK_Ready);
 8005950:	2113      	movs	r1, #19
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f002 fc48 	bl	80081e8 <set_policy_state>
        break;
 8005958:	e00a      	b.n	8005970 <PolicySinkGetSourceCap+0xec>
          port->idle_ = TRUE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 8005962:	e005      	b.n	8005970 <PolicySinkGetSourceCap+0xec>
      default:
        set_policy_state(port, PE_ErrorRecovery);
 8005964:	21a6      	movs	r1, #166	; 0xa6
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f002 fc3e 	bl	80081e8 <set_policy_state>
        break;
 800596c:	e000      	b.n	8005970 <PolicySinkGetSourceCap+0xec>
        break;
 800596e:	bf00      	nop
    }
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <PolicySinkGiveSourceCap>:

void PolicySinkGiveSourceCap(struct Port *port)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
               port->caps_header_source_.NumDataObjects * 4,
               (FSC_U8 *)port->caps_source_,
               PE_SNK_Ready, 0, SOP_TYPE_SOP, FALSE);
  else
#endif /* FSC_HAVE_DRP */
    PolicySendNotSupported(port);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fb5a 	bl	800603a <PolicySendNotSupported>
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <PolicySinkSendDRSwap>:

void PolicySinkSendDRSwap(struct Port *port)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af04      	add	r7, sp, #16
 8005994:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <PolicySinkSendDRSwap+0x18>
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d01a      	beq.n	80059da <PolicySinkSendDRSwap+0x4c>
 80059a4:	e09a      	b.n	8005adc <PolicySinkSendDRSwap+0x14e>
    case 0:
      if (PolicySend(port, CMTDR_Swap, 0, 0, PE_DRS_UFP_DFP_Send_Swap,
 80059a6:	2300      	movs	r3, #0
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	9302      	str	r3, [sp, #8]
 80059ae:	2301      	movs	r3, #1
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	2347      	movs	r3, #71	; 0x47
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	2300      	movs	r3, #0
 80059b8:	2200      	movs	r2, #0
 80059ba:	2109      	movs	r1, #9
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fe0b 	bl	80065d8 <PolicySend>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	f040 808e 	bne.w	8005ae6 <PolicySinkSendDRSwap+0x158>
                          1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	338c      	adds	r3, #140	; 0x8c
 80059ce:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f003 fb18 	bl	8009008 <TimerStart>
      }
      break;
 80059d8:	e085      	b.n	8005ae6 <PolicySinkSendDRSwap+0x158>
    case 1:
      if (port->protocol_msg_rx_) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d060      	beq.n	8005aa6 <PolicySinkSendDRSwap+0x118>
        port->protocol_msg_rx_ = FALSE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80059f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d14b      	bne.n	8005a94 <PolicySinkSendDRSwap+0x106>
          switch (port->policy_rx_header_.MessageType) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005a02:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d002      	beq.n	8005a12 <PolicySinkSendDRSwap+0x84>
 8005a0c:	2b0d      	cmp	r3, #13
 8005a0e:	d036      	beq.n	8005a7e <PolicySinkSendDRSwap+0xf0>
 8005a10:	e03a      	b.n	8005a88 <PolicySinkSendDRSwap+0xfa>
            case CMTAccept:
              port->policy_is_dfp_ =
                  (port->policy_is_dfp_ == TRUE) ? FALSE : TRUE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	bf14      	ite	ne
 8005a1c:	2301      	movne	r3, #1
 8005a1e:	2300      	moveq	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	461a      	mov	r2, r3
              port->policy_is_dfp_ =
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
              port->registers_.MsgHeadr.DATA_ROLE = port->policy_is_dfp_;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	b2d9      	uxtb	r1, r3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8005a3c:	f361 03c3 	bfi	r3, r1, #3, #1
 8005a40:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
              WriteRegister(port, regMSGHEADR);
 8005a44:	212e      	movs	r1, #46	; 0x2e
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fd34 	bl	80074b4 <WriteRegister>
              DPM_ReConfigureRxDetect(port);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fe fab0 	bl	8003fb2 <DPM_ReConfigureRxDetect>
              notify_observers(port->policy_is_dfp_ == TRUE
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d102      	bne.n	8005a62 <PolicySinkSendDRSwap+0xd4>
 8005a5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a60:	e001      	b.n	8005a66 <PolicySinkSendDRSwap+0xd8>
 8005a62:	f44f 7000 	mov.w	r0, #512	; 0x200
                               ? EVENT_DATA_ROLE_DFP : EVENT_DATA_ROLE_UFP,
                               port->port_id_, 0);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	781b      	ldrb	r3, [r3, #0]
              notify_observers(port->policy_is_dfp_ == TRUE
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f7fe faba 	bl	8003fe8 <notify_observers>
              set_policy_state(port, PE_SNK_Ready);
 8005a74:	2113      	movs	r1, #19
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 fbb6 	bl	80081e8 <set_policy_state>
              break;
 8005a7c:	e00e      	b.n	8005a9c <PolicySinkSendDRSwap+0x10e>
            case CMTSoftReset:
              set_policy_state(port, PE_SNK_Soft_Reset);
 8005a7e:	211b      	movs	r1, #27
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f002 fbb1 	bl	80081e8 <set_policy_state>
              break;
 8005a86:	e009      	b.n	8005a9c <PolicySinkSendDRSwap+0x10e>
            default:
              set_policy_state(port, PE_SNK_Ready);
 8005a88:	2113      	movs	r1, #19
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f002 fbac 	bl	80081e8 <set_policy_state>
              break;
 8005a90:	bf00      	nop
 8005a92:	e003      	b.n	8005a9c <PolicySinkSendDRSwap+0x10e>
          }
        }
        else {
          set_policy_state(port, PE_SNK_Ready);
 8005a94:	2113      	movs	r1, #19
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f002 fba6 	bl	80081e8 <set_policy_state>
        }
        port->pd_tx_status_ = txIdle;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        port->pd_tx_status_ = txIdle;
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8005aa4:	e020      	b.n	8005ae8 <PolicySinkSendDRSwap+0x15a>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	338c      	adds	r3, #140	; 0x8c
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f003 faf6 	bl	800909c <TimerExpired>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <PolicySinkSendDRSwap+0x144>
        TimerDisable(&port->policy_state_timer_);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	338c      	adds	r3, #140	; 0x8c
 8005aba:	4618      	mov	r0, r3
 8005abc:	f003 fac2 	bl	8009044 <TimerDisable>
        set_policy_state(port, PE_SNK_Ready);
 8005ac0:	2113      	movs	r1, #19
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f002 fb90 	bl	80081e8 <set_policy_state>
        port->pd_tx_status_ = txIdle;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      break;
 8005ad0:	e00a      	b.n	8005ae8 <PolicySinkSendDRSwap+0x15a>
        port->idle_ = TRUE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005ada:	e005      	b.n	8005ae8 <PolicySinkSendDRSwap+0x15a>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8005adc:	21a6      	movs	r1, #166	; 0xa6
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f002 fb82 	bl	80081e8 <set_policy_state>
      break;
 8005ae4:	e000      	b.n	8005ae8 <PolicySinkSendDRSwap+0x15a>
      break;
 8005ae6:	bf00      	nop
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <PolicySinkEvaluateDRSwap>:

void PolicySinkEvaluateDRSwap(struct Port *port)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af04      	add	r7, sp, #16
 8005af6:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_VDM
  if (port->mode_entered_ == TRUE) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d103      	bne.n	8005b0a <PolicySinkEvaluateDRSwap+0x1a>
    PolicySinkSendHardReset(port);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fe fd6f 	bl	80045e6 <PolicySinkSendHardReset>
    return;
 8005b08:	e054      	b.n	8005bb4 <PolicySinkEvaluateDRSwap+0xc4>
  }
#endif /* FSC_HAVE_VDM */
  if ((port->protocol_msg_rx_sop_ != SOP_TYPE_SOP) ||
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <PolicySinkEvaluateDRSwap+0x38>
      (port->policy_is_dfp_ && !DR_Swap_To_UFP_Supported) ||
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
  if ((port->protocol_msg_rx_sop_ != SOP_TYPE_SOP) ||
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <PolicySinkEvaluateDRSwap+0x38>
      (!port->policy_is_dfp_ && !DR_Swap_To_DFP_Supported)) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
      (port->policy_is_dfp_ && !DR_Swap_To_UFP_Supported) ||
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <PolicySinkEvaluateDRSwap+0x40>
    PolicySendNotSupported(port);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fa86 	bl	800603a <PolicySendNotSupported>
 8005b2e:	e041      	b.n	8005bb4 <PolicySinkEvaluateDRSwap+0xc4>
  }
  else
  {
    if (PolicySend(port, CMTAccept, 0, 0, PE_SNK_Ready,
 8005b30:	2300      	movs	r3, #0
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	2300      	movs	r3, #0
 8005b36:	9302      	str	r3, [sp, #8]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	2313      	movs	r3, #19
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	2300      	movs	r3, #0
 8005b42:	2200      	movs	r2, #0
 8005b44:	2103      	movs	r1, #3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fd46 	bl	80065d8 <PolicySend>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d130      	bne.n	8005bb4 <PolicySinkEvaluateDRSwap+0xc4>
            0, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
      port->policy_is_dfp_ = (port->policy_is_dfp_ == TRUE) ? FALSE : TRUE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      port->registers_.MsgHeadr.DATA_ROLE = port->policy_is_dfp_;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	b2d9      	uxtb	r1, r3
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8005b7c:	f361 03c3 	bfi	r3, r1, #3, #1
 8005b80:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
      WriteRegister(port, regMSGHEADR);
 8005b84:	212e      	movs	r1, #46	; 0x2e
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 fc94 	bl	80074b4 <WriteRegister>
      DPM_ReConfigureRxDetect(port);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fe fa10 	bl	8003fb2 <DPM_ReConfigureRxDetect>
      notify_observers(port->policy_is_dfp_ == TRUE
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d102      	bne.n	8005ba2 <PolicySinkEvaluateDRSwap+0xb2>
 8005b9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ba0:	e001      	b.n	8005ba6 <PolicySinkEvaluateDRSwap+0xb6>
 8005ba2:	f44f 7000 	mov.w	r0, #512	; 0x200
                       ? EVENT_DATA_ROLE_DFP : EVENT_DATA_ROLE_UFP,
                       port->port_id_, 0);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
      notify_observers(port->policy_is_dfp_ == TRUE
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2200      	movs	r2, #0
 8005bae:	4619      	mov	r1, r3
 8005bb0:	f7fe fa1a 	bl	8003fe8 <notify_observers>
    }
  }
}
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <PolicySinkSendVCONNSwap>:

void PolicySinkSendVCONNSwap(struct Port *port)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af04      	add	r7, sp, #16
 8005bc2:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	f200 812a 	bhi.w	8005e24 <PolicySinkSendVCONNSwap+0x268>
 8005bd0:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <PolicySinkSendVCONNSwap+0x1c>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005bed 	.word	0x08005bed
 8005bdc:	08005c21 	.word	0x08005c21
 8005be0:	08005d1b 	.word	0x08005d1b
 8005be4:	08005d5d 	.word	0x08005d5d
 8005be8:	08005de3 	.word	0x08005de3
    case 0:
      if (PolicySend(port, CMTVCONN_Swap, 0, 0, PE_VCS_Send_Swap,
 8005bec:	2300      	movs	r3, #0
 8005bee:	9303      	str	r3, [sp, #12]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	2369      	movs	r3, #105	; 0x69
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2200      	movs	r2, #0
 8005c00:	210b      	movs	r1, #11
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fce8 	bl	80065d8 <PolicySend>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	f040 810f 	bne.w	8005e2e <PolicySinkSendVCONNSwap+0x272>
                     1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	338c      	adds	r3, #140	; 0x8c
 8005c14:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f003 f9f5 	bl	8009008 <TimerStart>
      }
      break;
 8005c1e:	e106      	b.n	8005e2e <PolicySinkSendVCONNSwap+0x272>
    case 1:
      if (port->protocol_msg_rx_) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d058      	beq.n	8005cdc <PolicySinkSendVCONNSwap+0x120>
        port->protocol_msg_rx_ = FALSE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d167      	bne.n	8005d12 <PolicySinkSendVCONNSwap+0x156>
          switch (port->policy_rx_header_.MessageType) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005c48:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	3b03      	subs	r3, #3
 8005c50:	2b0d      	cmp	r3, #13
 8005c52:	d860      	bhi.n	8005d16 <PolicySinkSendVCONNSwap+0x15a>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <PolicySinkSendVCONNSwap+0xa0>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c95 	.word	0x08005c95
 8005c60:	08005cb1 	.word	0x08005cb1
 8005c64:	08005d17 	.word	0x08005d17
 8005c68:	08005d17 	.word	0x08005d17
 8005c6c:	08005d17 	.word	0x08005d17
 8005c70:	08005d17 	.word	0x08005d17
 8005c74:	08005d17 	.word	0x08005d17
 8005c78:	08005d17 	.word	0x08005d17
 8005c7c:	08005d17 	.word	0x08005d17
 8005c80:	08005ccb 	.word	0x08005ccb
 8005c84:	08005d17 	.word	0x08005d17
 8005c88:	08005d17 	.word	0x08005d17
 8005c8c:	08005d17 	.word	0x08005d17
 8005c90:	08005cb1 	.word	0x08005cb1
            case CMTAccept:
              port->policy_subindex_++;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
              TimerDisable(&port->policy_state_timer_);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	338c      	adds	r3, #140	; 0x8c
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f003 f9cb 	bl	8009044 <TimerDisable>
              break;
 8005cae:	e033      	b.n	8005d18 <PolicySinkSendVCONNSwap+0x15c>
            case CMTReject:
            case CMTNotSupported:
              /* If needed, can force becoming the VConn Source */
              if (port->is_vconn_source_ == FALSE) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d107      	bne.n	8005cca <PolicySinkSendVCONNSwap+0x10e>
                port->is_vconn_source_ = TRUE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
                SetVConn(port, TRUE);
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fef7 	bl	8007ab8 <SetVConn>
              }
              /* Fall through */
            case CMTWait:
              set_policy_state(port, PE_SNK_Ready);
 8005cca:	2113      	movs	r1, #19
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f002 fa8b 	bl	80081e8 <set_policy_state>
              port->pd_tx_status_ = txIdle;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
              break;
 8005cda:	e01d      	b.n	8005d18 <PolicySinkSendVCONNSwap+0x15c>
              /* Ignore all other commands */
              break;
          }
        }
      }
      else if (TimerExpired(&port->policy_state_timer_)) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	338c      	adds	r3, #140	; 0x8c
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f003 f9db 	bl	800909c <TimerExpired>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00d      	beq.n	8005d08 <PolicySinkSendVCONNSwap+0x14c>
        TimerDisable(&port->policy_state_timer_);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	338c      	adds	r3, #140	; 0x8c
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f003 f9a7 	bl	8009044 <TimerDisable>
        set_policy_state(port, PE_SNK_Ready);
 8005cf6:	2113      	movs	r1, #19
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f002 fa75 	bl	80081e8 <set_policy_state>
        port->pd_tx_status_ = txIdle;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8005d06:	e093      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
        port->idle_ = TRUE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005d10:	e08e      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
        }
 8005d12:	bf00      	nop
 8005d14:	e08c      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
              break;
 8005d16:	bf00      	nop
      break;
 8005d18:	e08a      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
    case 2:
      if (port->is_vconn_source_) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00e      	beq.n	8005d42 <PolicySinkSendVCONNSwap+0x186>
        TimerStart(&port->policy_state_timer_, ktVCONNSourceOn);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	338c      	adds	r3, #140	; 0x8c
 8005d28:	4943      	ldr	r1, [pc, #268]	; (8005e38 <PolicySinkSendVCONNSwap+0x27c>)
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f003 f96c 	bl	8009008 <TimerStart>
        port->policy_subindex_++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005d36:	3301      	adds	r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        SetVConn(port, TRUE);

        /* Skip next state and send the PS_RDY msg */
        port->policy_subindex_ = 4;
      }
      break;
 8005d40:	e076      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
        port->is_vconn_source_ = TRUE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        SetVConn(port, TRUE);
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 feb3 	bl	8007ab8 <SetVConn>
        port->policy_subindex_ = 4;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2204      	movs	r2, #4
 8005d56:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 8005d5a:	e069      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
    case 3:
      if (port->protocol_msg_rx_) {
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d025      	beq.n	8005db2 <PolicySinkSendVCONNSwap+0x1f6>
        port->protocol_msg_rx_ = FALSE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d12f      	bne.n	8005dde <PolicySinkSendVCONNSwap+0x222>
          switch (port->policy_rx_header_.MessageType) {
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005d84:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b06      	cmp	r3, #6
 8005d8c:	d000      	beq.n	8005d90 <PolicySinkSendVCONNSwap+0x1d4>
              set_policy_state(port, PE_SNK_Ready);
              port->pd_tx_status_ = txIdle;
              break;
            default:
              /* Ignore all other commands received */
              break;
 8005d8e:	e027      	b.n	8005de0 <PolicySinkSendVCONNSwap+0x224>
              port->is_vconn_source_ = FALSE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
              SetVConn(port, FALSE);
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fe8c 	bl	8007ab8 <SetVConn>
              set_policy_state(port, PE_SNK_Ready);
 8005da0:	2113      	movs	r1, #19
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f002 fa20 	bl	80081e8 <set_policy_state>
              port->pd_tx_status_ = txIdle;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
              break;
 8005db0:	e016      	b.n	8005de0 <PolicySinkSendVCONNSwap+0x224>
          }
        }
      }
      else if (TimerExpired(&port->policy_state_timer_)) {
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	338c      	adds	r3, #140	; 0x8c
 8005db6:	4618      	mov	r0, r3
 8005db8:	f003 f970 	bl	800909c <TimerExpired>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d008      	beq.n	8005dd4 <PolicySinkSendVCONNSwap+0x218>
        TimerDisable(&port->policy_state_timer_);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	338c      	adds	r3, #140	; 0x8c
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f003 f93c 	bl	8009044 <TimerDisable>
        PolicySinkSendHardReset(port);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fe fc0a 	bl	80045e6 <PolicySinkSendHardReset>
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8005dd2:	e02d      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
        port->idle_ = TRUE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005ddc:	e028      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
        }
 8005dde:	bf00      	nop
      break;
 8005de0:	e026      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
    case 4:
      PolicySend(port, CMTPS_RDY, 0, 0, PE_SNK_Ready, 0, SOP_TYPE_SOP, FALSE);
 8005de2:	2300      	movs	r3, #0
 8005de4:	9303      	str	r3, [sp, #12]
 8005de6:	2300      	movs	r3, #0
 8005de8:	9302      	str	r3, [sp, #8]
 8005dea:	2300      	movs	r3, #0
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	2313      	movs	r3, #19
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	2300      	movs	r3, #0
 8005df4:	2200      	movs	r2, #0
 8005df6:	2106      	movs	r1, #6
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fbed 	bl	80065d8 <PolicySend>
#ifdef FSC_HAVE_VDM
      port->vdm_check_cbl_ = (port->vdm_cbl_present_ == FALSE &&
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
                              DPM_IsSOPPAllowed(port)) ? TRUE : FALSE;
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d107      	bne.n	8005e18 <PolicySinkSendVCONNSwap+0x25c>
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fe f8c7 	bl	8003f9c <DPM_IsSOPPAllowed>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <PolicySinkSendVCONNSwap+0x25c>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <PolicySinkSendVCONNSwap+0x25e>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	b2da      	uxtb	r2, r3
      port->vdm_check_cbl_ = (port->vdm_cbl_present_ == FALSE &&
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
#endif /* FSC_HAVE_VDM */
      break;
 8005e22:	e005      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8005e24:	21a6      	movs	r1, #166	; 0xa6
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f002 f9de 	bl	80081e8 <set_policy_state>
      break;
 8005e2c:	e000      	b.n	8005e30 <PolicySinkSendVCONNSwap+0x274>
      break;
 8005e2e:	bf00      	nop
  }
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	00015f90 	.word	0x00015f90

08005e3c <PolicySinkEvaluateVCONNSwap>:

void PolicySinkEvaluateVCONNSwap(struct Port *port)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af04      	add	r7, sp, #16
 8005e42:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	f200 80d3 	bhi.w	8005ff6 <PolicySinkEvaluateVCONNSwap+0x1ba>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <PolicySinkEvaluateVCONNSwap+0x1c>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e69 	.word	0x08005e69
 8005e5c:	08005ef9 	.word	0x08005ef9
 8005e60:	08005f7f 	.word	0x08005f7f
 8005e64:	08005fb5 	.word	0x08005fb5
    case 0:
      if ((port->protocol_msg_rx_sop_ != SOP_TYPE_SOP) ||
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <PolicySinkEvaluateVCONNSwap+0x4a>
          (port->is_vconn_source_ && !VCONN_Swap_To_Off_Supported) ||
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
      if ((port->protocol_msg_rx_sop_ != SOP_TYPE_SOP) ||
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d104      	bne.n	8005e86 <PolicySinkEvaluateVCONNSwap+0x4a>
          (!port->is_vconn_source_ && !VCONN_Swap_To_On_Supported)) {
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
          (port->is_vconn_source_ && !VCONN_Swap_To_Off_Supported) ||
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <PolicySinkEvaluateVCONNSwap+0x52>
        PolicySendNotSupported(port);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8d7 	bl	800603a <PolicySendNotSupported>

          TimerStart(&port->policy_state_timer_, port->vbus_transition_time_);
          port->policy_subindex_ = 2;
        }
      }
      break;
 8005e8c:	e0b8      	b.n	8006000 <PolicySinkEvaluateVCONNSwap+0x1c4>
      else if (PolicySend(port, CMTAccept, 0, 0, PE_VCS_Evaluate_Swap,
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9303      	str	r3, [sp, #12]
 8005e92:	2300      	movs	r3, #0
 8005e94:	9302      	str	r3, [sp, #8]
 8005e96:	2301      	movs	r3, #1
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	236a      	movs	r3, #106	; 0x6a
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2103      	movs	r1, #3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb97 	bl	80065d8 <PolicySend>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f040 80a7 	bne.w	8006000 <PolicySinkEvaluateVCONNSwap+0x1c4>
        if (port->is_vconn_source_) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <PolicySinkEvaluateVCONNSwap+0x8e>
          TimerStart(&port->policy_state_timer_, ktVCONNSourceOn);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	338c      	adds	r3, #140	; 0x8c
 8005ec0:	4952      	ldr	r1, [pc, #328]	; (800600c <PolicySinkEvaluateVCONNSwap+0x1d0>)
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f003 f8a0 	bl	8009008 <TimerStart>
      break;
 8005ec8:	e09a      	b.n	8006000 <PolicySinkEvaluateVCONNSwap+0x1c4>
          port->is_vconn_source_ = TRUE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
          SetVConn(port, TRUE);
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fdef 	bl	8007ab8 <SetVConn>
          TimerStart(&port->policy_state_timer_, port->vbus_transition_time_);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f003 f88d 	bl	8009008 <TimerStart>
          port->policy_subindex_ = 2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 8005ef6:	e083      	b.n	8006000 <PolicySinkEvaluateVCONNSwap+0x1c4>
    case 1:
      if (port->protocol_msg_rx_) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d025      	beq.n	8005f4e <PolicySinkEvaluateVCONNSwap+0x112>
       port->protocol_msg_rx_ = FALSE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005f10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d12f      	bne.n	8005f7a <PolicySinkEvaluateVCONNSwap+0x13e>
          switch (port->policy_rx_header_.MessageType) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005f20:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d000      	beq.n	8005f2c <PolicySinkEvaluateVCONNSwap+0xf0>

              set_policy_state(port, PE_SNK_Ready);
              port->pd_tx_status_ = txIdle;
              break;
            default:
              break;
 8005f2a:	e027      	b.n	8005f7c <PolicySinkEvaluateVCONNSwap+0x140>
              port->is_vconn_source_ = FALSE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
              SetVConn(port, FALSE);
 8005f34:	2100      	movs	r1, #0
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fdbe 	bl	8007ab8 <SetVConn>
              set_policy_state(port, PE_SNK_Ready);
 8005f3c:	2113      	movs	r1, #19
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f002 f952 	bl	80081e8 <set_policy_state>
              port->pd_tx_status_ = txIdle;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
              break;
 8005f4c:	e016      	b.n	8005f7c <PolicySinkEvaluateVCONNSwap+0x140>
          }
        }
      }
      else if (TimerExpired(&port->policy_state_timer_)) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	338c      	adds	r3, #140	; 0x8c
 8005f52:	4618      	mov	r0, r3
 8005f54:	f003 f8a2 	bl	800909c <TimerExpired>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <PolicySinkEvaluateVCONNSwap+0x134>
        TimerDisable(&port->policy_state_timer_);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	338c      	adds	r3, #140	; 0x8c
 8005f62:	4618      	mov	r0, r3
 8005f64:	f003 f86e 	bl	8009044 <TimerDisable>
        PolicySinkSendHardReset(port);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fe fb3c 	bl	80045e6 <PolicySinkSendHardReset>
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8005f6e:	e048      	b.n	8006002 <PolicySinkEvaluateVCONNSwap+0x1c6>
        port->idle_ = TRUE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005f78:	e043      	b.n	8006002 <PolicySinkEvaluateVCONNSwap+0x1c6>
        }
 8005f7a:	bf00      	nop
      break;
 8005f7c:	e041      	b.n	8006002 <PolicySinkEvaluateVCONNSwap+0x1c6>
    case 2:
      if (TimerExpired(&port->policy_state_timer_)) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	338c      	adds	r3, #140	; 0x8c
 8005f82:	4618      	mov	r0, r3
 8005f84:	f003 f88a 	bl	800909c <TimerExpired>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <PolicySinkEvaluateVCONNSwap+0x16e>
        TimerDisable(&port->policy_state_timer_);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	338c      	adds	r3, #140	; 0x8c
 8005f92:	4618      	mov	r0, r3
 8005f94:	f003 f856 	bl	8009044 <TimerDisable>
        port->policy_subindex_++;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8005fa8:	e02b      	b.n	8006002 <PolicySinkEvaluateVCONNSwap+0x1c6>
        port->idle_ = TRUE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005fb2:	e026      	b.n	8006002 <PolicySinkEvaluateVCONNSwap+0x1c6>
    case 3:
      PolicySend(port, CMTPS_RDY, 0, 0, PE_SNK_Ready, 0, SOP_TYPE_SOP, FALSE);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9303      	str	r3, [sp, #12]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9302      	str	r3, [sp, #8]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	2313      	movs	r3, #19
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2106      	movs	r1, #6
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fb04 	bl	80065d8 <PolicySend>
#ifdef FSC_HAVE_VDM
      port->vdm_check_cbl_ = (port->vdm_cbl_present_ == FALSE &&
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
                              DPM_IsSOPPAllowed(port)) ? TRUE : FALSE;
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d107      	bne.n	8005fea <PolicySinkEvaluateVCONNSwap+0x1ae>
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fd ffde 	bl	8003f9c <DPM_IsSOPPAllowed>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <PolicySinkEvaluateVCONNSwap+0x1ae>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <PolicySinkEvaluateVCONNSwap+0x1b0>
 8005fea:	2300      	movs	r3, #0
 8005fec:	b2da      	uxtb	r2, r3
      port->vdm_check_cbl_ = (port->vdm_cbl_present_ == FALSE &&
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
#endif /* FSC_HAVE_VDM */
      break;
 8005ff4:	e005      	b.n	8006002 <PolicySinkEvaluateVCONNSwap+0x1c6>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8005ff6:	21a6      	movs	r1, #166	; 0xa6
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f002 f8f5 	bl	80081e8 <set_policy_state>
      break;
 8005ffe:	e000      	b.n	8006002 <PolicySinkEvaluateVCONNSwap+0x1c6>
      break;
 8006000:	bf00      	nop
  }
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	00015f90 	.word	0x00015f90

08006010 <PolicySinkSendPRSwap>:

void PolicySinkSendPRSwap(struct Port *port)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
    default:
      set_policy_state(port, PE_ErrorRecovery);
      break;
  }
#endif /* FSC_HAVE_DRP */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <PolicySinkEvaluatePRSwap>:

void PolicySinkEvaluatePRSwap(struct Port *port)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
    default:
      set_policy_state(port, PE_ErrorRecovery);
      break;
  }
#else
  PolicySendNotSupported(port);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f804 	bl	800603a <PolicySendNotSupported>
#endif /* FSC_HAVE_DRP */
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <PolicySendNotSupported>:
}
#endif /* FSC_HAVE_FRSWAP */
#endif /* FSC_HAVE_SNK */

void PolicySendNotSupported(struct Port *port)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af04      	add	r7, sp, #16
 8006040:	6078      	str	r0, [r7, #4]
  set_policy_state(port, port->policy_is_source_ ?
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <PolicySendNotSupported+0x16>
 800604c:	231c      	movs	r3, #28
 800604e:	e000      	b.n	8006052 <PolicySendNotSupported+0x18>
 8006050:	231f      	movs	r3, #31
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f002 f8c7 	bl	80081e8 <set_policy_state>
          PE_SRC_Send_Not_Supported : PE_SNK_Send_Not_Supported);

  if (((port->protocol_msg_rx_sop_ == SOP_TYPE_SOP) && !port->dpm_pd_30_) ||
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <PolicySendNotSupported+0x34>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <PolicySendNotSupported+0x48>
      ((port->protocol_msg_rx_sop_ == SOP_TYPE_SOP1) &&
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
  if (((port->protocol_msg_rx_sop_ == SOP_TYPE_SOP) && !port->dpm_pd_30_) ||
 8006074:	2b01      	cmp	r3, #1
 8006076:	d11c      	bne.n	80060b2 <PolicySendNotSupported+0x78>
       !port->dpm_pd_30_srccab_)) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
      ((port->protocol_msg_rx_sop_ == SOP_TYPE_SOP1) &&
 800607e:	2b00      	cmp	r3, #0
 8006080:	d117      	bne.n	80060b2 <PolicySendNotSupported+0x78>
    PolicySend(port, CMTReject, 0, 0,
               port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready, 0,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
    PolicySend(port, CMTReject, 0, 0,
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <PolicySendNotSupported+0x56>
 800608c:	2305      	movs	r3, #5
 800608e:	e000      	b.n	8006092 <PolicySendNotSupported+0x58>
 8006090:	2313      	movs	r3, #19
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
 8006098:	2100      	movs	r1, #0
 800609a:	9103      	str	r1, [sp, #12]
 800609c:	9202      	str	r2, [sp, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	9201      	str	r2, [sp, #4]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2300      	movs	r3, #0
 80060a6:	2200      	movs	r2, #0
 80060a8:	2104      	movs	r1, #4
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fa94 	bl	80065d8 <PolicySend>
 80060b0:	e053      	b.n	800615a <PolicySendNotSupported+0x120>
               port->protocol_msg_rx_sop_, FALSE);
  }
  else {
    switch(port->policy_subindex_) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <PolicySendNotSupported+0x88>
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d01e      	beq.n	80060fe <PolicySendNotSupported+0xc4>
 80060c0:	e032      	b.n	8006128 <PolicySendNotSupported+0xee>
#ifndef FSC_HAVE_EXTENDED
    /* When chunking is not supported wait for timer tChunkingNotSupported
     * timer timeout */
    case 0:
      if (port->wait_for_not_supported_) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d013      	beq.n	80060f4 <PolicySendNotSupported+0xba>
        TimerStart(&port->policy_state_timer_, ktChunkingNotSupported);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	338c      	adds	r3, #140	; 0x8c
 80060d0:	f649 4140 	movw	r1, #40000	; 0x9c40
 80060d4:	4618      	mov	r0, r3
 80060d6:	f002 ff97 	bl	8009008 <TimerStart>
        port->policy_subindex_++;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80060e0:	3301      	adds	r3, #1
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        port->wait_for_not_supported_ = FALSE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
      }
      else {
        port->policy_subindex_ = 2;
      }
      break;
 80060f2:	e032      	b.n	800615a <PolicySendNotSupported+0x120>
        port->policy_subindex_ = 2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 80060fc:	e02d      	b.n	800615a <PolicySendNotSupported+0x120>
    case 1:
      if (TimerExpired(&port->policy_state_timer_)) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	338c      	adds	r3, #140	; 0x8c
 8006102:	4618      	mov	r0, r3
 8006104:	f002 ffca 	bl	800909c <TimerExpired>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d024      	beq.n	8006158 <PolicySendNotSupported+0x11e>
        TimerDisable(&port->policy_state_timer_);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	338c      	adds	r3, #140	; 0x8c
 8006112:	4618      	mov	r0, r3
 8006114:	f002 ff96 	bl	8009044 <TimerDisable>
        port->policy_subindex_++;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800611e:	3301      	adds	r3, #1
 8006120:	b2da      	uxtb	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      }
    case 2:
#endif /* FSC_HAVE_EXTENDED */
    default:
      PolicySend(port, CMTNotSupported, 0, 0,
                 port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready, 0,
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
      PolicySend(port, CMTNotSupported, 0, 0,
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <PolicySendNotSupported+0xfc>
 8006132:	2305      	movs	r3, #5
 8006134:	e000      	b.n	8006138 <PolicySendNotSupported+0xfe>
 8006136:	2313      	movs	r3, #19
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
 800613e:	2100      	movs	r1, #0
 8006140:	9103      	str	r1, [sp, #12]
 8006142:	9202      	str	r2, [sp, #8]
 8006144:	2200      	movs	r2, #0
 8006146:	9201      	str	r2, [sp, #4]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	2300      	movs	r3, #0
 800614c:	2200      	movs	r2, #0
 800614e:	2110      	movs	r1, #16
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fa41 	bl	80065d8 <PolicySend>
                 port->protocol_msg_rx_sop_, FALSE);
      break;
 8006156:	e000      	b.n	800615a <PolicySendNotSupported+0x120>
        break;
 8006158:	bf00      	nop
    }
  }
}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <PolicyNotSupported>:

void PolicyNotSupported(struct Port *port)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* TODO Inform DPM if needed. */
  set_policy_state(port, port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <PolicyNotSupported+0x16>
 8006174:	2305      	movs	r3, #5
 8006176:	e000      	b.n	800617a <PolicyNotSupported+0x18>
 8006178:	2313      	movs	r3, #19
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f002 f833 	bl	80081e8 <set_policy_state>
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <PolicyDFPCBLSendSoftReset>:

void PolicyDFPCBLSendSoftReset(struct Port *port)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b086      	sub	sp, #24
 800618e:	af04      	add	r7, sp, #16
 8006190:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <PolicyDFPCBLSendSoftReset+0x18>
 800619c:	2b01      	cmp	r3, #1
 800619e:	d019      	beq.n	80061d4 <PolicyDFPCBLSendSoftReset+0x4a>
 80061a0:	e062      	b.n	8006268 <PolicyDFPCBLSendSoftReset+0xde>
    case 0:
      if (PolicySend(port, CMTSoftReset, 0, 0, PE_DFP_CBL_Send_Soft_Reset,
 80061a2:	2300      	movs	r3, #0
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	2301      	movs	r3, #1
 80061a8:	9302      	str	r3, [sp, #8]
 80061aa:	2301      	movs	r3, #1
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	23a2      	movs	r3, #162	; 0xa2
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	2300      	movs	r3, #0
 80061b4:	2200      	movs	r2, #0
 80061b6:	210d      	movs	r1, #13
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fa0d 	bl	80065d8 <PolicySend>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d156      	bne.n	8006272 <PolicyDFPCBLSendSoftReset+0xe8>
                     1, SOP_TYPE_SOP1, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	338c      	adds	r3, #140	; 0x8c
 80061c8:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80061cc:	4618      	mov	r0, r3
 80061ce:	f002 ff1b 	bl	8009008 <TimerStart>
      }
      break;
 80061d2:	e04e      	b.n	8006272 <PolicyDFPCBLSendSoftReset+0xe8>
    case 1:
      if (port->protocol_msg_rx_) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d02d      	beq.n	800623a <PolicyDFPCBLSendSoftReset+0xb0>
        port->protocol_msg_rx_ = FALSE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        port->pd_tx_status_ = txIdle;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        if ((port->policy_rx_header_.NumDataObjects == 0) &&
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80061f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d118      	bne.n	8006230 <PolicyDFPCBLSendSoftReset+0xa6>
            (port->policy_rx_header_.MessageType == CMTAccept)) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	b2db      	uxtb	r3, r3
        if ((port->policy_rx_header_.NumDataObjects == 0) &&
 800620a:	2b03      	cmp	r3, #3
 800620c:	d110      	bne.n	8006230 <PolicyDFPCBLSendSoftReset+0xa6>
          set_policy_state(port, port->policy_is_source_ ?
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <PolicyDFPCBLSendSoftReset+0x92>
 8006218:	2305      	movs	r3, #5
 800621a:	e000      	b.n	800621e <PolicyDFPCBLSendSoftReset+0x94>
 800621c:	2313      	movs	r3, #19
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 ffe1 	bl	80081e8 <set_policy_state>
              PE_SRC_Ready : PE_SNK_Ready);
          ResetProtocolLayer(port, SOP_TYPE_SOP1);
 8006226:	2101      	movs	r1, #1
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fe2e 	bl	8007e8a <ResetProtocolLayer>
        set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 800622e:	e021      	b.n	8006274 <PolicyDFPCBLSendSoftReset+0xea>
          set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
 8006230:	21a3      	movs	r1, #163	; 0xa3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 ffd8 	bl	80081e8 <set_policy_state>
      break;
 8006238:	e01c      	b.n	8006274 <PolicyDFPCBLSendSoftReset+0xea>
      else if (TimerExpired(&port->policy_state_timer_)) {
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	338c      	adds	r3, #140	; 0x8c
 800623e:	4618      	mov	r0, r3
 8006240:	f002 ff2c 	bl	800909c <TimerExpired>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <PolicyDFPCBLSendSoftReset+0xd4>
        TimerDisable(&port->policy_state_timer_);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	338c      	adds	r3, #140	; 0x8c
 800624e:	4618      	mov	r0, r3
 8006250:	f002 fef8 	bl	8009044 <TimerDisable>
        set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
 8006254:	21a3      	movs	r1, #163	; 0xa3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 ffc6 	bl	80081e8 <set_policy_state>
      break;
 800625c:	e00a      	b.n	8006274 <PolicyDFPCBLSendSoftReset+0xea>
        port->idle_ = TRUE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8006266:	e005      	b.n	8006274 <PolicyDFPCBLSendSoftReset+0xea>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8006268:	21a6      	movs	r1, #166	; 0xa6
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 ffbc 	bl	80081e8 <set_policy_state>
      break;
 8006270:	e000      	b.n	8006274 <PolicyDFPCBLSendSoftReset+0xea>
      break;
 8006272:	bf00      	nop
  }
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <PolicyDFPCBLSendReset>:

void PolicyDFPCBLSendReset(struct Port *port)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  port->cbl_rst_state_ = CBL_RST_DISABLED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
  PolicySendHardReset(port,
      port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready, TRUE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
  PolicySendHardReset(port,
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <PolicyDFPCBLSendReset+0x1e>
 8006296:	2305      	movs	r3, #5
 8006298:	e000      	b.n	800629c <PolicyDFPCBLSendReset+0x20>
 800629a:	2313      	movs	r3, #19
 800629c:	2201      	movs	r2, #1
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f854 	bl	800634e <PolicySendHardReset>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <UpdateCapabilitiesRx>:
}

#endif /* FSC_HAVE_EXTENDED */

void UpdateCapabilitiesRx(struct Port *port, FSC_BOOL is_source_cap_update)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  FSC_U8 i = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
#ifdef FSC_HAVE_USBHID
  /* Set the source caps updated flag to trigger an update of the GUI */
  port->source_caps_updated_ = is_source_cap_update;
#endif /* FSC_HAVE_USBHID */

  port->caps_header_received_.word = port->policy_rx_header_.word;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8b3 2158 	ldrh.w	r2, [r3, #344]	; 0x158
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
  for (i = 0; i < port->caps_header_received_.NumDataObjects; i++) {
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
 80062ce:	e00d      	b.n	80062ec <UpdateCapabilitiesRx+0x3e>
    port->caps_received_[i].object =
        port->policy_rx_data_obj_[i].object;
 80062d0:	7bf9      	ldrb	r1, [r7, #15]
    port->caps_received_[i].object =
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
        port->policy_rx_data_obj_[i].object;
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	3158      	adds	r1, #88	; 0x58
 80062d8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    port->caps_received_[i].object =
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	337e      	adds	r3, #126	; 0x7e
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	605a      	str	r2, [r3, #4]
  for (i = 0; i < port->caps_header_received_.NumDataObjects; i++) {
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	3301      	adds	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 80062f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d3e7      	bcc.n	80062d0 <UpdateCapabilitiesRx+0x22>
  }

  for (i = port->caps_header_received_.NumDataObjects; i < 7; i++) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 8006306:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800630a:	b2db      	uxtb	r3, r3
 800630c:	73fb      	strb	r3, [r7, #15]
 800630e:	e009      	b.n	8006324 <UpdateCapabilitiesRx+0x76>
    port->caps_received_[i].object = 0;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	337e      	adds	r3, #126	; 0x7e
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]
  for (i = port->caps_header_received_.NumDataObjects; i < 7; i++) {
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	3301      	adds	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d9f2      	bls.n	8006310 <UpdateCapabilitiesRx+0x62>
  }
  port->partner_caps_.object = port->caps_received_[0].object;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
  notify_observers(EVENT_SRC_CAPS_UPDATED, port->port_id_, 0);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	2200      	movs	r2, #0
 800633e:	4619      	mov	r1, r3
 8006340:	2080      	movs	r0, #128	; 0x80
 8006342:	f7fd fe51 	bl	8003fe8 <notify_observers>
}
 8006346:	bf00      	nop
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <PolicySendHardReset>:

FSC_BOOL PolicySendHardReset(struct Port *port, PolicyState_t next_state,
                             FSC_BOOL cable)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	70fb      	strb	r3, [r7, #3]
 800635a:	4613      	mov	r3, r2
 800635c:	70bb      	strb	r3, [r7, #2]
  FSC_BOOL Success = FALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]

  switch (port->pd_tx_status_) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8006368:	2b04      	cmp	r3, #4
 800636a:	d035      	beq.n	80063d8 <PolicySendHardReset+0x8a>
 800636c:	2b05      	cmp	r3, #5
 800636e:	d002      	beq.n	8006376 <PolicySendHardReset+0x28>
 8006370:	2b01      	cmp	r3, #1
 8006372:	d031      	beq.n	80063d8 <PolicySendHardReset+0x8a>
 8006374:	e02a      	b.n	80063cc <PolicySendHardReset+0x7e>
    case txWait:
      /* Do nothing until the protocol layer finishes generating the hard */
      /* reset setting the next state as either txCollision or txSuccess */
      break;
    case txSuccess:
      TimerStart(&port->policy_state_timer_,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	338c      	adds	r3, #140	; 0x8c
 800637a:	f646 1178 	movw	r1, #27000	; 0x6978
 800637e:	4618      	mov	r0, r3
 8006380:	f002 fe42 	bl	8009008 <TimerStart>
                 ktPSHardReset - ktPSHardResetOverhead);
      port->idle_ = TRUE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      port->hard_reset_counter_++;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8006392:	3301      	adds	r3, #1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      set_policy_state(port, next_state);
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 ff21 	bl	80081e8 <set_policy_state>
      port->pd_tx_status_ = txIdle;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      TimerDisable(&port->no_response_timer_);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	33bc      	adds	r3, #188	; 0xbc
 80063b2:	4618      	mov	r0, r3
 80063b4:	f002 fe46 	bl	8009044 <TimerDisable>
      Success = TRUE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      if (cable) {
 80063bc:	78bb      	ldrb	r3, [r7, #2]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <PolicySendHardReset+0x8e>
        /* Reset the cable protocol variables here before returning to SRC or
         * SNK Ready */
        ResetProtocolLayer(port, SOP_TYPE_SOP1);
 80063c2:	2101      	movs	r1, #1
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fd60 	bl	8007e8a <ResetProtocolLayer>
      }
      break;
 80063ca:	e007      	b.n	80063dc <PolicySendHardReset+0x8e>
    case txIdle:
    default:
      ProtocolSendHardReset(port, cable);
 80063cc:	78bb      	ldrb	r3, [r7, #2]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f002 fb17 	bl	8008a04 <ProtocolSendHardReset>
      break;
 80063d6:	e002      	b.n	80063de <PolicySendHardReset+0x90>
      break;
 80063d8:	bf00      	nop
 80063da:	e000      	b.n	80063de <PolicySendHardReset+0x90>
      break;
 80063dc:	bf00      	nop
  }
  return Success;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <PolicySendGenericCommand>:

void PolicySendGenericCommand(struct Port *port)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af04      	add	r7, sp, #16
 80063ee:	6078      	str	r0, [r7, #4]
    FSC_U8 status;
    switch (port->policy_subindex_)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d136      	bne.n	8006468 <PolicySendGenericCommand+0x80>
    {
    case 0:
        port->policy_is_ams_ = FALSE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
        status = PolicySend(port, port->pd_transmit_header_.MessageType, 0, 0,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8006408:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800640c:	b2db      	uxtb	r3, r3
 800640e:	4619      	mov	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8006416:	2200      	movs	r2, #0
 8006418:	9203      	str	r2, [sp, #12]
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	2301      	movs	r3, #1
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	23a9      	movs	r3, #169	; 0xa9
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	2300      	movs	r3, #0
 8006426:	2200      	movs	r2, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f8d5 	bl	80065d8 <PolicySend>
 800642e:	4603      	mov	r3, r0
 8006430:	73fb      	strb	r3, [r7, #15]
                   PE_Send_Generic_Cmd, 1, port->policy_msg_tx_sop_, FALSE);

        if (status == STAT_SUCCESS)
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <PolicySendGenericCommand+0x60>
        {
            TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	338c      	adds	r3, #140	; 0x8c
 800643c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8006440:	4618      	mov	r0, r3
 8006442:	f002 fde1 	bl	8009008 <TimerStart>
        else if (status == STAT_ERROR)
        {
            set_policy_state(port, port->policy_is_source_ ?
                    PE_SRC_Ready : PE_SNK_Ready);
        }
        break;
 8006446:	e03f      	b.n	80064c8 <PolicySendGenericCommand+0xe0>
        else if (status == STAT_ERROR)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d13c      	bne.n	80064c8 <PolicySendGenericCommand+0xe0>
            set_policy_state(port, port->policy_is_source_ ?
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <PolicySendGenericCommand+0x74>
 8006458:	2305      	movs	r3, #5
 800645a:	e000      	b.n	800645e <PolicySendGenericCommand+0x76>
 800645c:	2313      	movs	r3, #19
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fec1 	bl	80081e8 <set_policy_state>
        break;
 8006466:	e02f      	b.n	80064c8 <PolicySendGenericCommand+0xe0>
    default:
        if (port->protocol_msg_rx_)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d010      	beq.n	8006494 <PolicySendGenericCommand+0xac>
        {
            port->protocol_msg_rx_ = FALSE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

            /* Check and handle message response */

            set_policy_state(port, port->policy_is_source_ ?
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <PolicySendGenericCommand+0xa0>
 8006484:	2305      	movs	r3, #5
 8006486:	e000      	b.n	800648a <PolicySendGenericCommand+0xa2>
 8006488:	2313      	movs	r3, #19
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 feab 	bl	80081e8 <set_policy_state>
        }
        else
        {
            port->idle_ = TRUE;
        }
        break;
 8006492:	e01a      	b.n	80064ca <PolicySendGenericCommand+0xe2>
        else if (TimerExpired(&port->policy_state_timer_))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	338c      	adds	r3, #140	; 0x8c
 8006498:	4618      	mov	r0, r3
 800649a:	f002 fdff 	bl	800909c <TimerExpired>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <PolicySendGenericCommand+0xd6>
            set_policy_state(port, port->policy_is_source_ ?
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <PolicySendGenericCommand+0xca>
 80064ae:	2305      	movs	r3, #5
 80064b0:	e000      	b.n	80064b4 <PolicySendGenericCommand+0xcc>
 80064b2:	2313      	movs	r3, #19
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fe96 	bl	80081e8 <set_policy_state>
        break;
 80064bc:	e005      	b.n	80064ca <PolicySendGenericCommand+0xe2>
            port->idle_ = TRUE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 80064c6:	e000      	b.n	80064ca <PolicySendGenericCommand+0xe2>
        break;
 80064c8:	bf00      	nop
    }
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <PolicySendGenericData>:

void PolicySendGenericData(struct Port *port)
{
 80064d2:	b590      	push	{r4, r7, lr}
 80064d4:	b089      	sub	sp, #36	; 0x24
 80064d6:	af04      	add	r7, sp, #16
 80064d8:	6078      	str	r0, [r7, #4]
    FSC_U8 status;
    switch (port->policy_subindex_)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d143      	bne.n	800656c <PolicySendGenericData+0x9a>
    {
    case 0:
        port->policy_is_ams_ = FALSE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
        status = PolicySend(port, port->pd_transmit_header_.MessageType,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80064f2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461c      	mov	r4, r3
                   port->pd_transmit_header_.NumDataObjects * 4,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8006500:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006504:	b2db      	uxtb	r3, r3
        status = PolicySend(port, port->pd_transmit_header_.MessageType,
 8006506:	b29b      	uxth	r3, r3
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	b299      	uxth	r1, r3
                   (FSC_U8*)port->pd_transmit_objects_, PE_Send_Generic_Data,
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
        status = PolicySend(port, port->pd_transmit_header_.MessageType,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8006518:	2200      	movs	r2, #0
 800651a:	9203      	str	r2, [sp, #12]
 800651c:	9302      	str	r3, [sp, #8]
 800651e:	2301      	movs	r3, #1
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	23aa      	movs	r3, #170	; 0xaa
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	4603      	mov	r3, r0
 8006528:	460a      	mov	r2, r1
 800652a:	4621      	mov	r1, r4
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f853 	bl	80065d8 <PolicySend>
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
                   1, port->policy_msg_tx_sop_, FALSE);

        if (status == STAT_SUCCESS)
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d107      	bne.n	800654c <PolicySendGenericData+0x7a>
        {
            TimerStart(&port->policy_state_timer_, ktSenderResponse);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	338c      	adds	r3, #140	; 0x8c
 8006540:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8006544:	4618      	mov	r0, r3
 8006546:	f002 fd5f 	bl	8009008 <TimerStart>
        else if (status == STAT_ERROR)
        {
            set_policy_state(port, port->policy_is_source_ ?
                    PE_SRC_Ready : PE_SNK_Ready);
        }
        break;
 800654a:	e03f      	b.n	80065cc <PolicySendGenericData+0xfa>
        else if (status == STAT_ERROR)
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d13c      	bne.n	80065cc <PolicySendGenericData+0xfa>
            set_policy_state(port, port->policy_is_source_ ?
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <PolicySendGenericData+0x8e>
 800655c:	2305      	movs	r3, #5
 800655e:	e000      	b.n	8006562 <PolicySendGenericData+0x90>
 8006560:	2313      	movs	r3, #19
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 fe3f 	bl	80081e8 <set_policy_state>
        break;
 800656a:	e02f      	b.n	80065cc <PolicySendGenericData+0xfa>
    default:
        if (port->protocol_msg_rx_)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d010      	beq.n	8006598 <PolicySendGenericData+0xc6>
        {
            port->protocol_msg_rx_ = FALSE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

            /* Check and handle message response */

            set_policy_state(port, port->policy_is_source_ ?
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <PolicySendGenericData+0xba>
 8006588:	2305      	movs	r3, #5
 800658a:	e000      	b.n	800658e <PolicySendGenericData+0xbc>
 800658c:	2313      	movs	r3, #19
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fe29 	bl	80081e8 <set_policy_state>
        }
        else
        {
            port->idle_ = TRUE;
        }
        break;
 8006596:	e01a      	b.n	80065ce <PolicySendGenericData+0xfc>
        else if (TimerExpired(&port->policy_state_timer_))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	338c      	adds	r3, #140	; 0x8c
 800659c:	4618      	mov	r0, r3
 800659e:	f002 fd7d 	bl	800909c <TimerExpired>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00c      	beq.n	80065c2 <PolicySendGenericData+0xf0>
            set_policy_state(port, port->policy_is_source_ ?
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <PolicySendGenericData+0xe4>
 80065b2:	2305      	movs	r3, #5
 80065b4:	e000      	b.n	80065b8 <PolicySendGenericData+0xe6>
 80065b6:	2313      	movs	r3, #19
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fe14 	bl	80081e8 <set_policy_state>
        break;
 80065c0:	e005      	b.n	80065ce <PolicySendGenericData+0xfc>
            port->idle_ = TRUE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 80065ca:	e000      	b.n	80065ce <PolicySendGenericData+0xfc>
        break;
 80065cc:	bf00      	nop
    }
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd90      	pop	{r4, r7, pc}
	...

080065d8 <PolicySend>:

FSC_U8 PolicySend(struct Port *port, FSC_U8 message_type,
                  FSC_U16 num_bytes, FSC_U8 *data,
                  PolicyState_t next_state,
                  FSC_U8 subindex, SopType sop, FSC_BOOL extended)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	460b      	mov	r3, r1
 80065e4:	72fb      	strb	r3, [r7, #11]
 80065e6:	4613      	mov	r3, r2
 80065e8:	813b      	strh	r3, [r7, #8]
  FSC_U16 i = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	82fb      	strh	r3, [r7, #22]
  FSC_U8 status = STAT_BUSY;
 80065ee:	2300      	movs	r3, #0
 80065f0:	757b      	strb	r3, [r7, #21]

  switch (port->pd_tx_status_) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80065f8:	2b09      	cmp	r3, #9
 80065fa:	f200 81b9 	bhi.w	8006970 <PolicySend+0x398>
 80065fe:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <PolicySend+0x2c>)
 8006600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006604:	0800662d 	.word	0x0800662d
 8006608:	08006971 	.word	0x08006971
 800660c:	0800683d 	.word	0x0800683d
 8006610:	0800683d 	.word	0x0800683d
 8006614:	0800683d 	.word	0x0800683d
 8006618:	0800688b 	.word	0x0800688b
 800661c:	080068af 	.word	0x080068af
 8006620:	08006885 	.word	0x08006885
 8006624:	0800667f 	.word	0x0800667f
 8006628:	0800694b 	.word	0x0800694b
    case txIdle:
      if (port->policy_is_source_ && port->dpm_pd_30_ && port->policy_is_ams_ &&
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01e      	beq.n	8006674 <PolicySend+0x9c>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d019      	beq.n	8006674 <PolicySend+0x9c>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8006646:	2b00      	cmp	r3, #0
 8006648:	d014      	beq.n	8006674 <PolicySend+0x9c>
          (port->policy_sinktx_state_ == SinkTxOK)) {
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
      if (port->policy_is_source_ && port->dpm_pd_30_ && port->policy_is_ams_ &&
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10f      	bne.n	8006674 <PolicySend+0x9c>
        /* If PD 3.0, set CC SinkTxNG and wait out SinkTx timer */
        SetSinkTx(port, SinkTxNG);
 8006654:	2101      	movs	r1, #1
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f001 fe10 	bl	800827c <SetSinkTx>
        TimerStart(&port->policy_sinktx_timer_, ktSinkTx);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3398      	adds	r3, #152	; 0x98
 8006660:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8006664:	4618      	mov	r0, r3
 8006666:	f002 fccf 	bl	8009008 <TimerStart>
        port->pd_tx_status_ = txPending;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2208      	movs	r2, #8
 800666e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        break;
 8006672:	e192      	b.n	800699a <PolicySend+0x3c2>
      }
      else {
        TimerDisable(&port->policy_sinktx_timer_);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3398      	adds	r3, #152	; 0x98
 8006678:	4618      	mov	r0, r3
 800667a:	f002 fce3 	bl	8009044 <TimerDisable>
      }
      /* Else fall through */
    case txPending:
      if (!TimerExpired(&port->policy_sinktx_timer_) &&
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3398      	adds	r3, #152	; 0x98
 8006682:	4618      	mov	r0, r3
 8006684:	f002 fd0a 	bl	800909c <TimerExpired>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <PolicySend+0xd0>
          !TimerDisabled(&port->policy_sinktx_timer_)) {
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3398      	adds	r3, #152	; 0x98
 8006692:	4618      	mov	r0, r3
 8006694:	f002 fcf1 	bl	800907a <TimerDisabled>
 8006698:	4603      	mov	r3, r0
      if (!TimerExpired(&port->policy_sinktx_timer_) &&
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <PolicySend+0xd0>
        /* If we need to wait on the sinkTx timer */
        port->idle_ = TRUE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 80066a6:	e178      	b.n	800699a <PolicySend+0x3c2>
      }

      /* Continue on with transmission */
      TimerDisable(&port->policy_sinktx_timer_);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3398      	adds	r3, #152	; 0x98
 80066ac:	4618      	mov	r0, r3
 80066ae:	f002 fcc9 	bl	8009044 <TimerDisable>

      port->policy_tx_header_.word = 0x0000;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
      port->policy_tx_header_.MessageType = message_type & PDMsgTypeMask;
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	b2d9      	uxtb	r1, r3
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	f892 315c 	ldrb.w	r3, [r2, #348]	; 0x15c
 80066c8:	f361 0304 	bfi	r3, r1, #0, #5
 80066cc:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
      if (sop == SOP_TYPE_SOP)
 80066d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d119      	bne.n	800670c <PolicySend+0x134>
      {
        port->policy_tx_header_.PortDataRole = port->policy_is_dfp_;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	b2d9      	uxtb	r1, r3
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f892 315c 	ldrb.w	r3, [r2, #348]	; 0x15c
 80066ea:	f361 1345 	bfi	r3, r1, #5, #1
 80066ee:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
        port->policy_tx_header_.PortPowerRole = port->policy_is_source_;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	b2d9      	uxtb	r1, r3
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 8006704:	f361 0300 	bfi	r3, r1, #0, #1
 8006708:	f882 315d 	strb.w	r3, [r2, #349]	; 0x15d
      }

      port->policy_tx_header_.SpecRevision = DPM_CurrentSpecRev(port, sop);
 800670c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006710:	4619      	mov	r1, r3
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7fd fc1a 	bl	8003f4c <DPM_CurrentSpecRev>
 8006718:	4603      	mov	r3, r0
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	b2d9      	uxtb	r1, r3
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f892 315c 	ldrb.w	r3, [r2, #348]	; 0x15c
 8006726:	f361 1387 	bfi	r3, r1, #6, #2
 800672a:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
      port->protocol_retries_ =
          (port->policy_tx_header_.SpecRevision == PDSpecRev3p0) ?
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006738:	b2db      	uxtb	r3, r3
      port->protocol_retries_ =
 800673a:	2b80      	cmp	r3, #128	; 0x80
 800673c:	d101      	bne.n	8006742 <PolicySend+0x16a>
 800673e:	2202      	movs	r2, #2
 8006740:	e000      	b.n	8006744 <PolicySend+0x16c>
 8006742:	2203      	movs	r2, #3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
        port->protocol_ext_send_chunk_ = TRUE;
        port->protocol_ext_state_active_ = TRUE;
      }
      else
#endif /* FSC_HAVE_EXTENDED */
        if (num_bytes > 0) {
 800674a:	893b      	ldrh	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d062      	beq.n	8006816 <PolicySend+0x23e>
        /* Standard Data Message */
        if (num_bytes > MAX_MSG_LEGACY_LEN) {
 8006750:	893b      	ldrh	r3, [r7, #8]
 8006752:	2b1c      	cmp	r3, #28
 8006754:	d901      	bls.n	800675a <PolicySend+0x182>
          num_bytes = MAX_MSG_LEGACY_LEN;
 8006756:	231c      	movs	r3, #28
 8006758:	813b      	strh	r3, [r7, #8]
        }

        port->policy_tx_header_.NumDataObjects = num_bytes / 4;
 800675a:	893b      	ldrh	r3, [r7, #8]
 800675c:	089b      	lsrs	r3, r3, #2
 800675e:	b29b      	uxth	r3, r3
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	b2d9      	uxtb	r1, r3
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 800676c:	f361 1306 	bfi	r3, r1, #4, #3
 8006770:	f882 315d 	strb.w	r3, [r2, #349]	; 0x15d
        for (i = 0; i < port->policy_tx_header_.NumDataObjects; i++) {
 8006774:	2300      	movs	r3, #0
 8006776:	82fb      	strh	r3, [r7, #22]
 8006778:	e036      	b.n	80067e8 <PolicySend+0x210>
          port->policy_tx_data_obj_[i].byte[0] = data[i * 4 + 0];
 800677a:	8afb      	ldrh	r3, [r7, #22]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	461a      	mov	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	441a      	add	r2, r3
 8006784:	8afb      	ldrh	r3, [r7, #22]
 8006786:	7811      	ldrb	r1, [r2, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	335e      	adds	r3, #94	; 0x5e
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	460a      	mov	r2, r1
 8006792:	711a      	strb	r2, [r3, #4]
          port->policy_tx_data_obj_[i].byte[1] = data[i * 4 + 1];
 8006794:	8afb      	ldrh	r3, [r7, #22]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	3301      	adds	r3, #1
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	441a      	add	r2, r3
 800679e:	8afb      	ldrh	r3, [r7, #22]
 80067a0:	7811      	ldrb	r1, [r2, #0]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	460a      	mov	r2, r1
 80067aa:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
          port->policy_tx_data_obj_[i].byte[2] = data[i * 4 + 2];
 80067ae:	8afb      	ldrh	r3, [r7, #22]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	3302      	adds	r3, #2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	441a      	add	r2, r3
 80067b8:	8afb      	ldrh	r3, [r7, #22]
 80067ba:	7811      	ldrb	r1, [r2, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	460a      	mov	r2, r1
 80067c4:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
          port->policy_tx_data_obj_[i].byte[3] = data[i * 4 + 3];
 80067c8:	8afb      	ldrh	r3, [r7, #22]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	3303      	adds	r3, #3
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	441a      	add	r2, r3
 80067d2:	8afb      	ldrh	r3, [r7, #22]
 80067d4:	7811      	ldrb	r1, [r2, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	460a      	mov	r2, r1
 80067de:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        for (i = 0; i < port->policy_tx_header_.NumDataObjects; i++) {
 80067e2:	8afb      	ldrh	r3, [r7, #22]
 80067e4:	3301      	adds	r3, #1
 80067e6:	82fb      	strh	r3, [r7, #22]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 80067ee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	8afa      	ldrh	r2, [r7, #22]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d3be      	bcc.n	800677a <PolicySend+0x1a2>
        }

        if (port->policy_state_ == PE_SRC_Send_Capabilities) {
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006802:	2b02      	cmp	r3, #2
 8006804:	d107      	bne.n	8006816 <PolicySend+0x23e>
          port->caps_counter_++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 800680c:	3301      	adds	r3, #1
 800680e:	b2da      	uxtb	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
      }
      else {
        /* Control Message */
      }

      port->protocol_msg_tx_sop_ = sop;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800681c:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
      port->pd_tx_status_ = txSend;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      if (port->protocol_state_ == PRLIdle)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800682e:	2b01      	cmp	r3, #1
 8006830:	f040 80ae 	bne.w	8006990 <PolicySend+0x3b8>
      {
        ProtocolIdle(port);
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f001 fdab 	bl	8008390 <ProtocolIdle>
      }
      break;
 800683a:	e0a9      	b.n	8006990 <PolicySend+0x3b8>
    case txSend:
    case txBusy:
    case txWait:
      /* Waiting for GoodCRC or timeout of the protocol */
      if (TimerExpired(&port->protocol_timer_)){
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	33ec      	adds	r3, #236	; 0xec
 8006840:	4618      	mov	r0, r3
 8006842:	f002 fc2b 	bl	800909c <TimerExpired>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80a3 	beq.w	8006994 <PolicySend+0x3bc>
        TimerDisable(&port->protocol_timer_);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	33ec      	adds	r3, #236	; 0xec
 8006852:	4618      	mov	r0, r3
 8006854:	f002 fbf6 	bl	8009044 <TimerDisable>
        port->protocol_state_ = PRLIdle;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
        port->pd_tx_status_ = txIdle;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        set_policy_state(port, next_state);
 8006868:	f897 3020 	ldrb.w	r3, [r7, #32]
 800686c:	4619      	mov	r1, r3
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f001 fcba 	bl	80081e8 <set_policy_state>
        port->policy_subindex_ = subindex;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800687a:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        status = STAT_ERROR;
 800687e:	2302      	movs	r3, #2
 8006880:	757b      	strb	r3, [r7, #21]
      }
      break;
 8006882:	e087      	b.n	8006994 <PolicySend+0x3bc>
    case txCollision:
      status = STAT_ERROR;
 8006884:	2302      	movs	r3, #2
 8006886:	757b      	strb	r3, [r7, #21]
      break;
 8006888:	e087      	b.n	800699a <PolicySend+0x3c2>
    } else {
      /* Completed transferring extended message */
      port->protocol_ext_state_active_ = FALSE;
    }
#endif /* FSC_HAVE_EXTENDED */
      set_policy_state(port, next_state);
 800688a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800688e:	4619      	mov	r1, r3
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f001 fca9 	bl	80081e8 <set_policy_state>
      port->policy_subindex_ = subindex;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800689c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      port->pd_tx_status_ = txIdle;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      status = STAT_SUCCESS;
 80068a8:	2301      	movs	r3, #1
 80068aa:	757b      	strb	r3, [r7, #21]
      break;
 80068ac:	e075      	b.n	800699a <PolicySend+0x3c2>
    case txError: /* No good CRC */
      if (sop == SOP_TYPE_SOP) {
 80068ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d12b      	bne.n	800690e <PolicySend+0x336>
        if ((port->policy_state_ == PE_SRC_Send_Capabilities) &&
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d109      	bne.n	80068d4 <PolicySend+0x2fc>
            !port->policy_has_contract_) {
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
        if ((port->policy_state_ == PE_SRC_Send_Capabilities) &&
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <PolicySend+0x2fc>
          set_policy_state(port, PE_SRC_Discovery);
 80068ca:	2101      	movs	r1, #1
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f001 fc8b 	bl	80081e8 <set_policy_state>
 80068d2:	e033      	b.n	800693c <PolicySend+0x364>
        }
        else if (port->policy_state_ == PE_SRC_Send_Soft_Reset) {
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80068da:	2b18      	cmp	r3, #24
 80068dc:	d02e      	beq.n	800693c <PolicySend+0x364>
  #ifdef FSC_HAVE_SRC
          PolicySourceSendHardReset(port);
  #endif /* FSC_HAVE_SRC */
        }
        else if (port->policy_state_ == PE_SNK_Send_Soft_Reset) {
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80068e4:	2b1a      	cmp	r3, #26
 80068e6:	d103      	bne.n	80068f0 <PolicySend+0x318>
  #ifdef FSC_HAVE_SNK
          PolicySinkSendHardReset(port);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7fd fe7c 	bl	80045e6 <PolicySinkSendHardReset>
 80068ee:	e025      	b.n	800693c <PolicySend+0x364>
  #endif /* FSC_HAVE_SRC */
        }
        else if (port->policy_is_source_) {
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <PolicySend+0x32c>
          set_policy_state(port, PE_SRC_Send_Soft_Reset);
 80068fa:	2118      	movs	r1, #24
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f001 fc73 	bl	80081e8 <set_policy_state>
 8006902:	e01b      	b.n	800693c <PolicySend+0x364>
        }
        else {
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8006904:	211a      	movs	r1, #26
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f001 fc6e 	bl	80081e8 <set_policy_state>
 800690c:	e016      	b.n	800693c <PolicySend+0x364>
        }
      }
      else if (sop == SOP_TYPE_SOP1) {
 800690e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006912:	2b01      	cmp	r3, #1
 8006914:	d112      	bne.n	800693c <PolicySend+0x364>
#ifdef FSC_HAVE_VDM
        if (port->vdm_cbl_present_ == FALSE) {
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00d      	beq.n	800693c <PolicySend+0x364>
          /* Skip cable resets for initial discover ID */
        }
        else
#endif /*FSC_HAVE_VDM  */
        if (port->policy_state_ == PE_DFP_CBL_Send_Soft_Reset) {
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006926:	2ba2      	cmp	r3, #162	; 0xa2
 8006928:	d104      	bne.n	8006934 <PolicySend+0x35c>
          set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
 800692a:	21a3      	movs	r1, #163	; 0xa3
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f001 fc5b 	bl	80081e8 <set_policy_state>
 8006932:	e003      	b.n	800693c <PolicySend+0x364>
        }
        else {
          set_policy_state(port, PE_DFP_CBL_Send_Soft_Reset);
 8006934:	21a2      	movs	r1, #162	; 0xa2
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f001 fc56 	bl	80081e8 <set_policy_state>
        }
        /* TODO - UFP CBL Resets? */
      }
      port->pd_tx_status_ = txIdle;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      status = STAT_ERROR;
 8006944:	2302      	movs	r3, #2
 8006946:	757b      	strb	r3, [r7, #21]
      break;
 8006948:	e027      	b.n	800699a <PolicySend+0x3c2>
    case txAbort:
      set_policy_state(port,
                       port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
      set_policy_state(port,
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <PolicySend+0x380>
 8006954:	2305      	movs	r3, #5
 8006956:	e000      	b.n	800695a <PolicySend+0x382>
 8006958:	2313      	movs	r3, #19
 800695a:	4619      	mov	r1, r3
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f001 fc43 	bl	80081e8 <set_policy_state>

      status = STAT_ABORT;
 8006962:	2303      	movs	r3, #3
 8006964:	757b      	strb	r3, [r7, #21]
      port->pd_tx_status_ = txIdle;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      break;
 800696e:	e014      	b.n	800699a <PolicySend+0x3c2>
    default:
      /* Reset everything */
      port->pd_tx_status_ = txReset;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      status = STAT_ERROR;
 8006978:	2302      	movs	r3, #2
 800697a:	757b      	strb	r3, [r7, #21]

      if (port->policy_is_source_) {
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d108      	bne.n	8006998 <PolicySend+0x3c0>
        PolicySourceSendHardReset(port);
#endif /* FSC_HAVE_SRC */
      }
      else {
#ifdef FSC_HAVE_SNK
        PolicySinkSendHardReset(port);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7fd fe2d 	bl	80045e6 <PolicySinkSendHardReset>
#endif /* FSC_HAVE_SNK */
      }
      break;
 800698c:	bf00      	nop
 800698e:	e003      	b.n	8006998 <PolicySend+0x3c0>
      break;
 8006990:	bf00      	nop
 8006992:	e002      	b.n	800699a <PolicySend+0x3c2>
      break;
 8006994:	bf00      	nop
 8006996:	e000      	b.n	800699a <PolicySend+0x3c2>
      break;
 8006998:	bf00      	nop
  if (status == STAT_ERROR) {
#ifdef FSC_HAVE_EXTENDED
    port->protocol_ext_state_active_ = FALSE;
#endif /* FSC_HAVE_EXTENDED */
  }
  return status;
 800699a:	7d7b      	ldrb	r3, [r7, #21]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <ProcessDmtBist>:

/* ---------------- BIST Functionality ---------------- */
void ProcessDmtBist(struct Port *port)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  FSC_U8 bdo = port->policy_rx_data_obj_[0].byte[3] >> 4;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 80069b2:	091b      	lsrs	r3, r3, #4
 80069b4:	73fb      	strb	r3, [r7, #15]
  switch (bdo) {
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	2b05      	cmp	r3, #5
 80069ba:	d121      	bne.n	8006a00 <ProcessDmtBist+0x5c>
    case BDO_BIST_Carrier_Mode_2:
      if (port->caps_source_[port->usb_pd_contract_.FVRDO.ObjectPosition - 1]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80069c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	1e5a      	subs	r2, r3, #1
          .FPDOSupply.Voltage == PD_05_V) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3278      	adds	r2, #120	; 0x78
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80069d6:	b29b      	uxth	r3, r3
      if (port->caps_source_[port->usb_pd_contract_.FVRDO.ObjectPosition - 1]
 80069d8:	2b64      	cmp	r3, #100	; 0x64
 80069da:	d13c      	bne.n	8006a56 <ProcessDmtBist+0xb2>
        set_policy_state(port, PE_BIST_Carrier_Mode);
 80069dc:	21a5      	movs	r1, #165	; 0xa5
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fc02 	bl	80081e8 <set_policy_state>
        port->protocol_state_ = PRLIdle;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
        notify_observers(EVENT_BIST_ENABLED, port->port_id_, 0);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2200      	movs	r2, #0
 80069f4:	4619      	mov	r1, r3
 80069f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80069fa:	f7fd faf5 	bl	8003fe8 <notify_observers>
      }
      break;
 80069fe:	e02a      	b.n	8006a56 <ProcessDmtBist+0xb2>
    case BDO_BIST_Test_Data: /* Fall through */
    default:
      /* Mask everything but HARDRST and VBUSOK */
      if (port->caps_source_[port->usb_pd_contract_.FVRDO.ObjectPosition - 1]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8006a06:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	1e5a      	subs	r2, r3, #1
          .FPDOSupply.Voltage == PD_05_V) {
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3278      	adds	r2, #120	; 0x78
 8006a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a16:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8006a1a:	b29b      	uxth	r3, r3
      if (port->caps_source_[port->usb_pd_contract_.FVRDO.ObjectPosition - 1]
 8006a1c:	2b64      	cmp	r3, #100	; 0x64
 8006a1e:	d11c      	bne.n	8006a5a <ProcessDmtBist+0xb6>
        port->registers_.TcpcCtrl.BIST_TMODE = 1;
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	7d53      	ldrb	r3, [r2, #21]
 8006a24:	f043 0302 	orr.w	r3, r3, #2
 8006a28:	7553      	strb	r3, [r2, #21]
        WriteRegister(port, regTCPC_CTRL);
 8006a2a:	2119      	movs	r1, #25
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fd41 	bl	80074b4 <WriteRegister>

        set_policy_state(port, PE_BIST_Test_Data);
 8006a32:	21a7      	movs	r1, #167	; 0xa7
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fbd7 	bl	80081e8 <set_policy_state>
        port->protocol_state_ = PRLDisabled;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
        notify_observers(EVENT_BIST_ENABLED, port->port_id_, 0);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006a50:	f7fd faca 	bl	8003fe8 <notify_observers>
      }
      break;
 8006a54:	e001      	b.n	8006a5a <ProcessDmtBist+0xb6>
      break;
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <ProcessDmtBist+0xb8>
      break;
 8006a5a:	bf00      	nop
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <PolicyBISTCarrierMode2>:

void PolicyBISTCarrierMode2(struct Port *port)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d01e      	beq.n	8006ab4 <PolicyBISTCarrierMode2+0x50>
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d03e      	beq.n	8006af8 <PolicyBISTCarrierMode2+0x94>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d161      	bne.n	8006b42 <PolicyBISTCarrierMode2+0xde>
    case 0:
      port->registers_.Transmit.TX_SOP = TRANSMIT_BIST_CM2;
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8006a84:	f043 0307 	orr.w	r3, r3, #7
 8006a88:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
      WriteRegister(port, regTRANSMIT);
 8006a8c:	2150      	movs	r1, #80	; 0x50
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fd10 	bl	80074b4 <WriteRegister>
      TimerStart(&port->policy_state_timer_, ktBISTContMode);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	338c      	adds	r3, #140	; 0x8c
 8006a98:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f002 fab3 	bl	8009008 <TimerStart>
      port->policy_subindex_++;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 8006ab2:	e054      	b.n	8006b5e <PolicyBISTCarrierMode2+0xfa>
    case 1:
      if (TimerExpired(&port->policy_state_timer_)) {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	338c      	adds	r3, #140	; 0x8c
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f002 faef 	bl	800909c <TimerExpired>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d014      	beq.n	8006aee <PolicyBISTCarrierMode2+0x8a>
        /* Delay for >200us to allow preamble to finish */
        TimerDisable(&port->policy_state_timer_);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	338c      	adds	r3, #140	; 0x8c
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f002 fabb 	bl	8009044 <TimerDisable>
        TimerStart(&port->policy_state_timer_, ktGoodCRCDelay);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	338c      	adds	r3, #140	; 0x8c
 8006ad2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f002 fa96 	bl	8009008 <TimerStart>
        port->policy_subindex_++;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8006aec:	e037      	b.n	8006b5e <PolicyBISTCarrierMode2+0xfa>
        port->idle_ = TRUE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8006af6:	e032      	b.n	8006b5e <PolicyBISTCarrierMode2+0xfa>
    case 2:
      if (TimerExpired(&port->policy_state_timer_)) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	338c      	adds	r3, #140	; 0x8c
 8006afc:	4618      	mov	r0, r3
 8006afe:	f002 facd 	bl	800909c <TimerExpired>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d017      	beq.n	8006b38 <PolicyBISTCarrierMode2+0xd4>
        TimerDisable(&port->policy_state_timer_);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	338c      	adds	r3, #140	; 0x8c
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f002 fa99 	bl	8009044 <TimerDisable>
        if (port->policy_is_source_) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d103      	bne.n	8006b24 <PolicyBISTCarrierMode2+0xc0>
          set_policy_state(port, PE_SRC_Ready);
#endif /* FSC_HAVE_SRC */
        }
        else {
#ifdef FSC_HAVE_SNK
          set_policy_state(port, PE_SNK_Ready);
 8006b1c:	2113      	movs	r1, #19
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 fb62 	bl	80081e8 <set_policy_state>
#endif /* FSC_HAVE_SNK */
        }
        notify_observers(EVENT_BIST_DISABLED, port->port_id_, 0);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b32:	f7fd fa59 	bl	8003fe8 <notify_observers>
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8006b36:	e012      	b.n	8006b5e <PolicyBISTCarrierMode2+0xfa>
        port->idle_ = TRUE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8006b40:	e00d      	b.n	8006b5e <PolicyBISTCarrierMode2+0xfa>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8006b42:	21a6      	movs	r1, #166	; 0xa6
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 fb4f 	bl	80081e8 <set_policy_state>
      notify_observers(EVENT_BIST_DISABLED, port->port_id_, 0);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2200      	movs	r2, #0
 8006b52:	4619      	mov	r1, r3
 8006b54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b58:	f7fd fa46 	bl	8003fe8 <notify_observers>
      break;
 8006b5c:	bf00      	nop
  }
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <PolicyBISTTestData>:

void PolicyBISTTestData(struct Port *port)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Nothing needed here.  Wait for detach or reset to end this mode. */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <PolicyInvalidState>:

void PolicyInvalidState(struct Port *port)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* reset if we get to an invalid state */
  if (port->policy_is_source_) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <PolicyInvalidState+0x18>
    PolicySourceSendHardReset(port);
#endif /* FSC_HAVE_SRC */
  }
  else {
#ifdef FSC_HAVE_SNK
    PolicySinkSendHardReset(port);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7fd fd2a 	bl	80045e6 <PolicySinkSendHardReset>
#endif /* FSC_HAVE_SNK */
  }
}
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <ProcessCableResetState>:

void ProcessCableResetState(struct Port *port)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  switch (port->cbl_rst_state_)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8006baa:	3b01      	subs	r3, #1
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d87e      	bhi.n	8006cae <ProcessCableResetState+0x112>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <ProcessCableResetState+0x1c>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bc9 	.word	0x08006bc9
 8006bbc:	08006c03 	.word	0x08006c03
 8006bc0:	08006c4d 	.word	0x08006c4d
 8006bc4:	08006c87 	.word	0x08006c87
  {
  case CBL_RST_START:
    if (port->is_vconn_source_) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <ProcessCableResetState+0x40>
      port->cbl_rst_state_ = CBL_RST_VCONN_SOURCE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    } else {
      /* Must be dfp and vconn source. Start with VCONN Swap */
      set_policy_state(port, PE_VCS_Send_Swap);
      port->cbl_rst_state_ = CBL_RST_VCONN_SOURCE;
    }
    break;
 8006bda:	e069      	b.n	8006cb0 <ProcessCableResetState+0x114>
    } else if (port->policy_is_dfp_) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <ProcessCableResetState+0x54>
      port->cbl_rst_state_ = CBL_RST_DR_DFP;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2203      	movs	r2, #3
 8006bea:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8006bee:	e05f      	b.n	8006cb0 <ProcessCableResetState+0x114>
      set_policy_state(port, PE_VCS_Send_Swap);
 8006bf0:	2169      	movs	r1, #105	; 0x69
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 faf8 	bl	80081e8 <set_policy_state>
      port->cbl_rst_state_ = CBL_RST_VCONN_SOURCE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8006c00:	e056      	b.n	8006cb0 <ProcessCableResetState+0x114>
  case CBL_RST_VCONN_SOURCE:
    if (port->is_vconn_source_) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01a      	beq.n	8006c42 <ProcessCableResetState+0xa6>
      if (port->policy_is_dfp_) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <ProcessCableResetState+0x84>
        port->cbl_rst_state_ = CBL_RST_SEND;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2204      	movs	r2, #4
 8006c1a:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
      }
    } else {
      /* VCONN Swap might have failed */
      port->cbl_rst_state_ = CBL_RST_DISABLED;
    }
    break;
 8006c1e:	e047      	b.n	8006cb0 <ProcessCableResetState+0x114>
        set_policy_state(port, port->policy_is_source_ ?
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <ProcessCableResetState+0x92>
 8006c2a:	2342      	movs	r3, #66	; 0x42
 8006c2c:	e000      	b.n	8006c30 <ProcessCableResetState+0x94>
 8006c2e:	2347      	movs	r3, #71	; 0x47
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 fad8 	bl	80081e8 <set_policy_state>
        port->cbl_rst_state_ = CBL_RST_DR_DFP;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8006c40:	e036      	b.n	8006cb0 <ProcessCableResetState+0x114>
      port->cbl_rst_state_ = CBL_RST_DISABLED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8006c4a:	e031      	b.n	8006cb0 <ProcessCableResetState+0x114>
  case CBL_RST_DR_DFP:
    if (port->policy_is_dfp_) {
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d012      	beq.n	8006c7c <ProcessCableResetState+0xe0>
      if (port->is_vconn_source_) {
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <ProcessCableResetState+0xce>
        port->cbl_rst_state_ = CBL_RST_SEND;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2204      	movs	r2, #4
 8006c64:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
      }
    } else {
      /* DR Swap might have failed */
      port->cbl_rst_state_ = CBL_RST_DISABLED;
    }
    break;
 8006c68:	e022      	b.n	8006cb0 <ProcessCableResetState+0x114>
        set_policy_state(port, PE_VCS_Send_Swap);
 8006c6a:	2169      	movs	r1, #105	; 0x69
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fabb 	bl	80081e8 <set_policy_state>
        port->cbl_rst_state_ = CBL_RST_VCONN_SOURCE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8006c7a:	e019      	b.n	8006cb0 <ProcessCableResetState+0x114>
      port->cbl_rst_state_ = CBL_RST_DISABLED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8006c84:	e014      	b.n	8006cb0 <ProcessCableResetState+0x114>
  case CBL_RST_SEND:
    if (port->policy_is_dfp_ &&
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <ProcessCableResetState+0x108>
        port->is_vconn_source_) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
    if (port->policy_is_dfp_ &&
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <ProcessCableResetState+0x108>
      set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
 8006c9a:	21a3      	movs	r1, #163	; 0xa3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 faa3 	bl	80081e8 <set_policy_state>
    } else {
      port->cbl_rst_state_ = CBL_RST_DISABLED;
    }
    break;
 8006ca2:	e005      	b.n	8006cb0 <ProcessCableResetState+0x114>
      port->cbl_rst_state_ = CBL_RST_DISABLED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8006cac:	e000      	b.n	8006cb0 <ProcessCableResetState+0x114>
  case CBL_RST_DISABLED:
  default:
    break;
 8006cae:	bf00      	nop
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <InitializeVars>:
 * I2C read data from the device, configures capability objects, and writes
 * initial configuration values to the device.
 */

void InitializeVars(struct Port *port, FSC_U8 id, FSC_U8 i2c_addr)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	70fb      	strb	r3, [r7, #3]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	70bb      	strb	r3, [r7, #2]
  FSC_U32 i = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]

  port->port_id_ = id;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	701a      	strb	r2, [r3, #0]
  port->i2c_addr_ = i2c_addr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	78ba      	ldrb	r2, [r7, #2]
 8006cd6:	705a      	strb	r2, [r3, #1]
  port->idle_ = FALSE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  port->initialized_ = FALSE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  port->port_type_ = USBTypeC_UNDEFINED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2203      	movs	r2, #3
 8006cec:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  port->source_or_sink_ = Source;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  port->tc_enabled_ = TRUE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  port->tc_state_ = Disabled;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  port->tc_substate_ = 0;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  port->src_preferred_ = Type_C_Implements_Try_SRC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
  port->snk_preferred_ = Type_C_Implements_Try_SNK;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
  port->acc_support_ = (Type_C_Supports_VCONN_Powered_Accessory ||
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                        Type_C_Supports_Audio_Accessory) ? TRUE : FALSE;
  port->snk_current_ = utccOpen;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  port->src_current_ = Rp_Value + 1;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2203      	movs	r2, #3
 8006d34:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  if (port->src_current_ < utccDefault || port->src_current_ > utcc3p0A)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <InitializeVars+0x94>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d903      	bls.n	8006d54 <InitializeVars+0x9c>
  {
    port->src_current_ = utccDefault;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  }

  port->cc_pin_ = NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  port->cc_term_ = CCTypeUndefined;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2205      	movs	r2, #5
 8006d60:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
  ResetDebounceVariables(port);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fe25 	bl	80079b4 <ResetDebounceVariables>
  port->is_hard_reset_ = FALSE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
#ifdef FSC_HAVE_FRSWAP
  port->is_fr_swap_ = FALSE;
#endif /* FSC_HAVE_FRSWAP */
  port->is_pr_swap_ = FALSE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  port->is_vconn_swap_ = FALSE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
  port->unattach_loop_counter_ = 0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
  port->vbus_transition_time_ = 20 * kMSTimeFactor;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006d90:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  port->is_dead_battery_ = FALSE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  port->have_sink_path_ = FALSE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  port->have_HV_path_ = FALSE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
  port->pd_active_ = FALSE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
  port->pd_enabled_ = USB_PD_Support;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  port->protocol_state_ = PRLDisabled;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  port->pd_tx_status_ = txIdle;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  port->pd_tx_flag_ = FALSE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  port->policy_msg_tx_sop_ = SOP_TYPE_SOP;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  port->protocol_msg_rx_ = FALSE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  port->protocol_msg_rx_sop_ = SOP_TYPE_SOP;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  port->protocol_msg_tx_sop_ = SOP_TYPE_SOP;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
  port->protocol_retries_ = RETRIES_PD30;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
  port->protocol_use_sinktx_ = FALSE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  port->waiting_on_hr_ = FALSE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  port->policy_src_cap_ext_.VID = Manufacturer_Info_VID_Port;
  port->policy_src_cap_ext_.PID = Manufacturer_Info_PID_Port;
  port->policy_src_cap_ext_.SrcPDP = PD_Power_as_Source / 1000;
#endif /* FSC_HAVE_SRC */
#endif /* FSC_HAVE_EXTENDED */
  port->policy_state_ = PE_SRC_Disabled;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2206      	movs	r2, #6
 8006e10:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  port->policy_subindex_ = 0;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
  port->policy_is_ams_ = FALSE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
  port->policy_sinktx_state_ = SinkTxNG;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

  port->policy_is_source_ = TRUE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
  port->policy_is_dfp_ = TRUE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
  port->is_contract_valid_ = FALSE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
  port->is_vconn_source_ = FALSE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
  port->collision_counter_ = 0;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  port->hard_reset_counter_ = 0;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  port->caps_counter_ = 0;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  port->policy_has_contract_ = FALSE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
  port->needs_goto_min_ = FALSE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
  port->renegotiate_ = FALSE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
  port->policy_wait_on_sink_caps_ = FALSE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
  port->sink_selected_voltage_ = FSC_VBUS_05_V;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  port->sink_transition_up_ = FALSE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
  port->sink_request_max_voltage_ = 5000;  /* 12V */
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
  port->sink_request_max_power_ = 1000;      /* 0.1A */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ea6:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  port->sink_request_op_power_ = 100;       /* 0.1A */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2264      	movs	r2, #100	; 0x64
 8006eae:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  port->sink_partner_max_power_ = 0;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  port->sink_request_low_power_ = FALSE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  port->sink_goto_min_compatible_ = FALSE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
  port->sink_usb_suspend_compatible_ = FALSE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
  port->sink_usb_comm_capable_ = FALSE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
  port->partner_caps_.object = 0;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
  port->partner_caps_available_ = FALSE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
  port->pd_HV_option_ = FSC_VBUS_09_V;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f242 3228 	movw	r2, #9000	; 0x2328
 8006ef0:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
  port->source_is_apdo_ = FALSE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
  port->pd_preferred_rev_ = PD_Specification_Revision;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248

#if defined(FSC_DEBUG) || defined(FSC_HAVE_USBHID)
  port->source_caps_updated_ = FALSE;
#endif /* FSC_DEBUG || FSC_HAVE_USBHID */

  TimerDisable(&port->tc_state_timer_);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3380      	adds	r3, #128	; 0x80
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f002 f89b 	bl	8009044 <TimerDisable>
  TimerDisable(&port->policy_state_timer_);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	338c      	adds	r3, #140	; 0x8c
 8006f12:	4618      	mov	r0, r3
 8006f14:	f002 f896 	bl	8009044 <TimerDisable>
  TimerDisable(&port->policy_sinktx_timer_);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3398      	adds	r3, #152	; 0x98
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 f891 	bl	8009044 <TimerDisable>
  TimerDisable(&port->cc_debounce_timer_);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	33a4      	adds	r3, #164	; 0xa4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f002 f88c 	bl	8009044 <TimerDisable>
  TimerDisable(&port->pd_debounce_timer_);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	33b0      	adds	r3, #176	; 0xb0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f002 f887 	bl	8009044 <TimerDisable>
  TimerDisable(&port->no_response_timer_);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	33bc      	adds	r3, #188	; 0xbc
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f002 f882 	bl	8009044 <TimerDisable>
  TimerDisable(&port->swap_source_start_timer_);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	33c8      	adds	r3, #200	; 0xc8
 8006f44:	4618      	mov	r0, r3
 8006f46:	f002 f87d 	bl	8009044 <TimerDisable>
  TimerDisable(&port->pps_timer_);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	33e0      	adds	r3, #224	; 0xe0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f002 f878 	bl	8009044 <TimerDisable>
  TimerDisable(&port->dpm_timer_);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	33d4      	adds	r3, #212	; 0xd4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f002 f873 	bl	8009044 <TimerDisable>
  TimerDisable(&port->protocol_timer_);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	33ec      	adds	r3, #236	; 0xec
 8006f62:	4618      	mov	r0, r3
 8006f64:	f002 f86e 	bl	8009044 <TimerDisable>

  /*
   * Initialize SOP-related arrays.
   * NOTE: Update this loop condition if supporting additional SOP types!
   */
  for (i = 0; i < NUM_SOP_SUPPORTED; ++i) {
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	e00f      	b.n	8006f8e <InitializeVars+0x2d6>
    port->message_id_counter_[i] = 0;
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3348      	adds	r3, #72	; 0x48
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	2200      	movs	r2, #0
 8006f7a:	605a      	str	r2, [r3, #4]
    port->message_id_[i] = 0xFF;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	324c      	adds	r2, #76	; 0x4c
 8006f82:	21ff      	movs	r1, #255	; 0xff
 8006f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NUM_SOP_SUPPORTED; ++i) {
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d9ec      	bls.n	8006f6e <InitializeVars+0x2b6>
  }

  for (i = 0; i < 7; ++i) {
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	e029      	b.n	8006fee <InitializeVars+0x336>
    port->policy_rx_data_obj_[i].object = 0;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	3258      	adds	r2, #88	; 0x58
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->policy_tx_data_obj_[i].object = 0;
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	335e      	adds	r3, #94	; 0x5e
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	605a      	str	r2, [r3, #4]
    port->pd_transmit_objects_[i].object = 0;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	326a      	adds	r2, #106	; 0x6a
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->caps_sink_[i].object = 0;
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3370      	adds	r3, #112	; 0x70
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	605a      	str	r2, [r3, #4]
    port->caps_source_[i].object = 0;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	3278      	adds	r2, #120	; 0x78
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->caps_received_[i].object = 0;
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	337e      	adds	r3, #126	; 0x7e
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < 7; ++i) {
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3301      	adds	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b06      	cmp	r3, #6
 8006ff2:	d9d2      	bls.n	8006f9a <InitializeVars+0x2e2>
  {
  case 0:
      port->port_type_ = USBTypeC_Source;
      break;
  case 1:
      port->port_type_ = USBTypeC_Sink;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
      break;
 8006ffc:	bf00      	nop
      break;
  }

  /* Set up the capabilities objects */
#ifdef FSC_HAVE_SNK
  port->caps_header_sink_.NumDataObjects = Num_Snk_PDOs;
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	f892 319d 	ldrb.w	r3, [r2, #413]	; 0x19d
 8007004:	2101      	movs	r1, #1
 8007006:	f361 1306 	bfi	r3, r1, #4, #3
 800700a:	f882 319d 	strb.w	r3, [r2, #413]	; 0x19d
  port->caps_header_sink_.PortDataRole = 0;                                /* UFP */
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	f892 319c 	ldrb.w	r3, [r2, #412]	; 0x19c
 8007014:	f36f 1345 	bfc	r3, #5, #1
 8007018:	f882 319c 	strb.w	r3, [r2, #412]	; 0x19c
  port->caps_header_sink_.PortPowerRole = 0;                               /* Sink */
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	f892 319d 	ldrb.w	r3, [r2, #413]	; 0x19d
 8007022:	f36f 0300 	bfc	r3, #0, #1
 8007026:	f882 319d 	strb.w	r3, [r2, #413]	; 0x19d
  port->caps_header_sink_.SpecRevision = port->pd_preferred_rev_;        /* Spec rev */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	b2d9      	uxtb	r1, r3
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	f892 319c 	ldrb.w	r3, [r2, #412]	; 0x19c
 800703c:	f361 1387 	bfi	r3, r1, #6, #2
 8007040:	f882 319c 	strb.w	r3, [r2, #412]	; 0x19c
  VIF_InitializeSnkCaps(port->caps_sink_);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800704a:	4618      	mov	r0, r3
 800704c:	f005 fb6b 	bl	800c726 <VIF_InitializeSnkCaps>
  port->caps_header_source_.SpecRevision = port->pd_preferred_rev_;               /* Spec rev */
  VIF_InitializeSrcCaps(port->caps_source_);
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_VDM
  TimerDisable(&port->vdm_timer_);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8007056:	4618      	mov	r0, r3
 8007058:	f001 fff4 	bl	8009044 <TimerDisable>

  port->vdm_next_ps_ = PE_SRC_Disabled;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2206      	movs	r2, #6
 8007060:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
  port->original_policy_state_ = PE_SRC_Disabled;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2206      	movs	r2, #6
 8007068:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  port->vdm_expecting_response_ = FALSE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
  port->vdm_sending_data_ = FALSE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
  port->vdm_auto_state_ = AUTO_VDM_INIT;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  port->vdm_msg_length_ = 0;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
  port->vdm_msg_tx_sop_ = SOP_TYPE_SOP;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
  port->svid_discv_idx_ = -1;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800709a:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
  port->svid_discvry_done_ = FALSE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  port->svid_enable_ = (Num_SVIDs_min_SOP > 0 &&
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
                       Modal_Operation_Supported_SOP) ? TRUE : FALSE;
  port->mode_enable_ = Modal_Operation_Supported_SOP;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
  port->my_svid_ = SVID_DEFAULT;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f64f 7201 	movw	r2, #65281	; 0xff01
 80070bc:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
  port->my_mode_ = MODE_DEFAULT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  port->mode_entered_ = FALSE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  port->discover_id_counter_ = 0;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c

  for (i = 0; i < 7; ++i) {
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	e009      	b.n	80070f2 <InitializeVars+0x43a>
    port->vdm_msg_obj_[i].object = 0;
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	339e      	adds	r3, #158	; 0x9e
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	605a      	str	r2, [r3, #4]
  for (i = 0; i < 7; ++i) {
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3301      	adds	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b06      	cmp	r3, #6
 80070f6:	d9f2      	bls.n	80070de <InitializeVars+0x426>
  }
  port->auto_mode_entry_pos_ = -1;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	22ff      	movs	r2, #255	; 0xff
 80070fc:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
  port->auto_mode_entry_enabled_ = TRUE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd

#ifdef FSC_HAVE_DP
  DP_Initialize(port);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7fc f9b5 	bl	8003478 <DP_Initialize>
  port->display_port_data_.DpAutoModeEntryEnabled = DisplayPort_Auto_Mode_Entry;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
  port->display_port_data_.DpEnabled = DisplayPort_Enabled;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
#endif /* FSC_HAVE_DP */
#endif /* FSC_HAVE_VDM */

  /* Initialize DPM before returning */
  DPM_Initialize(port);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fc fe68 	bl	8003df4 <DPM_Initialize>
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <InitializePort>:

void InitializePort(struct Port *port)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Read all of the register values to update our cache */
  ReadAllRegisters(port);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f8aa 	bl	800728e <ReadAllRegisters>

  /* Clear VD Masks */
  /* NOTE - This is a chip bug - AlertMskH.M_VD_ALERT doesn't work */
  port->registers_.AlertVDMsk.byte = 0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  WriteRegister(port, regALERT_VD_MSK);
 8007142:	21b4      	movs	r1, #180	; 0xb4
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9b5 	bl	80074b4 <WriteRegister>

  /* Clear reset flag */
  ClearInterrupt(port, regFAULTSTAT, MSK_ALL_REGS_RESET);
 800714a:	2280      	movs	r2, #128	; 0x80
 800714c:	211f      	movs	r1, #31
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9fb 	bl	800754a <ClearInterrupt>

  /* Set our snk/src path options */
  port->have_sink_path_ = TRUE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  port->have_HV_path_ = TRUE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

  /* Set SDAC hysteresis to 85mv */
  port->registers_.Slice.SDAC_HYS = SDAC_HYS_DEFAULT;
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 800716a:	2101      	movs	r1, #1
 800716c:	f361 1387 	bfi	r3, r1, #6, #2
 8007170:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
  port->registers_.Slice.SDAC = SDAC_DEFAULT;
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 800717a:	2120      	movs	r1, #32
 800717c:	f361 0305 	bfi	r3, r1, #0, #6
 8007180:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
  WriteRegister(port, regSLICE);
 8007184:	21a1      	movs	r1, #161	; 0xa1
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f994 	bl	80074b4 <WriteRegister>

  /* Disable automatic debug accessory while firmware is running */
  port->registers_.TcpcCtrl.DEBUG_ACC_CTRL = 1;
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	7d53      	ldrb	r3, [r2, #21]
 8007190:	f043 0310 	orr.w	r3, r3, #16
 8007194:	7553      	strb	r3, [r2, #21]
  WriteRegister(port, regTCPC_CTRL);
 8007196:	2119      	movs	r1, #25
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f98b 	bl	80074b4 <WriteRegister>

  /* Set GPIO1 (3695 Control) Enabled and High (active low) at startup */
  port->registers_.Gpio1Cfg.GPO1_EN = 1;
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
  port->registers_.Gpio1Cfg.GPO1_VAL = 1;
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 80071b2:	f043 0304 	orr.w	r3, r3, #4
 80071b6:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
  WriteRegister(port, regGPIO1_CFG);
 80071ba:	21a4      	movs	r1, #164	; 0xa4
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f979 	bl	80074b4 <WriteRegister>

  /* Initially mask all interrupts - unmask/remask as needed */
  port->registers_.AlertMskL.byte = 0;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	741a      	strb	r2, [r3, #16]
  WriteRegister(port, regALERTMSKL);
 80071c8:	2112      	movs	r1, #18
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f972 	bl	80074b4 <WriteRegister>
  port->registers_.AlertMskH.byte = 0;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	745a      	strb	r2, [r3, #17]
  WriteRegister(port, regALERTMSKH);
 80071d6:	2113      	movs	r1, #19
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f96b 	bl	80074b4 <WriteRegister>
    port->source_or_sink_ = Sink;
    port->is_dead_battery_ = TRUE;
  }
#endif /* 0 */

  port->initialized_ = TRUE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <ReadRegister>:

/* Register Update Functions */
FSC_BOOL ReadRegister(struct Port *port, enum RegAddress regaddress)
{
 80071ee:	b590      	push	{r4, r7, lr}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  return platform_i2c_read(port->i2c_addr_, (FSC_U8)regaddress, 1,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	785c      	ldrb	r4, [r3, #1]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3302      	adds	r3, #2
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	4611      	mov	r1, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f001 fc4a 	bl	8008aa0 <AddressToRegister>
 800720c:	4603      	mov	r3, r0
 800720e:	78f9      	ldrb	r1, [r7, #3]
 8007210:	2201      	movs	r2, #1
 8007212:	4620      	mov	r0, r4
 8007214:	f7f9 f9fa 	bl	800060c <platform_i2c_read>
 8007218:	4603      	mov	r3, r0
                           AddressToRegister(&port->registers_, regaddress));
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	bd90      	pop	{r4, r7, pc}

08007222 <ReadRegisters>:

FSC_BOOL ReadRegisters(struct Port *port, enum RegAddress regaddr, FSC_U8 cnt)
{
 8007222:	b590      	push	{r4, r7, lr}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
 800722e:	4613      	mov	r3, r2
 8007230:	70bb      	strb	r3, [r7, #2]
  return platform_i2c_read(port->i2c_addr_, (FSC_U8)regaddr, cnt,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	785c      	ldrb	r4, [r3, #1]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3302      	adds	r3, #2
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f001 fc2e 	bl	8008aa0 <AddressToRegister>
 8007244:	4603      	mov	r3, r0
 8007246:	78ba      	ldrb	r2, [r7, #2]
 8007248:	78f9      	ldrb	r1, [r7, #3]
 800724a:	4620      	mov	r0, r4
 800724c:	f7f9 f9de 	bl	800060c <platform_i2c_read>
 8007250:	4603      	mov	r3, r0
                           AddressToRegister(&port->registers_, regaddr));
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	bd90      	pop	{r4, r7, pc}

0800725a <ReadStatusRegisters>:
 * ReadStatusRegisters
 *
 * Updates register map with the device's interrupt and status register data.
 */
void ReadStatusRegisters(struct Port *port)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Read interrupts */
  ReadRegisters(port, regALERTL, 2);
 8007262:	2202      	movs	r2, #2
 8007264:	2110      	movs	r1, #16
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7ff ffdb 	bl	8007222 <ReadRegisters>
  ReadRegister(port, regALERT_VD);
 800726c:	21b3      	movs	r1, #179	; 0xb3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff ffbd 	bl	80071ee <ReadRegister>

  /* Read statuses */
  ReadRegisters(port, regCCSTAT, 3);
 8007274:	2203      	movs	r2, #3
 8007276:	211d      	movs	r1, #29
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff ffd2 	bl	8007222 <ReadRegisters>
  ReadRegister(port, regVD_STAT);
 800727e:	21a3      	movs	r1, #163	; 0xa3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff ffb4 	bl	80071ee <ReadRegister>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <ReadAllRegisters>:

void ReadAllRegisters(struct Port *port)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  ReadRegister(port, regVENDIDL);
 8007296:	2100      	movs	r1, #0
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff ffa8 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVENDIDH);
 800729e:	2101      	movs	r1, #1
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff ffa4 	bl	80071ee <ReadRegister>
  ReadRegister(port, regPRODIDL);
 80072a6:	2102      	movs	r1, #2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff ffa0 	bl	80071ee <ReadRegister>
  ReadRegister(port, regPRODIDH);
 80072ae:	2103      	movs	r1, #3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ff9c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regDEVIDL);
 80072b6:	2104      	movs	r1, #4
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ff98 	bl	80071ee <ReadRegister>
  ReadRegister(port, regDEVIDH);
 80072be:	2105      	movs	r1, #5
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff ff94 	bl	80071ee <ReadRegister>
  ReadRegister(port, regTYPECREVL);
 80072c6:	2106      	movs	r1, #6
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ff90 	bl	80071ee <ReadRegister>
  ReadRegister(port, regTYPECREVH);
 80072ce:	2107      	movs	r1, #7
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ff8c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regUSBPDVER);
 80072d6:	2108      	movs	r1, #8
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff ff88 	bl	80071ee <ReadRegister>
  ReadRegister(port, regUSBPDREV);
 80072de:	2109      	movs	r1, #9
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff ff84 	bl	80071ee <ReadRegister>
  ReadRegister(port, regPDIFREVL);
 80072e6:	210a      	movs	r1, #10
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff ff80 	bl	80071ee <ReadRegister>
  ReadRegister(port, regPDIFREVH);
 80072ee:	210b      	movs	r1, #11
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff ff7c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regALERTL);
 80072f6:	2110      	movs	r1, #16
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff ff78 	bl	80071ee <ReadRegister>
  ReadRegister(port, regALERTH);
 80072fe:	2111      	movs	r1, #17
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff ff74 	bl	80071ee <ReadRegister>
  ReadRegister(port, regALERTMSKL);
 8007306:	2112      	movs	r1, #18
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff ff70 	bl	80071ee <ReadRegister>
  ReadRegister(port, regALERTMSKH);
 800730e:	2113      	movs	r1, #19
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff6c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regPWRSTATMSK);
 8007316:	2114      	movs	r1, #20
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff ff68 	bl	80071ee <ReadRegister>
  ReadRegister(port, regFAULTSTATMSK);
 800731e:	2115      	movs	r1, #21
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ff64 	bl	80071ee <ReadRegister>
  ReadRegister(port, regSTD_OUT_CFG);
 8007326:	2118      	movs	r1, #24
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff ff60 	bl	80071ee <ReadRegister>
  ReadRegister(port, regTCPC_CTRL);
 800732e:	2119      	movs	r1, #25
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7ff ff5c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regROLECTRL);
 8007336:	211a      	movs	r1, #26
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ff58 	bl	80071ee <ReadRegister>
  ReadRegister(port, regFAULTCTRL);
 800733e:	211b      	movs	r1, #27
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ff54 	bl	80071ee <ReadRegister>
  ReadRegister(port, regPWRCTRL);
 8007346:	211c      	movs	r1, #28
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff50 	bl	80071ee <ReadRegister>
  ReadRegister(port, regCCSTAT);
 800734e:	211d      	movs	r1, #29
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff ff4c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regPWRSTAT);
 8007356:	211e      	movs	r1, #30
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff ff48 	bl	80071ee <ReadRegister>
  ReadRegister(port, regFAULTSTAT);
 800735e:	211f      	movs	r1, #31
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ff44 	bl	80071ee <ReadRegister>
  ReadRegister(port, regCOMMAND);
 8007366:	2123      	movs	r1, #35	; 0x23
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff ff40 	bl	80071ee <ReadRegister>
  ReadRegister(port, regDEVCAP1L);
 800736e:	2124      	movs	r1, #36	; 0x24
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff ff3c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regDEVCAP1H);
 8007376:	2125      	movs	r1, #37	; 0x25
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff ff38 	bl	80071ee <ReadRegister>
  ReadRegister(port, regDEVCAP2L);
 800737e:	2126      	movs	r1, #38	; 0x26
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff34 	bl	80071ee <ReadRegister>
  ReadRegister(port, regSTD_OUT_CAP);
 8007386:	2129      	movs	r1, #41	; 0x29
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff ff30 	bl	80071ee <ReadRegister>
  ReadRegister(port, regMSGHEADR);
 800738e:	212e      	movs	r1, #46	; 0x2e
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff ff2c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regRXDETECT);
 8007396:	212f      	movs	r1, #47	; 0x2f
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff ff28 	bl	80071ee <ReadRegister>
  ReadRegister(port, regRXBYTECNT);
 800739e:	2130      	movs	r1, #48	; 0x30
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff ff24 	bl	80071ee <ReadRegister>
  ReadRegister(port, regRXSTAT);
 80073a6:	2131      	movs	r1, #49	; 0x31
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff20 	bl	80071ee <ReadRegister>
  ReadRegister(port, regTRANSMIT);
 80073ae:	2150      	movs	r1, #80	; 0x50
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ff1c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regTXBYTECNT);
 80073b6:	2151      	movs	r1, #81	; 0x51
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ff18 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVBUS_VOLTAGE_L);
 80073be:	2170      	movs	r1, #112	; 0x70
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff ff14 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVBUS_VOLTAGE_H);
 80073c6:	2171      	movs	r1, #113	; 0x71
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ff10 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVBUS_SNK_DISCL);
 80073ce:	2172      	movs	r1, #114	; 0x72
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff ff0c 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVBUS_SNK_DISCH);
 80073d6:	2173      	movs	r1, #115	; 0x73
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff ff08 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVBUS_STOP_DISCL);
 80073de:	2174      	movs	r1, #116	; 0x74
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff ff04 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVBUS_STOP_DISCH);
 80073e6:	2175      	movs	r1, #117	; 0x75
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff ff00 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVALARMHCFGL);
 80073ee:	2176      	movs	r1, #118	; 0x76
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fefc 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVALARMHCFGH);
 80073f6:	2177      	movs	r1, #119	; 0x77
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff fef8 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVALARMLCFGL);
 80073fe:	2178      	movs	r1, #120	; 0x78
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff fef4 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVALARMLCFGH);
 8007406:	2179      	movs	r1, #121	; 0x79
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff fef0 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVCONN_OCP);
 800740e:	21a0      	movs	r1, #160	; 0xa0
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff feec 	bl	80071ee <ReadRegister>
  ReadRegister(port, regSLICE);
 8007416:	21a1      	movs	r1, #161	; 0xa1
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff fee8 	bl	80071ee <ReadRegister>
  ReadRegister(port, regRESET);
 800741e:	21a2      	movs	r1, #162	; 0xa2
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fee4 	bl	80071ee <ReadRegister>
  ReadRegister(port, regVD_STAT);
 8007426:	21a3      	movs	r1, #163	; 0xa3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fee0 	bl	80071ee <ReadRegister>
  ReadRegister(port, regGPIO1_CFG);
 800742e:	21a4      	movs	r1, #164	; 0xa4
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fedc 	bl	80071ee <ReadRegister>
  ReadRegister(port, regGPIO2_CFG);
 8007436:	21a5      	movs	r1, #165	; 0xa5
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fed8 	bl	80071ee <ReadRegister>
  ReadRegister(port, regGPIO_STAT);
 800743e:	21a6      	movs	r1, #166	; 0xa6
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fed4 	bl	80071ee <ReadRegister>
  ReadRegister(port, regDRPTOGGLE);
 8007446:	21a7      	movs	r1, #167	; 0xa7
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fed0 	bl	80071ee <ReadRegister>
  ReadRegister(port, regSINK_TRANSMIT);
 800744e:	21b0      	movs	r1, #176	; 0xb0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fecc 	bl	80071ee <ReadRegister>
  ReadRegister(port, regSRC_FRSWAP);
 8007456:	21b1      	movs	r1, #177	; 0xb1
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff fec8 	bl	80071ee <ReadRegister>
  ReadRegister(port, regSNK_FRSWAP);
 800745e:	21b2      	movs	r1, #178	; 0xb2
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff fec4 	bl	80071ee <ReadRegister>
  ReadRegister(port, regALERT_VD);
 8007466:	21b3      	movs	r1, #179	; 0xb3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fec0 	bl	80071ee <ReadRegister>
  ReadRegister(port, regALERT_VD_MSK);
 800746e:	21b4      	movs	r1, #180	; 0xb4
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff febc 	bl	80071ee <ReadRegister>
  ReadRegister(port, regRPVAL_OVERRIDE);
 8007476:	21b5      	movs	r1, #181	; 0xb5
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff feb8 	bl	80071ee <ReadRegister>
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <ReadRxRegisters>:

void ReadRxRegisters(struct Port *port, FSC_U8 numbytes)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  /* Check length limit */
  if (numbytes > COMM_BUFFER_LENGTH) numbytes = COMM_BUFFER_LENGTH;
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	2b1c      	cmp	r3, #28
 8007496:	d901      	bls.n	800749c <ReadRxRegisters+0x16>
 8007498:	231c      	movs	r3, #28
 800749a:	70fb      	strb	r3, [r7, #3]

  platform_i2c_read(port->i2c_addr_, regRXDATA_00,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7858      	ldrb	r0, [r3, #1]
                    numbytes, port->registers_.RxData);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3327      	adds	r3, #39	; 0x27
  platform_i2c_read(port->i2c_addr_, regRXDATA_00,
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	2134      	movs	r1, #52	; 0x34
 80074a8:	f7f9 f8b0 	bl	800060c <platform_i2c_read>
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <WriteRegister>:

void WriteRegister(struct Port *port, enum RegAddress regaddress)
{
 80074b4:	b590      	push	{r4, r7, lr}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  platform_i2c_write(port->i2c_addr_, (FSC_U8)regaddress, 1,
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	785c      	ldrb	r4, [r3, #1]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3302      	adds	r3, #2
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	4611      	mov	r1, r2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 fae7 	bl	8008aa0 <AddressToRegister>
 80074d2:	4603      	mov	r3, r0
 80074d4:	78f9      	ldrb	r1, [r7, #3]
 80074d6:	2201      	movs	r2, #1
 80074d8:	4620      	mov	r0, r4
 80074da:	f7f9 f8d1 	bl	8000680 <platform_i2c_write>
                     AddressToRegister(&port->registers_, regaddress));
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd90      	pop	{r4, r7, pc}

080074e6 <WriteRegisters>:

void WriteRegisters(struct Port *port, enum RegAddress regaddr, FSC_U8 cnt)
{
 80074e6:	b590      	push	{r4, r7, lr}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
 80074f2:	4613      	mov	r3, r2
 80074f4:	70bb      	strb	r3, [r7, #2]
  platform_i2c_write(port->i2c_addr_, (FSC_U8)regaddr, cnt,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	785c      	ldrb	r4, [r3, #1]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3302      	adds	r3, #2
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	4611      	mov	r1, r2
 8007502:	4618      	mov	r0, r3
 8007504:	f001 facc 	bl	8008aa0 <AddressToRegister>
 8007508:	4603      	mov	r3, r0
 800750a:	78ba      	ldrb	r2, [r7, #2]
 800750c:	78f9      	ldrb	r1, [r7, #3]
 800750e:	4620      	mov	r0, r4
 8007510:	f7f9 f8b6 	bl	8000680 <platform_i2c_write>
                     AddressToRegister(&port->registers_, regaddr));
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}

0800751c <WriteTxRegisters>:

void WriteTxRegisters(struct Port *port, FSC_U8 numbytes)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  /* Check length limit */
  if (numbytes > COMM_BUFFER_LENGTH) numbytes = COMM_BUFFER_LENGTH;
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	2b1c      	cmp	r3, #28
 800752c:	d901      	bls.n	8007532 <WriteTxRegisters+0x16>
 800752e:	231c      	movs	r3, #28
 8007530:	70fb      	strb	r3, [r7, #3]

  platform_i2c_write(port->i2c_addr_, regTXDATA_00,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7858      	ldrb	r0, [r3, #1]
                     numbytes, port->registers_.TxData);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3347      	adds	r3, #71	; 0x47
  platform_i2c_write(port->i2c_addr_, regTXDATA_00,
 800753a:	78fa      	ldrb	r2, [r7, #3]
 800753c:	2154      	movs	r1, #84	; 0x54
 800753e:	f7f9 f89f 	bl	8000680 <platform_i2c_write>
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <ClearInterrupt>:
/*
 * Sets bits indicated by mask in interrupt register at address. This has the
 * effect of clearing the specified interrupt(s).
 */
void ClearInterrupt(struct Port *port, enum RegAddress address, FSC_U8 mask)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
 8007556:	4613      	mov	r3, r2
 8007558:	70bb      	strb	r3, [r7, #2]
  FSC_U8 data = mask;
 800755a:	78bb      	ldrb	r3, [r7, #2]
 800755c:	73fb      	strb	r3, [r7, #15]
  platform_i2c_write(port->i2c_addr_, (FSC_U8)address, 1, &data);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7858      	ldrb	r0, [r3, #1]
 8007562:	f107 030f 	add.w	r3, r7, #15
 8007566:	78f9      	ldrb	r1, [r7, #3]
 8007568:	2201      	movs	r2, #1
 800756a:	f7f9 f889 	bl	8000680 <platform_i2c_write>
  RegClearBits(&(port->registers_), address, mask);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3302      	adds	r3, #2
 8007572:	78ba      	ldrb	r2, [r7, #2]
 8007574:	78f9      	ldrb	r1, [r7, #3]
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fd1e 	bl	8008fb8 <RegClearBits>
}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <SendCommand>:
 * SendCommand
 *
 * Sets the port's command register to cmd and writes it to the device.
 */
void SendCommand(struct Port *port, enum DeviceCommand cmd)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  /* Make sure the command is supported */
  if ((cmd == SinkVbus || cmd == DisableSinkVbus) && !port->have_sink_path_)
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	2b55      	cmp	r3, #85	; 0x55
 8007594:	d002      	beq.n	800759c <SendCommand+0x18>
 8007596:	78fb      	ldrb	r3, [r7, #3]
 8007598:	2b44      	cmp	r3, #68	; 0x44
 800759a:	d104      	bne.n	80075a6 <SendCommand+0x22>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d04f      	beq.n	8007646 <SendCommand+0xc2>
    return;

  if (cmd == SourceVbusHighV) {
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	2b88      	cmp	r3, #136	; 0x88
 80075aa:	d113      	bne.n	80075d4 <SendCommand+0x50>
    if (!port->have_HV_path_) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d049      	beq.n	800764a <SendCommand+0xc6>
      return;
    }
    else {
      /* GPIO workaround for HV path */
      platform_setHVSwitch(TRUE);
 80075b6:	2001      	movs	r0, #1
 80075b8:	f7f9 f8e4 	bl	8000784 <platform_setHVSwitch>

      platform_delay(2000);
 80075bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80075c0:	f7f9 f952 	bl	8000868 <platform_delay>

      port->registers_.Command = DisableSourceVbus;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2266      	movs	r2, #102	; 0x66
 80075c8:	771a      	strb	r2, [r3, #28]
      WriteRegister(port, regCOMMAND);
 80075ca:	2123      	movs	r1, #35	; 0x23
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff ff71 	bl	80074b4 <WriteRegister>
 80075d2:	e006      	b.n	80075e2 <SendCommand+0x5e>
    }
  }
  else {
    port->registers_.Command = cmd;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	771a      	strb	r2, [r3, #28]
    WriteRegister(port, regCOMMAND);
 80075da:	2123      	movs	r1, #35	; 0x23
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ff69 	bl	80074b4 <WriteRegister>
  }

  if (cmd == SourceVbusDefaultV) {
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	2b77      	cmp	r3, #119	; 0x77
 80075e6:	d104      	bne.n	80075f2 <SendCommand+0x6e>
    port->sink_selected_voltage_ = FSC_VBUS_05_V;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ee:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  }

  /* Check the 3695 GPIO enable bit if needed */
  if (cmd == SourceVbusDefaultV || cmd == SinkVbus) {
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	2b77      	cmp	r3, #119	; 0x77
 80075f6:	d002      	beq.n	80075fe <SendCommand+0x7a>
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	2b55      	cmp	r3, #85	; 0x55
 80075fc:	d10b      	bne.n	8007616 <SendCommand+0x92>
    port->registers_.Gpio1Cfg.GPO1_VAL = 0; /* ON - Active Low */
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8007604:	f36f 0382 	bfc	r3, #2, #1
 8007608:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    WriteRegister(port, regGPIO1_CFG);
 800760c:	21a4      	movs	r1, #164	; 0xa4
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff ff50 	bl	80074b4 <WriteRegister>
 8007614:	e00a      	b.n	800762c <SendCommand+0xa8>
  }
  else {
    port->registers_.Gpio1Cfg.GPO1_VAL = 1; /* OFF - Active Low */
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 800761c:	f043 0304 	orr.w	r3, r3, #4
 8007620:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    WriteRegister(port, regGPIO1_CFG);
 8007624:	21a4      	movs	r1, #164	; 0xa4
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff ff44 	bl	80074b4 <WriteRegister>
  }

  if (cmd != SourceVbusHighV) {
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	2b88      	cmp	r3, #136	; 0x88
 8007630:	d00c      	beq.n	800764c <SendCommand+0xc8>
      platform_setHVSwitch(FALSE);
 8007632:	2000      	movs	r0, #0
 8007634:	f7f9 f8a6 	bl	8000784 <platform_setHVSwitch>
      platform_setPPSVoltage(port->port_id_, 0);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f7f9 f8b8 	bl	80007b4 <platform_setPPSVoltage>
 8007644:	e002      	b.n	800764c <SendCommand+0xc8>
    return;
 8007646:	bf00      	nop
 8007648:	e000      	b.n	800764c <SendCommand+0xc8>
      return;
 800764a:	bf00      	nop
  }
}
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <SetRpValue>:

void SetRpValue(struct Port *port, USBTypeCCurrent currentVal)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  switch (currentVal) {
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d009      	beq.n	8007678 <SetRpValue+0x26>
 8007664:	2b03      	cmp	r3, #3
 8007666:	d00e      	beq.n	8007686 <SetRpValue+0x34>
 8007668:	2b01      	cmp	r3, #1
 800766a:	d113      	bne.n	8007694 <SetRpValue+0x42>
    case utccDefault: /* Rp Default */
      port->registers_.RoleCtrl.RP_VAL = 0b00;
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	7d93      	ldrb	r3, [r2, #22]
 8007670:	f36f 1305 	bfc	r3, #4, #2
 8007674:	7593      	strb	r3, [r2, #22]
      break;
 8007676:	e013      	b.n	80076a0 <SetRpValue+0x4e>
    case utcc1p5A:  /* Rp 1.5A */
      port->registers_.RoleCtrl.RP_VAL = 0b01;
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7d93      	ldrb	r3, [r2, #22]
 800767c:	2101      	movs	r1, #1
 800767e:	f361 1305 	bfi	r3, r1, #4, #2
 8007682:	7593      	strb	r3, [r2, #22]
      break;
 8007684:	e00c      	b.n	80076a0 <SetRpValue+0x4e>
    case utcc3p0A:  /* Rp 3.0A*/
      port->registers_.RoleCtrl.RP_VAL = 0b10;
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	7d93      	ldrb	r3, [r2, #22]
 800768a:	2102      	movs	r1, #2
 800768c:	f361 1305 	bfi	r3, r1, #4, #2
 8007690:	7593      	strb	r3, [r2, #22]
      break;
 8007692:	e005      	b.n	80076a0 <SetRpValue+0x4e>
    default:        /* Go to default */
      port->registers_.RoleCtrl.RP_VAL = 0b00;
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	7d93      	ldrb	r3, [r2, #22]
 8007698:	f36f 1305 	bfc	r3, #4, #2
 800769c:	7593      	strb	r3, [r2, #22]
      break;
 800769e:	bf00      	nop
    }
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <UpdateSourceCurrent>:

/* Type-C Functionality */
void UpdateSourceCurrent(struct Port *port, USBTypeCCurrent currentVal)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
  SetRpValue(port, currentVal);
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff ffc8 	bl	8007652 <SetRpValue>
  WriteRegister(port, regROLECTRL);
 80076c2:	211a      	movs	r1, #26
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff fef5 	bl	80074b4 <WriteRegister>
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <UpdateSinkCurrent>:

void UpdateSinkCurrent(struct Port *port)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* As a sink, one CC pin will be open, and we want to check the other one */
  port->snk_current_ =
    (USBTypeCCurrent)((port->registers_.CCStat.CC2_STAT == CCTermSnkOpen) ?
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7e5b      	ldrb	r3, [r3, #25]
 80076de:	f003 030c 	and.w	r3, r3, #12
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <UpdateSinkCurrent+0x24>
                       port->registers_.CCStat.CC1_STAT :
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7e5b      	ldrb	r3, [r3, #25]
 80076ec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80076f0:	b2db      	uxtb	r3, r3
    (USBTypeCCurrent)((port->registers_.CCStat.CC2_STAT == CCTermSnkOpen) ?
 80076f2:	461a      	mov	r2, r3
 80076f4:	e005      	b.n	8007702 <UpdateSinkCurrent+0x30>
                       port->registers_.CCStat.CC2_STAT);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7e5b      	ldrb	r3, [r3, #25]
 80076fa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80076fe:	b2db      	uxtb	r3, r3
    (USBTypeCCurrent)((port->registers_.CCStat.CC2_STAT == CCTermSnkOpen) ?
 8007700:	461a      	mov	r2, r3
  port->snk_current_ =
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <GetVBusVoltage>:

/* Returns the VBus voltage, multiplied by VBUS_SCALE */
FSC_U16 GetVBusVoltage(struct Port *port)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Max scaled voltage is 0xFFC, min is 0 */
  FSC_U16 voltage = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	81fb      	strh	r3, [r7, #14]

  /* Read the current register values */
  ReadRegisters(port, regVBUS_VOLTAGE_L, 2);
 8007720:	2202      	movs	r2, #2
 8007722:	2170      	movs	r1, #112	; 0x70
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff fd7c 	bl	8007222 <ReadRegisters>

  /* Combine value bytes */
  voltage = ((FSC_U16)port->registers_.VBusVoltageH.VBUS_V_HI) << 8;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8007730:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007734:	b2db      	uxtb	r3, r3
 8007736:	b29b      	uxth	r3, r3
 8007738:	021b      	lsls	r3, r3, #8
 800773a:	81fb      	strh	r3, [r7, #14]
  voltage |= port->registers_.VBusVoltageL.VBUS_V_LO;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8007742:	b29a      	uxth	r2, r3
 8007744:	89fb      	ldrh	r3, [r7, #14]
 8007746:	4313      	orrs	r3, r2
 8007748:	81fb      	strh	r3, [r7, #14]

  /* Scale value as needed */
  switch (port->registers_.VBusVoltageH.VBUS_SCALE) {
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8007750:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d002      	beq.n	8007760 <GetVBusVoltage+0x4c>
 800775a:	2b02      	cmp	r3, #2
 800775c:	d004      	beq.n	8007768 <GetVBusVoltage+0x54>
    case 0b10: /* Scaled by 4 */
      voltage *= 4;
      break;
    case 0: /* No scaling, fall through */
    default:
      break;
 800775e:	e007      	b.n	8007770 <GetVBusVoltage+0x5c>
      voltage *= 2;
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	81fb      	strh	r3, [r7, #14]
      break;
 8007766:	e003      	b.n	8007770 <GetVBusVoltage+0x5c>
      voltage *= 4;
 8007768:	89fb      	ldrh	r3, [r7, #14]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	81fb      	strh	r3, [r7, #14]
      break;
 800776e:	bf00      	nop
  }

  /* Voltage measurement in millivolts */
  return voltage * 25;
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	461a      	mov	r2, r3
 8007774:	0092      	lsls	r2, r2, #2
 8007776:	4413      	add	r3, r2
 8007778:	461a      	mov	r2, r3
 800777a:	0091      	lsls	r1, r2, #2
 800777c:	461a      	mov	r2, r3
 800777e:	460b      	mov	r3, r1
 8007780:	4413      	add	r3, r2
 8007782:	b29b      	uxth	r3, r3
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <IsVbusVSafe0V>:
  return ((measurement > (mv - mv / 20)) &&
          (measurement < (mv + mv / 20))) ? TRUE : FALSE;
}

FSC_BOOL IsVbusVSafe0V(struct Port *port)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Returns true when voltage is < 0.8V */
  FSC_U16 voltage = GetVBusVoltage(port);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff ffbd 	bl	8007714 <GetVBusVoltage>
 800779a:	4603      	mov	r3, r0
 800779c:	81fb      	strh	r3, [r7, #14]
  return (voltage < FSC_VBUS_VSAFE0_V) ? TRUE : FALSE;
 800779e:	89fb      	ldrh	r3, [r7, #14]
 80077a0:	f240 321f 	movw	r2, #799	; 0x31f
 80077a4:	4293      	cmp	r3, r2
 80077a6:	bf94      	ite	ls
 80077a8:	2301      	movls	r3, #1
 80077aa:	2300      	movhi	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <IsVbusVSafe5V>:

FSC_BOOL IsVbusVSafe5V(struct Port *port)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Returns true when voltage is within 4.75V - 5.5V */
  FSC_U16 measurement = GetVBusVoltage(port);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff ffa8 	bl	8007714 <GetVBusVoltage>
 80077c4:	4603      	mov	r3, r0
 80077c6:	81fb      	strh	r3, [r7, #14]
  return ((measurement > 4750) && (measurement < 5500)) ? TRUE : FALSE;
 80077c8:	89fb      	ldrh	r3, [r7, #14]
 80077ca:	f241 228e 	movw	r2, #4750	; 0x128e
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d906      	bls.n	80077e0 <IsVbusVSafe5V+0x2a>
 80077d2:	89fb      	ldrh	r3, [r7, #14]
 80077d4:	f241 527b 	movw	r2, #5499	; 0x157b
 80077d8:	4293      	cmp	r3, r2
 80077da:	d801      	bhi.n	80077e0 <IsVbusVSafe5V+0x2a>
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <IsVbusVSafe5V+0x2c>
 80077e0:	2300      	movs	r3, #0
 80077e2:	b2db      	uxtb	r3, r3
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <SetVBusSnkDisc>:
  FSC_U16 measurement = GetVBusVoltage(port);
  return (measurement > mv) ? TRUE : FALSE;
}

void SetVBusSnkDisc(struct Port *port, FSC_U16 level)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	807b      	strh	r3, [r7, #2]
  port->registers_.VBusSnkDiscL.byte = level & 0x00FF;
 80077f8:	887b      	ldrh	r3, [r7, #2]
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  port->registers_.VBusSnkDiscH.byte = (level & 0x0300) >> 8;
 8007802:	887b      	ldrh	r3, [r7, #2]
 8007804:	121b      	asrs	r3, r3, #8
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	b2da      	uxtb	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
  WriteRegisters(port, regVBUS_SNK_DISCL, 2);
 8007814:	2202      	movs	r2, #2
 8007816:	2172      	movs	r1, #114	; 0x72
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7ff fe64 	bl	80074e6 <WriteRegisters>
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <SetVBusStopDisc>:

void SetVBusStopDisc(struct Port *port, FSC_U16 level)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	807b      	strh	r3, [r7, #2]
  port->registers_.VBusStopDiscL.byte = level & 0x00FF;
 8007832:	887b      	ldrh	r3, [r7, #2]
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  port->registers_.VBusStopDiscH.byte = (level & 0x0300) >> 8;
 800783c:	887b      	ldrh	r3, [r7, #2]
 800783e:	121b      	asrs	r3, r3, #8
 8007840:	b2db      	uxtb	r3, r3
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	b2da      	uxtb	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
  WriteRegisters(port, regVBUS_STOP_DISCL, 2);
 800784e:	2202      	movs	r2, #2
 8007850:	2174      	movs	r1, #116	; 0x74
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff fe47 	bl	80074e6 <WriteRegisters>
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <SetVBusAlarm>:

void SetVBusAlarm(struct Port *port, FSC_U16 levelL, FSC_U16 levelH)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	807b      	strh	r3, [r7, #2]
 800786c:	4613      	mov	r3, r2
 800786e:	803b      	strh	r3, [r7, #0]
  port->registers_.VAlarmLCfgL.byte = levelL & 0x00FF;
 8007870:	887b      	ldrh	r3, [r7, #2]
 8007872:	b2da      	uxtb	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  port->registers_.VAlarmLCfgH.byte = (levelL & 0x0300) >> 8;
 800787a:	887b      	ldrh	r3, [r7, #2]
 800787c:	121b      	asrs	r3, r3, #8
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	b2da      	uxtb	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  WriteRegisters(port, regVALARMLCFGL, 2);
 800788c:	2202      	movs	r2, #2
 800788e:	2178      	movs	r1, #120	; 0x78
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff fe28 	bl	80074e6 <WriteRegisters>

  port->registers_.VAlarmHCfgL.byte = levelH & 0x00FF;
 8007896:	883b      	ldrh	r3, [r7, #0]
 8007898:	b2da      	uxtb	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  port->registers_.VAlarmHCfgH.byte = (levelH & 0x0300) >> 8;
 80078a0:	883b      	ldrh	r3, [r7, #0]
 80078a2:	121b      	asrs	r3, r3, #8
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  WriteRegisters(port, regVALARMHCFGL, 2);
 80078b2:	2202      	movs	r2, #2
 80078b4:	2176      	movs	r1, #118	; 0x76
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fe15 	bl	80074e6 <WriteRegisters>
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <DecodeCCTermination>:
 * Returns the termination seen by the CC line.
 * If the caller sets (port->cc_pin_ == CC1), then this checks the CC1
 * line. Otherwise, this checks the CC2 line.
 */
CCTermType DecodeCCTermination(struct Port *port)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Check the undefined cases */
  if (port->cc_pin_ == NONE ||
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d025      	beq.n	8007922 <DecodeCCTermination+0x5e>
      (port->cc_pin_ == CC1 &&
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
  if (port->cc_pin_ == NONE ||
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d10d      	bne.n	80078fc <DecodeCCTermination+0x38>
       (port->registers_.RoleCtrl.CC1_TERM == CCRoleOpen ||
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7d9b      	ldrb	r3, [r3, #22]
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	b2db      	uxtb	r3, r3
      (port->cc_pin_ == CC1 &&
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d019      	beq.n	8007922 <DecodeCCTermination+0x5e>
        port->registers_.RoleCtrl.CC1_TERM == CCRoleRa)) ||
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7d9b      	ldrb	r3, [r3, #22]
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	b2db      	uxtb	r3, r3
       (port->registers_.RoleCtrl.CC1_TERM == CCRoleOpen ||
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d012      	beq.n	8007922 <DecodeCCTermination+0x5e>
      (port->cc_pin_ == CC2 &&
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
        port->registers_.RoleCtrl.CC1_TERM == CCRoleRa)) ||
 8007902:	2b02      	cmp	r3, #2
 8007904:	d10f      	bne.n	8007926 <DecodeCCTermination+0x62>
       (port->registers_.RoleCtrl.CC2_TERM == CCRoleOpen ||
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7d9b      	ldrb	r3, [r3, #22]
 800790a:	f003 030c 	and.w	r3, r3, #12
 800790e:	b2db      	uxtb	r3, r3
      (port->cc_pin_ == CC2 &&
 8007910:	2b0c      	cmp	r3, #12
 8007912:	d006      	beq.n	8007922 <DecodeCCTermination+0x5e>
        port->registers_.RoleCtrl.CC2_TERM == CCRoleRa))) {
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	7d9b      	ldrb	r3, [r3, #22]
 8007918:	f003 030c 	and.w	r3, r3, #12
 800791c:	b2db      	uxtb	r3, r3
       (port->registers_.RoleCtrl.CC2_TERM == CCRoleOpen ||
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <DecodeCCTermination+0x62>
    return CCTypeUndefined;
 8007922:	2305      	movs	r3, #5
 8007924:	e00a      	b.n	800793c <DecodeCCTermination+0x78>
  }

  if (port->source_or_sink_ == Source) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <DecodeCCTermination+0x76>
    return DecodeCCTerminationSource(port);
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACC) */
  }
  else {
#ifdef FSC_HAVE_SNK
    return DecodeCCTerminationSink(port);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f807 	bl	8007944 <DecodeCCTerminationSink>
 8007936:	4603      	mov	r3, r0
 8007938:	e000      	b.n	800793c <DecodeCCTermination+0x78>
#endif /* FSC_HAVE_SNK */
  }

  /* Shouldn't get here, but call it undefined */
  return CCTypeUndefined;
 800793a:	2305      	movs	r3, #5
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <DecodeCCTerminationSink>:
}
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACC) */

#ifdef FSC_HAVE_SNK
CCTermType DecodeCCTerminationSink(struct Port *port)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  CCTermType term = CCTypeUndefined;
 800794c:	2305      	movs	r3, #5
 800794e:	73fb      	strb	r3, [r7, #15]
  switch ((port->cc_pin_ == CC1) ?
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
          port->registers_.CCStat.CC1_STAT :
 8007956:	2b01      	cmp	r3, #1
 8007958:	d105      	bne.n	8007966 <DecodeCCTerminationSink+0x22>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7e5b      	ldrb	r3, [r3, #25]
 800795e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007962:	b2db      	uxtb	r3, r3
 8007964:	e004      	b.n	8007970 <DecodeCCTerminationSink+0x2c>
          port->registers_.CCStat.CC2_STAT) {
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7e5b      	ldrb	r3, [r3, #25]
 800796a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800796e:	b2db      	uxtb	r3, r3
  switch ((port->cc_pin_ == CC1) ?
 8007970:	2b03      	cmp	r3, #3
 8007972:	d817      	bhi.n	80079a4 <DecodeCCTerminationSink+0x60>
 8007974:	a201      	add	r2, pc, #4	; (adr r2, 800797c <DecodeCCTerminationSink+0x38>)
 8007976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797a:	bf00      	nop
 800797c:	0800798d 	.word	0x0800798d
 8007980:	08007993 	.word	0x08007993
 8007984:	08007999 	.word	0x08007999
 8007988:	0800799f 	.word	0x0800799f
  case CCTermSnkOpen:
    term = CCTypeOpen;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
    break;
 8007990:	e009      	b.n	80079a6 <DecodeCCTerminationSink+0x62>
  case CCTermSnkDefault:
    term = CCTypeRdUSB;
 8007992:	2302      	movs	r3, #2
 8007994:	73fb      	strb	r3, [r7, #15]
    break;
 8007996:	e006      	b.n	80079a6 <DecodeCCTerminationSink+0x62>
  case CCTermSnkRp1p5:
    term = CCTypeRd1p5;
 8007998:	2303      	movs	r3, #3
 800799a:	73fb      	strb	r3, [r7, #15]
    break;
 800799c:	e003      	b.n	80079a6 <DecodeCCTerminationSink+0x62>
  case CCTermSnkRp3p0:
    term = CCTypeRd3p0;
 800799e:	2304      	movs	r3, #4
 80079a0:	73fb      	strb	r3, [r7, #15]
    break;
 80079a2:	e000      	b.n	80079a6 <DecodeCCTerminationSink+0x62>
  default:
    break;
 80079a4:	bf00      	nop
  }
  return term;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <ResetDebounceVariables>:
#endif /* FSC_HAVE_SNK */

void ResetDebounceVariables(struct Port *port)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  port->cc_term_previous_ = CCTypeUndefined;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2205      	movs	r2, #5
 80079c0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  port->cc_term_cc_debounce_ = CCTypeUndefined;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2205      	movs	r2, #5
 80079c8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
  port->cc_term_pd_debounce_ = CCTypeUndefined;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2205      	movs	r2, #5
 80079d0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
  port->cc_term_pd_debounce_prev_ = CCTypeUndefined;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2205      	movs	r2, #5
 80079d8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <DebounceCC>:

void DebounceCC(struct Port *port)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* PD Debounce (filter out PD traffic that could look like CC changes) */
  CCTermType cctermcurrent = DecodeCCTermination(port);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff ff67 	bl	80078c4 <DecodeCCTermination>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]
  if (port->cc_term_previous_ != cctermcurrent) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8007a00:	7bfa      	ldrb	r2, [r7, #15]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d00f      	beq.n	8007a26 <DebounceCC+0x3e>
    /* If our latest value has changed, update and reset timers */
    port->cc_term_previous_ = cctermcurrent;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7bfa      	ldrb	r2, [r7, #15]
 8007a0a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    /* Might be better to call restart than disable & enable */
    TimerDisable(&port->pd_debounce_timer_);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	33b0      	adds	r3, #176	; 0xb0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fb16 	bl	8009044 <TimerDisable>
    TimerStart(&port->pd_debounce_timer_, ktPDDebounce);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	33b0      	adds	r3, #176	; 0xb0
 8007a1c:	f643 2198 	movw	r1, #15000	; 0x3a98
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 faf1 	bl	8009008 <TimerStart>
  }

  /* If our debounce timer has expired, record the latest values */
  if (TimerExpired(&port->pd_debounce_timer_)) {
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	33b0      	adds	r3, #176	; 0xb0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 fb36 	bl	800909c <TimerExpired>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <DebounceCC+0x64>
    port->cc_term_pd_debounce_ = port->cc_term_previous_;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    TimerDisable(&port->pd_debounce_timer_);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	33b0      	adds	r3, #176	; 0xb0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 fafc 	bl	8009044 <TimerDisable>
  }

  /* CC Debounce (debounce the cc lines once PD traffic has been filtered) */
  if (port->cc_term_pd_debounce_prev_ != port->cc_term_pd_debounce_) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d014      	beq.n	8007a86 <DebounceCC+0x9e>
    /* If our latest value has changed, update and reset timers */
    port->cc_term_pd_debounce_prev_ = port->cc_term_pd_debounce_;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    port->cc_term_cc_debounce_ = CCTypeUndefined;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    /* Timer was enabled above */
    TimerDisable(&port->cc_debounce_timer_);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	33a4      	adds	r3, #164	; 0xa4
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 fae5 	bl	8009044 <TimerDisable>
    TimerStart(&port->cc_debounce_timer_, ktCCDebounce - ktPDDebounce);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	33a4      	adds	r3, #164	; 0xa4
 8007a7e:	490d      	ldr	r1, [pc, #52]	; (8007ab4 <DebounceCC+0xcc>)
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 fac1 	bl	8009008 <TimerStart>
  }

  /* If our debounce timer has expired, record the latest values */
  if (TimerExpired(&port->cc_debounce_timer_)) {
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	33a4      	adds	r3, #164	; 0xa4
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fb06 	bl	800909c <TimerExpired>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <DebounceCC+0xc4>
    port->cc_term_cc_debounce_ = port->cc_term_pd_debounce_prev_;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    TimerDisable(&port->cc_debounce_timer_);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	33a4      	adds	r3, #164	; 0xa4
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 facc 	bl	8009044 <TimerDisable>
  }
}
 8007aac:	bf00      	nop
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	00019a28 	.word	0x00019a28

08007ab8 <SetVConn>:
#endif /* FSC_LOGGING */
}
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACC) */

void SetVConn(struct Port *port, FSC_BOOL enable)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  port->registers_.PwrCtrl.EN_VCONN = (enable ? 1 : 0);
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bf14      	ite	ne
 8007aca:	2301      	movne	r3, #1
 8007acc:	2300      	moveq	r3, #0
 8007ace:	b2d9      	uxtb	r1, r3
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7e13      	ldrb	r3, [r2, #24]
 8007ad4:	f361 0300 	bfi	r3, r1, #0, #1
 8007ad8:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 8007ada:	211c      	movs	r1, #28
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fce9 	bl	80074b4 <WriteRegister>

  /* PD 3.0 requires to enable sop' and sop'' comm. for vconn source*/
  DPM_ReConfigureRxDetect(port);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fc fa65 	bl	8003fb2 <DPM_ReConfigureRxDetect>
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <GetVConn>:
FSC_BOOL GetVConn(struct Port *port)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  return (port->registers_.PwrCtrl.EN_VCONN == 1) ? TRUE : FALSE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	7e1b      	ldrb	r3, [r3, #24]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	b2db      	uxtb	r3, r3
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <SetStateSink>:
 * @brief Sets the Sink variables and enables VBUS monitor and Alarm low.
 * It disables the Alarm Interrupt so all sink states only need
 * to un-mask VBUS Alarm.
 */
void SetStateSink(struct Port *port)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  port->source_or_sink_ = Sink;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  port->tc_substate_ = 0;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  ResetDebounceVariables(port);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff ff44 	bl	80079b4 <ResetDebounceVariables>

  /* Disable the VBUS Alarm until required. All Sink state
   * can just enable the mask to enable VBUS ALARM High */
  port->registers_.AlertMskL.M_PORT_PWR = 0;
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7c13      	ldrb	r3, [r2, #16]
 8007b30:	f36f 0341 	bfc	r3, #1, #1
 8007b34:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_VBUS_ALRM_HI = 0;
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	7c13      	ldrb	r3, [r2, #16]
 8007b3a:	f36f 13c7 	bfc	r3, #7, #1
 8007b3e:	7413      	strb	r3, [r2, #16]
  WriteRegister(port, regALERTMSKL);
 8007b40:	2112      	movs	r1, #18
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fcb6 	bl	80074b4 <WriteRegister>
  port->registers_.AlertMskH.M_VBUS_ALRM_LO = 0;
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7c53      	ldrb	r3, [r2, #17]
 8007b4c:	f36f 0300 	bfc	r3, #0, #1
 8007b50:	7453      	strb	r3, [r2, #17]
  WriteRegister(port, regALERTMSKH);
 8007b52:	2113      	movs	r1, #19
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fcad 	bl	80074b4 <WriteRegister>

  /* Enable the device's auto-discharge and VBus measure features */
  port->registers_.PwrCtrl.DIS_VALARM = 0;
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	7e13      	ldrb	r3, [r2, #24]
 8007b5e:	f36f 1345 	bfc	r3, #5, #1
 8007b62:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.DIS_VBUS_MON = 0;
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7e13      	ldrb	r3, [r2, #24]
 8007b68:	f36f 1386 	bfc	r3, #6, #1
 8007b6c:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 8007b6e:	211c      	movs	r1, #28
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff fc9f 	bl	80074b4 <WriteRegister>

#ifdef FSC_LOGGING
  LogTCState(port);
#endif /* FSC_LOGGING */
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <DetectCCPin>:
 * Called to discover which pin is CC.
 * This sets port->cc_pin_ accordingly, and sets port->cc_term_
 * according to the termination found on the CC line.
 */
void DetectCCPin(struct Port *port)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* Decode CC1 termination */
  port->cc_pin_ = CC1;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  port->cc_term_ = DecodeCCTermination(port);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff fe98 	bl	80078c4 <DecodeCCTermination>
 8007b94:	4603      	mov	r3, r0
 8007b96:	461a      	mov	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103

  if ((port->cc_term_ != CCTypeRdUSB) &&
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d036      	beq.n	8007c16 <DetectCCPin+0x98>
      (port->cc_term_ != CCTypeRd1p5) &&
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
  if ((port->cc_term_ != CCTypeRdUSB) &&
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d031      	beq.n	8007c16 <DetectCCPin+0x98>
      (port->cc_term_ != CCTypeRd3p0)) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
      (port->cc_term_ != CCTypeRd1p5) &&
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d02c      	beq.n	8007c16 <DetectCCPin+0x98>
    /* CC1 is not CC, so decode CC2 termination */
    port->cc_pin_ = CC2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    port->cc_term_ = DecodeCCTermination(port);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff fe7d 	bl	80078c4 <DecodeCCTermination>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103

    if ((port->cc_term_ != CCTypeRdUSB) &&
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d01b      	beq.n	8007c16 <DetectCCPin+0x98>
        (port->cc_term_ != CCTypeRd1p5) &&
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    if ((port->cc_term_ != CCTypeRdUSB) &&
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d016      	beq.n	8007c16 <DetectCCPin+0x98>
        (port->cc_term_ != CCTypeRd3p0)) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
        (port->cc_term_ != CCTypeRd1p5) &&
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d011      	beq.n	8007c16 <DetectCCPin+0x98>

      /* ... Or maybe RaRa? */
      if (port->cc_term_ == CCTypeRa) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d104      	bne.n	8007c06 <DetectCCPin+0x88>
        /* Call it CC1 for now */
        port->cc_pin_ = CC1;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

        port->cc_term_ = CCTypeUndefined;
      }
    }
  }
}
 8007c04:	e007      	b.n	8007c16 <DetectCCPin+0x98>
        port->cc_pin_ = NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        port->cc_term_ = CCTypeUndefined;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2205      	movs	r2, #5
 8007c12:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UpdateVConnTermination>:
 *
 * Measures and saves the termination seen on the pin that is not configured as
 * the CC line.
 */
void UpdateVConnTermination(struct Port *port)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Flip our CC indicators so we can measure the VConn line */
  port->cc_pin_ = port->cc_pin_ == CC1 ? CC2 : CC1;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <UpdateVConnTermination+0x16>
 8007c30:	2202      	movs	r2, #2
 8007c32:	e000      	b.n	8007c36 <UpdateVConnTermination+0x18>
 8007c34:	2201      	movs	r2, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

  port->vconn_term_ = DecodeCCTermination(port);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff fe41 	bl	80078c4 <DecodeCCTermination>
 8007c42:	4603      	mov	r3, r0
 8007c44:	461a      	mov	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

  /* Restore our CC indicators */
  port->cc_pin_ = port->cc_pin_ == CC1 ? CC2 : CC1;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d101      	bne.n	8007c5a <UpdateVConnTermination+0x3c>
 8007c56:	2202      	movs	r2, #2
 8007c58:	e000      	b.n	8007c5c <UpdateVConnTermination+0x3e>
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <UpdateOrientation>:
 * configured as the CC pin.
 *
 * This function does nothing if neither or both pins are configured as CC.
 */
void UpdateOrientation(struct Port *port)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  if (port->cc_pin_ == CC1) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d126      	bne.n	8007cca <UpdateOrientation+0x60>
    port->registers_.TcpcCtrl.ORIENT = 0;
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	7d53      	ldrb	r3, [r2, #21]
 8007c80:	f36f 0300 	bfc	r3, #0, #1
 8007c84:	7553      	strb	r3, [r2, #21]
    port->registers_.StdOutCfg.ORIENT = 0;
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	7d13      	ldrb	r3, [r2, #20]
 8007c8a:	f36f 0300 	bfc	r3, #0, #1
 8007c8e:	7513      	strb	r3, [r2, #20]

    if (port->source_or_sink_ == Source) {
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <UpdateOrientation+0x48>
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRp;
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	7d93      	ldrb	r3, [r2, #22]
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	f361 0301 	bfi	r3, r1, #0, #2
 8007ca4:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleOpen;
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	7d93      	ldrb	r3, [r2, #22]
 8007caa:	f043 030c 	orr.w	r3, r3, #12
 8007cae:	7593      	strb	r3, [r2, #22]
 8007cb0:	e05f      	b.n	8007d72 <UpdateOrientation+0x108>
    }
    else {
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	7d93      	ldrb	r3, [r2, #22]
 8007cb6:	2102      	movs	r1, #2
 8007cb8:	f361 0301 	bfi	r3, r1, #0, #2
 8007cbc:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleOpen;
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	7d93      	ldrb	r3, [r2, #22]
 8007cc2:	f043 030c 	orr.w	r3, r3, #12
 8007cc6:	7593      	strb	r3, [r2, #22]
 8007cc8:	e053      	b.n	8007d72 <UpdateOrientation+0x108>
    }
  }
  else if (port->cc_pin_ == CC2) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d126      	bne.n	8007d22 <UpdateOrientation+0xb8>
    port->registers_.TcpcCtrl.ORIENT = 1;
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7d53      	ldrb	r3, [r2, #21]
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	7553      	strb	r3, [r2, #21]
    port->registers_.StdOutCfg.ORIENT = 1;
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	7d13      	ldrb	r3, [r2, #20]
 8007ce2:	f043 0301 	orr.w	r3, r3, #1
 8007ce6:	7513      	strb	r3, [r2, #20]

    if (port->source_or_sink_ == Source) {
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10b      	bne.n	8007d0a <UpdateOrientation+0xa0>
      port->registers_.RoleCtrl.CC1_TERM = CCRoleOpen;
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	7d93      	ldrb	r3, [r2, #22]
 8007cf6:	f043 0303 	orr.w	r3, r3, #3
 8007cfa:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRp;
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7d93      	ldrb	r3, [r2, #22]
 8007d00:	2101      	movs	r1, #1
 8007d02:	f361 0383 	bfi	r3, r1, #2, #2
 8007d06:	7593      	strb	r3, [r2, #22]
 8007d08:	e033      	b.n	8007d72 <UpdateOrientation+0x108>
    }
    else {
      port->registers_.RoleCtrl.CC1_TERM = CCRoleOpen;
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	7d93      	ldrb	r3, [r2, #22]
 8007d0e:	f043 0303 	orr.w	r3, r3, #3
 8007d12:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	7d93      	ldrb	r3, [r2, #22]
 8007d18:	2102      	movs	r1, #2
 8007d1a:	f361 0383 	bfi	r3, r1, #2, #2
 8007d1e:	7593      	strb	r3, [r2, #22]
 8007d20:	e027      	b.n	8007d72 <UpdateOrientation+0x108>
    }
  }
  else {
    /* Set both Rp or Rd - used for handling Try.* states */
    port->registers_.TcpcCtrl.ORIENT = 0;
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	7d53      	ldrb	r3, [r2, #21]
 8007d26:	f36f 0300 	bfc	r3, #0, #1
 8007d2a:	7553      	strb	r3, [r2, #21]
    port->registers_.StdOutCfg.ORIENT = 0;
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	7d13      	ldrb	r3, [r2, #20]
 8007d30:	f36f 0300 	bfc	r3, #0, #1
 8007d34:	7513      	strb	r3, [r2, #20]

    if (port->source_or_sink_ == Source) {
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10c      	bne.n	8007d5a <UpdateOrientation+0xf0>
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRp;
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7d93      	ldrb	r3, [r2, #22]
 8007d44:	2101      	movs	r1, #1
 8007d46:	f361 0301 	bfi	r3, r1, #0, #2
 8007d4a:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRp;
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	7d93      	ldrb	r3, [r2, #22]
 8007d50:	2101      	movs	r1, #1
 8007d52:	f361 0383 	bfi	r3, r1, #2, #2
 8007d56:	7593      	strb	r3, [r2, #22]
 8007d58:	e00b      	b.n	8007d72 <UpdateOrientation+0x108>
    }
    else {
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	7d93      	ldrb	r3, [r2, #22]
 8007d5e:	2102      	movs	r1, #2
 8007d60:	f361 0301 	bfi	r3, r1, #0, #2
 8007d64:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	7d93      	ldrb	r3, [r2, #22]
 8007d6a:	2102      	movs	r1, #2
 8007d6c:	f361 0383 	bfi	r3, r1, #2, #2
 8007d70:	7593      	strb	r3, [r2, #22]
    }
  }

  port->registers_.RoleCtrl.DRP = 0;
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	7d93      	ldrb	r3, [r2, #22]
 8007d76:	f36f 1386 	bfc	r3, #6, #1
 8007d7a:	7593      	strb	r3, [r2, #22]

  WriteRegister(port, regTCPC_CTRL);
 8007d7c:	2119      	movs	r1, #25
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff fb98 	bl	80074b4 <WriteRegister>
  WriteRegister(port, regSTD_OUT_CFG);
 8007d84:	2118      	movs	r1, #24
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fb94 	bl	80074b4 <WriteRegister>
  WriteRegister(port, regROLECTRL);
 8007d8c:	211a      	movs	r1, #26
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff fb90 	bl	80074b4 <WriteRegister>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <ClearState>:

void ClearState(struct Port *port)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  PDDisable(port);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f978 	bl	800809a <PDDisable>

  /* Disable VBus and VBus detection */
  SendCommand(port, DisableSourceVbus);
 8007daa:	2166      	movs	r1, #102	; 0x66
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7ff fbe9 	bl	8007584 <SendCommand>
  SendCommand(port, DisableSinkVbus);
 8007db2:	2144      	movs	r1, #68	; 0x44
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fbe5 	bl	8007584 <SendCommand>

  /* Disable VConn, etc. */
  port->registers_.PwrCtrl.EN_VCONN = 0;
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	7e13      	ldrb	r3, [r2, #24]
 8007dbe:	f36f 0300 	bfc	r3, #0, #1
 8007dc2:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.DIS_VBUS_MON = 1;
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	7e13      	ldrb	r3, [r2, #24]
 8007dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dcc:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.DIS_VALARM = 1;
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	7e13      	ldrb	r3, [r2, #24]
 8007dd2:	f043 0320 	orr.w	r3, r3, #32
 8007dd6:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.AUTO_DISCH = 0;
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7e13      	ldrb	r3, [r2, #24]
 8007ddc:	f36f 1304 	bfc	r3, #4, #1
 8007de0:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.EN_BLEED_DISCH = 1;
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	7e13      	ldrb	r3, [r2, #24]
 8007de6:	f043 0308 	orr.w	r3, r3, #8
 8007dea:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.FORCE_DISCH = 0;
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7e13      	ldrb	r3, [r2, #24]
 8007df0:	f36f 0382 	bfc	r3, #2, #1
 8007df4:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 8007df6:	211c      	movs	r1, #28
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff fb5b 	bl	80074b4 <WriteRegister>

  port->is_vconn_source_ = FALSE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f

  ResetDebounceVariables(port);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff fdd4 	bl	80079b4 <ResetDebounceVariables>
  port->cc_pin_ = NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

  port->cc_term_ = CCTypeUndefined;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2205      	movs	r2, #5
 8007e18:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
  port->vconn_term_ = CCTypeUndefined;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2205      	movs	r2, #5
 8007e20:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

  port->tc_substate_ = 0;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

  TimerDisable(&port->pd_debounce_timer_);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	33b0      	adds	r3, #176	; 0xb0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f001 f907 	bl	8009044 <TimerDisable>

#ifdef FSC_LOGGING
  LogTCState(port);
#endif /* FSC_LOGGING */
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <ResetMessageIDs>:
  if ((sop == SOP_TYPE_SOP) || (sop == SOP_TYPE_SOP1))
    port->message_id_[sop] = id;
}

static void ResetMessageIDs(struct Port *port, SopType sop)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	70fb      	strb	r3, [r7, #3]
  port->message_id_counter_[sop] = 0;
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	3348      	adds	r3, #72	; 0x48
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	2200      	movs	r2, #0
 8007e56:	605a      	str	r2, [r3, #4]
  port->message_id_[sop] = 0xFF;
 8007e58:	78fa      	ldrb	r2, [r7, #3]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	324c      	adds	r2, #76	; 0x4c
 8007e5e:	21ff      	movs	r1, #255	; 0xff
 8007e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->message_id_counter_[sop] = 0;
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	3348      	adds	r3, #72	; 0x48
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	605a      	str	r2, [r3, #4]
  port->message_id_[sop] = 0xFF;
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	324c      	adds	r2, #76	; 0x4c
 8007e78:	21ff      	movs	r1, #255	; 0xff
 8007e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <ResetProtocolLayer>:

void ResetProtocolLayer(struct Port *port, SopType sop)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  FSC_U8 i = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
  port->protocol_state_ = PRLIdle;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  port->pd_tx_status_ = txIdle;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

  ResetMessageIDs(port, sop);
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff ffc5 	bl	8007e3e <ResetMessageIDs>

  if (sop == SOP_TYPE_SOP)
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d135      	bne.n	8007f26 <ResetProtocolLayer+0x9c>
  {
#ifdef FSC_HAVE_VDM
  TimerDisable(&port->vdm_timer_);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 f8bf 	bl	8009044 <TimerDisable>
#endif /* FSC_HAVE_VDM */

    port->protocol_msg_rx_ = FALSE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    port->protocol_msg_rx_sop_ = SOP_TYPE_SOP;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
    port->protocol_msg_tx_sop_ = SOP_TYPE_SOP;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    port->pd_tx_flag_ = FALSE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    port->policy_has_contract_ = FALSE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

    port->waiting_on_hr_ = FALSE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
#ifdef FSC_HAVE_USBHID
    /* Set the source caps updated flag to trigger an update of the GUI */
    port->source_caps_updated_ = TRUE;
#endif /* FSC_HAVE_USBHID */

    port->usb_pd_contract_.object = 0;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    port->caps_header_received_.word = 0;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

    for (i = 0; i < 7; i++) {
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
 8007f0a:	e009      	b.n	8007f20 <ResetProtocolLayer+0x96>
      port->caps_received_[i].object = 0;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	337e      	adds	r3, #126	; 0x7e
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	2200      	movs	r2, #0
 8007f18:	605a      	str	r2, [r3, #4]
    for (i = 0; i < 7; i++) {
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	2b06      	cmp	r3, #6
 8007f24:	d9f2      	bls.n	8007f0c <ResetProtocolLayer+0x82>
    }
  }

  DPM_ReConfigureRxDetect(port);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7fc f843 	bl	8003fb2 <DPM_ReConfigureRxDetect>
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <PDEnable>:

void PDEnable(struct Port *port, FSC_BOOL is_source)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  FSC_U8 i;
  port->is_hard_reset_ = FALSE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  port->is_pr_swap_ = FALSE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  port->hard_reset_counter_ = 0;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  port->renegotiate_ = FALSE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
  port->needs_goto_min_ = FALSE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
  port->policy_is_ams_ = FALSE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
  port->req_dr_swap_to_dfp_as_sink_ = Attempt_DR_Swap_to_Dfp_As_Sink;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
  port->req_dr_swap_To_ufp_as_src_ = Attempt_DR_Swap_to_Ufp_As_Src;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
  port->req_vconn_swap_to_on_as_sink_ = Attempt_Vconn_Swap_to_On_As_Sink;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
  port->req_vconn_swap_to_off_as_src_ = Attempt_Vconn_Swap_to_Off_As_Src;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  port->req_pr_swap_as_src_ = Requests_PR_Swap_As_Src;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  port->req_pr_swap_as_snk_ = Requests_PR_Swap_As_Snk;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef FSC_HAVE_EXTENDED
  port->protocol_ext_request_chunk_ = FALSE;
  port->protocol_ext_send_chunk_ = FALSE;
  port->protocol_ext_state_active_ = FALSE;
#endif /* FSC_HAVE_EXTENDED */
  if (port->pd_enabled_ == TRUE) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d173      	bne.n	8008092 <PDEnable+0x15e>
    if (port->cc_pin_ != NONE) {
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d06b      	beq.n	800808c <PDEnable+0x158>
      /* If we know what pin the CC signal is... */
      port->pd_active_ = TRUE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

      TimerDisable(&port->no_response_timer_);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	33bc      	adds	r3, #188	; 0xbc
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 f83f 	bl	8009044 <TimerDisable>
      TimerDisable(&port->policy_state_timer_);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	338c      	adds	r3, #140	; 0x8c
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 f83a 	bl	8009044 <TimerDisable>
      TimerDisable(&port->policy_sinktx_timer_);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3398      	adds	r3, #152	; 0x98
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 f835 	bl	8009044 <TimerDisable>
      TimerDisable(&port->swap_source_start_timer_);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	33c8      	adds	r3, #200	; 0xc8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 f830 	bl	8009044 <TimerDisable>

      port->idle_ = FALSE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      port->policy_is_source_ = is_source;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
      port->policy_is_dfp_ = is_source;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      port->policy_subindex_ = 0;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149

      DPM_Initialize(port);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7fb fef5 	bl	8003df4 <DPM_Initialize>
      /* Reset the protocol layer */
      for (i = SOP_TYPE_SOP; i < NUM_SOP_SUPPORTED; i++) {
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
 800800e:	e007      	b.n	8008020 <PDEnable+0xec>
        ResetProtocolLayer(port, i);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7ff ff38 	bl	8007e8a <ResetProtocolLayer>
      for (i = SOP_TYPE_SOP; i < NUM_SOP_SUPPORTED; i++) {
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	3301      	adds	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d9f4      	bls.n	8008010 <PDEnable+0xdc>
      }

      ClearInterrupt(port, regALERTL, MSK_I_TXSUCC | MSK_I_TXDISC |
 8008026:	227c      	movs	r2, #124	; 0x7c
 8008028:	2110      	movs	r1, #16
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff fa8d 	bl	800754a <ClearInterrupt>
          MSK_I_TXFAIL | MSK_I_RXHRDRST | MSK_I_RXSTAT);

      /* Set the initial data port direction */
      if (port->policy_is_source_) {
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d012      	beq.n	8008060 <PDEnable+0x12c>
        set_policy_state(port, PE_SRC_Startup);
 800803a:	2100      	movs	r1, #0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f8d3 	bl	80081e8 <set_policy_state>

        /* Initialize as a source-DFP */
        port->registers_.MsgHeadr.POWER_ROLE = 1;
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8008048:	f043 0301 	orr.w	r3, r3, #1
 800804c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
        port->registers_.MsgHeadr.DATA_ROLE = 1;
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8008056:	f043 0308 	orr.w	r3, r3, #8
 800805a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 800805e:	e011      	b.n	8008084 <PDEnable+0x150>
      }
      else {
        /* Policy is sink */
        set_policy_state(port, PE_SNK_Startup);
 8008060:	210d      	movs	r1, #13
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f8c0 	bl	80081e8 <set_policy_state>

        /* Initialize as a sink-UFP */
        port->registers_.MsgHeadr.POWER_ROLE = 0;
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800806e:	f36f 0300 	bfc	r3, #0, #1
 8008072:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
        port->registers_.MsgHeadr.DATA_ROLE = 0;
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800807c:	f36f 03c3 	bfc	r3, #3, #1
 8008080:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
      }

      WriteRegister(port, regMSGHEADR);
 8008084:	212e      	movs	r1, #46	; 0x2e
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff fa14 	bl	80074b4 <WriteRegister>
#ifdef FSC_LOGGING
      WritePDToken(&port->log_, TRUE, pdtAttach);
#endif /* FSC_LOGGING */
    }
#ifdef FSC_HAVE_DP
    DP_Initialize(port);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fb f9f3 	bl	8003478 <DP_Initialize>
#endif /* FSC_HAVE_DP */
  }
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <PDDisable>:

void PDDisable(struct Port *port)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_USBHID
  /* Set the source caps updated flag to trigger an update of the GUI */
  port->source_caps_updated_ = TRUE;
#endif /* FSC_HAVE_USBHID */

  port->is_hard_reset_ = FALSE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  port->pd_active_ = FALSE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
  port->protocol_state_ = PRLDisabled;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  set_policy_state(port, PE_SRC_Disabled);
 80080ba:	2106      	movs	r1, #6
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f893 	bl	80081e8 <set_policy_state>
  port->pd_tx_status_ = txIdle;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  port->policy_is_source_ = TRUE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
  port->policy_is_dfp_ = TRUE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
  port->policy_has_contract_ = FALSE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
  port->is_contract_valid_ = FALSE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e

  TimerDisable(&port->policy_state_timer_);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	338c      	adds	r3, #140	; 0x8c
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 ffa8 	bl	8009044 <TimerDisable>
  TimerDisable(&port->policy_sinktx_timer_);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3398      	adds	r3, #152	; 0x98
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 ffa3 	bl	8009044 <TimerDisable>
  TimerDisable(&port->no_response_timer_);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	33bc      	adds	r3, #188	; 0xbc
 8008102:	4618      	mov	r0, r3
 8008104:	f000 ff9e 	bl	8009044 <TimerDisable>

  /* Disable PD in the device */
  port->registers_.RxDetect.byte = 0;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  WriteRegister(port, regRXDETECT);
 8008110:	212f      	movs	r1, #47	; 0x2f
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff f9ce 	bl	80074b4 <WriteRegister>
#ifdef FSC_HAVE_DP
  platform_dp_enable_pins(FALSE, 0);
 8008118:	2100      	movs	r1, #0
 800811a:	2000      	movs	r0, #0
 800811c:	f7f8 fc2f 	bl	800097e <platform_dp_enable_pins>
#endif /* FSC_HAVE_DP */
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <set_sop_p_detect>:

void set_sop_p_detect(struct Port *port, FSC_BOOL enable)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  /* Clear before write is needed for cable reset */
  port->registers_.RxDetect.byte = 0;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  WriteRegister(port, regRXDETECT);
 800813c:	212f      	movs	r1, #47	; 0x2f
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff f9b8 	bl	80074b4 <WriteRegister>

  /* Enable PD messaging */
  port->registers_.RxDetect.EN_SOP = SOP_Capable;
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  port->registers_.RxDetect.EN_HRD_RST = 1;
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008158:	f043 0320 	orr.w	r3, r3, #32
 800815c:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  if (enable == FALSE)
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d11c      	bne.n	80081a0 <set_sop_p_detect+0x78>
  {
    port->registers_.RxDetect.EN_SOP1 = 0;
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800816c:	f36f 0341 	bfc	r3, #1, #1
 8008170:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP2 = 0;
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800817a:	f36f 0382 	bfc	r3, #2, #1
 800817e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP1_DBG = 0;
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008188:	f36f 03c3 	bfc	r3, #3, #1
 800818c:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP2_DBG = 0;
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8008196:	f36f 1304 	bfc	r3, #4, #1
 800819a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 800819e:	e01b      	b.n	80081d8 <set_sop_p_detect+0xb0>
  }
  else
  {
    port->registers_.RxDetect.EN_SOP1 = (SOP_P_Capable) ? 1 : 0;
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80081a6:	f36f 0341 	bfc	r3, #1, #1
 80081aa:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP2 = (SOP_PP_Capable) ? 1 : 0;
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80081b4:	f36f 0382 	bfc	r3, #2, #1
 80081b8:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP1_DBG = (SOP_P_Debug_Capable) ? 1 : 0;
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80081c2:	f36f 03c3 	bfc	r3, #3, #1
 80081c6:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP2_DBG = (SOP_PP_Debug_Capable) ? 1 : 0;
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80081d0:	f36f 1304 	bfc	r3, #4, #1
 80081d4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  }

  WriteRegister(port, regRXDETECT);
 80081d8:	212f      	movs	r1, #47	; 0x2f
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff f96a 	bl	80074b4 <WriteRegister>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <set_policy_state>:

void set_policy_state(struct Port *port, PolicyState_t state)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  if (port->policy_state_ == state) return;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80081fa:	78fa      	ldrb	r2, [r7, #3]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d036      	beq.n	800826e <set_policy_state+0x86>

  if (port->dpm_pd_30_ && port->policy_is_ams_ &&
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d012      	beq.n	8008230 <set_policy_state+0x48>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00d      	beq.n	8008230 <set_policy_state+0x48>
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	2b05      	cmp	r3, #5
 8008218:	d002      	beq.n	8008220 <set_policy_state+0x38>
      (state == PE_SRC_Ready || state == PE_SNK_Ready)) {
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	2b13      	cmp	r3, #19
 800821e:	d107      	bne.n	8008230 <set_policy_state+0x48>
    /* Should indicate that we are done with an AMS */
    port->policy_is_ams_ = FALSE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    SetSinkTx(port, SinkTxOK);
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f826 	bl	800827c <SetSinkTx>
  }

  port->policy_state_ = state;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  port->policy_subindex_ = 0;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149

  port->waiting_on_hr_ = FALSE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  port->policy_wait_on_sink_caps_ = FALSE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155

  platform_printf(port->port_id_, "PE SS ", state);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	78fa      	ldrb	r2, [r7, #3]
 8008256:	4908      	ldr	r1, [pc, #32]	; (8008278 <set_policy_state+0x90>)
 8008258:	4618      	mov	r0, r3
 800825a:	f7f8 fb83 	bl	8000964 <platform_printf>

  if (state == PE_ErrorRecovery) port->idle_ = FALSE;
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	2ba6      	cmp	r3, #166	; 0xa6
 8008262:	d105      	bne.n	8008270 <set_policy_state+0x88>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800826c:	e000      	b.n	8008270 <set_policy_state+0x88>
  if (port->policy_state_ == state) return;
 800826e:	bf00      	nop

#ifdef FSC_LOGGING
  LogPEState(port);
#endif /* FSC_LOGGING */
}
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	0800c8bc 	.word	0x0800c8bc

0800827c <SetSinkTx>:

void SetSinkTx(struct Port *port, SinkTxState_t state)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  port->policy_sinktx_state_ = state;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

  UpdateSourceCurrent(port, (state == SinkTxOK) ? utcc3p0A : utcc1p5A);
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <SetSinkTx+0x1e>
 8008296:	2303      	movs	r3, #3
 8008298:	e000      	b.n	800829c <SetSinkTx+0x20>
 800829a:	2302      	movs	r3, #2
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff fa04 	bl	80076ac <UpdateSourceCurrent>
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBPDProtocol>:
#include "timer.h"
#include "dpm.h"
#include "observer.h"

void USBPDProtocol(struct Port *port)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Received hard reset? */
  if (port->registers_.AlertL.I_RXHRDRST) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	7b9b      	ldrb	r3, [r3, #14]
 80082b8:	f003 0308 	and.w	r3, r3, #8
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d030      	beq.n	8008324 <USBPDProtocol+0x78>
    ClearInterrupt(port, regALERTL, MSK_I_RXHRDRST);
 80082c2:	2208      	movs	r2, #8
 80082c4:	2110      	movs	r1, #16
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff f93f 	bl	800754a <ClearInterrupt>
    /* We are forcing the state machine to new state so disable
     * timers if it was being used. */
    TimerDisable(&port->policy_state_timer_);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	338c      	adds	r3, #140	; 0x8c
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 feb7 	bl	8009044 <TimerDisable>
    if (port->policy_is_source_) {
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <USBPDProtocol+0x4c>
      TimerStart(&port->policy_state_timer_, ktPSHardReset);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	338c      	adds	r3, #140	; 0x8c
 80082e4:	f247 5130 	movw	r1, #30000	; 0x7530
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fe8d 	bl	8009008 <TimerStart>
      set_policy_state(port, PE_SRC_Transition_To_Default);
 80082ee:	210a      	movs	r1, #10
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff ff79 	bl	80081e8 <set_policy_state>
 80082f6:	e003      	b.n	8008300 <USBPDProtocol+0x54>
    }
    else {
      set_policy_state(port, PE_SNK_Transition_To_Default);
 80082f8:	2115      	movs	r1, #21
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff ff74 	bl	80081e8 <set_policy_state>
    }

    /* TODO check if we need to exit from any entered mode. */

    /* notify that TCPC has undergone hard reset. */
    notify_observers(EVENT_HARD_RESET, port->port_id_, 0);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	2200      	movs	r2, #0
 8008308:	4619      	mov	r1, r3
 800830a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800830e:	f7fb fe6b 	bl	8003fe8 <notify_observers>
    port->is_hard_reset_ = TRUE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    port->policy_subindex_ = 0;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
    default:
      break;
    }
  }
}
 8008322:	e030      	b.n	8008386 <USBPDProtocol+0xda>
    switch (port->protocol_state_) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800832a:	2b05      	cmp	r3, #5
 800832c:	d82a      	bhi.n	8008384 <USBPDProtocol+0xd8>
 800832e:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <USBPDProtocol+0x88>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	08008385 	.word	0x08008385
 8008338:	08008375 	.word	0x08008375
 800833c:	0800834d 	.word	0x0800834d
 8008340:	0800836d 	.word	0x0800836d
 8008344:	08008385 	.word	0x08008385
 8008348:	0800837d 	.word	0x0800837d
      port->pd_tx_status_ = txWait;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2204      	movs	r2, #4
 8008350:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      port->protocol_state_ = PRLResetWait;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2203      	movs	r2, #3
 8008358:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
      TimerStart(&port->no_response_timer_, ktHardResetComplete);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	33bc      	adds	r3, #188	; 0xbc
 8008360:	f241 3188 	movw	r1, #5000	; 0x1388
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fe4f 	bl	8009008 <TimerStart>
      break;
 800836a:	e00c      	b.n	8008386 <USBPDProtocol+0xda>
      ProtocolResetWait(port);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f85f 	bl	8008430 <ProtocolResetWait>
      break;
 8008372:	e008      	b.n	8008386 <USBPDProtocol+0xda>
      ProtocolIdle(port);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f80b 	bl	8008390 <ProtocolIdle>
      break;
 800837a:	e004      	b.n	8008386 <USBPDProtocol+0xda>
      ProtocolSendingMessage(port);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fa6f 	bl	8008860 <ProtocolSendingMessage>
      break;
 8008382:	e000      	b.n	8008386 <USBPDProtocol+0xda>
      break;
 8008384:	bf00      	nop
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop

08008390 <ProtocolIdle>:

void ProtocolIdle(struct Port *port)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  if (port->pd_tx_status_ == txReset) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d104      	bne.n	80083ac <ProtocolIdle+0x1c>
    /* If we need to send a hard reset */
    port->protocol_state_ = PRLReset;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    }
    else {
      ProtocolTransmitMessage(port);
    }
  }
}
 80083aa:	e03d      	b.n	8008428 <ProtocolIdle+0x98>
  else if (port->registers_.AlertL.I_RXSTAT) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7b9b      	ldrb	r3, [r3, #14]
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d024      	beq.n	8008404 <ProtocolIdle+0x74>
    ProtocolGetRxPacket(port);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f871 	bl	80084a2 <ProtocolGetRxPacket>
    if (port->registers_.SinkTransmit.DIS_SNK_TX == 0) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80083c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <ProtocolIdle+0x56>
      port->registers_.SinkTransmit.DIS_SNK_TX = 1;
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80083d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083da:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
      WriteRegister(port, regSINK_TRANSMIT);
 80083de:	21b0      	movs	r1, #176	; 0xb0
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff f867 	bl	80074b4 <WriteRegister>
    if (port->pd_tx_status_ == txSend) {
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d104      	bne.n	80083fa <ProtocolIdle+0x6a>
        port->pd_tx_status_ = txAbort;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2209      	movs	r2, #9
 80083f4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 80083f8:	e016      	b.n	8008428 <ProtocolIdle+0x98>
        port->pd_tx_status_ = txIdle;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 8008402:	e011      	b.n	8008428 <ProtocolIdle+0x98>
  else if (port->pd_tx_status_ == txSend) {
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800840a:	2b02      	cmp	r3, #2
 800840c:	d10c      	bne.n	8008428 <ProtocolIdle+0x98>
    if (port->protocol_msg_rx_) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d004      	beq.n	8008422 <ProtocolIdle+0x92>
      port->pd_tx_status_ = txAbort;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2209      	movs	r2, #9
 800841c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 8008420:	e002      	b.n	8008428 <ProtocolIdle+0x98>
      ProtocolTransmitMessage(port);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f91f 	bl	8008666 <ProtocolTransmitMessage>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <ProtocolResetWait>:

void ProtocolResetWait(struct Port *port)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Hard reset sent interrupt signaled by I_TXSUCC && I_TXFAIL */
  if ((port->registers_.AlertL.I_TXSUCC && port->registers_.AlertL.I_TXFAIL) ||
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	7b9b      	ldrb	r3, [r3, #14]
 800843c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <ProtocolResetWait+0x24>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	7b9b      	ldrb	r3, [r3, #14]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	d107      	bne.n	8008464 <ProtocolResetWait+0x34>
      TimerExpired(&port->no_response_timer_)) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	33bc      	adds	r3, #188	; 0xbc
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fe1f 	bl	800909c <TimerExpired>
 800845e:	4603      	mov	r3, r0
  if ((port->registers_.AlertL.I_TXSUCC && port->registers_.AlertL.I_TXFAIL) ||
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01a      	beq.n	800849a <ProtocolResetWait+0x6a>
    /* Wait for the reset sequence to complete */
    ClearInterrupt(port, regALERTL, MSK_I_TXSUCC | MSK_I_TXFAIL);
 8008464:	2250      	movs	r2, #80	; 0x50
 8008466:	2110      	movs	r1, #16
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff f86e 	bl	800754a <ClearInterrupt>

    port->protocol_state_ = PRLIdle;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    port->pd_tx_status_ = txSuccess;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2205      	movs	r2, #5
 800847a:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

    notify_observers(EVENT_HARD_RESET, port->port_id_, 0);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	2200      	movs	r2, #0
 8008486:	4619      	mov	r1, r3
 8008488:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800848c:	f7fb fdac 	bl	8003fe8 <notify_observers>
    TimerDisable(&port->no_response_timer_);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	33bc      	adds	r3, #188	; 0xbc
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fdd5 	bl	8009044 <TimerDisable>
  }
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <ProtocolGetRxPacket>:

void ProtocolGetRxPacket(struct Port *port)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  FSC_U8 i = 0, j = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
 80084ae:	2300      	movs	r3, #0
 80084b0:	73bb      	strb	r3, [r7, #14]
#ifdef FSC_HAVE_EXTENDED
  sopExtendedHeader_t temp_ExtHeader = {0};
#endif /* FSC_HAVE_EXTENDED */

  /* Read the Rx token, two header bytes, and the byte count */
  ReadRegisters(port, regRXBYTECNT, 4);
 80084b2:	2204      	movs	r2, #4
 80084b4:	2130      	movs	r1, #48	; 0x30
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe feb3 	bl	8007222 <ReadRegisters>

  port->policy_rx_header_.byte[0] = port->registers_.RxHeadL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  port->policy_rx_header_.byte[1] = port->registers_.RxHeadH;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
  temp_GCRCHeader.SpecRevision = USBPDSPECREV;
  temp_GCRCHeader.MessageID = port->policy_rx_header_.MessageID;
#endif /* FSC_LOGGING */

  /* Figure out what SOP* the data came in on and record the sender */
  port->protocol_msg_rx_sop_ = TokenToSopType(port->registers_.RxStat.RX_SOP);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084da:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 faba 	bl	8008a5a <TokenToSopType>
 80084e6:	4603      	mov	r3, r0
 80084e8:	461a      	mov	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

  if ((port->policy_rx_header_.NumDataObjects == 0) &&
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80084f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d11a      	bne.n	8008536 <ProtocolGetRxPacket+0x94>
      (port->policy_rx_header_.MessageType == CMTSoftReset)) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	b2db      	uxtb	r3, r3
  if ((port->policy_rx_header_.NumDataObjects == 0) &&
 800850c:	2b0d      	cmp	r3, #13
 800850e:	d112      	bne.n	8008536 <ProtocolGetRxPacket+0x94>
    /* Clear the message ID counter for tx */
    port->message_id_counter_[port->protocol_msg_rx_sop_] = 0;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	3348      	adds	r3, #72	; 0x48
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	2200      	movs	r2, #0
 8008520:	605a      	str	r2, [r3, #4]

    /* Reset the message ID (always alert policy engine of soft reset) */
    port->message_id_[port->protocol_msg_rx_sop_] = 0xFF;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8008528:	461a      	mov	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	324c      	adds	r2, #76	; 0x4c
 800852e:	21ff      	movs	r1, #255	; 0xff
 8008530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008534:	e025      	b.n	8008582 <ProtocolGetRxPacket+0xe0>
#ifdef FSC_HAVE_USBHID
    /* Set the source caps updated flag to trigger a GUI update */
    port->source_caps_updated_ = TRUE;
#endif /* FSC_HAVE_USBHID */
  }
  else if (port->policy_rx_header_.MessageID !=
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800853c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008540:	b2db      	uxtb	r3, r3
 8008542:	4619      	mov	r1, r3
           port->message_id_[port->protocol_msg_rx_sop_]) {
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	324c      	adds	r2, #76	; 0x4c
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  else if (port->policy_rx_header_.MessageID !=
 8008554:	4299      	cmp	r1, r3
 8008556:	d00e      	beq.n	8008576 <ProtocolGetRxPacket+0xd4>
    /* A received message should have an incremented (+1) message ID,
     * so we'll update our value here */
    port->message_id_[port->protocol_msg_rx_sop_] =
      port->policy_rx_header_.MessageID;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800855e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008562:	b2d9      	uxtb	r1, r3
    port->message_id_[port->protocol_msg_rx_sop_] =
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	324c      	adds	r2, #76	; 0x4c
 8008570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008574:	e005      	b.n	8008582 <ProtocolGetRxPacket+0xe0>
  }
  else {
    /* Drop anything else - possible retried message with same ID */
    ClearInterrupt(port, regALERTL, MSK_I_RXSTAT);
 8008576:	2204      	movs	r2, #4
 8008578:	2110      	movs	r1, #16
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7fe ffe5 	bl	800754a <ClearInterrupt>
    return;
 8008580:	e06e      	b.n	8008660 <ProtocolGetRxPacket+0x1be>
  }

  /* Did we receive a data message? If so, we want to retrieve the data */
  if (port->policy_rx_header_.NumDataObjects > 0) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8008588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d03b      	beq.n	800860a <ProtocolGetRxPacket+0x168>
    ReadRxRegisters(port, port->policy_rx_header_.NumDataObjects * 4);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8008598:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800859c:	b2db      	uxtb	r3, r3
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fe ff6e 	bl	8007486 <ReadRxRegisters>
    else
#endif /* FSC_HAVE_EXTENDED */
    {
      /* Standard data message */
      /* Load the FIFO data into the data objects (loop through each object) */
      for (i = 0; i < port->policy_rx_header_.NumDataObjects; i++) {
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
 80085ae:	e01d      	b.n	80085ec <ProtocolGetRxPacket+0x14a>
        /* Loop through each byte in the object */
        for (j = 0; j < 4; j++) {
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]
 80085b4:	e014      	b.n	80085e0 <ProtocolGetRxPacket+0x13e>
          /* Store the actual bytes */
          port->policy_rx_data_obj_[i].byte[j] =
            port->registers_.RxData[(i * 4) + j];
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	009a      	lsls	r2, r3, #2
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	18d1      	adds	r1, r2, r3
          port->policy_rx_data_obj_[i].byte[j] =
 80085be:	7bfa      	ldrb	r2, [r7, #15]
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
            port->registers_.RxData[(i * 4) + j];
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4401      	add	r1, r0
 80085c6:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
          port->policy_rx_data_obj_[i].byte[j] =
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	0092      	lsls	r2, r2, #2
 80085ce:	440a      	add	r2, r1
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80085d6:	4602      	mov	r2, r0
 80085d8:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 4; j++) {
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	3301      	adds	r3, #1
 80085de:	73bb      	strb	r3, [r7, #14]
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d9e7      	bls.n	80085b6 <ProtocolGetRxPacket+0x114>
      for (i = 0; i < port->policy_rx_header_.NumDataObjects; i++) {
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	3301      	adds	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80085f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d3d7      	bcc.n	80085b0 <ProtocolGetRxPacket+0x10e>
        }
      }
      /* Set the flag to pass the message to the policy engine */
      port->protocol_msg_rx_ = TRUE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8008608:	e003      	b.n	8008612 <ProtocolGetRxPacket+0x170>
    }
  }
  else {
    /* Command message received */
    /* Set the flag to pass the message to the policy engine */
    port->protocol_msg_rx_ = TRUE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  }

  /* Clear the interrupt here, as it also clears the RX data registers */
  ClearInterrupt(port, regALERTL, MSK_I_RXSTAT);
 8008612:	2204      	movs	r2, #4
 8008614:	2110      	movs	r1, #16
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fe ff97 	bl	800754a <ClearInterrupt>

  /* Delay to allow for a fast, possibly interrupting next message */
  /* Fixes compliance issue VDM interrupt VDM command. Ellisys VDMU.E17 */
  if(port->policy_rx_header_.NumDataObjects != 0 &&
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8008622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d019      	beq.n	8008660 <ProtocolGetRxPacket+0x1be>
     port->policy_rx_header_.MessageType == DMTVendorDefined) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8008632:	f003 031f 	and.w	r3, r3, #31
 8008636:	b2db      	uxtb	r3, r3
  if(port->policy_rx_header_.NumDataObjects != 0 &&
 8008638:	2b0f      	cmp	r3, #15
 800863a:	d111      	bne.n	8008660 <ProtocolGetRxPacket+0x1be>

    /* Delay may need to be reduced or removed for slower response
     * implementations - e.g. kernel driver.
     */
    platform_delay(3 * 1000);
 800863c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008640:	f7f8 f912 	bl	8000868 <platform_delay>

    ReadRegister(port, regALERTL);
 8008644:	2110      	movs	r1, #16
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fe fdd1 	bl	80071ee <ReadRegister>

    if (port->registers_.AlertL.I_RXSTAT) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7b9b      	ldrb	r3, [r3, #14]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <ProtocolGetRxPacket+0x1be>
      ProtocolGetRxPacket(port);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff ff21 	bl	80084a2 <ProtocolGetRxPacket>
#endif /* FSC_HAVE_EXTENDED */

  /* Store the (recreated) GoodCRC message that we have sent */
  WritePDMsg(&port->log_, temp_GCRCHeader, 0, TRUE, port->protocol_msg_rx_sop_);
#endif /* FSC_LOGGING */
}
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <ProtocolTransmitMessage>:

void ProtocolTransmitMessage(struct Port *port)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  FSC_U8 i = 0, j = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
 8008672:	2300      	movs	r3, #0
 8008674:	73bb      	strb	r3, [r7, #14]
  sopMainHeader_t temp_TxHeader = {0};
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]
#ifdef FSC_HAVE_EXTENDED
  sopExtendedHeader_t temp_ExtHeader = {0};
#endif /* FSC_HAVE_EXTENDED */
  FSC_U8 bytestosend = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	737b      	strb	r3, [r7, #13]

  temp_TxHeader.word = port->policy_tx_header_.word;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8008684:	813b      	strh	r3, [r7, #8]

  /* Handle soft reset case - clearing message counters */
  if ((temp_TxHeader.NumDataObjects == 0) &&
 8008686:	7a7b      	ldrb	r3, [r7, #9]
 8008688:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d117      	bne.n	80086c2 <ProtocolTransmitMessage+0x5c>
      (temp_TxHeader.MessageType == CMTSoftReset)) {
 8008692:	7a3b      	ldrb	r3, [r7, #8]
 8008694:	f003 031f 	and.w	r3, r3, #31
 8008698:	b2db      	uxtb	r3, r3
  if ((temp_TxHeader.NumDataObjects == 0) &&
 800869a:	2b0d      	cmp	r3, #13
 800869c:	d111      	bne.n	80086c2 <ProtocolTransmitMessage+0x5c>
      port->message_id_counter_[port->protocol_msg_tx_sop_] = 0;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	3348      	adds	r3, #72	; 0x48
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	2200      	movs	r2, #0
 80086ae:	605a      	str	r2, [r3, #4]
      port->message_id_[port->protocol_msg_tx_sop_] = 0xFF;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80086b6:	461a      	mov	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	324c      	adds	r2, #76	; 0x4c
 80086bc:	21ff      	movs	r1, #255	; 0xff
 80086be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  else
#endif /* FSC_HAVE_EXTENDED */
  {
    /* Not extended messaging */
    bytestosend = temp_TxHeader.NumDataObjects * 4;
 80086c2:	7a7b      	ldrb	r3, [r7, #9]
 80086c4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	737b      	strb	r3, [r7, #13]

    if (temp_TxHeader.NumDataObjects > 0) {
 80086ce:	7a7b      	ldrb	r3, [r7, #9]
 80086d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d028      	beq.n	800872c <ProtocolTransmitMessage+0xc6>
      /* If this is a data object... */
      for (i = 0; i < temp_TxHeader.NumDataObjects; i++) {
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]
 80086de:	e01d      	b.n	800871c <ProtocolTransmitMessage+0xb6>
        /* Load the data objects */
        for (j = 0; j < 4; ++j) {
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]
 80086e4:	e014      	b.n	8008710 <ProtocolTransmitMessage+0xaa>
          /* Loop through each byte in the object */
          port->registers_.TxData[(i * 4) + j] =
            port->policy_tx_data_obj_[i].byte[j];
 80086e6:	7bf9      	ldrb	r1, [r7, #15]
 80086e8:	7bba      	ldrb	r2, [r7, #14]
          port->registers_.TxData[(i * 4) + j] =
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	0098      	lsls	r0, r3, #2
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	4403      	add	r3, r0
            port->policy_tx_data_obj_[i].byte[j];
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	0089      	lsls	r1, r1, #2
 80086f6:	4401      	add	r1, r0
 80086f8:	440a      	add	r2, r1
 80086fa:	f502 72be 	add.w	r2, r2, #380	; 0x17c
 80086fe:	7811      	ldrb	r1, [r2, #0]
          port->registers_.TxData[(i * 4) + j] =
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	460a      	mov	r2, r1
 8008706:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        for (j = 0; j < 4; ++j) {
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	3301      	adds	r3, #1
 800870e:	73bb      	strb	r3, [r7, #14]
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b03      	cmp	r3, #3
 8008714:	d9e7      	bls.n	80086e6 <ProtocolTransmitMessage+0x80>
      for (i = 0; i < temp_TxHeader.NumDataObjects; i++) {
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	3301      	adds	r3, #1
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	7a7b      	ldrb	r3, [r7, #9]
 800871e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008722:	b2db      	uxtb	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	4293      	cmp	r3, r2
 800872a:	d3d9      	bcc.n	80086e0 <ProtocolTransmitMessage+0x7a>
    }
  }

  /* Update the tx message id to send */
  temp_TxHeader.MessageID =
    port->message_id_counter_[port->protocol_msg_tx_sop_];
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	3348      	adds	r3, #72	; 0x48
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f003 0307 	and.w	r3, r3, #7
 8008740:	b2da      	uxtb	r2, r3
  temp_TxHeader.MessageID =
 8008742:	7a7b      	ldrb	r3, [r7, #9]
 8008744:	f362 0343 	bfi	r3, r2, #1, #3
 8008748:	727b      	strb	r3, [r7, #9]

  /* TXBYTECNT = number of bytes in the packet plus the 2-byte main header */
  port->registers_.TxByteCnt = 2 + bytestosend;
 800874a:	7b7b      	ldrb	r3, [r7, #13]
 800874c:	3302      	adds	r3, #2
 800874e:	b2da      	uxtb	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Load in the header */
  port->registers_.TxHeadL = temp_TxHeader.byte[0];
 8008756:	7a3a      	ldrb	r2, [r7, #8]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  port->registers_.TxHeadH = temp_TxHeader.byte[1];
 800875e:	7a7a      	ldrb	r2, [r7, #9]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Commit to device */
  WriteRegisters(port, regTXBYTECNT, 3);
 8008766:	2203      	movs	r2, #3
 8008768:	2151      	movs	r1, #81	; 0x51
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7fe febb 	bl	80074e6 <WriteRegisters>

  /* Commit the TxData array to the device */
  WriteTxRegisters(port, bytestosend);
 8008770:	7b7b      	ldrb	r3, [r7, #13]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7fe fed1 	bl	800751c <WriteTxRegisters>

  /* Send the SOP indicator to enable the transmitter */
  if (port->protocol_use_sinktx_ == FALSE) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8008780:	2b00      	cmp	r3, #0
 8008782:	d131      	bne.n	80087e8 <ProtocolTransmitMessage+0x182>
    port->registers_.Transmit.TX_SOP = port->protocol_msg_tx_sop_;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	b2d9      	uxtb	r1, r3
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8008796:	f361 0302 	bfi	r3, r1, #0, #3
 800879a:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
    port->registers_.Transmit.RETRY_CNT = port->protocol_retries_;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	b2d9      	uxtb	r1, r3
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 80087b0:	f361 1305 	bfi	r3, r1, #4, #2
 80087b4:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
    WriteRegister(port, regTRANSMIT);
 80087b8:	2150      	movs	r1, #80	; 0x50
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fe fe7a 	bl	80074b4 <WriteRegister>

    /* Disable SinkTX for normal transmits */
    if (port->registers_.SinkTransmit.DIS_SNK_TX == 0) {
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d134      	bne.n	800883a <ProtocolTransmitMessage+0x1d4>
      port->registers_.SinkTransmit.DIS_SNK_TX = 1;
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80087d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087da:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
      WriteRegister(port, regSINK_TRANSMIT);
 80087de:	21b0      	movs	r1, #176	; 0xb0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7fe fe67 	bl	80074b4 <WriteRegister>
 80087e6:	e028      	b.n	800883a <ProtocolTransmitMessage+0x1d4>
    }
  }
  else
  {
    port->registers_.SinkTransmit.DIS_SNK_TX = 0;
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80087ee:	f36f 1386 	bfc	r3, #6, #1
 80087f2:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
    port->registers_.SinkTransmit.TX_SOP = port->protocol_msg_tx_sop_;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	b2d9      	uxtb	r1, r3
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8008808:	f361 0302 	bfi	r3, r1, #0, #3
 800880c:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
    port->registers_.SinkTransmit.RETRY_CNT = port->protocol_retries_;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8008816:	f003 0303 	and.w	r3, r3, #3
 800881a:	b2d9      	uxtb	r1, r3
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8008822:	f361 1305 	bfi	r3, r1, #4, #2
 8008826:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
    WriteRegister(port, regSINK_TRANSMIT);
 800882a:	21b0      	movs	r1, #176	; 0xb0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7fe fe41 	bl	80074b4 <WriteRegister>

    // Clear for next time...
    port->protocol_use_sinktx_ = FALSE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  }

  /* Move on to waiting for a success or fail */
  port->pd_tx_status_ = txBusy;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2203      	movs	r2, #3
 800883e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  port->protocol_state_ = PRLTxSendingMessage;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2205      	movs	r2, #5
 8008846:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

  /* Timeout specifically for chunked messages, but used with each transmit
   * to prevent a theoretical protocol hang.
   */
  TimerStart(&port->protocol_timer_, ktChunkSenderRequest);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	33ec      	adds	r3, #236	; 0xec
 800884e:	f247 5130 	movw	r1, #30000	; 0x7530
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fbd8 	bl	8009008 <TimerStart>
  /* Store all messages that we attempt to send for debugging */
  WritePDMsg(&port->log_, temp_TxHeader,
             (FSC_U8 *)port->policy_tx_data_obj_,
             TRUE, port->protocol_msg_tx_sop_);
#endif /* FSC_LOGGING */
}
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <ProtocolSendingMessage>:

void ProtocolSendingMessage(struct Port *port)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  SopType rx_sop = port->protocol_msg_tx_sop_;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800886e:	73fb      	strb	r3, [r7, #15]
#ifdef FSC_LOGGING
  sopMainHeader_t header;
#endif /* FSC_LOGGING */

  if (port->registers_.AlertL.I_TXSUCC) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7b9b      	ldrb	r3, [r3, #14]
 8008874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d01c      	beq.n	80088b8 <ProtocolSendingMessage+0x58>
    ClearInterrupt(port, regALERTL, MSK_I_TXSUCC);
 800887e:	2240      	movs	r2, #64	; 0x40
 8008880:	2110      	movs	r1, #16
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fe fe61 	bl	800754a <ClearInterrupt>
    WritePDMsg(&port->log_, header, 0, FALSE, rx_sop);
#endif /* FSC_LOGGING */

    /* Transmission successful */
    port->message_id_counter_[rx_sop] =
      (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	3348      	adds	r3, #72	; 0x48
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	1c5a      	adds	r2, r3, #1
    port->message_id_counter_[rx_sop] =
 8008896:	7bfb      	ldrb	r3, [r7, #15]
      (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8008898:	f002 0207 	and.w	r2, r2, #7
    port->message_id_counter_[rx_sop] =
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	3348      	adds	r3, #72	; 0x48
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	605a      	str	r2, [r3, #4]
    port->protocol_state_ = PRLIdle;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    port->pd_tx_status_ = txSuccess;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2205      	movs	r2, #5
 80088b2:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      set_policy_state(port, PE_SNK_Ready);
    }
    port->protocol_state_ = PRLIdle;
    port->pd_tx_status_ = txSuccess;
  }
}
 80088b6:	e0a1      	b.n	80089fc <ProtocolSendingMessage+0x19c>
  else if (port->registers_.AlertL.I_TXDISC) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7b9b      	ldrb	r3, [r3, #14]
 80088bc:	f003 0320 	and.w	r3, r3, #32
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01c      	beq.n	8008900 <ProtocolSendingMessage+0xa0>
    ClearInterrupt(port, regALERTL, MSK_I_TXDISC);
 80088c6:	2220      	movs	r2, #32
 80088c8:	2110      	movs	r1, #16
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7fe fe3d 	bl	800754a <ClearInterrupt>
         (port->message_id_counter_[rx_sop] + 1) & 0x07;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	3348      	adds	r3, #72	; 0x48
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	1c5a      	adds	r2, r3, #1
    port->message_id_counter_[rx_sop] =
 80088de:	7bfb      	ldrb	r3, [r7, #15]
         (port->message_id_counter_[rx_sop] + 1) & 0x07;
 80088e0:	f002 0207 	and.w	r2, r2, #7
    port->message_id_counter_[rx_sop] =
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	3348      	adds	r3, #72	; 0x48
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	440b      	add	r3, r1
 80088ec:	605a      	str	r2, [r3, #4]
    port->pd_tx_status_ = txCollision;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2207      	movs	r2, #7
 80088f2:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    port->protocol_state_ = PRLIdle;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
}
 80088fe:	e07d      	b.n	80089fc <ProtocolSendingMessage+0x19c>
  else if (port->registers_.AlertL.I_TXFAIL) {
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7b9b      	ldrb	r3, [r3, #14]
 8008904:	f003 0310 	and.w	r3, r3, #16
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d01c      	beq.n	8008948 <ProtocolSendingMessage+0xe8>
    ClearInterrupt(port, regALERTL, MSK_I_TXFAIL);
 800890e:	2210      	movs	r2, #16
 8008910:	2110      	movs	r1, #16
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7fe fe19 	bl	800754a <ClearInterrupt>
    port->protocol_state_ = PRLIdle;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    port->pd_tx_status_ = txError;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2206      	movs	r2, #6
 8008924:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	3348      	adds	r3, #72	; 0x48
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	1c5a      	adds	r2, r3, #1
    port->message_id_counter_[rx_sop] =
 8008936:	7bfb      	ldrb	r3, [r7, #15]
      (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8008938:	f002 0207 	and.w	r2, r2, #7
    port->message_id_counter_[rx_sop] =
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	3348      	adds	r3, #72	; 0x48
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	440b      	add	r3, r1
 8008944:	605a      	str	r2, [r3, #4]
}
 8008946:	e059      	b.n	80089fc <ProtocolSendingMessage+0x19c>
  else if (port->registers_.AlertL.I_RXSTAT) {
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7b9b      	ldrb	r3, [r3, #14]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d052      	beq.n	80089fc <ProtocolSendingMessage+0x19c>
    ProtocolGetRxPacket(port);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fda3 	bl	80084a2 <ProtocolGetRxPacket>
    if (port->policy_rx_header_.Extended == 0 &&
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8008962:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d13b      	bne.n	80089e4 <ProtocolSendingMessage+0x184>
        port->policy_rx_header_.NumDataObjects == 0 &&
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8008972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008976:	b2db      	uxtb	r3, r3
    if (port->policy_rx_header_.Extended == 0 &&
 8008978:	2b00      	cmp	r3, #0
 800897a:	d133      	bne.n	80089e4 <ProtocolSendingMessage+0x184>
        port->policy_rx_header_.MessageType == CMTGoodCRC &&
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	b2db      	uxtb	r3, r3
        port->policy_rx_header_.NumDataObjects == 0 &&
 8008988:	2b01      	cmp	r3, #1
 800898a:	d12b      	bne.n	80089e4 <ProtocolSendingMessage+0x184>
        port->policy_tx_header_.Extended == 0 &&
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8008992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008996:	b2db      	uxtb	r3, r3
        port->policy_rx_header_.MessageType == CMTGoodCRC &&
 8008998:	2b00      	cmp	r3, #0
 800899a:	d123      	bne.n	80089e4 <ProtocolSendingMessage+0x184>
        port->policy_tx_header_.NumDataObjects == 0 &&
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 80089a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089a6:	b2db      	uxtb	r3, r3
        port->policy_tx_header_.Extended == 0 &&
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d11b      	bne.n	80089e4 <ProtocolSendingMessage+0x184>
        port->policy_tx_header_.MessageType == CMTGetSourceCapExt)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80089b2:	f003 031f 	and.w	r3, r3, #31
 80089b6:	b2db      	uxtb	r3, r3
        port->policy_tx_header_.NumDataObjects == 0 &&
 80089b8:	2b11      	cmp	r3, #17
 80089ba:	d113      	bne.n	80089e4 <ProtocolSendingMessage+0x184>
      port->protocol_msg_rx_ = FALSE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        (port->message_id_counter_[rx_sop] + 1) & 0x07;
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	3348      	adds	r3, #72	; 0x48
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	1c5a      	adds	r2, r3, #1
      port->message_id_counter_[rx_sop] =
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
        (port->message_id_counter_[rx_sop] + 1) & 0x07;
 80089d4:	f002 0207 	and.w	r2, r2, #7
      port->message_id_counter_[rx_sop] =
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	3348      	adds	r3, #72	; 0x48
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	605a      	str	r2, [r3, #4]
 80089e2:	e003      	b.n	80089ec <ProtocolSendingMessage+0x18c>
      set_policy_state(port, PE_SNK_Ready);
 80089e4:	2113      	movs	r1, #19
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff fbfe 	bl	80081e8 <set_policy_state>
    port->protocol_state_ = PRLIdle;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    port->pd_tx_status_ = txSuccess;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2205      	movs	r2, #5
 80089f8:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 80089fc:	bf00      	nop
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <ProtocolSendHardReset>:

void ProtocolSendHardReset(struct Port *port, FSC_BOOL cable)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  /* Set the send hard reset TRANSMIT register code */
  FSC_U8 data = cable ? TRANSMIT_CABLERESET : TRANSMIT_HARDRESET;
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <ProtocolSendHardReset+0x16>
 8008a16:	2306      	movs	r3, #6
 8008a18:	e000      	b.n	8008a1c <ProtocolSendHardReset+0x18>
 8008a1a:	2305      	movs	r3, #5
 8008a1c:	73fb      	strb	r3, [r7, #15]

  /* If this flag is set, we've already sent the hard reset command */
  if (port->waiting_on_hr_) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <ProtocolSendHardReset+0x2e>
    port->waiting_on_hr_ = FALSE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8008a30:	e007      	b.n	8008a42 <ProtocolSendHardReset+0x3e>
  }
  else {
    /* Send the hard reset */
    platform_i2c_write(port->i2c_addr_, regTRANSMIT, 1, &data);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7858      	ldrb	r0, [r3, #1]
 8008a36:	f107 030f 	add.w	r3, r7, #15
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	2150      	movs	r1, #80	; 0x50
 8008a3e:	f7f7 fe1f 	bl	8000680 <platform_i2c_write>
  }

  port->pd_tx_status_ = txReset;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  port->protocol_state_ = PRLReset;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

#ifdef FSC_LOGGING
  /* Store the hard reset */
  WritePDToken(&port->log_, TRUE, cable ? pdtCableReset : pdtHardResetTxd);
#endif /* FSC_LOGGING */
}
 8008a52:	bf00      	nop
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <TokenToSopType>:

SopType TokenToSopType(FSC_U8 data)
{
 8008a5a:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	71fb      	strb	r3, [r7, #7]
  SopType ret = SOP_TYPE_ERROR;
 8008a66:	23ff      	movs	r3, #255	; 0xff
 8008a68:	73fb      	strb	r3, [r7, #15]

  /* Figure out what SOP* the data came in on */
  /* The register value from the FUSB307 maps directly to our SOP_TYPE_ enum */
  if ((data & 0x0b00000111) <= SOP_TYPE_LAST_VALUE) {
 8008a6a:	f897 b007 	ldrb.w	fp, [r7, #7]
 8008a6e:	f04f 0c00 	mov.w	ip, #0
 8008a72:	f240 1111 	movw	r1, #273	; 0x111
 8008a76:	f04f 020b 	mov.w	r2, #11
 8008a7a:	ea0b 0301 	and.w	r3, fp, r1
 8008a7e:	ea0c 0402 	and.w	r4, ip, r2
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	f174 0300 	sbcs.w	r3, r4, #0
 8008a88:	da03      	bge.n	8008a92 <TokenToSopType+0x38>
    ret = (SopType)(data & 0x0b00000111);
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	f003 0311 	and.w	r3, r3, #17
 8008a90:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8008a9e:	4770      	bx	lr

08008aa0 <AddressToRegister>:
/*
 * Returns a ptr to the cached value of the specified register in registers.
 * Note that this does not include reserved registers.
 */
FSC_U8 *AddressToRegister(DeviceReg_t *registers, enum RegAddress address)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  FSC_U8 *reg = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]

  switch (address) {
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	2bb5      	cmp	r3, #181	; 0xb5
 8008ab4:	f200 8277 	bhi.w	8008fa6 <AddressToRegister+0x506>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <AddressToRegister+0x20>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008d99 	.word	0x08008d99
 8008ac4:	08008d9f 	.word	0x08008d9f
 8008ac8:	08008da7 	.word	0x08008da7
 8008acc:	08008daf 	.word	0x08008daf
 8008ad0:	08008db7 	.word	0x08008db7
 8008ad4:	08008dbf 	.word	0x08008dbf
 8008ad8:	08008dc7 	.word	0x08008dc7
 8008adc:	08008dcf 	.word	0x08008dcf
 8008ae0:	08008dd7 	.word	0x08008dd7
 8008ae4:	08008ddf 	.word	0x08008ddf
 8008ae8:	08008de7 	.word	0x08008de7
 8008aec:	08008def 	.word	0x08008def
 8008af0:	08008fa7 	.word	0x08008fa7
 8008af4:	08008fa7 	.word	0x08008fa7
 8008af8:	08008fa7 	.word	0x08008fa7
 8008afc:	08008fa7 	.word	0x08008fa7
 8008b00:	08008df7 	.word	0x08008df7
 8008b04:	08008dff 	.word	0x08008dff
 8008b08:	08008e07 	.word	0x08008e07
 8008b0c:	08008e0f 	.word	0x08008e0f
 8008b10:	08008e17 	.word	0x08008e17
 8008b14:	08008e1f 	.word	0x08008e1f
 8008b18:	08008fa7 	.word	0x08008fa7
 8008b1c:	08008fa7 	.word	0x08008fa7
 8008b20:	08008e27 	.word	0x08008e27
 8008b24:	08008e2f 	.word	0x08008e2f
 8008b28:	08008e37 	.word	0x08008e37
 8008b2c:	08008e3f 	.word	0x08008e3f
 8008b30:	08008e47 	.word	0x08008e47
 8008b34:	08008e4f 	.word	0x08008e4f
 8008b38:	08008e57 	.word	0x08008e57
 8008b3c:	08008e5f 	.word	0x08008e5f
 8008b40:	08008fa7 	.word	0x08008fa7
 8008b44:	08008fa7 	.word	0x08008fa7
 8008b48:	08008fa7 	.word	0x08008fa7
 8008b4c:	08008e67 	.word	0x08008e67
 8008b50:	08008e6f 	.word	0x08008e6f
 8008b54:	08008e77 	.word	0x08008e77
 8008b58:	08008e7f 	.word	0x08008e7f
 8008b5c:	08008fa7 	.word	0x08008fa7
 8008b60:	08008fa7 	.word	0x08008fa7
 8008b64:	08008e87 	.word	0x08008e87
 8008b68:	08008fa7 	.word	0x08008fa7
 8008b6c:	08008fa7 	.word	0x08008fa7
 8008b70:	08008fa7 	.word	0x08008fa7
 8008b74:	08008fa7 	.word	0x08008fa7
 8008b78:	08008e8f 	.word	0x08008e8f
 8008b7c:	08008e97 	.word	0x08008e97
 8008b80:	08008e9f 	.word	0x08008e9f
 8008b84:	08008ea7 	.word	0x08008ea7
 8008b88:	08008eaf 	.word	0x08008eaf
 8008b8c:	08008eb7 	.word	0x08008eb7
 8008b90:	08008fa7 	.word	0x08008fa7
 8008b94:	08008fa7 	.word	0x08008fa7
 8008b98:	08008fa7 	.word	0x08008fa7
 8008b9c:	08008fa7 	.word	0x08008fa7
 8008ba0:	08008fa7 	.word	0x08008fa7
 8008ba4:	08008fa7 	.word	0x08008fa7
 8008ba8:	08008fa7 	.word	0x08008fa7
 8008bac:	08008fa7 	.word	0x08008fa7
 8008bb0:	08008fa7 	.word	0x08008fa7
 8008bb4:	08008fa7 	.word	0x08008fa7
 8008bb8:	08008fa7 	.word	0x08008fa7
 8008bbc:	08008fa7 	.word	0x08008fa7
 8008bc0:	08008fa7 	.word	0x08008fa7
 8008bc4:	08008fa7 	.word	0x08008fa7
 8008bc8:	08008fa7 	.word	0x08008fa7
 8008bcc:	08008fa7 	.word	0x08008fa7
 8008bd0:	08008fa7 	.word	0x08008fa7
 8008bd4:	08008fa7 	.word	0x08008fa7
 8008bd8:	08008fa7 	.word	0x08008fa7
 8008bdc:	08008fa7 	.word	0x08008fa7
 8008be0:	08008fa7 	.word	0x08008fa7
 8008be4:	08008fa7 	.word	0x08008fa7
 8008be8:	08008fa7 	.word	0x08008fa7
 8008bec:	08008fa7 	.word	0x08008fa7
 8008bf0:	08008fa7 	.word	0x08008fa7
 8008bf4:	08008fa7 	.word	0x08008fa7
 8008bf8:	08008fa7 	.word	0x08008fa7
 8008bfc:	08008fa7 	.word	0x08008fa7
 8008c00:	08008ebf 	.word	0x08008ebf
 8008c04:	08008ec7 	.word	0x08008ec7
 8008c08:	08008ecf 	.word	0x08008ecf
 8008c0c:	08008ed7 	.word	0x08008ed7
 8008c10:	08008fa7 	.word	0x08008fa7
 8008c14:	08008fa7 	.word	0x08008fa7
 8008c18:	08008fa7 	.word	0x08008fa7
 8008c1c:	08008fa7 	.word	0x08008fa7
 8008c20:	08008fa7 	.word	0x08008fa7
 8008c24:	08008fa7 	.word	0x08008fa7
 8008c28:	08008fa7 	.word	0x08008fa7
 8008c2c:	08008fa7 	.word	0x08008fa7
 8008c30:	08008fa7 	.word	0x08008fa7
 8008c34:	08008fa7 	.word	0x08008fa7
 8008c38:	08008fa7 	.word	0x08008fa7
 8008c3c:	08008fa7 	.word	0x08008fa7
 8008c40:	08008fa7 	.word	0x08008fa7
 8008c44:	08008fa7 	.word	0x08008fa7
 8008c48:	08008fa7 	.word	0x08008fa7
 8008c4c:	08008fa7 	.word	0x08008fa7
 8008c50:	08008fa7 	.word	0x08008fa7
 8008c54:	08008fa7 	.word	0x08008fa7
 8008c58:	08008fa7 	.word	0x08008fa7
 8008c5c:	08008fa7 	.word	0x08008fa7
 8008c60:	08008fa7 	.word	0x08008fa7
 8008c64:	08008fa7 	.word	0x08008fa7
 8008c68:	08008fa7 	.word	0x08008fa7
 8008c6c:	08008fa7 	.word	0x08008fa7
 8008c70:	08008fa7 	.word	0x08008fa7
 8008c74:	08008fa7 	.word	0x08008fa7
 8008c78:	08008fa7 	.word	0x08008fa7
 8008c7c:	08008fa7 	.word	0x08008fa7
 8008c80:	08008edf 	.word	0x08008edf
 8008c84:	08008ee7 	.word	0x08008ee7
 8008c88:	08008eef 	.word	0x08008eef
 8008c8c:	08008ef7 	.word	0x08008ef7
 8008c90:	08008eff 	.word	0x08008eff
 8008c94:	08008f07 	.word	0x08008f07
 8008c98:	08008f0f 	.word	0x08008f0f
 8008c9c:	08008f17 	.word	0x08008f17
 8008ca0:	08008f1f 	.word	0x08008f1f
 8008ca4:	08008f27 	.word	0x08008f27
 8008ca8:	08008fa7 	.word	0x08008fa7
 8008cac:	08008fa7 	.word	0x08008fa7
 8008cb0:	08008fa7 	.word	0x08008fa7
 8008cb4:	08008fa7 	.word	0x08008fa7
 8008cb8:	08008fa7 	.word	0x08008fa7
 8008cbc:	08008fa7 	.word	0x08008fa7
 8008cc0:	08008fa7 	.word	0x08008fa7
 8008cc4:	08008fa7 	.word	0x08008fa7
 8008cc8:	08008fa7 	.word	0x08008fa7
 8008ccc:	08008fa7 	.word	0x08008fa7
 8008cd0:	08008fa7 	.word	0x08008fa7
 8008cd4:	08008fa7 	.word	0x08008fa7
 8008cd8:	08008fa7 	.word	0x08008fa7
 8008cdc:	08008fa7 	.word	0x08008fa7
 8008ce0:	08008fa7 	.word	0x08008fa7
 8008ce4:	08008fa7 	.word	0x08008fa7
 8008ce8:	08008fa7 	.word	0x08008fa7
 8008cec:	08008fa7 	.word	0x08008fa7
 8008cf0:	08008fa7 	.word	0x08008fa7
 8008cf4:	08008fa7 	.word	0x08008fa7
 8008cf8:	08008fa7 	.word	0x08008fa7
 8008cfc:	08008fa7 	.word	0x08008fa7
 8008d00:	08008fa7 	.word	0x08008fa7
 8008d04:	08008fa7 	.word	0x08008fa7
 8008d08:	08008fa7 	.word	0x08008fa7
 8008d0c:	08008fa7 	.word	0x08008fa7
 8008d10:	08008fa7 	.word	0x08008fa7
 8008d14:	08008fa7 	.word	0x08008fa7
 8008d18:	08008fa7 	.word	0x08008fa7
 8008d1c:	08008fa7 	.word	0x08008fa7
 8008d20:	08008fa7 	.word	0x08008fa7
 8008d24:	08008fa7 	.word	0x08008fa7
 8008d28:	08008fa7 	.word	0x08008fa7
 8008d2c:	08008fa7 	.word	0x08008fa7
 8008d30:	08008fa7 	.word	0x08008fa7
 8008d34:	08008fa7 	.word	0x08008fa7
 8008d38:	08008fa7 	.word	0x08008fa7
 8008d3c:	08008fa7 	.word	0x08008fa7
 8008d40:	08008f2f 	.word	0x08008f2f
 8008d44:	08008f37 	.word	0x08008f37
 8008d48:	08008f3f 	.word	0x08008f3f
 8008d4c:	08008f47 	.word	0x08008f47
 8008d50:	08008f4f 	.word	0x08008f4f
 8008d54:	08008f57 	.word	0x08008f57
 8008d58:	08008f5f 	.word	0x08008f5f
 8008d5c:	08008f67 	.word	0x08008f67
 8008d60:	08008f6f 	.word	0x08008f6f
 8008d64:	08008fa7 	.word	0x08008fa7
 8008d68:	08008fa7 	.word	0x08008fa7
 8008d6c:	08008fa7 	.word	0x08008fa7
 8008d70:	08008fa7 	.word	0x08008fa7
 8008d74:	08008fa7 	.word	0x08008fa7
 8008d78:	08008fa7 	.word	0x08008fa7
 8008d7c:	08008fa7 	.word	0x08008fa7
 8008d80:	08008f77 	.word	0x08008f77
 8008d84:	08008f7f 	.word	0x08008f7f
 8008d88:	08008f87 	.word	0x08008f87
 8008d8c:	08008f8f 	.word	0x08008f8f
 8008d90:	08008f97 	.word	0x08008f97
 8008d94:	08008f9f 	.word	0x08008f9f
  case regVENDIDL:
    reg = &registers->VendIDL;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]
    break;
 8008d9c:	e104      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVENDIDH:
    reg = &registers->VendIDH;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3301      	adds	r3, #1
 8008da2:	60fb      	str	r3, [r7, #12]
    break;
 8008da4:	e100      	b.n	8008fa8 <AddressToRegister+0x508>
  case regPRODIDL:
    reg = &registers->ProdIDL;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3302      	adds	r3, #2
 8008daa:	60fb      	str	r3, [r7, #12]
    break;
 8008dac:	e0fc      	b.n	8008fa8 <AddressToRegister+0x508>
  case regPRODIDH:
    reg = &registers->ProdIDH;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3303      	adds	r3, #3
 8008db2:	60fb      	str	r3, [r7, #12]
    break;
 8008db4:	e0f8      	b.n	8008fa8 <AddressToRegister+0x508>
  case regDEVIDL:
    reg = &registers->DevIDL;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3304      	adds	r3, #4
 8008dba:	60fb      	str	r3, [r7, #12]
    break;
 8008dbc:	e0f4      	b.n	8008fa8 <AddressToRegister+0x508>
  case regDEVIDH:
    reg = &registers->DevIDH;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3305      	adds	r3, #5
 8008dc2:	60fb      	str	r3, [r7, #12]
    break;
 8008dc4:	e0f0      	b.n	8008fa8 <AddressToRegister+0x508>
  case regTYPECREVL:
    reg = &registers->TypeCRevL;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3306      	adds	r3, #6
 8008dca:	60fb      	str	r3, [r7, #12]
    break;
 8008dcc:	e0ec      	b.n	8008fa8 <AddressToRegister+0x508>
  case regTYPECREVH:
    reg = &registers->TypeCRevH;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3307      	adds	r3, #7
 8008dd2:	60fb      	str	r3, [r7, #12]
    break;
 8008dd4:	e0e8      	b.n	8008fa8 <AddressToRegister+0x508>
  case regUSBPDVER:
    reg = &registers->USBPDVer;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	60fb      	str	r3, [r7, #12]
    break;
 8008ddc:	e0e4      	b.n	8008fa8 <AddressToRegister+0x508>
  case regUSBPDREV:
    reg = &registers->USBPDRev;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	3309      	adds	r3, #9
 8008de2:	60fb      	str	r3, [r7, #12]
    break;
 8008de4:	e0e0      	b.n	8008fa8 <AddressToRegister+0x508>
  case regPDIFREVL:
    reg = &registers->PDIFRevL;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	330a      	adds	r3, #10
 8008dea:	60fb      	str	r3, [r7, #12]
    break;
 8008dec:	e0dc      	b.n	8008fa8 <AddressToRegister+0x508>
  case regPDIFREVH:
    reg = &registers->PDIFRevH;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	330b      	adds	r3, #11
 8008df2:	60fb      	str	r3, [r7, #12]
    break;
 8008df4:	e0d8      	b.n	8008fa8 <AddressToRegister+0x508>
  case regALERTL:
    reg = &registers->AlertL.byte;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	330c      	adds	r3, #12
 8008dfa:	60fb      	str	r3, [r7, #12]
    break;
 8008dfc:	e0d4      	b.n	8008fa8 <AddressToRegister+0x508>
  case regALERTH:
    reg = &registers->AlertH.byte;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	330d      	adds	r3, #13
 8008e02:	60fb      	str	r3, [r7, #12]
    break;
 8008e04:	e0d0      	b.n	8008fa8 <AddressToRegister+0x508>
  case regALERTMSKL:
    reg = &registers->AlertMskL.byte;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	330e      	adds	r3, #14
 8008e0a:	60fb      	str	r3, [r7, #12]
    break;
 8008e0c:	e0cc      	b.n	8008fa8 <AddressToRegister+0x508>
  case regALERTMSKH:
    reg = &registers->AlertMskH.byte;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	330f      	adds	r3, #15
 8008e12:	60fb      	str	r3, [r7, #12]
    break;
 8008e14:	e0c8      	b.n	8008fa8 <AddressToRegister+0x508>
  case regPWRSTATMSK:
    reg = &registers->PwrStatMsk.byte;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3310      	adds	r3, #16
 8008e1a:	60fb      	str	r3, [r7, #12]
    break;
 8008e1c:	e0c4      	b.n	8008fa8 <AddressToRegister+0x508>
  case regFAULTSTATMSK:
    reg = &registers->FaultStatMsk.byte;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3311      	adds	r3, #17
 8008e22:	60fb      	str	r3, [r7, #12]
    break;
 8008e24:	e0c0      	b.n	8008fa8 <AddressToRegister+0x508>
  case regSTD_OUT_CFG:
    reg = &registers->StdOutCfg.byte;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3312      	adds	r3, #18
 8008e2a:	60fb      	str	r3, [r7, #12]
    break;
 8008e2c:	e0bc      	b.n	8008fa8 <AddressToRegister+0x508>
  case regTCPC_CTRL:
    reg = &registers->TcpcCtrl.byte;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3313      	adds	r3, #19
 8008e32:	60fb      	str	r3, [r7, #12]
    break;
 8008e34:	e0b8      	b.n	8008fa8 <AddressToRegister+0x508>
  case regROLECTRL:
    reg = &registers->RoleCtrl.byte;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3314      	adds	r3, #20
 8008e3a:	60fb      	str	r3, [r7, #12]
    break;
 8008e3c:	e0b4      	b.n	8008fa8 <AddressToRegister+0x508>
  case regFAULTCTRL:
    reg = &registers->FaultCtrl.byte;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3315      	adds	r3, #21
 8008e42:	60fb      	str	r3, [r7, #12]
    break;
 8008e44:	e0b0      	b.n	8008fa8 <AddressToRegister+0x508>
  case regPWRCTRL:
    reg = &registers->PwrCtrl.byte;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3316      	adds	r3, #22
 8008e4a:	60fb      	str	r3, [r7, #12]
    break;
 8008e4c:	e0ac      	b.n	8008fa8 <AddressToRegister+0x508>
  case regCCSTAT:
    reg = &registers->CCStat.byte;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3317      	adds	r3, #23
 8008e52:	60fb      	str	r3, [r7, #12]
    break;
 8008e54:	e0a8      	b.n	8008fa8 <AddressToRegister+0x508>
  case regPWRSTAT:
    reg = &registers->PwrStat.byte;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3318      	adds	r3, #24
 8008e5a:	60fb      	str	r3, [r7, #12]
    break;
 8008e5c:	e0a4      	b.n	8008fa8 <AddressToRegister+0x508>
  case regFAULTSTAT:
    reg = &registers->FaultStat.byte;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3319      	adds	r3, #25
 8008e62:	60fb      	str	r3, [r7, #12]
    break;
 8008e64:	e0a0      	b.n	8008fa8 <AddressToRegister+0x508>
  case regCOMMAND:
    reg = &registers->Command;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	331a      	adds	r3, #26
 8008e6a:	60fb      	str	r3, [r7, #12]
    break;
 8008e6c:	e09c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regDEVCAP1L:
    reg = &registers->DevCap1L.byte;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	331b      	adds	r3, #27
 8008e72:	60fb      	str	r3, [r7, #12]
    break;
 8008e74:	e098      	b.n	8008fa8 <AddressToRegister+0x508>
  case regDEVCAP1H:
    reg = &registers->DevCap1H.byte;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	331c      	adds	r3, #28
 8008e7a:	60fb      	str	r3, [r7, #12]
    break;
 8008e7c:	e094      	b.n	8008fa8 <AddressToRegister+0x508>
  case regDEVCAP2L:
    reg = &registers->DevCap2L.byte;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	331d      	adds	r3, #29
 8008e82:	60fb      	str	r3, [r7, #12]
    break;
 8008e84:	e090      	b.n	8008fa8 <AddressToRegister+0x508>
  case regSTD_OUT_CAP:
    reg = &registers->StdOutCap.byte;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	331e      	adds	r3, #30
 8008e8a:	60fb      	str	r3, [r7, #12]
    break;
 8008e8c:	e08c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regMSGHEADR:
    reg = &registers->MsgHeadr.byte;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	331f      	adds	r3, #31
 8008e92:	60fb      	str	r3, [r7, #12]
    break;
 8008e94:	e088      	b.n	8008fa8 <AddressToRegister+0x508>
  case regRXDETECT:
    reg = &registers->RxDetect.byte;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3320      	adds	r3, #32
 8008e9a:	60fb      	str	r3, [r7, #12]
    break;
 8008e9c:	e084      	b.n	8008fa8 <AddressToRegister+0x508>
  case regRXBYTECNT:
    reg = &registers->RxByteCnt;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3321      	adds	r3, #33	; 0x21
 8008ea2:	60fb      	str	r3, [r7, #12]
    break;
 8008ea4:	e080      	b.n	8008fa8 <AddressToRegister+0x508>
  case regRXSTAT:
    reg = &registers->RxStat.byte;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	3322      	adds	r3, #34	; 0x22
 8008eaa:	60fb      	str	r3, [r7, #12]
    break;
 8008eac:	e07c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regRXHEADL:
    reg = &registers->RxHeadL;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3323      	adds	r3, #35	; 0x23
 8008eb2:	60fb      	str	r3, [r7, #12]
    break;
 8008eb4:	e078      	b.n	8008fa8 <AddressToRegister+0x508>
  case regRXHEADH:
    reg = &registers->RxHeadH;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3324      	adds	r3, #36	; 0x24
 8008eba:	60fb      	str	r3, [r7, #12]
    break;
 8008ebc:	e074      	b.n	8008fa8 <AddressToRegister+0x508>
  case regTRANSMIT:
    reg = &registers->Transmit.byte;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3341      	adds	r3, #65	; 0x41
 8008ec2:	60fb      	str	r3, [r7, #12]
    break;
 8008ec4:	e070      	b.n	8008fa8 <AddressToRegister+0x508>
  case regTXBYTECNT:
    reg = &registers->TxByteCnt;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3342      	adds	r3, #66	; 0x42
 8008eca:	60fb      	str	r3, [r7, #12]
    break;
 8008ecc:	e06c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regTXHEADL:
    reg = &registers->TxHeadL;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3343      	adds	r3, #67	; 0x43
 8008ed2:	60fb      	str	r3, [r7, #12]
    break;
 8008ed4:	e068      	b.n	8008fa8 <AddressToRegister+0x508>
  case regTXHEADH:
    reg = &registers->TxHeadH;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3344      	adds	r3, #68	; 0x44
 8008eda:	60fb      	str	r3, [r7, #12]
    break;
 8008edc:	e064      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVBUS_VOLTAGE_L:
    reg = &registers->VBusVoltageL.byte;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3361      	adds	r3, #97	; 0x61
 8008ee2:	60fb      	str	r3, [r7, #12]
    break;
 8008ee4:	e060      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVBUS_VOLTAGE_H:
    reg = &registers->VBusVoltageH.byte;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3362      	adds	r3, #98	; 0x62
 8008eea:	60fb      	str	r3, [r7, #12]
    break;
 8008eec:	e05c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVBUS_SNK_DISCL:
    reg = &registers->VBusSnkDiscL.byte;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3363      	adds	r3, #99	; 0x63
 8008ef2:	60fb      	str	r3, [r7, #12]
    break;
 8008ef4:	e058      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVBUS_SNK_DISCH:
    reg = &registers->VBusSnkDiscH.byte;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3364      	adds	r3, #100	; 0x64
 8008efa:	60fb      	str	r3, [r7, #12]
    break;
 8008efc:	e054      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVBUS_STOP_DISCL:
    reg = &registers->VBusStopDiscL.byte;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3365      	adds	r3, #101	; 0x65
 8008f02:	60fb      	str	r3, [r7, #12]
    break;
 8008f04:	e050      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVBUS_STOP_DISCH:
    reg = &registers->VBusStopDiscH.byte;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3366      	adds	r3, #102	; 0x66
 8008f0a:	60fb      	str	r3, [r7, #12]
    break;
 8008f0c:	e04c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVALARMHCFGL:
    reg = &registers->VAlarmHCfgL.byte;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3367      	adds	r3, #103	; 0x67
 8008f12:	60fb      	str	r3, [r7, #12]
    break;
 8008f14:	e048      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVALARMHCFGH:
    reg = &registers->VAlarmHCfgH.byte;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3368      	adds	r3, #104	; 0x68
 8008f1a:	60fb      	str	r3, [r7, #12]
    break;
 8008f1c:	e044      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVALARMLCFGL:
    reg = &registers->VAlarmLCfgL.byte;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3369      	adds	r3, #105	; 0x69
 8008f22:	60fb      	str	r3, [r7, #12]
    break;
 8008f24:	e040      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVALARMLCFGH:
    reg = &registers->VAlarmLCfgH.byte;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	336a      	adds	r3, #106	; 0x6a
 8008f2a:	60fb      	str	r3, [r7, #12]
    break;
 8008f2c:	e03c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVCONN_OCP:
    reg = &registers->VConnOCP.byte;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	336b      	adds	r3, #107	; 0x6b
 8008f32:	60fb      	str	r3, [r7, #12]
    break;
 8008f34:	e038      	b.n	8008fa8 <AddressToRegister+0x508>
  case regSLICE:
    reg = &registers->Slice.byte;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	336c      	adds	r3, #108	; 0x6c
 8008f3a:	60fb      	str	r3, [r7, #12]
    break;
 8008f3c:	e034      	b.n	8008fa8 <AddressToRegister+0x508>
  case regRESET:
    reg = &registers->Reset.byte;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	336d      	adds	r3, #109	; 0x6d
 8008f42:	60fb      	str	r3, [r7, #12]
    break;
 8008f44:	e030      	b.n	8008fa8 <AddressToRegister+0x508>
  case regVD_STAT:
    reg = &registers->VDStat.byte;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	336e      	adds	r3, #110	; 0x6e
 8008f4a:	60fb      	str	r3, [r7, #12]
    break;
 8008f4c:	e02c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regGPIO1_CFG:
    reg = &registers->Gpio1Cfg.byte;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	336f      	adds	r3, #111	; 0x6f
 8008f52:	60fb      	str	r3, [r7, #12]
    break;
 8008f54:	e028      	b.n	8008fa8 <AddressToRegister+0x508>
  case regGPIO2_CFG:
    reg = &registers->Gpio2Cfg.byte;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3370      	adds	r3, #112	; 0x70
 8008f5a:	60fb      	str	r3, [r7, #12]
    break;
 8008f5c:	e024      	b.n	8008fa8 <AddressToRegister+0x508>
  case regGPIO_STAT:
    reg = &registers->GpioStat.byte;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3371      	adds	r3, #113	; 0x71
 8008f62:	60fb      	str	r3, [r7, #12]
    break;
 8008f64:	e020      	b.n	8008fa8 <AddressToRegister+0x508>
  case regDRPTOGGLE:
    reg = &registers->DrpToggle.byte;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3372      	adds	r3, #114	; 0x72
 8008f6a:	60fb      	str	r3, [r7, #12]
    break;
 8008f6c:	e01c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regTOGGLE_SM:
    reg = &registers->ToggleSM.byte;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3373      	adds	r3, #115	; 0x73
 8008f72:	60fb      	str	r3, [r7, #12]
    break;
 8008f74:	e018      	b.n	8008fa8 <AddressToRegister+0x508>
  case regSINK_TRANSMIT:
    reg = &registers->SinkTransmit.byte;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3374      	adds	r3, #116	; 0x74
 8008f7a:	60fb      	str	r3, [r7, #12]
    break;
 8008f7c:	e014      	b.n	8008fa8 <AddressToRegister+0x508>
  case regSRC_FRSWAP:
    reg = &registers->SrcFRSwap.byte;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3375      	adds	r3, #117	; 0x75
 8008f82:	60fb      	str	r3, [r7, #12]
    break;
 8008f84:	e010      	b.n	8008fa8 <AddressToRegister+0x508>
  case regSNK_FRSWAP:
    reg = &registers->SnkFRSwap.byte;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3376      	adds	r3, #118	; 0x76
 8008f8a:	60fb      	str	r3, [r7, #12]
    break;
 8008f8c:	e00c      	b.n	8008fa8 <AddressToRegister+0x508>
  case regALERT_VD:
    reg = &registers->AlertVD.byte;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	3377      	adds	r3, #119	; 0x77
 8008f92:	60fb      	str	r3, [r7, #12]
    break;
 8008f94:	e008      	b.n	8008fa8 <AddressToRegister+0x508>
  case regALERT_VD_MSK:
    reg = &registers->AlertVDMsk.byte;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3378      	adds	r3, #120	; 0x78
 8008f9a:	60fb      	str	r3, [r7, #12]
    break;
 8008f9c:	e004      	b.n	8008fa8 <AddressToRegister+0x508>
  case regRPVAL_OVERRIDE:
    reg = &registers->RpValOverride.byte;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3379      	adds	r3, #121	; 0x79
 8008fa2:	60fb      	str	r3, [r7, #12]
    break;
 8008fa4:	e000      	b.n	8008fa8 <AddressToRegister+0x508>
  default:
    break;
 8008fa6:	bf00      	nop
  }
  return reg;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop

08008fb8 <RegClearBits>:
  FSC_U8 *reg = AddressToRegister(registers, address);
  *reg |= mask;
}

void RegClearBits(DeviceReg_t *registers, enum RegAddress address, FSC_U8 mask)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	70bb      	strb	r3, [r7, #2]
  FSC_U8 *reg = AddressToRegister(registers, address);
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff fd67 	bl	8008aa0 <AddressToRegister>
 8008fd2:	60f8      	str	r0, [r7, #12]
  *reg &= ~mask;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	b25a      	sxtb	r2, r3
 8008fda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fde:	43db      	mvns	r3, r3
 8008fe0:	b25b      	sxtb	r3, r3
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	b25b      	sxtb	r3, r3
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	701a      	strb	r2, [r3, #0]
}
 8008fec:	bf00      	nop
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <SystemPolicyProcess>:
FSC_U8 UARTRecBuffer[64];
FSC_U8 UARTRecIndex = 0;
FSC_BOOL UARTRecHaveMsg = FALSE;
#endif /* FSC_HAVE_UART */

void SystemPolicyProcess(struct Port *ports) {
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
    for (i = 0; i < 64; ++i) UARTRecBuffer[i] = 0;
    UARTRecHaveMsg = FALSE;
    UARTRecIndex = 0;
  }
#endif /* FSC_HAVE_UART */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <TimerStart>:
 */

#include "timer.h"
#include "platform.h"

void TimerStart(struct TimerObj *obj, FSC_U32 time) {
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  if (obj->count_ > 0)
  {
    platform_printf(-1, "Timer already in use???\n", time);
  }
#endif /* FSC_HAVE_UART */
  obj->starttime_ = platform_current_time();
 8009012:	f7f7 fc1f 	bl	8000854 <platform_current_time>
 8009016:	4602      	mov	r2, r0
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]
  obj->period_ = time;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	605a      	str	r2, [r3, #4]
  obj->count_ += 1;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	7a1b      	ldrb	r3, [r3, #8]
 8009026:	3301      	adds	r3, #1
 8009028:	b2da      	uxtb	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	721a      	strb	r2, [r3, #8]
  if (obj->period_ == 0) obj->period_ = 1;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <TimerStart+0x34>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	605a      	str	r2, [r3, #4]
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <TimerDisable>:
void TimerRestart(struct TimerObj *obj) {
  /* Grab the current time stamp for the next period. */
  obj->starttime_ = platform_current_time();;
}

void TimerDisable(struct TimerObj *obj) {
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Zero means disabled */
  obj->starttime_ = obj->period_ = 0;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	605a      	str	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	601a      	str	r2, [r3, #0]
  if (obj->count_ > 0)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7a1b      	ldrb	r3, [r3, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d005      	beq.n	800906e <TimerDisable+0x2a>
  {
     obj->count_--;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	7a1b      	ldrb	r3, [r3, #8]
 8009066:	3b01      	subs	r3, #1
 8009068:	b2da      	uxtb	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	721a      	strb	r2, [r3, #8]
  }
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <TimerDisabled>:

FSC_BOOL TimerDisabled(struct TimerObj *obj) {
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  /* Zero means disabled */
  return (obj->period_ == 0) ? TRUE : FALSE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	bf0c      	ite	eq
 800908a:	2301      	moveq	r3, #1
 800908c:	2300      	movne	r3, #0
 800908e:	b2db      	uxtb	r3, r3
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <TimerExpired>:

FSC_BOOL TimerExpired(struct TimerObj *obj) {
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  if (TimerDisabled(obj)) {
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff ffe8 	bl	800907a <TimerDisabled>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <TimerExpired+0x18>
    /* Disabled */
    return FALSE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	e00c      	b.n	80090ce <TimerExpired+0x32>
  }
  else{
    /* Elapsed time >= period? */
    return ((FSC_U32)(platform_current_time() - obj->starttime_) >=
 80090b4:	f7f7 fbce 	bl	8000854 <platform_current_time>
 80090b8:	4602      	mov	r2, r0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	1ad2      	subs	r2, r2, r3
            obj->period_) ? TRUE : FALSE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	bf2c      	ite	cs
 80090c8:	2301      	movcs	r3, #1
 80090ca:	2300      	movcc	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
  }
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <TimerRemaining>:

FSC_U32 TimerRemaining(struct TimerObj *obj)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  FSC_U32 currenttime = platform_current_time();
 80090de:	f7f7 fbb9 	bl	8000854 <platform_current_time>
 80090e2:	60f8      	str	r0, [r7, #12]

  if (TimerDisabled(obj)) {
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff ffc8 	bl	800907a <TimerDisabled>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <TimerRemaining+0x1e>
    return 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	e01d      	b.n	8009130 <TimerRemaining+0x5a>
  }

  if (TimerExpired(obj))
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff ffd1 	bl	800909c <TimerExpired>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d010      	beq.n	8009122 <TimerRemaining+0x4c>
  {
    if (obj->count_ > 0)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	7a1b      	ldrb	r3, [r3, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d007      	beq.n	8009118 <TimerRemaining+0x42>
    {
      /* Timer has expired and in use so do not let
       * the FSM go to sleep. Decrement the counter */
      obj->count_--;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	7a1b      	ldrb	r3, [r3, #8]
 800910c:	3b01      	subs	r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	721a      	strb	r2, [r3, #8]
      return 1;
 8009114:	2301      	movs	r3, #1
 8009116:	e00b      	b.n	8009130 <TimerRemaining+0x5a>
      /* Counter reached zero by repeatedly calling TimerRemaining()
       * on timer that might not have been disabled once enabled.
       * Disable the timer to allow idling. Set breakpoint in TimerStart
       * logging to see which code enabled the timer and did not stop
       *  it after expiration. */
      TimerDisable(obj);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff ff93 	bl	8009044 <TimerDisable>
      return 0;
 800911e:	2300      	movs	r3, #0
 8009120:	e006      	b.n	8009130 <TimerRemaining+0x5a>
    }
  }

  /* Timer hasn't expired, return time left */
  return (FSC_U32)(obj->starttime_ + obj->period_ - currenttime);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	441a      	add	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	1ad3      	subs	r3, r2, r3
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <StateMachineTypeC>:
/* This is a value for checking illegal cable issues. */
#define MAX_CABLE_LOOP  20

/* Entry point to the Type-C state machine */
void StateMachineTypeC(struct Port *port)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  if (port->tc_enabled_ == TRUE) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8009146:	2b01      	cmp	r3, #1
 8009148:	f040 80bc 	bne.w	80092c4 <StateMachineTypeC+0x18c>
    /* Read/clear masked ints to avoid confusion in the state machines */
    if (~port->registers_.AlertMskL.byte & port->registers_.AlertL.byte)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7c1b      	ldrb	r3, [r3, #16]
 8009150:	43db      	mvns	r3, r3
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	7b92      	ldrb	r2, [r2, #14]
 8009156:	4013      	ands	r3, r2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00f      	beq.n	800917c <StateMachineTypeC+0x44>
      ClearInterrupt(port, regALERTL,
        (~port->registers_.AlertMskL.byte & port->registers_.AlertL.byte));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	7c1b      	ldrb	r3, [r3, #16]
 8009160:	b25b      	sxtb	r3, r3
 8009162:	43db      	mvns	r3, r3
 8009164:	b25a      	sxtb	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	7b9b      	ldrb	r3, [r3, #14]
 800916a:	b25b      	sxtb	r3, r3
 800916c:	4013      	ands	r3, r2
 800916e:	b25b      	sxtb	r3, r3
      ClearInterrupt(port, regALERTL,
 8009170:	b2db      	uxtb	r3, r3
 8009172:	461a      	mov	r2, r3
 8009174:	2110      	movs	r1, #16
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7fe f9e7 	bl	800754a <ClearInterrupt>

    if (~port->registers_.AlertMskH.byte & port->registers_.AlertH.byte)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7c5b      	ldrb	r3, [r3, #17]
 8009180:	43db      	mvns	r3, r3
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	7bd2      	ldrb	r2, [r2, #15]
 8009186:	4013      	ands	r3, r2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00f      	beq.n	80091ac <StateMachineTypeC+0x74>
      ClearInterrupt(port, regALERTH,
        (~port->registers_.AlertMskH.byte & port->registers_.AlertH.byte));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	7c5b      	ldrb	r3, [r3, #17]
 8009190:	b25b      	sxtb	r3, r3
 8009192:	43db      	mvns	r3, r3
 8009194:	b25a      	sxtb	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7bdb      	ldrb	r3, [r3, #15]
 800919a:	b25b      	sxtb	r3, r3
 800919c:	4013      	ands	r3, r2
 800919e:	b25b      	sxtb	r3, r3
      ClearInterrupt(port, regALERTH,
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	2111      	movs	r1, #17
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7fe f9cf 	bl	800754a <ClearInterrupt>

    /* Handle I2C_ERR, if needed */
    if (port->registers_.FaultStat.I2C_ERR) {
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	7edb      	ldrb	r3, [r3, #27]
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <StateMachineTypeC+0x96>
      ClearInterrupt(port, regFAULTSTAT, MSK_I2C_ERROR);
 80091ba:	2201      	movs	r2, #1
 80091bc:	211f      	movs	r1, #31
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7fe f9c3 	bl	800754a <ClearInterrupt>
      ClearInterrupt(port, regALERTH, MSK_I_FAULT);
 80091c4:	2202      	movs	r2, #2
 80091c6:	2111      	movs	r1, #17
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7fe f9be 	bl	800754a <ClearInterrupt>
    }

    port->idle_ = FALSE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* PD State Machines */
    if (port->pd_active_) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00d      	beq.n	80091fc <StateMachineTypeC+0xc4>
      USBPDProtocol(port);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff f863 	bl	80082ac <USBPDProtocol>
      USBPDPolicyEngine(port);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7fa ff3a 	bl	8004060 <USBPDPolicyEngine>

      /* Shortcut to transmit, if needed */
      if (port->pd_tx_status_ == txSend) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d102      	bne.n	80091fc <StateMachineTypeC+0xc4>
        USBPDProtocol(port);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff f858 	bl	80082ac <USBPDProtocol>
      }
    }

    /* Clear the interrupt here but leave the bit set for use in SM functions */
    if (port->registers_.AlertL.I_CCSTAT) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7b9b      	ldrb	r3, [r3, #14]
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d009      	beq.n	800921e <StateMachineTypeC+0xe6>
      ClearInterrupt(port, regALERTL, MSK_I_CCSTAT);
 800920a:	2201      	movs	r2, #1
 800920c:	2110      	movs	r1, #16
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7fe f99b 	bl	800754a <ClearInterrupt>
      port->registers_.AlertL.I_CCSTAT = 1;
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	7b93      	ldrb	r3, [r2, #14]
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	7393      	strb	r3, [r2, #14]
    }

    /* Type-C State Machine */
    switch (port->tc_state_) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8009224:	2b14      	cmp	r3, #20
 8009226:	d849      	bhi.n	80092bc <StateMachineTypeC+0x184>
 8009228:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <StateMachineTypeC+0xf8>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009285 	.word	0x08009285
 8009234:	0800928d 	.word	0x0800928d
 8009238:	08009295 	.word	0x08009295
 800923c:	0800929d 	.word	0x0800929d
 8009240:	080092a5 	.word	0x080092a5
 8009244:	080092bd 	.word	0x080092bd
 8009248:	080092bd 	.word	0x080092bd
 800924c:	080092bd 	.word	0x080092bd
 8009250:	080092bd 	.word	0x080092bd
 8009254:	080092bd 	.word	0x080092bd
 8009258:	080092bd 	.word	0x080092bd
 800925c:	080092bd 	.word	0x080092bd
 8009260:	080092bd 	.word	0x080092bd
 8009264:	080092bd 	.word	0x080092bd
 8009268:	080092bd 	.word	0x080092bd
 800926c:	080092ad 	.word	0x080092ad
 8009270:	080092bd 	.word	0x080092bd
 8009274:	080092bd 	.word	0x080092bd
 8009278:	080092bd 	.word	0x080092bd
 800927c:	080092bd 	.word	0x080092bd
 8009280:	080092b5 	.word	0x080092b5
    case Disabled:
      StateMachineDisabled(port);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f823 	bl	80092d0 <StateMachineDisabled>
      break;
 800928a:	e01c      	b.n	80092c6 <StateMachineTypeC+0x18e>
    case ErrorRecovery:
      StateMachineErrorRecovery(port);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f836 	bl	80092fe <StateMachineErrorRecovery>
      break;
 8009292:	e018      	b.n	80092c6 <StateMachineTypeC+0x18e>
    case Unattached:
      StateMachineUnattached(port);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f84f 	bl	8009338 <StateMachineUnattached>
      break;
 800929a:	e014      	b.n	80092c6 <StateMachineTypeC+0x18e>
#ifdef FSC_HAVE_SNK
    case AttachWaitSink:
      StateMachineAttachWaitSink(port);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f8cd 	bl	800943c <StateMachineAttachWaitSink>
      break;
 80092a2:	e010      	b.n	80092c6 <StateMachineTypeC+0x18e>
    case AttachedSink:
      StateMachineAttachedSink(port);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f933 	bl	8009510 <StateMachineAttachedSink>
      break;
 80092aa:	e00c      	b.n	80092c6 <StateMachineTypeC+0x18e>
    case DebugAccessorySink:
      StateMachineDebugAccessorySink(port);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f996 	bl	80095de <StateMachineDebugAccessorySink>
      break;
 80092b2:	e008      	b.n	80092c6 <StateMachineTypeC+0x18e>
    case UnsupportedAccessory:
      StateMachineUnsupportedAccessory(port);
      break;
#endif /* FSC_HAVE_ACC */
    case IllegalCable:
      StateMachineIllegalCable(port);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f9e9 	bl	800968c <StateMachineIllegalCable>
      break;
 80092ba:	e004      	b.n	80092c6 <StateMachineTypeC+0x18e>
    default:
      /* We shouldn't get here, so go to the unattached state just in case */
      SetStateUnattached(port);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fa3d 	bl	800973c <SetStateUnattached>
      break;
 80092c2:	e000      	b.n	80092c6 <StateMachineTypeC+0x18e>
    }
  } /* TC Enabled */
 80092c4:	bf00      	nop
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop

080092d0 <StateMachineDisabled>:

void StateMachineDisabled(struct Port *port)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_SNK
  if (port->is_dead_battery_) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d006      	beq.n	80092f0 <StateMachineDisabled+0x20>
    DetectCCPin(port);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fe fc4b 	bl	8007b7e <DetectCCPin>

    SetStateAttachedSink(port);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fb45 	bl	8009978 <SetStateAttachedSink>
  else
#endif /* FSC_HAVE_SNK */
  {
    SetStateUnattached(port);
  }
}
 80092ee:	e002      	b.n	80092f6 <StateMachineDisabled+0x26>
    SetStateUnattached(port);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fa23 	bl	800973c <SetStateUnattached>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <StateMachineErrorRecovery>:

void StateMachineErrorRecovery(struct Port *port)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  if (TimerExpired(&port->tc_state_timer_)) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	3380      	adds	r3, #128	; 0x80
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff fec6 	bl	800909c <TimerExpired>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d008      	beq.n	8009328 <StateMachineErrorRecovery+0x2a>
    TimerDisable(&port->tc_state_timer_);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3380      	adds	r3, #128	; 0x80
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff fe92 	bl	8009044 <TimerDisable>
    SetStateUnattached(port);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fa0b 	bl	800973c <SetStateUnattached>
  }
  else {
    port->idle_ = TRUE;
  }
}
 8009326:	e003      	b.n	8009330 <StateMachineErrorRecovery+0x32>
    port->idle_ = TRUE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <StateMachineUnattached>:

void StateMachineUnattached(struct Port *port)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /*
   * If we got an interrupt for a CCStat change and if LOOK4CON is clear,
   * then the device is done looking for a connection.
   */
  if (port->registers_.AlertL.I_CCSTAT == 1 ) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7b9b      	ldrb	r3, [r3, #14]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d06f      	beq.n	800942e <StateMachineUnattached+0xf6>
    if (port->registers_.CCStat.LOOK4CON == 1) {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	7e5b      	ldrb	r3, [r3, #25]
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d004      	beq.n	8009366 <StateMachineUnattached+0x2e>
      /* Still looking for a connection... */
      port->idle_ = TRUE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return;
 8009364:	e067      	b.n	8009436 <StateMachineUnattached+0xfe>
    }

    /* Set Source or Sink before using in pin detection */
    if (port->port_type_ == USBTypeC_Source ||
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800936c:	2b01      	cmp	r3, #1
 800936e:	d01e      	beq.n	80093ae <StateMachineUnattached+0x76>
        (port->port_type_ == USBTypeC_DRP &&
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    if (port->port_type_ == USBTypeC_Source ||
 8009376:	2b02      	cmp	r3, #2
 8009378:	d106      	bne.n	8009388 <StateMachineUnattached+0x50>
         port->registers_.CCStat.CON_RES == 0) ||
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7e5b      	ldrb	r3, [r3, #25]
 800937e:	f003 0310 	and.w	r3, r3, #16
 8009382:	b2db      	uxtb	r3, r3
        (port->port_type_ == USBTypeC_DRP &&
 8009384:	2b00      	cmp	r3, #0
 8009386:	d012      	beq.n	80093ae <StateMachineUnattached+0x76>
        (port->port_type_ == USBTypeC_Sink &&
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
         port->registers_.CCStat.CON_RES == 0) ||
 800938e:	2b00      	cmp	r3, #0
 8009390:	d112      	bne.n	80093b8 <StateMachineUnattached+0x80>
         port->registers_.RoleCtrl.DRP == 1 &&
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	7d9b      	ldrb	r3, [r3, #22]
 8009396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939a:	b2db      	uxtb	r3, r3
        (port->port_type_ == USBTypeC_Sink &&
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <StateMachineUnattached+0x80>
         port->registers_.CCStat.CON_RES == 0)) {
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7e5b      	ldrb	r3, [r3, #25]
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	b2db      	uxtb	r3, r3
         port->registers_.RoleCtrl.DRP == 1 &&
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d104      	bne.n	80093b8 <StateMachineUnattached+0x80>
      port->source_or_sink_ = Source;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80093b6:	e003      	b.n	80093c0 <StateMachineUnattached+0x88>
    }
    else {
      port->source_or_sink_ = Sink;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    }

    /* Get both CC line terminations */
    DetectCCPin(port);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7fe fbdc 	bl	8007b7e <DetectCCPin>
    UpdateVConnTermination(port);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7fe fc29 	bl	8007c1e <UpdateVConnTermination>
      SetStateAttachWaitSource(port);
    }
    else
#endif /* FSC_HAVE_SRC */
#ifdef FSC_HAVE_SNK
    if (port->port_type_ == USBTypeC_Sink ||
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00b      	beq.n	80093ee <StateMachineUnattached+0xb6>
        (port->port_type_ == USBTypeC_DRP &&
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    if (port->port_type_ == USBTypeC_Sink ||
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d11d      	bne.n	800941c <StateMachineUnattached+0xe4>
         port->registers_.CCStat.CON_RES == 1)) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7e5b      	ldrb	r3, [r3, #25]
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	b2db      	uxtb	r3, r3
        (port->port_type_ == USBTypeC_DRP &&
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d016      	beq.n	800941c <StateMachineUnattached+0xe4>
      }
      else
#endif /* FSC_HAVE_ACC */
      /* Operating as a Snk or DRP-Snk */
      /* Else-if to prevent attaching to Rd-Open while in Snk+Acc mode */
      if ((port->cc_term_ == CCTypeRdUSB ||
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d009      	beq.n	800940c <StateMachineUnattached+0xd4>
           port->cc_term_ == CCTypeRd1p5 ||
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
      if ((port->cc_term_ == CCTypeRdUSB ||
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d004      	beq.n	800940c <StateMachineUnattached+0xd4>
           port->cc_term_ == CCTypeRd3p0) &&
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
           port->cc_term_ == CCTypeRd1p5 ||
 8009408:	2b04      	cmp	r3, #4
 800940a:	d107      	bne.n	800941c <StateMachineUnattached+0xe4>
          port->vconn_term_ == CCTypeOpen) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
           port->cc_term_ == CCTypeRd3p0) &&
 8009412:	2b00      	cmp	r3, #0
 8009414:	d102      	bne.n	800941c <StateMachineUnattached+0xe4>
        SetStateAttachWaitSink(port);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa48 	bl	80098ac <SetStateAttachWaitSink>
      }
    }
#endif /* FSC_HAVE_SNK */

    if (port->tc_state_ == Unattached)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8009422:	2b02      	cmp	r3, #2
 8009424:	d107      	bne.n	8009436 <StateMachineUnattached+0xfe>
    {
      /* Reset our CC detection variables for next time through */
      SetStateUnattached(port);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f988 	bl	800973c <SetStateUnattached>
 800942c:	e003      	b.n	8009436 <StateMachineUnattached+0xfe>
    }
  }
  else {
    port->idle_ = TRUE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }
}
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <StateMachineAttachWaitSink>:

#ifdef FSC_HAVE_SNK
void StateMachineAttachWaitSink(struct Port *port)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* If VConn is not Open, keep checking for the right CC/VConn termination */
  if (port->vconn_term_ != CCTypeOpen) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800944a:	2b00      	cmp	r3, #0
 800944c:	d006      	beq.n	800945c <StateMachineAttachWaitSink+0x20>
    port->cc_pin_ = NONE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    DetectCCPin(port);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7fe fb91 	bl	8007b7e <DetectCCPin>
  }

  UpdateVConnTermination(port);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7fe fbde 	bl	8007c1e <UpdateVConnTermination>
  DebounceCC(port);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7fe fac0 	bl	80079e8 <DebounceCC>

  if (port->registers_.AlertL.I_VBUS_ALRM_HI == 1) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	7b9b      	ldrb	r3, [r3, #14]
 800946c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009470:	b2db      	uxtb	r3, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d004      	beq.n	8009480 <StateMachineAttachWaitSink+0x44>
    /* Interrupt caused by VBUS crossing VSafe5V */
    ClearInterrupt(port, regALERTL, MSK_I_VBUS_ALRM_HI);
 8009476:	2280      	movs	r2, #128	; 0x80
 8009478:	2110      	movs	r1, #16
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7fe f865 	bl	800754a <ClearInterrupt>
  }

  if (port->cc_term_pd_debounce_ == CCTypeOpen &&
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8009486:	2b00      	cmp	r3, #0
 8009488:	d108      	bne.n	800949c <StateMachineAttachWaitSink+0x60>
      port->vconn_term_ == CCTypeOpen) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  if (port->cc_term_pd_debounce_ == CCTypeOpen &&
 8009490:	2b00      	cmp	r3, #0
 8009492:	d103      	bne.n	800949c <StateMachineAttachWaitSink+0x60>
      /* Open detected? */
      SetStateUnattached(port);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f951 	bl	800973c <SetStateUnattached>
 800949a:	e035      	b.n	8009508 <StateMachineAttachWaitSink+0xcc>
  } else if (IsVbusVSafe5V(port)) {
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fe f98a 	bl	80077b6 <IsVbusVSafe5V>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d02a      	beq.n	80094fe <StateMachineAttachWaitSink+0xc2>
    if (port->cc_term_cc_debounce_ >= CCTypeRdUSB &&
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d912      	bls.n	80094d8 <StateMachineAttachWaitSink+0x9c>
        port->cc_term_cc_debounce_ < CCTypeUndefined &&
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
    if (port->cc_term_cc_debounce_ >= CCTypeRdUSB &&
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d80d      	bhi.n	80094d8 <StateMachineAttachWaitSink+0x9c>
        port->vconn_term_ >= CCTypeRdUSB &&
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
        port->cc_term_cc_debounce_ < CCTypeUndefined &&
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d908      	bls.n	80094d8 <StateMachineAttachWaitSink+0x9c>
        port->vconn_term_ < CCTypeUndefined) {
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
        port->vconn_term_ >= CCTypeRdUSB &&
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d803      	bhi.n	80094d8 <StateMachineAttachWaitSink+0x9c>
        /* If both pins are Rp, it's a debug accessory */
        SetStateDebugAccessorySink(port);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fad3 	bl	8009a7c <SetStateDebugAccessorySink>
 80094d6:	e017      	b.n	8009508 <StateMachineAttachWaitSink+0xcc>
    } else if (port->cc_term_cc_debounce_ > CCTypeOpen &&
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d012      	beq.n	8009508 <StateMachineAttachWaitSink+0xcc>
              port->cc_term_cc_debounce_ < CCTypeUndefined &&
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
    } else if (port->cc_term_cc_debounce_ > CCTypeOpen &&
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d80d      	bhi.n	8009508 <StateMachineAttachWaitSink+0xcc>
              port->vconn_term_ == CCTypeOpen) {
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
              port->cc_term_cc_debounce_ < CCTypeUndefined &&
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d108      	bne.n	8009508 <StateMachineAttachWaitSink+0xcc>
        WriteRegister(port, regALERTMSKL);
        SetStateTrySource(port);
      } else
#endif /* FSC_HAVE_DRP */
      {
        SetStateAttachedSink(port);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa3e 	bl	8009978 <SetStateAttachedSink>
    }
  }
  else {
      port->idle_ = TRUE;
  }
}
 80094fc:	e004      	b.n	8009508 <StateMachineAttachWaitSink+0xcc>
      port->idle_ = TRUE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8009506:	e7ff      	b.n	8009508 <StateMachineAttachWaitSink+0xcc>
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <StateMachineAttachedSink>:
}
#endif /* FSC_HAVE_ACC */

#ifdef FSC_HAVE_SNK
void StateMachineAttachedSink(struct Port *port)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
    /* Sink -> Source path switch happens automatically */
  }
#endif /* FSC_HAVE_FRSWAP */

  /* A VBus disconnect should generate an interrupt to wake us up */
  if (port->registers_.AlertH.I_VBUS_SNK_DISC || IsVbusVSafe0V(port)) {
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	7bdb      	ldrb	r3, [r3, #15]
 800951c:	f003 0308 	and.w	r3, r3, #8
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d105      	bne.n	8009532 <StateMachineAttachedSink+0x22>
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7fe f930 	bl	800778c <IsVbusVSafe0V>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d017      	beq.n	8009562 <StateMachineAttachedSink+0x52>
    ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 8009532:	2202      	movs	r2, #2
 8009534:	2110      	movs	r1, #16
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fe f807 	bl	800754a <ClearInterrupt>
    ClearInterrupt(port, regALERTH, MSK_I_VBUS_SNK_DISC);
 800953c:	2208      	movs	r2, #8
 800953e:	2111      	movs	r1, #17
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7fe f802 	bl	800754a <ClearInterrupt>

    if (port->is_pr_swap_ == FALSE &&
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800954c:	2b00      	cmp	r3, #0
 800954e:	d108      	bne.n	8009562 <StateMachineAttachedSink+0x52>
#ifdef FSC_HAVE_FRSWAP
        port->is_fr_swap_ == FALSE &&
#endif /* FSC_HAVE_FRSWAP */
        port->is_hard_reset_ == FALSE) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
    if (port->is_pr_swap_ == FALSE &&
 8009556:	2b00      	cmp	r3, #0
 8009558:	d103      	bne.n	8009562 <StateMachineAttachedSink+0x52>
        /* Start the disconnect process */
      SetStateUnattached(port);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f8ee 	bl	800973c <SetStateUnattached>
      return;
 8009560:	e03a      	b.n	80095d8 <StateMachineAttachedSink+0xc8>
    }
  }

  if (!port->is_pr_swap_) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <StateMachineAttachedSink+0x62>
    DebounceCC(port);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7fe fa3b 	bl	80079e8 <DebounceCC>
  }

  /* If using PD, sink can monitor CC as well as VBUS to allow detach during a
   * hard rest */
  if (port->pd_active_ == TRUE && !port->is_pr_swap_ &&
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8009578:	2b01      	cmp	r3, #1
 800957a:	d10d      	bne.n	8009598 <StateMachineAttachedSink+0x88>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8009582:	2b00      	cmp	r3, #0
 8009584:	d108      	bne.n	8009598 <StateMachineAttachedSink+0x88>
      port->cc_term_pd_debounce_ == CCTypeOpen) {
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
  if (port->pd_active_ == TRUE && !port->is_pr_swap_ &&
 800958c:	2b00      	cmp	r3, #0
 800958e:	d103      	bne.n	8009598 <StateMachineAttachedSink+0x88>
      SetStateUnattached(port);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8d3 	bl	800973c <SetStateUnattached>
    return;
 8009596:	e01f      	b.n	80095d8 <StateMachineAttachedSink+0xc8>
  }

  if (TimerExpired(&port->tc_state_timer_)) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3380      	adds	r3, #128	; 0x80
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff fd7d 	bl	800909c <TimerExpired>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <StateMachineAttachedSink+0xaa>
    TimerDisable(&port->tc_state_timer_);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3380      	adds	r3, #128	; 0x80
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff fd49 	bl	8009044 <TimerDisable>
    port->unattach_loop_counter_ = 0;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
  }

  if (port->registers_.AlertL.I_PORT_PWR) {
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	7b9b      	ldrb	r3, [r3, #14]
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <StateMachineAttachedSink+0xc2>
    ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 80095c8:	2202      	movs	r2, #2
 80095ca:	2110      	movs	r1, #16
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fd ffbc 	bl	800754a <ClearInterrupt>
  }

  /* Update sink current from CC level */
  UpdateSinkCurrent(port);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7fe f87d 	bl	80076d2 <UpdateSinkCurrent>
}
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <StateMachineDebugAccessorySink>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void StateMachineDebugAccessorySink(struct Port *port)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  UpdateVConnTermination(port);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7fe fb19 	bl	8007c1e <UpdateVConnTermination>
  DebounceCC(port);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7fe f9fb 	bl	80079e8 <DebounceCC>

  port->idle_ = TRUE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  if (!port->registers_.PwrStat.VBUS_VAL) {
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7e9b      	ldrb	r3, [r3, #26]
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d103      	bne.n	8009610 <StateMachineDebugAccessorySink+0x32>
      SetStateUnattached(port);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f897 	bl	800973c <SetStateUnattached>
    else if (port->vconn_term_ > port->cc_term_pd_debounce_) {
      port->cc_pin_ = CC2;
      PDEnable(port, FALSE);
    }
  }
}
 800960e:	e039      	b.n	8009684 <StateMachineDebugAccessorySink+0xa6>
  else if (port->cc_term_pd_debounce_ >= CCTypeRdUSB &&
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8009616:	2b01      	cmp	r3, #1
 8009618:	d934      	bls.n	8009684 <StateMachineDebugAccessorySink+0xa6>
           port->cc_term_pd_debounce_ < CCTypeUndefined &&
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
  else if (port->cc_term_pd_debounce_ >= CCTypeRdUSB &&
 8009620:	2b04      	cmp	r3, #4
 8009622:	d82f      	bhi.n	8009684 <StateMachineDebugAccessorySink+0xa6>
           port->vconn_term_ >= CCTypeRdUSB &&
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
           port->cc_term_pd_debounce_ < CCTypeUndefined &&
 800962a:	2b01      	cmp	r3, #1
 800962c:	d92a      	bls.n	8009684 <StateMachineDebugAccessorySink+0xa6>
           port->vconn_term_ < CCTypeUndefined &&
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
           port->vconn_term_ >= CCTypeRdUSB &&
 8009634:	2b04      	cmp	r3, #4
 8009636:	d825      	bhi.n	8009684 <StateMachineDebugAccessorySink+0xa6>
           port->pd_active_ == FALSE) {
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
           port->vconn_term_ < CCTypeUndefined &&
 800963e:	2b00      	cmp	r3, #0
 8009640:	d120      	bne.n	8009684 <StateMachineDebugAccessorySink+0xa6>
    if (port->cc_term_pd_debounce_ > port->vconn_term_) {
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800964e:	429a      	cmp	r2, r3
 8009650:	d908      	bls.n	8009664 <StateMachineDebugAccessorySink+0x86>
      port->cc_pin_ = CC1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
      PDEnable(port, FALSE);
 800965a:	2100      	movs	r1, #0
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7fe fc69 	bl	8007f34 <PDEnable>
}
 8009662:	e00f      	b.n	8009684 <StateMachineDebugAccessorySink+0xa6>
    else if (port->vconn_term_ > port->cc_term_pd_debounce_) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8009670:	429a      	cmp	r2, r3
 8009672:	d907      	bls.n	8009684 <StateMachineDebugAccessorySink+0xa6>
      port->cc_pin_ = CC2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
      PDEnable(port, FALSE);
 800967c:	2100      	movs	r1, #0
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7fe fc58 	bl	8007f34 <PDEnable>
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <StateMachineIllegalCable>:
  }
}
#endif /* FSC_HAVE_SRC */

void StateMachineIllegalCable(struct Port *port)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  DebounceCC(port);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7fe f9a7 	bl	80079e8 <DebounceCC>

  /* Look for detach */
  if (port->cc_term_previous_ == CCTypeOpen) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d103      	bne.n	80096ac <StateMachineIllegalCable+0x20>
      SetStateUnattached(port);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f849 	bl	800973c <SetStateUnattached>
  }
  else {
      port->idle_ = TRUE;
  }
}
 80096aa:	e003      	b.n	80096b4 <StateMachineIllegalCable+0x28>
      port->idle_ = TRUE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <SetStateErrorRecovery>:
  port->registers_.PwrCtrl.AUTO_DISCH = 0;
  WriteRegister(port, regPWRCTRL);
}

void SetStateErrorRecovery(struct Port *port)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  platform_printf(port->port_id_, "SS ER\n", -1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	f04f 32ff 	mov.w	r2, #4294967295
 80096cc:	491a      	ldr	r1, [pc, #104]	; (8009738 <SetStateErrorRecovery+0x7c>)
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f7 f948 	bl	8000964 <platform_printf>
  port->idle_ = FALSE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  port->tc_state_ = ErrorRecovery;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  TimerStart(&port->tc_state_timer_, ktErrorRecovery);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3380      	adds	r3, #128	; 0x80
 80096e8:	f247 5130 	movw	r1, #30000	; 0x7530
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff fc8b 	bl	8009008 <TimerStart>
  ClearState(port);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7fe fb52 	bl	8007d9c <ClearState>

  port->registers_.PwrCtrl.AUTO_DISCH = 0;
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	7e13      	ldrb	r3, [r2, #24]
 80096fc:	f36f 1304 	bfc	r3, #4, #1
 8009700:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 8009702:	211c      	movs	r1, #28
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7fd fed5 	bl	80074b4 <WriteRegister>

  /* Present Open/Open for tErrorRecovery */
  port->registers_.RoleCtrl.DRP = 0;
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	7d93      	ldrb	r3, [r2, #22]
 800970e:	f36f 1386 	bfc	r3, #6, #1
 8009712:	7593      	strb	r3, [r2, #22]
  port->registers_.RoleCtrl.CC1_TERM = CCRoleOpen;
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	7d93      	ldrb	r3, [r2, #22]
 8009718:	f043 0303 	orr.w	r3, r3, #3
 800971c:	7593      	strb	r3, [r2, #22]
  port->registers_.RoleCtrl.CC2_TERM = CCRoleOpen;
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	7d93      	ldrb	r3, [r2, #22]
 8009722:	f043 030c 	orr.w	r3, r3, #12
 8009726:	7593      	strb	r3, [r2, #22]
  WriteRegister(port, regROLECTRL);
 8009728:	211a      	movs	r1, #26
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7fd fec2 	bl	80074b4 <WriteRegister>
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	0800c8c4 	.word	0x0800c8c4

0800973c <SetStateUnattached>:
/* SetStateUnattached configures the Toggle state machine in the device to */
/* handle all of the unattached states. */
/* This allows for the MCU to be placed in a low power mode until */
/* the device wakes it up upon detecting something */
void SetStateUnattached(struct Port *port)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  FSC_BOOL wasAWSnk = (port->tc_state_ == AttachWaitSink) ? TRUE : FALSE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800974a:	2b03      	cmp	r3, #3
 800974c:	bf0c      	ite	eq
 800974e:	2301      	moveq	r3, #1
 8009750:	2300      	movne	r3, #0
 8009752:	b2db      	uxtb	r3, r3
 8009754:	73fb      	strb	r3, [r7, #15]

  platform_printf(port->port_id_, "SS UN\n", -1);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	f04f 32ff 	mov.w	r2, #4294967295
 800975e:	4952      	ldr	r1, [pc, #328]	; (80098a8 <SetStateUnattached+0x16c>)
 8009760:	4618      	mov	r0, r3
 8009762:	f7f7 f8ff 	bl	8000964 <platform_printf>

  port->idle_ = TRUE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  port->tc_state_ = Unattached;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

  ClearState(port);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7fe fb10 	bl	8007d9c <ClearState>

  /* Clear all alert interrupts */
  ClearInterrupt(port, regALERTL, MSK_I_ALARM_LO_ALL);
 800977c:	22ff      	movs	r2, #255	; 0xff
 800977e:	2110      	movs	r1, #16
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7fd fee2 	bl	800754a <ClearInterrupt>
  ClearInterrupt(port, regALERTH, MSK_I_ALARM_HI_ALL);
 8009786:	228f      	movs	r2, #143	; 0x8f
 8009788:	2111      	movs	r1, #17
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7fd fedd 	bl	800754a <ClearInterrupt>
  ClearInterrupt(port, regFAULTSTAT, MSK_FAULTSTAT_ALL);
 8009790:	2233      	movs	r2, #51	; 0x33
 8009792:	211f      	movs	r1, #31
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7fd fed8 	bl	800754a <ClearInterrupt>

  /* Disable monitoring except for CCStat */
  port->registers_.AlertMskL.byte = MSK_I_CCSTAT;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	741a      	strb	r2, [r3, #16]
  port->registers_.AlertMskH.byte = 0;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	745a      	strb	r2, [r3, #17]
  WriteRegisters(port, regALERTMSKL, 2);
 80097a6:	2202      	movs	r2, #2
 80097a8:	2112      	movs	r1, #18
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7fd fe9b 	bl	80074e6 <WriteRegisters>

  /* Disable monitoring and reconfigure to look for the next connection */
  if (port->port_type_ == USBTypeC_DRP) {
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d121      	bne.n	80097fe <SetStateUnattached+0xc2>
    /* Config as DRP */
    port->registers_.RoleCtrl.DRP = 1;
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	7d93      	ldrb	r3, [r2, #22]
 80097be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c2:	7593      	strb	r3, [r2, #22]

    if (wasAWSnk) {
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <SetStateUnattached+0xa8>
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRp;
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	7d93      	ldrb	r3, [r2, #22]
 80097ce:	2101      	movs	r1, #1
 80097d0:	f361 0301 	bfi	r3, r1, #0, #2
 80097d4:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRp;
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	7d93      	ldrb	r3, [r2, #22]
 80097da:	2101      	movs	r1, #1
 80097dc:	f361 0383 	bfi	r3, r1, #2, #2
 80097e0:	7593      	strb	r3, [r2, #22]
 80097e2:	e03c      	b.n	800985e <SetStateUnattached+0x122>
    }
    else {
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	7d93      	ldrb	r3, [r2, #22]
 80097e8:	2102      	movs	r1, #2
 80097ea:	f361 0301 	bfi	r3, r1, #0, #2
 80097ee:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7d93      	ldrb	r3, [r2, #22]
 80097f4:	2102      	movs	r1, #2
 80097f6:	f361 0383 	bfi	r3, r1, #2, #2
 80097fa:	7593      	strb	r3, [r2, #22]
 80097fc:	e02f      	b.n	800985e <SetStateUnattached+0x122>
    }
  }
  else if (port->port_type_ == USBTypeC_Source) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8009804:	2b01      	cmp	r3, #1
 8009806:	d111      	bne.n	800982c <SetStateUnattached+0xf0>
    /* Config as a source with Rp-Rp */
    port->registers_.RoleCtrl.DRP = 0;
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	7d93      	ldrb	r3, [r2, #22]
 800980c:	f36f 1386 	bfc	r3, #6, #1
 8009810:	7593      	strb	r3, [r2, #22]
    port->registers_.RoleCtrl.CC1_TERM = CCRoleRp;
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	7d93      	ldrb	r3, [r2, #22]
 8009816:	2101      	movs	r1, #1
 8009818:	f361 0301 	bfi	r3, r1, #0, #2
 800981c:	7593      	strb	r3, [r2, #22]
    port->registers_.RoleCtrl.CC2_TERM = CCRoleRp;
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	7d93      	ldrb	r3, [r2, #22]
 8009822:	2101      	movs	r1, #1
 8009824:	f361 0383 	bfi	r3, r1, #2, #2
 8009828:	7593      	strb	r3, [r2, #22]
 800982a:	e018      	b.n	800985e <SetStateUnattached+0x122>
  }
  else {
    /* Config as a sink with Rd-Rd - toggle for acc if supported */
    port->registers_.RoleCtrl.DRP = port->acc_support_ ? 1 : 0;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8009832:	2b00      	cmp	r3, #0
 8009834:	bf14      	ite	ne
 8009836:	2301      	movne	r3, #1
 8009838:	2300      	moveq	r3, #0
 800983a:	b2d9      	uxtb	r1, r3
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	7d93      	ldrb	r3, [r2, #22]
 8009840:	f361 1386 	bfi	r3, r1, #6, #1
 8009844:	7593      	strb	r3, [r2, #22]
    port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	7d93      	ldrb	r3, [r2, #22]
 800984a:	2102      	movs	r1, #2
 800984c:	f361 0301 	bfi	r3, r1, #0, #2
 8009850:	7593      	strb	r3, [r2, #22]
    port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	7d93      	ldrb	r3, [r2, #22]
 8009856:	2102      	movs	r1, #2
 8009858:	f361 0383 	bfi	r3, r1, #2, #2
 800985c:	7593      	strb	r3, [r2, #22]
  }
  port->registers_.StdOutCfg.ORIENT = 0;
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	7d13      	ldrb	r3, [r2, #20]
 8009862:	f36f 0300 	bfc	r3, #0, #1
 8009866:	7513      	strb	r3, [r2, #20]
  WriteRegister(port, regSTD_OUT_CFG);
 8009868:	2118      	movs	r1, #24
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7fd fe22 	bl	80074b4 <WriteRegister>

  UpdateSourceCurrent(port, port->src_current_);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7fd ff17 	bl	80076ac <UpdateSourceCurrent>

  /* Driver will wait until device detects a new connection */
  SendCommand(port, Look4Con);
 800987e:	2199      	movs	r1, #153	; 0x99
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7fd fe7f 	bl	8007584 <SendCommand>
  TimerDisable(&port->tc_state_timer_);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3380      	adds	r3, #128	; 0x80
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fbda 	bl	8009044 <TimerDisable>
  notify_observers(EVENT_TYPEC_DETACH, port->port_id_, 0);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	b29b      	uxth	r3, r3
 8009896:	2200      	movs	r2, #0
 8009898:	4619      	mov	r1, r3
 800989a:	2002      	movs	r0, #2
 800989c:	f7fa fba4 	bl	8003fe8 <notify_observers>
}
 80098a0:	bf00      	nop
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	0800c8cc 	.word	0x0800c8cc

080098ac <SetStateAttachWaitSink>:

#ifdef FSC_HAVE_SNK
void SetStateAttachWaitSink(struct Port *port)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  platform_printf(port->port_id_, "SS AWSnk\n", -1);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	f04f 32ff 	mov.w	r2, #4294967295
 80098bc:	492d      	ldr	r1, [pc, #180]	; (8009974 <SetStateAttachWaitSink+0xc8>)
 80098be:	4618      	mov	r0, r3
 80098c0:	f7f7 f850 	bl	8000964 <platform_printf>

  port->idle_ = FALSE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  port->tc_state_ = AttachWaitSink;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2203      	movs	r2, #3
 80098d0:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  SetStateSink(port);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe f91a 	bl	8007b0e <SetStateSink>

   /* Check for cable looping */
  if (port->unattach_loop_counter_ > MAX_CABLE_LOOP) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80098e0:	2b14      	cmp	r3, #20
 80098e2:	d903      	bls.n	80098ec <SetStateAttachWaitSink+0x40>
    SetStateIllegalCable(port);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f915 	bl	8009b14 <SetStateIllegalCable>
    return;
 80098ea:	e03f      	b.n	800996c <SetStateAttachWaitSink+0xc0>
  }
  else {
    port->unattach_loop_counter_++;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80098f2:	3301      	adds	r3, #1
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
  }

  /* Set sink terminations.  This may be a good idea or may just be part
   * of the workaround for AWSink issue.
   */
  port->registers_.RoleCtrl.DRP = 0;
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7d93      	ldrb	r3, [r2, #22]
 8009900:	f36f 1386 	bfc	r3, #6, #1
 8009904:	7593      	strb	r3, [r2, #22]
  port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	7d93      	ldrb	r3, [r2, #22]
 800990a:	2102      	movs	r1, #2
 800990c:	f361 0301 	bfi	r3, r1, #0, #2
 8009910:	7593      	strb	r3, [r2, #22]
  port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	7d93      	ldrb	r3, [r2, #22]
 8009916:	2102      	movs	r1, #2
 8009918:	f361 0383 	bfi	r3, r1, #2, #2
 800991c:	7593      	strb	r3, [r2, #22]
  WriteRegister(port, regROLECTRL);
 800991e:	211a      	movs	r1, #26
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7fd fdc7 	bl	80074b4 <WriteRegister>

  UpdateVConnTermination(port);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7fe f979 	bl	8007c1e <UpdateVConnTermination>

  TimerDisable(&port->tc_state_timer_);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3380      	adds	r3, #128	; 0x80
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fb87 	bl	8009044 <TimerDisable>

  SetVBusAlarm(port, 0, FSC_VSAFE5V_L);
 8009936:	22be      	movs	r2, #190	; 0xbe
 8009938:	2100      	movs	r1, #0
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fd ff90 	bl	8007860 <SetVBusAlarm>
  port->registers_.AlertMskL.M_PORT_PWR = 0;
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	7c13      	ldrb	r3, [r2, #16]
 8009944:	f36f 0341 	bfc	r3, #1, #1
 8009948:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_VBUS_ALRM_HI = 1;
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	7c13      	ldrb	r3, [r2, #16]
 800994e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009952:	7413      	strb	r3, [r2, #16]
  WriteRegister(port, regALERTMSKL);
 8009954:	2112      	movs	r1, #18
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7fd fdac 	bl	80074b4 <WriteRegister>

  notify_observers(EVENT_TYPEC_ATTACH, port->port_id_, 0);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	b29b      	uxth	r3, r3
 8009962:	2200      	movs	r2, #0
 8009964:	4619      	mov	r1, r3
 8009966:	2001      	movs	r0, #1
 8009968:	f7fa fb3e 	bl	8003fe8 <notify_observers>
}
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	0800c8d4 	.word	0x0800c8d4

08009978 <SetStateAttachedSink>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void SetStateAttachedSink(struct Port *port)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  platform_printf(port->port_id_, "SS ASnk\n", -1);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f04f 32ff 	mov.w	r2, #4294967295
 8009988:	493a      	ldr	r1, [pc, #232]	; (8009a74 <SetStateAttachedSink+0xfc>)
 800998a:	4618      	mov	r0, r3
 800998c:	f7f6 ffea 	bl	8000964 <platform_printf>

  port->idle_ = TRUE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  port->tc_state_ = AttachedSink;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2204      	movs	r2, #4
 800999c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  SetStateSink(port);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7fe f8b4 	bl	8007b0e <SetStateSink>

  /* Disable VBUS Alarm */
  port->registers_.PwrCtrl.DIS_VALARM = 1;
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	7e13      	ldrb	r3, [r2, #24]
 80099aa:	f043 0320 	orr.w	r3, r3, #32
 80099ae:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 80099b0:	211c      	movs	r1, #28
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7fd fd7e 	bl	80074b4 <WriteRegister>

  /* Set up the Sink Disconnect threshold/interrupt */
  SetVBusSnkDisc(port, FSC_VSAFE5V_DISC);
 80099b8:	2192      	movs	r1, #146	; 0x92
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7fd ff16 	bl	80077ec <SetVBusSnkDisc>
  SetVBusStopDisc(port, FSC_VSAFE0V_DISCH);
 80099c0:	211c      	movs	r1, #28
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7fd ff2f 	bl	8007826 <SetVBusStopDisc>

  port->registers_.AlertMskL.M_PORT_PWR = 1;
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	7c13      	ldrb	r3, [r2, #16]
 80099cc:	f043 0302 	orr.w	r3, r3, #2
 80099d0:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskH.M_VBUS_SNK_DISC = 1;
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	7c53      	ldrb	r3, [r2, #17]
 80099d6:	f043 0308 	orr.w	r3, r3, #8
 80099da:	7453      	strb	r3, [r2, #17]
  WriteRegisters(port, regALERTMSKL, 2);
 80099dc:	2202      	movs	r2, #2
 80099de:	2112      	movs	r1, #18
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f7fd fd80 	bl	80074e6 <WriteRegisters>

  ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 80099e6:	2202      	movs	r2, #2
 80099e8:	2110      	movs	r1, #16
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7fd fdad 	bl	800754a <ClearInterrupt>
  ClearInterrupt(port, regALERTH, MSK_I_VBUS_SNK_DISC);
 80099f0:	2208      	movs	r2, #8
 80099f2:	2111      	movs	r1, #17
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fd fda8 	bl	800754a <ClearInterrupt>

  UpdateVConnTermination(port);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7fe f90f 	bl	8007c1e <UpdateVConnTermination>
  UpdateOrientation(port);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7fe f932 	bl	8007c6a <UpdateOrientation>

  /* Call once at the start to set the initial termination value */
  DebounceCC(port);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7fd ffee 	bl	80079e8 <DebounceCC>

  PDEnable(port, FALSE);
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7fe fa90 	bl	8007f34 <PDEnable>

  port->registers_.PwrCtrl.AUTO_DISCH = 1;
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	7e13      	ldrb	r3, [r2, #24]
 8009a18:	f043 0310 	orr.w	r3, r3, #16
 8009a1c:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.EN_BLEED_DISCH = 1;
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	7e13      	ldrb	r3, [r2, #24]
 8009a22:	f043 0308 	orr.w	r3, r3, #8
 8009a26:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 8009a28:	211c      	movs	r1, #28
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7fd fd42 	bl	80074b4 <WriteRegister>

  SendCommand(port, SinkVbus);
 8009a30:	2155      	movs	r1, #85	; 0x55
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7fd fda6 	bl	8007584 <SendCommand>

  port->is_vconn_source_ = FALSE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f

  notify_observers((port->cc_pin_ == CC1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <SetStateAttachedSink+0xd6>
 8009a4a:	2004      	movs	r0, #4
 8009a4c:	e000      	b.n	8009a50 <SetStateAttachedSink+0xd8>
 8009a4e:	2008      	movs	r0, #8
                   ? EVENT_CC1_ORIENT : EVENT_CC2_ORIENT),
                   port->port_id_, 0);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	781b      	ldrb	r3, [r3, #0]
  notify_observers((port->cc_pin_ == CC1
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2200      	movs	r2, #0
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f7fa fac5 	bl	8003fe8 <notify_observers>

  /* Start dangling illegal cable timeout */
  TimerStart(&port->tc_state_timer_, ktIllegalCable);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3380      	adds	r3, #128	; 0x80
 8009a62:	4905      	ldr	r1, [pc, #20]	; (8009a78 <SetStateAttachedSink+0x100>)
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff facf 	bl	8009008 <TimerStart>
}
 8009a6a:	bf00      	nop
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	0800c8e0 	.word	0x0800c8e0
 8009a78:	000249f0 	.word	0x000249f0

08009a7c <SetStateDebugAccessorySink>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void SetStateDebugAccessorySink(struct Port *port)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  port->idle_ = TRUE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  port->tc_state_ = DebugAccessorySink;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	220f      	movs	r2, #15
 8009a90:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  SetStateSink(port);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7fe f83a 	bl	8007b0e <SetStateSink>

  /* Disable the VBus Value notification */
  port->registers_.PwrCtrl.DIS_VALARM = 1;
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	7e13      	ldrb	r3, [r2, #24]
 8009a9e:	f043 0320 	orr.w	r3, r3, #32
 8009aa2:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 8009aa4:	211c      	movs	r1, #28
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7fd fd04 	bl	80074b4 <WriteRegister>

  /* Set up the Sink Disconnect threshold/interrupt */
  SetVBusSnkDisc(port, FSC_VSAFE5V_DISC);
 8009aac:	2192      	movs	r1, #146	; 0x92
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fd fe9c 	bl	80077ec <SetVBusSnkDisc>
  SetVBusStopDisc(port, FSC_VSAFE0V_DISCH);
 8009ab4:	211c      	movs	r1, #28
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7fd feb5 	bl	8007826 <SetVBusStopDisc>

  port->registers_.AlertMskL.M_PORT_PWR = 1;
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	7c13      	ldrb	r3, [r2, #16]
 8009ac0:	f043 0302 	orr.w	r3, r3, #2
 8009ac4:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskH.M_VBUS_SNK_DISC = 1;
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	7c53      	ldrb	r3, [r2, #17]
 8009aca:	f043 0308 	orr.w	r3, r3, #8
 8009ace:	7453      	strb	r3, [r2, #17]
  WriteRegisters(port, regALERTMSKL, 2);
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	2112      	movs	r1, #18
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7fd fd06 	bl	80074e6 <WriteRegisters>

  ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 8009ada:	2202      	movs	r2, #2
 8009adc:	2110      	movs	r1, #16
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7fd fd33 	bl	800754a <ClearInterrupt>
  ClearInterrupt(port, regALERTH, MSK_I_VBUS_SNK_DISC);
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	2111      	movs	r1, #17
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7fd fd2e 	bl	800754a <ClearInterrupt>

  /* TODO - Add events Power role, PD contract etc*/
  notify_observers(EVENT_CC1_ORIENT | EVENT_DEBUG_ACCESSORY,
                   port->port_id_, 0);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	781b      	ldrb	r3, [r3, #0]
  notify_observers(EVENT_CC1_ORIENT | EVENT_DEBUG_ACCESSORY,
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	2200      	movs	r2, #0
 8009af6:	4619      	mov	r1, r3
 8009af8:	4805      	ldr	r0, [pc, #20]	; (8009b10 <SetStateDebugAccessorySink+0x94>)
 8009afa:	f7fa fa75 	bl	8003fe8 <notify_observers>

  TimerDisable(&port->tc_state_timer_);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3380      	adds	r3, #128	; 0x80
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff fa9e 	bl	8009044 <TimerDisable>
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	00800004 	.word	0x00800004

08009b14 <SetStateIllegalCable>:
  TimerDisable(&port->tc_state_timer_);
}
#endif /* FSC_HAVE_ACC && (FSC_HAVE_SNK || FSC_HAVE_SRC) */

void SetStateIllegalCable(struct Port *port)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  platform_printf(port->port_id_, "SS IllCab\n", -1);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	f04f 32ff 	mov.w	r2, #4294967295
 8009b24:	490d      	ldr	r1, [pc, #52]	; (8009b5c <SetStateIllegalCable+0x48>)
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f6 ff1c 	bl	8000964 <platform_printf>

  port->tc_state_ = IllegalCable;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2214      	movs	r2, #20
 8009b30:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  port->unattach_loop_counter_ = 0;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
  port->registers_.PwrCtrl.AUTO_DISCH = 1;
  WriteRegister(port, regPWRCTRL);
#endif /* FSC_HAVE_SRC ||  FSC_HAVE_SNK && FSC_HAVE_ACC */
  /* No contract could be negotiated. */
  notify_observers(EVENT_CC_NO_ORIENT | EVENT_ILLEGAL_CBL,
                   port->port_id_, 0);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
  notify_observers(EVENT_CC_NO_ORIENT | EVENT_ILLEGAL_CBL,
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2200      	movs	r2, #0
 8009b44:	4619      	mov	r1, r3
 8009b46:	4806      	ldr	r0, [pc, #24]	; (8009b60 <SetStateIllegalCable+0x4c>)
 8009b48:	f7fa fa4e 	bl	8003fe8 <notify_observers>

  port->idle_ = TRUE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	0800c8f8 	.word	0x0800c8f8
 8009b60:	02000010 	.word	0x02000010

08009b64 <CurrentSVDMVersion>:
#include "observer.h"

#define VDM_ARRAY_LEN 1

SvdmVersion CurrentSVDMVersion(struct Port *port, SopType sop)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  if (DPM_CurrentSpecRev(port, sop) == PDSpecRev2p0)
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7fa f9e9 	bl	8003f4c <DPM_CurrentSpecRev>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <CurrentSVDMVersion+0x20>
    return V1P0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	e000      	b.n	8009b86 <CurrentSVDMVersion+0x22>
  else
    return V2P0;
 8009b84:	2301      	movs	r3, #1
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <PolicyVdm>:

void PolicyVdm(struct Port *port)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  /*  Have we received a message from the source? */
  if (port->protocol_msg_rx_ == TRUE) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d15e      	bne.n	8009c5e <PolicyVdm+0xd0>
    port->protocol_msg_rx_ = FALSE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    if (port->policy_rx_header_.NumDataObjects != 0) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d03e      	beq.n	8009c36 <PolicyVdm+0xa8>
      switch (port->policy_rx_header_.MessageType) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8009bbe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b0f      	cmp	r3, #15
 8009bc6:	d129      	bne.n	8009c1c <PolicyVdm+0x8e>
      case DMTVendorDefined:
        if (port->policy_tx_data_obj_[0].SVDM.VDMType == STRUCTURED_VDM &&
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8009bce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d021      	beq.n	8009c1c <PolicyVdm+0x8e>
            port->policy_rx_data_obj_[0].SVDM.VDMType == STRUCTURED_VDM &&
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 3161 	ldrb.w	r3, [r3, #353]	; 0x161
 8009bde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009be2:	b2db      	uxtb	r3, r3
        if (port->policy_tx_data_obj_[0].SVDM.VDMType == STRUCTURED_VDM &&
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d019      	beq.n	8009c1c <PolicyVdm+0x8e>
            port->policy_rx_data_obj_[0].SVDM.CommandType != INITIATOR &&
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009bee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009bf2:	b2db      	uxtb	r3, r3
            port->policy_rx_data_obj_[0].SVDM.VDMType == STRUCTURED_VDM &&
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d011      	beq.n	8009c1c <PolicyVdm+0x8e>
            (port->policy_tx_data_obj_[0].SVDM.Command ==
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8009bfe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009c02:	b2da      	uxtb	r2, r3
            port->policy_rx_data_obj_[0].SVDM.Command))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009c0a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009c0e:	b2db      	uxtb	r3, r3
            port->policy_rx_data_obj_[0].SVDM.CommandType != INITIATOR &&
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d103      	bne.n	8009c1c <PolicyVdm+0x8e>
        {
          ConvertAndProcessVdmMessage(port);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f8bb 	bl	8009d90 <ConvertAndProcessVdmMessage>
          break;
 8009c1a:	e017      	b.n	8009c4c <PolicyVdm+0xbe>
        }
        /* Fall through */
      default:
        /*  If we get something we are not expecting - simply ignore them and */
        /*  kick out of VDM state (interruptible) */
        ResetPolicyState(port, port->vdm_msg_tx_sop_);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 fe2b 	bl	800b880 <ResetPolicyState>
        /*  reset flag so other state can see the message and process */
        port->protocol_msg_rx_ = TRUE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        break;
 8009c32:	bf00      	nop
 8009c34:	e00a      	b.n	8009c4c <PolicyVdm+0xbe>
      }
    }
    else {
      /*  if not a VDM message, kick out of VDM state (interruptible) */
      ResetPolicyState(port, port->vdm_msg_tx_sop_);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 fe1e 	bl	800b880 <ResetPolicyState>
      port->protocol_msg_rx_ = TRUE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    }
    port->policy_subindex_ = 0;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    port->pd_tx_status_ = txIdle;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  else {
    port->idle_ = TRUE;
  }


}
 8009c5c:	e01a      	b.n	8009c94 <PolicyVdm+0x106>
  else if (TimerExpired(&port->vdm_timer_)) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff fa19 	bl	800909c <TimerExpired>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00d      	beq.n	8009c8c <PolicyVdm+0xfe>
           TimerDisable(&port->vdm_timer_);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff f9e4 	bl	8009044 <TimerDisable>
     ResetPolicyState(port, port->vdm_msg_tx_sop_);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 fdfb 	bl	800b880 <ResetPolicyState>
}
 8009c8a:	e003      	b.n	8009c94 <PolicyVdm+0x106>
    port->idle_ = TRUE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <PolicyGiveVdm>:

void PolicyGiveVdm(struct Port *port)
{
 8009c9c:	b590      	push	{r4, r7, lr}
 8009c9e:	b089      	sub	sp, #36	; 0x24
 8009ca0:	af04      	add	r7, sp, #16
 8009ca2:	6078      	str	r0, [r7, #4]
  FSC_U8 result = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73fb      	strb	r3, [r7, #15]

  if (port->protocol_msg_rx_ == TRUE &&
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d11b      	bne.n	8009cea <PolicyGiveVdm+0x4e>
      port->policy_rx_header_.MessageType == DMTVendorDefined) {
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8009cb8:	f003 031f 	and.w	r3, r3, #31
 8009cbc:	b2db      	uxtb	r3, r3
  if (port->protocol_msg_rx_ == TRUE &&
 8009cbe:	2b0f      	cmp	r3, #15
 8009cc0:	d113      	bne.n	8009cea <PolicyGiveVdm+0x4e>
    /* A new received message can interrupt and current VDM transmission */
    ResetPolicyState(port, port->vdm_msg_tx_sop_);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 fdd8 	bl	800b880 <ResetPolicyState>
    port->policy_subindex_ = 0;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    port->pd_tx_status_ = txIdle;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    port->protocol_state_ = PRLIdle;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    return;
 8009ce8:	e04f      	b.n	8009d8a <PolicyGiveVdm+0xee>
  }
  else if (port->vdm_sending_data_ == TRUE) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 3273 	ldrb.w	r3, [r3, #627]	; 0x273
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d143      	bne.n	8009d7c <PolicyGiveVdm+0xe0>
      /* Indicates the need for SinkTx handling */
      /* TODO - not if we are responding to a request. */
      //port->policy_is_ams_ = TRUE;
    }

    result = PolicySend(port, DMTVendorDefined, port->vdm_msg_length_ * 4,
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	b298      	uxth	r0, r3
                        (FSC_U8 *)port->vdm_msg_obj_, port->vdm_next_ps_, 0,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f503 741f 	add.w	r4, r3, #636	; 0x27c
    result = PolicySend(port, DMTVendorDefined, port->vdm_msg_length_ * 4,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	f892 2298 	ldrb.w	r2, [r2, #664]	; 0x298
 8009d12:	2100      	movs	r1, #0
 8009d14:	9103      	str	r1, [sp, #12]
 8009d16:	9202      	str	r2, [sp, #8]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	9201      	str	r2, [sp, #4]
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4623      	mov	r3, r4
 8009d20:	4602      	mov	r2, r0
 8009d22:	210f      	movs	r1, #15
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7fc fc57 	bl	80065d8 <PolicySend>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73fb      	strb	r3, [r7, #15]
                        port->vdm_msg_tx_sop_, FALSE);
    if (result == STAT_SUCCESS) {
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d114      	bne.n	8009d5e <PolicyGiveVdm+0xc2>
      if (port->vdm_expecting_response_ == TRUE) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d103      	bne.n	8009d46 <PolicyGiveVdm+0xaa>
        StartVdmTimer(port);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 fd1c 	bl	800b77c <StartVdmTimer>
 8009d44:	e006      	b.n	8009d54 <PolicyGiveVdm+0xb8>
      }
      else {
        ResetPolicyState(port, port->vdm_msg_tx_sop_);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 fd96 	bl	800b880 <ResetPolicyState>
      }
      port->vdm_sending_data_ = FALSE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8009d5c:	e015      	b.n	8009d8a <PolicyGiveVdm+0xee>
    }
    else if (result == STAT_ERROR) {
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d112      	bne.n	8009d8a <PolicyGiveVdm+0xee>
      ResetPolicyState(port, port->vdm_msg_tx_sop_);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 fd87 	bl	800b880 <ResetPolicyState>
      port->vdm_sending_data_ = FALSE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8009d7a:	e006      	b.n	8009d8a <PolicyGiveVdm+0xee>
    }
  }
  else {
    ResetPolicyState(port, port->vdm_msg_tx_sop_);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 fd7b 	bl	800b880 <ResetPolicyState>
  }
}
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd90      	pop	{r4, r7, pc}

08009d90 <ConvertAndProcessVdmMessage>:

void ConvertAndProcessVdmMessage(struct Port *port)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08a      	sub	sp, #40	; 0x28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  FSC_U32 i;
  /*  form the word arrays that VDM block expects */
  FSC_U32 vdm_arr[7] = {0};
 8009d98:	f107 0308 	add.w	r3, r7, #8
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	605a      	str	r2, [r3, #4]
 8009da2:	609a      	str	r2, [r3, #8]
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	611a      	str	r2, [r3, #16]
 8009da8:	615a      	str	r2, [r3, #20]
 8009daa:	619a      	str	r2, [r3, #24]

  for (i = 0; i < port->policy_rx_header_.NumDataObjects; i++) {
 8009dac:	2300      	movs	r3, #0
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
 8009db0:	e00e      	b.n	8009dd0 <ConvertAndProcessVdmMessage+0x40>
    vdm_arr[i] = port->policy_rx_data_obj_[i].object;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db6:	3258      	adds	r2, #88	; 0x58
 8009db8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009dc4:	440b      	add	r3, r1
 8009dc6:	f843 2c20 	str.w	r2, [r3, #-32]
  for (i = 0; i < port->policy_rx_header_.NumDataObjects; i++) {
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	3301      	adds	r3, #1
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009dd6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	461a      	mov	r2, r3
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d3e6      	bcc.n	8009db2 <ConvertAndProcessVdmMessage+0x22>
  }
  ProcessVdmMessage(port, vdm_arr, port->policy_rx_header_.NumDataObjects);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009dea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	461a      	mov	r2, r3
 8009df2:	f107 0308 	add.w	r3, r7, #8
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fb3f 	bl	800a47c <ProcessVdmMessage>
}
 8009dfe:	bf00      	nop
 8009e00:	3728      	adds	r7, #40	; 0x28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <DoVdmCommand>:

void DoVdmCommand(struct Port *port)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b088      	sub	sp, #32
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
                 port->policy_msg_tx_sop_, FALSE);
      return;
  }
#endif /* FSC_DEBUG */

  command = port->pd_transmit_objects_[0].byte[0] & 0x1F;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8009e14:	f003 031f 	and.w	r3, r3, #31
 8009e18:	61fb      	str	r3, [r7, #28]
  svid = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	61bb      	str	r3, [r7, #24]
  svid |= (port->pd_transmit_objects_[0].byte[3] << 8);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	461a      	mov	r2, r3
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	61bb      	str	r3, [r7, #24]
  svid |= (port->pd_transmit_objects_[0].byte[2] << 0);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8009e34:	461a      	mov	r2, r3
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	61bb      	str	r3, [r7, #24]

  mode_index = port->pd_transmit_objects_[0].byte[1] & 0x7;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 8009e42:	f003 0307 	and.w	r3, r3, #7
 8009e46:	617b      	str	r3, [r7, #20]

  /*  Must be set with correct type when setting port->pd_tx_flag_ */
  sop = port->policy_msg_tx_sop_;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009e4e:	74fb      	strb	r3, [r7, #19]

#ifdef FSC_HAVE_DP
  if (svid == DP_SID) {
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	f64f 7201 	movw	r2, #65281	; 0xff01
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d111      	bne.n	8009e7e <DoVdmCommand+0x78>
    if (command == DP_COMMAND_STATUS) {
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	2b10      	cmp	r3, #16
 8009e5e:	d103      	bne.n	8009e68 <DoVdmCommand+0x62>
      DP_RequestPartnerStatus(port);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7f9 fb82 	bl	800356a <DP_RequestPartnerStatus>
 8009e66:	e00a      	b.n	8009e7e <DoVdmCommand+0x78>
    }
    else if (command == DP_COMMAND_CONFIG) {
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	2b11      	cmp	r3, #17
 8009e6c:	d107      	bne.n	8009e7e <DoVdmCommand+0x78>
      DisplayPortConfig_t temp;
      temp.word = port->pd_transmit_objects_[1].object;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8009e74:	60fb      	str	r3, [r7, #12]
      DP_RequestPartnerConfig(port, temp);
 8009e76:	68f9      	ldr	r1, [r7, #12]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7f9 fbc8 	bl	800360e <DP_RequestPartnerConfig>
    }
  }
#endif /*  FSC_HAVE_DP */
  if (command == DISCOVER_IDENTITY) {
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d105      	bne.n	8009e90 <DoVdmCommand+0x8a>
    RequestDiscoverIdentity(port, sop);
 8009e84:	7cfb      	ldrb	r3, [r7, #19]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f915 	bl	800a0b8 <RequestDiscoverIdentity>
    RequestEnterMode(port, sop, svid, mode_index);
  }
  else if (command == EXIT_MODE) {
    RequestExitMode(port, sop, svid, mode_index);
  }
}
 8009e8e:	e028      	b.n	8009ee2 <DoVdmCommand+0xdc>
  else if (command == DISCOVER_SVIDS) {
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d105      	bne.n	8009ea2 <DoVdmCommand+0x9c>
    RequestDiscoverSvids(port, sop);
 8009e96:	7cfb      	ldrb	r3, [r7, #19]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f9a3 	bl	800a1e6 <RequestDiscoverSvids>
}
 8009ea0:	e01f      	b.n	8009ee2 <DoVdmCommand+0xdc>
  else if (command == DISCOVER_MODES) {
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d107      	bne.n	8009eb8 <DoVdmCommand+0xb2>
    RequestDiscoverModes(port, sop, svid);
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	7cfb      	ldrb	r3, [r7, #19]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f9e7 	bl	800a284 <RequestDiscoverModes>
}
 8009eb6:	e014      	b.n	8009ee2 <DoVdmCommand+0xdc>
  else if (command == ENTER_MODE) {
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	2b04      	cmp	r3, #4
 8009ebc:	d107      	bne.n	8009ece <DoVdmCommand+0xc8>
    RequestEnterMode(port, sop, svid, mode_index);
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	7cf9      	ldrb	r1, [r7, #19]
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa2e 	bl	800a328 <RequestEnterMode>
}
 8009ecc:	e009      	b.n	8009ee2 <DoVdmCommand+0xdc>
  else if (command == EXIT_MODE) {
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	2b05      	cmp	r3, #5
 8009ed2:	d106      	bne.n	8009ee2 <DoVdmCommand+0xdc>
    RequestExitMode(port, sop, svid, mode_index);
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	7cf9      	ldrb	r1, [r7, #19]
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fa78 	bl	800a3d2 <RequestExitMode>
}
 8009ee2:	bf00      	nop
 8009ee4:	3720      	adds	r7, #32
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <AutoVdmDiscovery>:

void AutoVdmDiscovery(struct Port *port)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  if (port->pd_tx_status_ == txIdle)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f040 80d6 	bne.w	800a0ac <AutoVdmDiscovery+0x1c0>
  {
    switch (port->vdm_auto_state_)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f06:	2b06      	cmp	r3, #6
 8009f08:	f200 80cb 	bhi.w	800a0a2 <AutoVdmDiscovery+0x1b6>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <AutoVdmDiscovery+0x28>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f31 	.word	0x08009f31
 8009f18:	08009f31 	.word	0x08009f31
 8009f1c:	08009f43 	.word	0x08009f43
 8009f20:	08009f61 	.word	0x08009f61
 8009f24:	08009f9b 	.word	0x08009f9b
 8009f28:	0800a011 	.word	0x0800a011
 8009f2c:	0800a035 	.word	0x0800a035
    {
      case AUTO_VDM_INIT:
      case AUTO_VDM_DISCOVER_ID_PP:
        RequestDiscoverIdentity(port, SOP_TYPE_SOP);
 8009f30:	2100      	movs	r1, #0
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f8c0 	bl	800a0b8 <RequestDiscoverIdentity>
        port->vdm_auto_state_ = AUTO_VDM_DISCOVER_SVIDS_PP;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 8009f40:	e0b5      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
      case AUTO_VDM_DISCOVER_SVIDS_PP:
        if (port->svid_discvry_done_ == FALSE) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d104      	bne.n	8009f56 <AutoVdmDiscovery+0x6a>
          RequestDiscoverSvids(port, SOP_TYPE_SOP);
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f949 	bl	800a1e6 <RequestDiscoverSvids>
        }
        else {
          port->vdm_auto_state_ = AUTO_VDM_DISCOVER_MODES_PP;
        }
        break;
 8009f54:	e0ab      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
          port->vdm_auto_state_ = AUTO_VDM_DISCOVER_MODES_PP;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2203      	movs	r2, #3
 8009f5a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 8009f5e:	e0a6      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
      case AUTO_VDM_DISCOVER_MODES_PP:
        if (port->svid_discv_idx_ >= 0) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	db12      	blt.n	8009f90 <AutoVdmDiscovery+0xa4>
          RequestDiscoverModes(port, SOP_TYPE_SOP,
              port->core_svid_info_.svids[port->svid_discv_idx_]);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
          RequestDiscoverModes(port, SOP_TYPE_SOP,
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	4413      	add	r3, r2
 8009f7a:	889b      	ldrh	r3, [r3, #4]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2100      	movs	r1, #0
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f97f 	bl	800a284 <RequestDiscoverModes>
          port->vdm_auto_state_ = AUTO_VDM_ENTER_MODE_PP;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2204      	movs	r2, #4
 8009f8a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        }
        else {
          /* No known SVIDs found */
          port->vdm_auto_state_ = AUTO_VDM_DONE;
        }
        break;
 8009f8e:	e08e      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2207      	movs	r2, #7
 8009f94:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 8009f98:	e089      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
      case AUTO_VDM_ENTER_MODE_PP:
        if (port->auto_mode_entry_pos_ > 0) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f993 32cc 	ldrsb.w	r3, [r3, #716]	; 0x2cc
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dd30      	ble.n	800a006 <AutoVdmDiscovery+0x11a>
#ifdef FSC_HAVE_DP
          if (port->core_svid_info_.svids[port->svid_discv_idx_] == DP_SID) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	4413      	add	r3, r2
 8009fb4:	889b      	ldrh	r3, [r3, #4]
 8009fb6:	f64f 7201 	movw	r2, #65281	; 0xff01
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d10e      	bne.n	8009fdc <AutoVdmDiscovery+0xf0>
              if (port->display_port_data_.DpConfigured == TRUE) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d104      	bne.n	8009fd2 <AutoVdmDiscovery+0xe6>
                port->vdm_auto_state_ = AUTO_VDM_DONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2207      	movs	r2, #7
 8009fcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
                break;
 8009fd0:	e06d      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
              }
              else {
                port->vdm_auto_state_ = AUTO_VDM_DP_GET_STATUS;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2205      	movs	r2, #5
 8009fd6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8009fda:	e003      	b.n	8009fe4 <AutoVdmDiscovery+0xf8>
              }
          } else {
            port->vdm_auto_state_ = AUTO_VDM_DONE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2207      	movs	r2, #7
 8009fe0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
          }
#endif /* FSC_HAVE_DP */
          RequestEnterMode(port, SOP_TYPE_SOP,
                          port->core_svid_info_.svids[port->svid_discv_idx_],
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
          RequestEnterMode(port, SOP_TYPE_SOP,
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	4413      	add	r3, r2
 8009ff4:	889a      	ldrh	r2, [r3, #4]
                          port->auto_mode_entry_pos_);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f993 32cc 	ldrsb.w	r3, [r3, #716]	; 0x2cc
          RequestEnterMode(port, SOP_TYPE_SOP,
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f992 	bl	800a328 <RequestEnterMode>
        } else {
          port->vdm_auto_state_ = AUTO_VDM_DONE;
        }
        break;
 800a004:	e053      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2207      	movs	r2, #7
 800a00a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 800a00e:	e04e      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
#ifdef FSC_HAVE_DP
      case AUTO_VDM_DP_GET_STATUS:
        if (port->display_port_data_.DpModeEntered > 0) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a016:	2b00      	cmp	r3, #0
 800a018:	d007      	beq.n	800a02a <AutoVdmDiscovery+0x13e>
          DP_RequestPartnerStatus(port);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7f9 faa5 	bl	800356a <DP_RequestPartnerStatus>
          port->vdm_auto_state_ = AUTO_VDM_DP_SET_CONFIG;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2206      	movs	r2, #6
 800a024:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        }
        else {
          port->vdm_auto_state_ = AUTO_VDM_DONE;
        }
        break;
 800a028:	e041      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2207      	movs	r2, #7
 800a02e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 800a032:	e03c      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
      case AUTO_VDM_DP_SET_CONFIG:
        if (port->display_port_data_.DpPpStatus.Connection == DP_MODE_BOTH &&
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800a03a:	f003 0303 	and.w	r3, r3, #3
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b03      	cmp	r3, #3
 800a042:	d110      	bne.n	800a066 <AutoVdmDiscovery+0x17a>
            port->display_port_data_.DpStatus.Connection == DP_MODE_BOTH) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800a04a:	f003 0303 	and.w	r3, r3, #3
 800a04e:	b2db      	uxtb	r3, r3
        if (port->display_port_data_.DpPpStatus.Connection == DP_MODE_BOTH &&
 800a050:	2b03      	cmp	r3, #3
 800a052:	d108      	bne.n	800a066 <AutoVdmDiscovery+0x17a>
          /* If reported both connected send status with only one connected */
          DP_SetPortMode(port, (DisplayPort_Preferred_Snk) ?
 800a054:	2101      	movs	r1, #1
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7f9 fb2a 	bl	80036b0 <DP_SetPortMode>
                                DP_MODE_UFP_D : DP_MODE_DFP_D);
          port->vdm_auto_state_ = AUTO_VDM_DP_GET_STATUS;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2205      	movs	r2, #5
 800a060:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800a064:	e01c      	b.n	800a0a0 <AutoVdmDiscovery+0x1b4>
        }
        else if (port->display_port_data_.DpCapMatched &&
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d012      	beq.n	800a096 <AutoVdmDiscovery+0x1aa>
            port->display_port_data_.DpPpStatus.Connection > 0) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	b2db      	uxtb	r3, r3
        else if (port->display_port_data_.DpCapMatched &&
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00a      	beq.n	800a096 <AutoVdmDiscovery+0x1aa>
          DP_RequestPartnerConfig(port, port->display_port_data_.DpPpConfig);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7f9 fac1 	bl	800360e <DP_RequestPartnerConfig>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2207      	movs	r2, #7
 800a090:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800a094:	e004      	b.n	800a0a0 <AutoVdmDiscovery+0x1b4>
        }
        else {
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2207      	movs	r2, #7
 800a09a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        }
        break;
 800a09e:	e006      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
 800a0a0:	e005      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
#endif /*  FSC_HAVE_DP */
    default:
      port->vdm_auto_state_ = AUTO_VDM_DONE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2207      	movs	r2, #7
 800a0a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
      break;
 800a0aa:	e000      	b.n	800a0ae <AutoVdmDiscovery+0x1c2>
    }
  }
 800a0ac:	bf00      	nop
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop

0800a0b8 <RequestDiscoverIdentity>:

/*  Sending/requesting end VDM functionality */
FSC_S32 RequestDiscoverIdentity(struct Port *port, SopType sop)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  doDataObject_t vdmh = {0};
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
  FSC_U32 length = VDM_ARRAY_LEN;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[VDM_ARRAY_LEN];
  PolicyState_t n_pe;

  if ((port->policy_state_ == PE_SNK_Ready) ||
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a0d2:	2b13      	cmp	r3, #19
 800a0d4:	d004      	beq.n	800a0e0 <RequestDiscoverIdentity+0x28>
      (port->policy_state_ == PE_SRC_Ready)) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ == PE_SNK_Ready) ||
 800a0dc:	2b05      	cmp	r3, #5
 800a0de:	d134      	bne.n	800a14a <RequestDiscoverIdentity+0x92>
    port->original_policy_state_ = port->policy_state_;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_INIT_PORT_VDM_Identity_Request;
 800a0ec:	2371      	movs	r3, #113	; 0x71
 800a0ee:	74fb      	strb	r3, [r7, #19]
    /*  TODO: DiscoverIdentityCounter */

    vdmh.SVDM.SVID = PD_SID; /*  PD SID used for Discover Identity command */
 800a0f0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800a0f4:	81fb      	strh	r3, [r7, #14]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800a0f6:	7b7b      	ldrb	r3, [r7, #13]
 800a0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fc:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff fd2e 	bl	8009b64 <CurrentSVDMVersion>
 800a108:	4603      	mov	r3, r0
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	7b7b      	ldrb	r3, [r7, #13]
 800a112:	f362 1346 	bfi	r3, r2, #5, #2
 800a116:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.ObjPos = 0; /*  does not matter for Discover Identity */
 800a118:	7b7b      	ldrb	r3, [r7, #13]
 800a11a:	f36f 0302 	bfc	r3, #0, #3
 800a11e:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating discovery */
 800a120:	7b3b      	ldrb	r3, [r7, #12]
 800a122:	f36f 1387 	bfc	r3, #6, #2
 800a126:	733b      	strb	r3, [r7, #12]
    vdmh.SVDM.Command = DISCOVER_IDENTITY; /*  discover identity command! */
 800a128:	7b3b      	ldrb	r3, [r7, #12]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f362 0304 	bfi	r3, r2, #0, #5
 800a130:	733b      	strb	r3, [r7, #12]
    arr[0] = vdmh.object;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	60bb      	str	r3, [r7, #8]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800a136:	f107 0208 	add.w	r2, r7, #8
 800a13a:	78f9      	ldrb	r1, [r7, #3]
 800a13c:	7cfb      	ldrb	r3, [r7, #19]
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f001 fb01 	bl	800b74a <SendVdmMessageWithTimeout>
 800a148:	e048      	b.n	800a1dc <RequestDiscoverIdentity+0x124>
  }
  /*  Allow cable discovery in special earlier states */
  else if ((sop == SOP_TYPE_SOP1) &&
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d143      	bne.n	800a1d8 <RequestDiscoverIdentity+0x120>
           ((port->policy_state_ == PE_SRC_Startup) ||
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  else if ((sop == SOP_TYPE_SOP1) &&
 800a156:	2b00      	cmp	r3, #0
 800a158:	d009      	beq.n	800a16e <RequestDiscoverIdentity+0xb6>
            (port->policy_state_ == PE_SRC_Discovery) ||
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
           ((port->policy_state_ == PE_SRC_Startup) ||
 800a160:	2b01      	cmp	r3, #1
 800a162:	d004      	beq.n	800a16e <RequestDiscoverIdentity+0xb6>
            (port->policy_state_ == PE_SRC_Send_Capabilities))) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
            (port->policy_state_ == PE_SRC_Discovery) ||
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d134      	bne.n	800a1d8 <RequestDiscoverIdentity+0x120>
    port->original_policy_state_ = port->policy_state_;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_SRC_VDM_Identity_Request;
 800a17a:	2396      	movs	r3, #150	; 0x96
 800a17c:	74fb      	strb	r3, [r7, #19]
    vdmh.SVDM.SVID = PD_SID; /*  PD SID used for Discover Identity command */
 800a17e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800a182:	81fb      	strh	r3, [r7, #14]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800a184:	7b7b      	ldrb	r3, [r7, #13]
 800a186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18a:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fce7 	bl	8009b64 <CurrentSVDMVersion>
 800a196:	4603      	mov	r3, r0
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	7b7b      	ldrb	r3, [r7, #13]
 800a1a0:	f362 1346 	bfi	r3, r2, #5, #2
 800a1a4:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.ObjPos = 0; /*  does not matter for Discover Identity */
 800a1a6:	7b7b      	ldrb	r3, [r7, #13]
 800a1a8:	f36f 0302 	bfc	r3, #0, #3
 800a1ac:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating discovery */
 800a1ae:	7b3b      	ldrb	r3, [r7, #12]
 800a1b0:	f36f 1387 	bfc	r3, #6, #2
 800a1b4:	733b      	strb	r3, [r7, #12]
    vdmh.SVDM.Command = DISCOVER_IDENTITY; /*  discover identity command! */
 800a1b6:	7b3b      	ldrb	r3, [r7, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f362 0304 	bfi	r3, r2, #0, #5
 800a1be:	733b      	strb	r3, [r7, #12]
    arr[0] = vdmh.object;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	60bb      	str	r3, [r7, #8]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800a1c4:	f107 0208 	add.w	r2, r7, #8
 800a1c8:	78f9      	ldrb	r1, [r7, #3]
 800a1ca:	7cfb      	ldrb	r3, [r7, #19]
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 faba 	bl	800b74a <SendVdmMessageWithTimeout>
 800a1d6:	e001      	b.n	800a1dc <RequestDiscoverIdentity+0x124>
  }
  else {
    return 1;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e000      	b.n	800a1de <RequestDiscoverIdentity+0x126>
  }
  return 0;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <RequestDiscoverSvids>:

FSC_S32 RequestDiscoverSvids(struct Port *port, SopType sop)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b088      	sub	sp, #32
 800a1ea:	af02      	add	r7, sp, #8
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  doDataObject_t vdmh = {0};
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
  FSC_U32 length = VDM_ARRAY_LEN;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[VDM_ARRAY_LEN];
  PolicyState_t n_pe;

  if ((port->policy_state_ != PE_SNK_Ready) &&
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a200:	2b13      	cmp	r3, #19
 800a202:	d006      	beq.n	800a212 <RequestDiscoverSvids+0x2c>
      (port->policy_state_ != PE_SRC_Ready)) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ != PE_SNK_Ready) &&
 800a20a:	2b05      	cmp	r3, #5
 800a20c:	d001      	beq.n	800a212 <RequestDiscoverSvids+0x2c>
    return 1;
 800a20e:	2301      	movs	r3, #1
 800a210:	e034      	b.n	800a27c <RequestDiscoverSvids+0x96>
  }
  else {
    port->original_policy_state_ = port->policy_state_;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_INIT_VDM_SVIDs_Request;
 800a21e:	2374      	movs	r3, #116	; 0x74
 800a220:	74fb      	strb	r3, [r7, #19]
    vdmh.SVDM.SVID = PD_SID; /*  PD SID to be used for Discover SVIDs command */
 800a222:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800a226:	81fb      	strh	r3, [r7, #14]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800a228:	7b7b      	ldrb	r3, [r7, #13]
 800a22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22e:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fc95 	bl	8009b64 <CurrentSVDMVersion>
 800a23a:	4603      	mov	r3, r0
 800a23c:	f003 0303 	and.w	r3, r3, #3
 800a240:	b2da      	uxtb	r2, r3
 800a242:	7b7b      	ldrb	r3, [r7, #13]
 800a244:	f362 1346 	bfi	r3, r2, #5, #2
 800a248:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.ObjPos = 0; /*  does not matter for Discover SVIDs */
 800a24a:	7b7b      	ldrb	r3, [r7, #13]
 800a24c:	f36f 0302 	bfc	r3, #0, #3
 800a250:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating discovery */
 800a252:	7b3b      	ldrb	r3, [r7, #12]
 800a254:	f36f 1387 	bfc	r3, #6, #2
 800a258:	733b      	strb	r3, [r7, #12]
    vdmh.SVDM.Command = DISCOVER_SVIDS; /*  Discover SVIDs command! */
 800a25a:	7b3b      	ldrb	r3, [r7, #12]
 800a25c:	2202      	movs	r2, #2
 800a25e:	f362 0304 	bfi	r3, r2, #0, #5
 800a262:	733b      	strb	r3, [r7, #12]
    arr[0] = vdmh.object;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	60bb      	str	r3, [r7, #8]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800a268:	f107 0208 	add.w	r2, r7, #8
 800a26c:	78f9      	ldrb	r1, [r7, #3]
 800a26e:	7cfb      	ldrb	r3, [r7, #19]
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 fa68 	bl	800b74a <SendVdmMessageWithTimeout>
  }
  return 0;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <RequestDiscoverModes>:

FSC_S32 RequestDiscoverModes(struct Port *port, SopType sop, FSC_U16 svid)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af02      	add	r7, sp, #8
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70fb      	strb	r3, [r7, #3]
 800a290:	4613      	mov	r3, r2
 800a292:	803b      	strh	r3, [r7, #0]
  doDataObject_t vdmh = {0};
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]
  FSC_U32 length = VDM_ARRAY_LEN;
 800a298:	2301      	movs	r3, #1
 800a29a:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[VDM_ARRAY_LEN] = {0};
 800a29c:	2300      	movs	r3, #0
 800a29e:	60bb      	str	r3, [r7, #8]
  PolicyState_t n_pe;

  if ((port->policy_state_ != PE_SNK_Ready) &&
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a2a6:	2b13      	cmp	r3, #19
 800a2a8:	d006      	beq.n	800a2b8 <RequestDiscoverModes+0x34>
      (port->policy_state_ != PE_SRC_Ready)) {
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ != PE_SNK_Ready) &&
 800a2b0:	2b05      	cmp	r3, #5
 800a2b2:	d001      	beq.n	800a2b8 <RequestDiscoverModes+0x34>
    return 1;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e033      	b.n	800a320 <RequestDiscoverModes+0x9c>
  }
  else {
    port->original_policy_state_ = port->policy_state_;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_INIT_VDM_Modes_Request;
 800a2c4:	2377      	movs	r3, #119	; 0x77
 800a2c6:	74fb      	strb	r3, [r7, #19]
    vdmh.SVDM.SVID = svid; /*  Use the SVID that was discovered */
 800a2c8:	883b      	ldrh	r3, [r7, #0]
 800a2ca:	81fb      	strh	r3, [r7, #14]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800a2cc:	7b7b      	ldrb	r3, [r7, #13]
 800a2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d2:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7ff fc43 	bl	8009b64 <CurrentSVDMVersion>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	f003 0303 	and.w	r3, r3, #3
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	7b7b      	ldrb	r3, [r7, #13]
 800a2e8:	f362 1346 	bfi	r3, r2, #5, #2
 800a2ec:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.ObjPos = 0; /*  does not matter for Discover Modes */
 800a2ee:	7b7b      	ldrb	r3, [r7, #13]
 800a2f0:	f36f 0302 	bfc	r3, #0, #3
 800a2f4:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating discovery */
 800a2f6:	7b3b      	ldrb	r3, [r7, #12]
 800a2f8:	f36f 1387 	bfc	r3, #6, #2
 800a2fc:	733b      	strb	r3, [r7, #12]
    vdmh.SVDM.Command = DISCOVER_MODES; /*  Discover MODES command! */
 800a2fe:	7b3b      	ldrb	r3, [r7, #12]
 800a300:	2203      	movs	r2, #3
 800a302:	f362 0304 	bfi	r3, r2, #0, #5
 800a306:	733b      	strb	r3, [r7, #12]
    arr[0] = vdmh.object;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	60bb      	str	r3, [r7, #8]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800a30c:	f107 0208 	add.w	r2, r7, #8
 800a310:	78f9      	ldrb	r1, [r7, #3]
 800a312:	7cfb      	ldrb	r3, [r7, #19]
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fa16 	bl	800b74a <SendVdmMessageWithTimeout>
  }
  return 0;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <RequestEnterMode>:
  return 0;
}

FSC_S32 RequestEnterMode(struct Port *port, SopType sop, FSC_U16 svid,
                         FSC_U32 mode_index)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08a      	sub	sp, #40	; 0x28
 800a32c:	af02      	add	r7, sp, #8
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	607b      	str	r3, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	72fb      	strb	r3, [r7, #11]
 800a336:	4613      	mov	r3, r2
 800a338:	813b      	strh	r3, [r7, #8]
  doDataObject_t vdmh = {0};
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]
  FSC_U32 length = VDM_ARRAY_LEN;
 800a33e:	2301      	movs	r3, #1
 800a340:	61fb      	str	r3, [r7, #28]
  FSC_U32 arr[VDM_ARRAY_LEN];
  PolicyState_t n_pe;

  if ((port->policy_state_ != PE_SNK_Ready) &&
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a348:	2b13      	cmp	r3, #19
 800a34a:	d006      	beq.n	800a35a <RequestEnterMode+0x32>
      (port->policy_state_ != PE_SRC_Ready)) {
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ != PE_SNK_Ready) &&
 800a352:	2b05      	cmp	r3, #5
 800a354:	d001      	beq.n	800a35a <RequestEnterMode+0x32>
    return 1;
 800a356:	2301      	movs	r3, #1
 800a358:	e037      	b.n	800a3ca <RequestEnterMode+0xa2>
  }
  else {
    port->original_policy_state_ = port->policy_state_;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_DFP_VDM_Mode_Entry_Request;
 800a366:	2385      	movs	r3, #133	; 0x85
 800a368:	76fb      	strb	r3, [r7, #27]
    vdmh.SVDM.SVID = svid; /*  Use SVID specified upon function call */
 800a36a:	893b      	ldrh	r3, [r7, #8]
 800a36c:	82fb      	strh	r3, [r7, #22]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800a36e:	7d7b      	ldrb	r3, [r7, #21]
 800a370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a374:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800a376:	7afb      	ldrb	r3, [r7, #11]
 800a378:	4619      	mov	r1, r3
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7ff fbf2 	bl	8009b64 <CurrentSVDMVersion>
 800a380:	4603      	mov	r3, r0
 800a382:	f003 0303 	and.w	r3, r3, #3
 800a386:	b2da      	uxtb	r2, r3
 800a388:	7d7b      	ldrb	r3, [r7, #21]
 800a38a:	f362 1346 	bfi	r3, r2, #5, #2
 800a38e:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.ObjPos = mode_index; /*  select mode */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	b2da      	uxtb	r2, r3
 800a398:	7d7b      	ldrb	r3, [r7, #21]
 800a39a:	f362 0302 	bfi	r3, r2, #0, #3
 800a39e:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating mode entering */
 800a3a0:	7d3b      	ldrb	r3, [r7, #20]
 800a3a2:	f36f 1387 	bfc	r3, #6, #2
 800a3a6:	753b      	strb	r3, [r7, #20]
    vdmh.SVDM.Command = ENTER_MODE; /*  Enter Mode command! */
 800a3a8:	7d3b      	ldrb	r3, [r7, #20]
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	f362 0304 	bfi	r3, r2, #0, #5
 800a3b0:	753b      	strb	r3, [r7, #20]
    arr[0] = vdmh.object;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	613b      	str	r3, [r7, #16]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800a3b6:	f107 0210 	add.w	r2, r7, #16
 800a3ba:	7af9      	ldrb	r1, [r7, #11]
 800a3bc:	7efb      	ldrb	r3, [r7, #27]
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f001 f9c1 	bl	800b74a <SendVdmMessageWithTimeout>
  }
  return 0;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3720      	adds	r7, #32
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <RequestExitMode>:

FSC_S32 RequestExitMode(struct Port *port, SopType sop, FSC_U16 svid,
                        FSC_U32 mode_index)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b08a      	sub	sp, #40	; 0x28
 800a3d6:	af02      	add	r7, sp, #8
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	72fb      	strb	r3, [r7, #11]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	813b      	strh	r3, [r7, #8]
  doDataObject_t vdmh = {0};
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]
  FSC_U32 length = VDM_ARRAY_LEN;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	61fb      	str	r3, [r7, #28]
  FSC_U32 arr[VDM_ARRAY_LEN];
  PolicyState_t n_pe;

  if ((port->policy_state_ != PE_SNK_Ready) &&
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a3f2:	2b13      	cmp	r3, #19
 800a3f4:	d006      	beq.n	800a404 <RequestExitMode+0x32>
      (port->policy_state_ != PE_SRC_Ready)) {
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ != PE_SNK_Ready) &&
 800a3fc:	2b05      	cmp	r3, #5
 800a3fe:	d001      	beq.n	800a404 <RequestExitMode+0x32>
    return 1;
 800a400:	2301      	movs	r3, #1
 800a402:	e037      	b.n	800a474 <RequestExitMode+0xa2>
  }
  else {
    port->original_policy_state_ = port->policy_state_;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_DFP_VDM_Mode_Exit_Request;
 800a410:	2388      	movs	r3, #136	; 0x88
 800a412:	76fb      	strb	r3, [r7, #27]
    vdmh.SVDM.SVID = svid; /*  Use SVID specified upon function call */
 800a414:	893b      	ldrh	r3, [r7, #8]
 800a416:	82fb      	strh	r3, [r7, #22]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800a418:	7d7b      	ldrb	r3, [r7, #21]
 800a41a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a41e:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	4619      	mov	r1, r3
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f7ff fb9d 	bl	8009b64 <CurrentSVDMVersion>
 800a42a:	4603      	mov	r3, r0
 800a42c:	f003 0303 	and.w	r3, r3, #3
 800a430:	b2da      	uxtb	r2, r3
 800a432:	7d7b      	ldrb	r3, [r7, #21]
 800a434:	f362 1346 	bfi	r3, r2, #5, #2
 800a438:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.ObjPos = mode_index; /*  select mode */
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	b2da      	uxtb	r2, r3
 800a442:	7d7b      	ldrb	r3, [r7, #21]
 800a444:	f362 0302 	bfi	r3, r2, #0, #3
 800a448:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating mode entering */
 800a44a:	7d3b      	ldrb	r3, [r7, #20]
 800a44c:	f36f 1387 	bfc	r3, #6, #2
 800a450:	753b      	strb	r3, [r7, #20]
    vdmh.SVDM.Command = EXIT_MODE; /*  Exit Mode command! */
 800a452:	7d3b      	ldrb	r3, [r7, #20]
 800a454:	2205      	movs	r2, #5
 800a456:	f362 0304 	bfi	r3, r2, #0, #5
 800a45a:	753b      	strb	r3, [r7, #20]
    arr[0] = vdmh.object;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	613b      	str	r3, [r7, #16]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800a460:	f107 0210 	add.w	r2, r7, #16
 800a464:	7af9      	ldrb	r1, [r7, #11]
 800a466:	7efb      	ldrb	r3, [r7, #27]
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f001 f96c 	bl	800b74a <SendVdmMessageWithTimeout>
  }
  return 0;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3720      	adds	r7, #32
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <ProcessVdmMessage>:

/*  Receiving end VDM functionality */
FSC_S32 ProcessVdmMessage(struct Port *port, FSC_U32* arr_in, FSC_U32 length_in)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
  doDataObject_t vdmh_in = {0};
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]

  vdmh_in.object = arr_in[0];
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	617b      	str	r3, [r7, #20]

  if (vdmh_in.SVDM.VDMType == STRUCTURED_VDM) {
 800a492:	7d7b      	ldrb	r3, [r7, #21]
 800a494:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d05c      	beq.n	800a558 <ProcessVdmMessage+0xdc>
      }

      return 0;
    }

    switch (vdmh_in.SVDM.Command) {
 800a49e:	7d3b      	ldrb	r3, [r7, #20]
 800a4a0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	2b05      	cmp	r3, #5
 800a4aa:	d84b      	bhi.n	800a544 <ProcessVdmMessage+0xc8>
 800a4ac:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <ProcessVdmMessage+0x38>)
 800a4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b2:	bf00      	nop
 800a4b4:	0800a4cd 	.word	0x0800a4cd
 800a4b8:	0800a4e1 	.word	0x0800a4e1
 800a4bc:	0800a4f5 	.word	0x0800a4f5
 800a4c0:	0800a509 	.word	0x0800a509
 800a4c4:	0800a51d 	.word	0x0800a51d
 800a4c8:	0800a531 	.word	0x0800a531
      case DISCOVER_IDENTITY:
        return ProcessDiscoverIdentity(port, port->protocol_msg_rx_sop_,
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 f89a 	bl	800a610 <ProcessDiscoverIdentity>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	e04f      	b.n	800a580 <ProcessVdmMessage+0x104>
                                       arr_in, length_in);
      case DISCOVER_SVIDS:
        return ProcessDiscoverSvids(port, port->protocol_msg_rx_sop_,
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fb04 	bl	800aaf8 <ProcessDiscoverSvids>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	e045      	b.n	800a580 <ProcessVdmMessage+0x104>
                                    arr_in, length_in);
      case DISCOVER_MODES:
        return ProcessDiscoverModes(port, port->protocol_msg_rx_sop_,
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 fccf 	bl	800aea2 <ProcessDiscoverModes>
 800a504:	4603      	mov	r3, r0
 800a506:	e03b      	b.n	800a580 <ProcessVdmMessage+0x104>
                                    arr_in, length_in);
      case ENTER_MODE:
        return ProcessEnterMode(port, port->protocol_msg_rx_sop_, arr_in,
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 fe21 	bl	800b15a <ProcessEnterMode>
 800a518:	4603      	mov	r3, r0
 800a51a:	e031      	b.n	800a580 <ProcessVdmMessage+0x104>
                                length_in);
      case EXIT_MODE:
        return ProcessExitMode(port, port->protocol_msg_rx_sop_, arr_in,
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 ff16 	bl	800b358 <ProcessExitMode>
 800a52c:	4603      	mov	r3, r0
 800a52e:	e027      	b.n	800a580 <ProcessVdmMessage+0x104>
                               length_in);
      case ATTENTION:
        return ProcessAttention(port, port->protocol_msg_rx_sop_, arr_in,
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f001 f820 	bl	800b580 <ProcessAttention>
 800a540:	4603      	mov	r3, r0
 800a542:	e01d      	b.n	800a580 <ProcessVdmMessage+0x104>
                                length_in);
      default:
        /*  SVID-Specific commands go here */
        return ProcessSvidSpecific(port, port->protocol_msg_rx_sop_, arr_in,
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f001 f84c 	bl	800b5ec <ProcessSvidSpecific>
 800a554:	4603      	mov	r3, r0
 800a556:	e013      	b.n	800a580 <ProcessVdmMessage+0x104>
    }
  }
  else {
      /* TODO: Unstructured messages */
      /* Unstructured VDM's not supported at this time */
      if (DPM_CurrentSpecRev(port, SOP_TYPE_SOP) == PDSpecRev3p0)
 800a558:	2100      	movs	r1, #0
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7f9 fcf6 	bl	8003f4c <DPM_CurrentSpecRev>
 800a560:	4603      	mov	r3, r0
 800a562:	2b02      	cmp	r3, #2
 800a564:	d10b      	bne.n	800a57e <ProcessVdmMessage+0x102>
      {
          /* Not supported in PD3.0, ignored in PD2.0 */
          set_policy_state(port, port->policy_is_source_ == TRUE ?
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d101      	bne.n	800a574 <ProcessVdmMessage+0xf8>
 800a570:	231c      	movs	r3, #28
 800a572:	e000      	b.n	800a576 <ProcessVdmMessage+0xfa>
 800a574:	231f      	movs	r3, #31
 800a576:	4619      	mov	r1, r3
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f7fd fe35 	bl	80081e8 <set_policy_state>
              PE_SRC_Send_Not_Supported : PE_SNK_Send_Not_Supported);
      }

    return 1;
 800a57e:	2301      	movs	r3, #1
  }
}
 800a580:	4618      	mov	r0, r3
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <evalResponseToSopVdm>:

/**
 * Determine message applicability or whether to a response is required
 */
FSC_BOOL evalResponseToSopVdm(struct Port *port, doDataObject_t vdm_hdr)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
    FSC_BOOL response = TRUE;
 800a592:	2301      	movs	r3, #1
 800a594:	73fb      	strb	r3, [r7, #15]
    if (port->policy_is_dfp_ == TRUE && !Responds_To_Discov_SOP_DFP) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d102      	bne.n	800a5a6 <evalResponseToSopVdm+0x1e>
      response = FALSE;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]
 800a5a4:	e01a      	b.n	800a5dc <evalResponseToSopVdm+0x54>
    }
    else if (port->policy_is_dfp_ == FALSE && !Responds_To_Discov_SOP_UFP) {
      response = FALSE;
    }
    else if (DPM_CurrentSpecRev(port, SOP_TYPE_SOP) < PDSpecRev3p0 &&
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7f9 fccf 	bl	8003f4c <DPM_CurrentSpecRev>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d807      	bhi.n	800a5c4 <evalResponseToSopVdm+0x3c>
             port->policy_is_dfp_ == TRUE) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
    else if (DPM_CurrentSpecRev(port, SOP_TYPE_SOP) < PDSpecRev3p0 &&
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d102      	bne.n	800a5c4 <evalResponseToSopVdm+0x3c>
      /* See message applicability */
      response = FALSE;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]
 800a5c2:	e00b      	b.n	800a5dc <evalResponseToSopVdm+0x54>
    }
    else if (!(port->policy_state_ == PE_SRC_Ready ||
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a5ca:	2b05      	cmp	r3, #5
 800a5cc:	d006      	beq.n	800a5dc <evalResponseToSopVdm+0x54>
               port->policy_state_ == PE_SNK_Ready)) {
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    else if (!(port->policy_state_ == PE_SRC_Ready ||
 800a5d4:	2b13      	cmp	r3, #19
 800a5d6:	d001      	beq.n	800a5dc <evalResponseToSopVdm+0x54>
        /* Neither sink ready or source ready state */
      response = FALSE;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73fb      	strb	r3, [r7, #15]
    }
    return response;
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <evalResponseToCblVdm>:

/**
 * Determine message applicability or whether to a response is required
 */
FSC_BOOL evalResponseToCblVdm(struct Port *port, doDataObject_t vdm_hdr)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b085      	sub	sp, #20
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
    FSC_BOOL response = TRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	73fb      	strb	r3, [r7, #15]
    if (port->policy_state_ != PE_CBL_Ready) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a5fa:	2b99      	cmp	r3, #153	; 0x99
 800a5fc:	d001      	beq.n	800a602 <evalResponseToCblVdm+0x1c>
        response = FALSE;
 800a5fe:	2300      	movs	r3, #0
 800a600:	73fb      	strb	r3, [r7, #15]
    }
    return response;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <ProcessDiscoverIdentity>:

FSC_S32 ProcessDiscoverIdentity(struct Port *port, SopType sop, FSC_U32* arr_in,
                                FSC_U32 length_in)
{
 800a610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a612:	b0ab      	sub	sp, #172	; 0xac
 800a614:	af06      	add	r7, sp, #24
 800a616:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a618:	627a      	str	r2, [r7, #36]	; 0x24
 800a61a:	623b      	str	r3, [r7, #32]
 800a61c:	460b      	mov	r3, r1
 800a61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  doDataObject_t vdmh_in = {0};
 800a622:	2300      	movs	r3, #0
 800a624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  doDataObject_t vdmh_out = {0};
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  IdHeader idh;
  CertStatVdo csvdo;
  Identity id;
  ProductVdo pvdo;
  FSC_U32 arr[7] = {0};
 800a62e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	605a      	str	r2, [r3, #4]
 800a638:	609a      	str	r2, [r3, #8]
 800a63a:	60da      	str	r2, [r3, #12]
 800a63c:	611a      	str	r2, [r3, #16]
 800a63e:	615a      	str	r2, [r3, #20]
 800a640:	619a      	str	r2, [r3, #24]
  FSC_U32 length;
  FSC_BOOL result;

  vdmh_in.object = arr_in[0];
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /*  Must NAK or not respond to Discover ID with wrong SVID */
  if (vdmh_in.SVDM.SVID != PD_SID) return -1;
 800a64a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a64e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800a652:	d002      	beq.n	800a65a <ProcessDiscoverIdentity+0x4a>
 800a654:	f04f 33ff 	mov.w	r3, #4294967295
 800a658:	e24a      	b.n	800aaf0 <ProcessDiscoverIdentity+0x4e0>

  id.nack = TRUE;
 800a65a:	2301      	movs	r3, #1
 800a65c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (vdmh_in.SVDM.CommandType == INITIATOR) {
 800a660:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800a664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f040 811c 	bne.w	800a8a8 <ProcessDiscoverIdentity+0x298>
    port->original_policy_state_ = port->policy_state_;
 800a670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a672:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800a67c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a680:	2b00      	cmp	r3, #0
 800a682:	d11f      	bne.n	800a6c4 <ProcessDiscoverIdentity+0xb4>
      if (evalResponseToSopVdm(port, vdmh_in)) {
 800a684:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a68a:	f7ff ff7d 	bl	800a588 <evalResponseToSopVdm>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d007      	beq.n	800a6a4 <ProcessDiscoverIdentity+0x94>
        id = VdmRequestIdentityInfo(port, sop);
 800a694:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a698:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a69c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 fa6e 	bl	800bb80 <VdmRequestIdentityInfo>
      }
      set_policy_state(port, PE_RESP_VDM_Get_Identity);
 800a6a4:	217b      	movs	r1, #123	; 0x7b
 800a6a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6a8:	f7fd fd9e 	bl	80081e8 <set_policy_state>
      set_policy_state(port, id.nack ? PE_RESP_VDM_Get_Identity_NAK :
 800a6ac:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <ProcessDiscoverIdentity+0xa8>
 800a6b4:	237d      	movs	r3, #125	; 0x7d
 800a6b6:	e000      	b.n	800a6ba <ProcessDiscoverIdentity+0xaa>
 800a6b8:	237c      	movs	r3, #124	; 0x7c
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6be:	f7fd fd93 	bl	80081e8 <set_policy_state>
 800a6c2:	e02a      	b.n	800a71a <ProcessDiscoverIdentity+0x10a>
                                       PE_RESP_VDM_Send_Identity);
    } else if (sop == SOP_TYPE_SOP1) {
 800a6c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d126      	bne.n	800a71a <ProcessDiscoverIdentity+0x10a>
      if(evalResponseToCblVdm(port, vdmh_in)) {
 800a6cc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a6d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6d2:	f7ff ff88 	bl	800a5e6 <evalResponseToCblVdm>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00f      	beq.n	800a6fc <ProcessDiscoverIdentity+0xec>
        id = VdmRequestIdentityInfo(port, sop);
 800a6dc:	463b      	mov	r3, r7
 800a6de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a6e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f001 fa4b 	bl	800bb80 <VdmRequestIdentityInfo>
 800a6ea:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800a6ee:	463d      	mov	r5, r7
 800a6f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a6f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      }
      set_policy_state(port, PE_RESP_VDM_Get_Identity);
 800a6fc:	217b      	movs	r1, #123	; 0x7b
 800a6fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a700:	f7fd fd72 	bl	80081e8 <set_policy_state>
      set_policy_state(port, id.nack ? PE_RESP_VDM_Get_Identity_NAK :
 800a704:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <ProcessDiscoverIdentity+0x100>
 800a70c:	237d      	movs	r3, #125	; 0x7d
 800a70e:	e000      	b.n	800a712 <ProcessDiscoverIdentity+0x102>
 800a710:	237c      	movs	r3, #124	; 0x7c
 800a712:	4619      	mov	r1, r3
 800a714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a716:	f7fd fd67 	bl	80081e8 <set_policy_state>
                                       PE_RESP_VDM_Send_Identity);
    }

    vdmh_out.SVDM.SVID = PD_SID; /* Use PS_SID for DiscId, even on response */
 800a71a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800a71e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    vdmh_out.SVDM.VDMType = STRUCTURED_VDM; /* DiscId is Structured */
 800a722:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800a726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a72a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800a72e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a732:	4619      	mov	r1, r3
 800a734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a736:	f7ff fa15 	bl	8009b64 <CurrentSVDMVersion>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f003 0303 	and.w	r3, r3, #3
 800a740:	b2da      	uxtb	r2, r3
 800a742:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800a746:	f362 1346 	bfi	r3, r2, #5, #2
 800a74a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    vdmh_out.SVDM.ObjPos = 0; /*  doesn't matter for Discover Identity */
 800a74e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800a752:	f36f 0302 	bfc	r3, #0, #3
 800a756:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    vdmh_out.SVDM.CommandType = id.nack ? RESPONDER_NAK : RESPONDER_ACK;
 800a75a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <ProcessDiscoverIdentity+0x156>
 800a762:	2202      	movs	r2, #2
 800a764:	e000      	b.n	800a768 <ProcessDiscoverIdentity+0x158>
 800a766:	2201      	movs	r2, #1
 800a768:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800a76c:	f362 1387 	bfi	r3, r2, #6, #2
 800a770:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
    vdmh_out.SVDM.Command = DISCOVER_IDENTITY; /*  Reply with same command */
 800a774:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800a778:	2201      	movs	r2, #1
 800a77a:	f362 0304 	bfi	r3, r2, #0, #5
 800a77e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
    arr[0] = vdmh_out.object;
 800a782:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
    length = 1;
 800a788:	2301      	movs	r3, #1
 800a78a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* TODO: Optimize the nack and ack from here. */
    if (id.nack == FALSE) {
 800a78e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d179      	bne.n	800a88a <ProcessDiscoverIdentity+0x27a>
      /*  put capabilities into ID Header */
      idh = id.id_header;
 800a796:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a79a:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 800a79e:	6810      	ldr	r0, [r2, #0]
 800a7a0:	6018      	str	r0, [r3, #0]

      /*  put test ID into Cert Stat VDO Object */
      csvdo = id.cert_stat_vdo;
 800a7a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7a4:	67bb      	str	r3, [r7, #120]	; 0x78

      arr[1] = getBitsForIdHeader(idh);
 800a7a6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a7a8:	f001 fcfe 	bl	800c1a8 <getBitsForIdHeader>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	643b      	str	r3, [r7, #64]	; 0x40
      length++;
 800a7b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      arr[2] = getBitsForCertStatVdo(csvdo);
 800a7ba:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a7bc:	f001 fe90 	bl	800c4e0 <getBitsForCertStatVdo>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	647b      	str	r3, [r7, #68]	; 0x44
      length++;
 800a7c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

      /*  Product VDO should be sent for all */
      pvdo = id.product_vdo;
 800a7ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a7d2:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 800a7d6:	6810      	ldr	r0, [r2, #0]
 800a7d8:	6018      	str	r0, [r3, #0]
      arr[length] = getBitsForProductVdo(pvdo);
 800a7da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7dc:	f001 fe64 	bl	800c4a8 <getBitsForProductVdo>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800a7ec:	440b      	add	r3, r1
 800a7ee:	f843 2c54 	str.w	r2, [r3, #-84]
      length++;
 800a7f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

      /* Cable VDO should be sent when we are a Passive Cable or Active Cable */
      if ((idh.product_type_ufp == PASSIVE_CABLE) ||
 800a7fc:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800a800:	f003 031c 	and.w	r3, r3, #28
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b0c      	cmp	r3, #12
 800a808:	d006      	beq.n	800a818 <ProcessDiscoverIdentity+0x208>
          (idh.product_type_ufp == ACTIVE_CABLE)) {
 800a80a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800a80e:	f003 031c 	and.w	r3, r3, #28
 800a812:	b2db      	uxtb	r3, r3
      if ((idh.product_type_ufp == PASSIVE_CABLE) ||
 800a814:	2b10      	cmp	r3, #16
 800a816:	d116      	bne.n	800a846 <ProcessDiscoverIdentity+0x236>
        CableVdo cvdo_out;
        cvdo_out = id.cable_vdo;
 800a818:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a81c:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 800a820:	6810      	ldr	r0, [r2, #0]
 800a822:	6018      	str	r0, [r3, #0]
        arr[length] = getBitsForCableVdo(cvdo_out);
 800a824:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a826:	f001 fe72 	bl	800c50e <getBitsForCableVdo>
 800a82a:	4602      	mov	r2, r0
 800a82c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800a836:	440b      	add	r3, r1
 800a838:	f843 2c54 	str.w	r2, [r3, #-84]
        length++;
 800a83c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a840:	3301      	adds	r3, #1
 800a842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      }

      /*  AMA VDO should be sent when we are an AMA! */
      if (idh.product_type_ufp == AMA) {
 800a846:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800a84a:	f003 031c 	and.w	r3, r3, #28
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b14      	cmp	r3, #20
 800a852:	d11a      	bne.n	800a88a <ProcessDiscoverIdentity+0x27a>
        AmaVdo amavdo_out;
        amavdo_out = id.ama_vdo;
 800a854:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a858:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800a85c:	6812      	ldr	r2, [r2, #0]
 800a85e:	4611      	mov	r1, r2
 800a860:	8019      	strh	r1, [r3, #0]
 800a862:	3302      	adds	r3, #2
 800a864:	0c12      	lsrs	r2, r2, #16
 800a866:	701a      	strb	r2, [r3, #0]

        arr[length] = getBitsForAmaVdo(amavdo_out);
 800a868:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a86a:	f001 feea 	bl	800c642 <getBitsForAmaVdo>
 800a86e:	4602      	mov	r2, r0
 800a870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800a87a:	440b      	add	r3, r1
 800a87c:	f843 2c54 	str.w	r2, [r3, #-84]
        length++;
 800a880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a884:	3301      	adds	r3, #1
 800a886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      }
    }

    SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800a890:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a894:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a89e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8a0:	f000 ff0e 	bl	800b6c0 <SendVdmMessage>
    return 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	e123      	b.n	800aaf0 <ProcessDiscoverIdentity+0x4e0>
  }
  else {
    if ((port->policy_state_ != PE_INIT_PORT_VDM_Identity_Request) &&
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a8ae:	2b71      	cmp	r3, #113	; 0x71
 800a8b0:	d006      	beq.n	800a8c0 <ProcessDiscoverIdentity+0x2b0>
        (port->policy_state_ != PE_SRC_VDM_Identity_Request)) {
 800a8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b4:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    if ((port->policy_state_ != PE_INIT_PORT_VDM_Identity_Request) &&
 800a8b8:	2b96      	cmp	r3, #150	; 0x96
 800a8ba:	d001      	beq.n	800a8c0 <ProcessDiscoverIdentity+0x2b0>
      /* Prevent random discover identity ack/nak message through */
      return 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e117      	b.n	800aaf0 <ProcessDiscoverIdentity+0x4e0>
    }

    if (port->policy_state_ == PE_INIT_PORT_VDM_Identity_Request) {
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a8c6:	2b71      	cmp	r3, #113	; 0x71
 800a8c8:	d118      	bne.n	800a8fc <ProcessDiscoverIdentity+0x2ec>
      if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800a8ca:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800a8ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b40      	cmp	r3, #64	; 0x40
 800a8d6:	d104      	bne.n	800a8e2 <ProcessDiscoverIdentity+0x2d2>
        set_policy_state(port, PE_INIT_PORT_VDM_Identity_ACKed);
 800a8d8:	2172      	movs	r1, #114	; 0x72
 800a8da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8dc:	f7fd fc84 	bl	80081e8 <set_policy_state>
 800a8e0:	e029      	b.n	800a936 <ProcessDiscoverIdentity+0x326>
      }
      else {
        set_policy_state(port, PE_INIT_PORT_VDM_Identity_NAKed);
 800a8e2:	2173      	movs	r1, #115	; 0x73
 800a8e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8e6:	f7fd fc7f 	bl	80081e8 <set_policy_state>
        /* Discontinue auto vdm discovery if result is NAK */
        if (sop == SOP_TYPE_SOP) {
 800a8ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d121      	bne.n	800a936 <ProcessDiscoverIdentity+0x326>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	2207      	movs	r2, #7
 800a8f6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800a8fa:	e01c      	b.n	800a936 <ProcessDiscoverIdentity+0x326>
        }
      }
    }
    else if ((port->policy_state_ == PE_SRC_VDM_Identity_Request) &&
 800a8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fe:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a902:	2b96      	cmp	r3, #150	; 0x96
 800a904:	d117      	bne.n	800a936 <ProcessDiscoverIdentity+0x326>
 800a906:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <ProcessDiscoverIdentity+0x306>
             ((sop == SOP_TYPE_SOP) || (sop == SOP_TYPE_SOP1))) {
 800a90e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a912:	2b01      	cmp	r3, #1
 800a914:	d10f      	bne.n	800a936 <ProcessDiscoverIdentity+0x326>
      if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800a916:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800a91a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b40      	cmp	r3, #64	; 0x40
 800a922:	d104      	bne.n	800a92e <ProcessDiscoverIdentity+0x31e>
        set_policy_state(port, PE_SRC_VDM_Identity_ACKed);
 800a924:	2197      	movs	r1, #151	; 0x97
 800a926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a928:	f7fd fc5e 	bl	80081e8 <set_policy_state>
 800a92c:	e003      	b.n	800a936 <ProcessDiscoverIdentity+0x326>
      }
      else {
        set_policy_state(port, PE_SRC_VDM_Identity_NAKed);
 800a92e:	2198      	movs	r1, #152	; 0x98
 800a930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a932:	f7fd fc59 	bl	80081e8 <set_policy_state>
    }
    else {
      /*  TODO: something weird happened. */
    }

    if (sop == SOP_TYPE_SOP1)
 800a936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d115      	bne.n	800a96a <ProcessDiscoverIdentity+0x35a>
    {
      /* Getting ACK/NAK here means that cable responded */
      port->vdm_cbl_present_ = TRUE;
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
      port->vdm_check_cbl_ = FALSE;
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
      /* Check the PD Revision for cable */
      port->dpm_pd_30_srccab_ = (vdmh_in.SVDM.Version == V2P0) ? TRUE : FALSE;
 800a94e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800a952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b20      	cmp	r3, #32
 800a95a:	bf0c      	ite	eq
 800a95c:	2301      	moveq	r3, #1
 800a95e:	2300      	movne	r3, #0
 800a960:	b2db      	uxtb	r3, r3
 800a962:	461a      	mov	r2, r3
 800a964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a966:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
    }

    /* set to true when valid response received */
    result = FALSE;
 800a96a:	2300      	movs	r3, #0
 800a96c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    /*
     * Discover Identity responses should have at least VDM Header, ID Header,
     * and Cert Stat VDO
     */
    if (length_in >= MIN_DISC_ID_RESP_SIZE) {
 800a970:	6a3b      	ldr	r3, [r7, #32]
 800a972:	2b02      	cmp	r3, #2
 800a974:	f240 80a1 	bls.w	800aaba <ProcessDiscoverIdentity+0x4aa>
      if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800a978:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800a97c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b40      	cmp	r3, #64	; 0x40
 800a984:	f040 8099 	bne.w	800aaba <ProcessDiscoverIdentity+0x4aa>
        id.id_header = getIdHeader(arr_in[1]);
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	3304      	adds	r3, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 fbc7 	bl	800c122 <getIdHeader>
 800a994:	4603      	mov	r3, r0
 800a996:	461a      	mov	r2, r3
 800a998:	f8a7 205e 	strh.w	r2, [r7, #94]	; 0x5e
 800a99c:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800a9a0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        id.cert_stat_vdo = getCertStatVdo(arr_in[2]);
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 fc43 	bl	800c236 <getCertStatVdo>
 800a9b0:	6678      	str	r0, [r7, #100]	; 0x64

        if ((id.id_header.product_type_ufp == HUB)
 800a9b2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800a9b6:	f003 031c 	and.w	r3, r3, #28
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d01b      	beq.n	800a9f8 <ProcessDiscoverIdentity+0x3e8>
            || (id.id_header.product_type_ufp == PERIPHERAL)
 800a9c0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800a9c4:	f003 031c 	and.w	r3, r3, #28
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	d014      	beq.n	800a9f8 <ProcessDiscoverIdentity+0x3e8>
            || (id.id_header.product_type_ufp == PASSIVE_CABLE)
 800a9ce:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800a9d2:	f003 031c 	and.w	r3, r3, #28
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b0c      	cmp	r3, #12
 800a9da:	d00d      	beq.n	800a9f8 <ProcessDiscoverIdentity+0x3e8>
            || (id.id_header.product_type_ufp == ACTIVE_CABLE)
 800a9dc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800a9e0:	f003 031c 	and.w	r3, r3, #28
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b10      	cmp	r3, #16
 800a9e8:	d006      	beq.n	800a9f8 <ProcessDiscoverIdentity+0x3e8>
            || (id.id_header.product_type_ufp == AMA)) {
 800a9ea:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800a9ee:	f003 031c 	and.w	r3, r3, #28
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b14      	cmp	r3, #20
 800a9f6:	d110      	bne.n	800aa1a <ProcessDiscoverIdentity+0x40a>
          id.has_product_vdo = TRUE;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
          /*  !!! assuming it is before AMA VDO */
          id.product_vdo = getProductVdo(arr_in[3]);
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	330c      	adds	r3, #12
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f001 fc28 	bl	800c25a <getProductVdo>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	f8a7 206a 	strh.w	r2, [r7, #106]	; 0x6a
 800aa12:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800aa16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        if ((id.id_header.product_type_ufp == PASSIVE_CABLE)
 800aa1a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800aa1e:	f003 031c 	and.w	r3, r3, #28
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b0c      	cmp	r3, #12
 800aa26:	d006      	beq.n	800aa36 <ProcessDiscoverIdentity+0x426>
            || (id.id_header.product_type_ufp == ACTIVE_CABLE)) {
 800aa28:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800aa2c:	f003 031c 	and.w	r3, r3, #28
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b10      	cmp	r3, #16
 800aa34:	d118      	bne.n	800aa68 <ProcessDiscoverIdentity+0x458>
          id.has_cable_vdo = TRUE;
 800aa36:	2301      	movs	r3, #1
 800aa38:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
          id.cable_vdo = getCableVdo(arr_in[4]);
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	3310      	adds	r3, #16
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f001 fc23 	bl	800c28e <getCableVdo>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 800aa50:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800aa54:	f887 2070 	strb.w	r2, [r7, #112]	; 0x70
 800aa58:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800aa5c:	f887 2071 	strb.w	r2, [r7, #113]	; 0x71
 800aa60:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800aa64:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        }

        if ((id.id_header.product_type_ufp == AMA)) {
 800aa68:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800aa6c:	f003 031c 	and.w	r3, r3, #28
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b14      	cmp	r3, #20
 800aa74:	d114      	bne.n	800aaa0 <ProcessDiscoverIdentity+0x490>
          id.has_ama_vdo = TRUE;
 800aa76:	2301      	movs	r3, #1
 800aa78:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
          /*  !!! assuming it is after Product VDO */
          id.ama_vdo = getAmaVdo(arr_in[4]);
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	3310      	adds	r3, #16
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f001 fc99 	bl	800c3ba <getAmaVdo>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f887 2074 	strb.w	r2, [r7, #116]	; 0x74
 800aa90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800aa94:	f887 2075 	strb.w	r2, [r7, #117]	; 0x75
 800aa98:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800aa9c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        }

        port->vdm_expecting_response_ = FALSE;
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
        TimerDisable(&port->vdm_timer_);
 800aaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaaa:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fac8 	bl	8009044 <TimerDisable>
        result = TRUE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
      }
    }

    VdmInformIdentity(port, result, sop, id);
 800aaba:	f897 c02b 	ldrb.w	ip, [r7, #43]	; 0x2b
 800aabe:	f897 608b 	ldrb.w	r6, [r7, #139]	; 0x8b
 800aac2:	466d      	mov	r5, sp
 800aac4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800aac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aacc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aad0:	e885 0003 	stmia.w	r5, {r0, r1}
 800aad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aad6:	4662      	mov	r2, ip
 800aad8:	4631      	mov	r1, r6
 800aada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aadc:	f001 f9f1 	bl	800bec2 <VdmInformIdentity>
    set_policy_state(port, port->original_policy_state_);
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800aae6:	4619      	mov	r1, r3
 800aae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaea:	f7fd fb7d 	bl	80081e8 <set_policy_state>
    return 0;
 800aaee:	2300      	movs	r3, #0
  }
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3794      	adds	r7, #148	; 0x94
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaf8 <ProcessDiscoverSvids>:

FSC_S32 ProcessDiscoverSvids(struct Port *port, SopType sop, FSC_U32* arr_in,
                             FSC_U32 length_in)
{
 800aaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aafa:	b0a9      	sub	sp, #164	; 0xa4
 800aafc:	af08      	add	r7, sp, #32
 800aafe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ab00:	627a      	str	r2, [r7, #36]	; 0x24
 800ab02:	623b      	str	r3, [r7, #32]
 800ab04:	460b      	mov	r3, r1
 800ab06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  doDataObject_t vdmh_in = {0};
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	673b      	str	r3, [r7, #112]	; 0x70
  doDataObject_t vdmh_out = {0};
 800ab0e:	2300      	movs	r3, #0
 800ab10:	66fb      	str	r3, [r7, #108]	; 0x6c
  SvidInfo svid_info;
  FSC_U32 i;
  FSC_U16 top16;
  FSC_U16 bottom16;
  FSC_U32 arr[7] = {0};
 800ab12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab16:	2200      	movs	r2, #0
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	605a      	str	r2, [r3, #4]
 800ab1c:	609a      	str	r2, [r3, #8]
 800ab1e:	60da      	str	r2, [r3, #12]
 800ab20:	611a      	str	r2, [r3, #16]
 800ab22:	615a      	str	r2, [r3, #20]
 800ab24:	619a      	str	r2, [r3, #24]
  FSC_U32 length;

  vdmh_in.object = arr_in[0];
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	673b      	str	r3, [r7, #112]	; 0x70

  /* Must NAK or not respond to Discover SVIDs with wrong SVID */
  if (vdmh_in.SVDM.SVID != PD_SID) return -1;
 800ab2c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800ab30:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800ab34:	d002      	beq.n	800ab3c <ProcessDiscoverSvids+0x44>
 800ab36:	f04f 33ff 	mov.w	r3, #4294967295
 800ab3a:	e1ae      	b.n	800ae9a <ProcessDiscoverSvids+0x3a2>

  svid_info.nack = TRUE;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  if (vdmh_in.SVDM.CommandType == INITIATOR) {
 800ab42:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ab46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f040 8117 	bne.w	800ad80 <ProcessDiscoverSvids+0x288>
    port->original_policy_state_ = port->policy_state_;
 800ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab54:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800ab5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d124      	bne.n	800abb0 <ProcessDiscoverSvids+0xb8>
      if (evalResponseToSopVdm(port, vdmh_in)) {
 800ab66:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ab68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab6a:	f7ff fd0d 	bl	800a588 <evalResponseToSopVdm>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00d      	beq.n	800ab90 <ProcessDiscoverSvids+0x98>
        /*  assuming that the splitting of SVID info is done outside this block */
        svid_info = VdmRequestSvidInfo(port);
 800ab74:	463b      	mov	r3, r7
 800ab76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 f854 	bl	800bc26 <VdmRequestSvidInfo>
 800ab7e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ab82:	463d      	mov	r5, r7
 800ab84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ab8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
      set_policy_state(port, PE_RESP_VDM_Get_SVIDs);
 800ab90:	217e      	movs	r1, #126	; 0x7e
 800ab92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab94:	f7fd fb28 	bl	80081e8 <set_policy_state>
      set_policy_state(port, svid_info.nack ? PE_RESP_VDM_Get_SVIDs_NAK :
 800ab98:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <ProcessDiscoverSvids+0xac>
 800aba0:	2380      	movs	r3, #128	; 0x80
 800aba2:	e000      	b.n	800aba6 <ProcessDiscoverSvids+0xae>
 800aba4:	237f      	movs	r3, #127	; 0x7f
 800aba6:	4619      	mov	r1, r3
 800aba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abaa:	f7fd fb1d 	bl	80081e8 <set_policy_state>
 800abae:	e027      	b.n	800ac00 <ProcessDiscoverSvids+0x108>
                                              PE_RESP_VDM_Send_SVIDs);
    }
    else if (sop == SOP_TYPE_SOP1) {
 800abb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d123      	bne.n	800ac00 <ProcessDiscoverSvids+0x108>
      if (evalResponseToCblVdm(port, vdmh_in)) {
 800abb8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800abba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abbc:	f7ff fd13 	bl	800a5e6 <evalResponseToCblVdm>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00d      	beq.n	800abe2 <ProcessDiscoverSvids+0xea>
        svid_info = VdmRequestSvidInfo(port);
 800abc6:	463b      	mov	r3, r7
 800abc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 f82b 	bl	800bc26 <VdmRequestSvidInfo>
 800abd0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800abd4:	463d      	mov	r5, r7
 800abd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800abde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
      set_policy_state(port, PE_RESP_VDM_Get_SVIDs);
 800abe2:	217e      	movs	r1, #126	; 0x7e
 800abe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abe6:	f7fd faff 	bl	80081e8 <set_policy_state>
      set_policy_state(port, svid_info.nack ? PE_RESP_VDM_Get_SVIDs_NAK :
 800abea:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <ProcessDiscoverSvids+0xfe>
 800abf2:	2380      	movs	r3, #128	; 0x80
 800abf4:	e000      	b.n	800abf8 <ProcessDiscoverSvids+0x100>
 800abf6:	237f      	movs	r3, #127	; 0x7f
 800abf8:	4619      	mov	r1, r3
 800abfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abfc:	f7fd faf4 	bl	80081e8 <set_policy_state>
                                              PE_RESP_VDM_Send_SVIDs);
    }

    vdmh_out.SVDM.SVID = PD_SID; /* Use PS_SID for Disc SVIDs */
 800ac00:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800ac04:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    vdmh_out.SVDM.VDMType = STRUCTURED_VDM; /*  Discovery SVIDs is Structured */
 800ac08:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800ac0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac10:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800ac14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac1c:	f7fe ffa2 	bl	8009b64 <CurrentSVDMVersion>
 800ac20:	4603      	mov	r3, r0
 800ac22:	f003 0303 	and.w	r3, r3, #3
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800ac2c:	f362 1346 	bfi	r3, r2, #5, #2
 800ac30:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.ObjPos = 0; /*  doesn't matter for Discover SVIDs */
 800ac34:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800ac38:	f36f 0302 	bfc	r3, #0, #3
 800ac3c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.CommandType = svid_info.nack ? RESPONDER_NAK : RESPONDER_ACK;
 800ac40:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <ProcessDiscoverSvids+0x154>
 800ac48:	2202      	movs	r2, #2
 800ac4a:	e000      	b.n	800ac4e <ProcessDiscoverSvids+0x156>
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800ac52:	f362 1387 	bfi	r3, r2, #6, #2
 800ac56:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

    /*  Reply with same command, Discover SVIDs */
    vdmh_out.SVDM.Command = DISCOVER_SVIDS;
 800ac5a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f362 0304 	bfi	r3, r2, #0, #5
 800ac64:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    length = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	67bb      	str	r3, [r7, #120]	; 0x78
    arr[length] = vdmh_out.object;
 800ac6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ac76:	440b      	add	r3, r1
 800ac78:	f843 2c50 	str.w	r2, [r3, #-80]
    length++;
 800ac7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac7e:	3301      	adds	r3, #1
 800ac80:	67bb      	str	r3, [r7, #120]	; 0x78
    if (svid_info.nack == FALSE) {
 800ac82:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d16c      	bne.n	800ad64 <ProcessDiscoverSvids+0x26c>
      /*  prevent segfaults */
      if (svid_info.num_svids > MAX_NUM_SVIDS) {
 800ac8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac8c:	2b0c      	cmp	r3, #12
 800ac8e:	d908      	bls.n	800aca2 <ProcessDiscoverSvids+0x1aa>
        set_policy_state(port, port->original_policy_state_);
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800ac96:	4619      	mov	r1, r3
 800ac98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac9a:	f7fd faa5 	bl	80081e8 <set_policy_state>
        return 1;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e0fb      	b.n	800ae9a <ProcessDiscoverSvids+0x3a2>
      }
      for (i = 0; i < svid_info.num_svids; i++) {
 800aca2:	2300      	movs	r3, #0
 800aca4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aca6:	e059      	b.n	800ad5c <ProcessDiscoverSvids+0x264>
        /*  check if i is even */
        if (!(i & 0x1)) {
 800aca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d137      	bne.n	800ad22 <ProcessDiscoverSvids+0x22a>
          length++;
 800acb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acb4:	3301      	adds	r3, #1
 800acb6:	67bb      	str	r3, [r7, #120]	; 0x78
          /*  setup new word to send */
          arr[length - 1] = 0;
 800acb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acba:	3b01      	subs	r3, #1
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800acc2:	4413      	add	r3, r2
 800acc4:	2200      	movs	r2, #0
 800acc6:	f843 2c50 	str.w	r2, [r3, #-80]
          /*  if even, shift SVID up to the top 16 bits */
          arr[length - 1] |= svid_info.svids[i];
 800acca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800accc:	3b01      	subs	r3, #1
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800acd4:	4413      	add	r3, r2
 800acd6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800acda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acdc:	3304      	adds	r3, #4
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ace4:	440b      	add	r3, r1
 800ace6:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800acea:	4619      	mov	r1, r3
 800acec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acee:	3b01      	subs	r3, #1
 800acf0:	430a      	orrs	r2, r1
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800acf8:	440b      	add	r3, r1
 800acfa:	f843 2c50 	str.w	r2, [r3, #-80]
          arr[length - 1] <<= 16;
 800acfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad00:	3b01      	subs	r3, #1
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ad08:	4413      	add	r3, r2
 800ad0a:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800ad0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad10:	3b01      	subs	r3, #1
 800ad12:	0412      	lsls	r2, r2, #16
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ad1a:	440b      	add	r3, r1
 800ad1c:	f843 2c50 	str.w	r2, [r3, #-80]
 800ad20:	e019      	b.n	800ad56 <ProcessDiscoverSvids+0x25e>
        }
        else {
          /*  if odd, fill out the bottom 16 bits */
          arr[length - 1] |= svid_info.svids[i];
 800ad22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad24:	3b01      	subs	r3, #1
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800ad32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad34:	3304      	adds	r3, #4
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ad3c:	440b      	add	r3, r1
 800ad3e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad46:	3b01      	subs	r3, #1
 800ad48:	430a      	orrs	r2, r1
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800ad50:	440b      	add	r3, r1
 800ad52:	f843 2c50 	str.w	r2, [r3, #-80]
      for (i = 0; i < svid_info.num_svids; i++) {
 800ad56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad58:	3301      	adds	r3, #1
 800ad5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d3a1      	bcc.n	800aca8 <ProcessDiscoverSvids+0x1b0>
        }
      }
    }
    SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad66:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800ad6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ad6e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad78:	f000 fca2 	bl	800b6c0 <SendVdmMessage>
    return 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e08c      	b.n	800ae9a <ProcessDiscoverSvids+0x3a2>
  }
  else {
    /* Incoming responses, ACKs, NAKs, BUSYs */
    svid_info.num_svids = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	653b      	str	r3, [r7, #80]	; 0x50

    if (port->policy_state_ != PE_INIT_VDM_SVIDs_Request) {
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800ad8a:	2b74      	cmp	r3, #116	; 0x74
 800ad8c:	d001      	beq.n	800ad92 <ProcessDiscoverSvids+0x29a>
      return 1;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e083      	b.n	800ae9a <ProcessDiscoverSvids+0x3a2>
    }
    else if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800ad92:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ad96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b40      	cmp	r3, #64	; 0x40
 800ad9e:	d14c      	bne.n	800ae3a <ProcessDiscoverSvids+0x342>
      for (i = 1; i < length_in; i++) {
 800ada0:	2301      	movs	r3, #1
 800ada2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ada4:	e03c      	b.n	800ae20 <ProcessDiscoverSvids+0x328>
        top16 = (arr_in[i] >> 16) & 0xFFFF;
 800ada6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adac:	4413      	add	r3, r2
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	0c1b      	lsrs	r3, r3, #16
 800adb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        bottom16 = (arr_in[i] >> 0) & 0xFFFF;
 800adb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adbc:	4413      	add	r3, r2
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

        /*  if top 16 bits are 0, we're done getting SVIDs */
        if (top16 == 0) {
 800adc4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d02e      	beq.n	800ae2a <ProcessDiscoverSvids+0x332>
          break;
        }
        else {
          svid_info.svids[2 * (i - 1)] = top16;
 800adcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800add2:	3b01      	subs	r3, #1
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	3304      	adds	r3, #4
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800adde:	4413      	add	r3, r2
 800ade0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ade4:	f823 2c34 	strh.w	r2, [r3, #-52]
          svid_info.num_svids += 1;
 800ade8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adea:	3301      	adds	r3, #1
 800adec:	653b      	str	r3, [r7, #80]	; 0x50
        }
        /*  if bottom 16 bits are 0 we're done getting SVIDs */
        if (bottom16 == 0) {
 800adee:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d01b      	beq.n	800ae2e <ProcessDiscoverSvids+0x336>
          break;
        }
        else {
          svid_info.svids[2 * (i - 1) + 1] = bottom16;
 800adf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800adfc:	3b01      	subs	r3, #1
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	3301      	adds	r3, #1
 800ae02:	3304      	adds	r3, #4
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800ae10:	f823 2c34 	strh.w	r2, [r3, #-52]
          svid_info.num_svids += 1;
 800ae14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae16:	3301      	adds	r3, #1
 800ae18:	653b      	str	r3, [r7, #80]	; 0x50
      for (i = 1; i < length_in; i++) {
 800ae1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d3be      	bcc.n	800ada6 <ProcessDiscoverSvids+0x2ae>
 800ae28:	e002      	b.n	800ae30 <ProcessDiscoverSvids+0x338>
          break;
 800ae2a:	bf00      	nop
 800ae2c:	e000      	b.n	800ae30 <ProcessDiscoverSvids+0x338>
          break;
 800ae2e:	bf00      	nop
        }
      }
      set_policy_state(port, PE_INIT_VDM_SVIDs_ACKed);
 800ae30:	2175      	movs	r1, #117	; 0x75
 800ae32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae34:	f7fd f9d8 	bl	80081e8 <set_policy_state>
 800ae38:	e003      	b.n	800ae42 <ProcessDiscoverSvids+0x34a>
    }
    else {
      set_policy_state(port, PE_INIT_VDM_SVIDs_NAKed);
 800ae3a:	2176      	movs	r1, #118	; 0x76
 800ae3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae3e:	f7fd f9d3 	bl	80081e8 <set_policy_state>
    }
    VdmInformSvids(port,
                   port->policy_state_ == PE_INIT_VDM_SVIDs_ACKed ? TRUE:FALSE,
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    VdmInformSvids(port,
 800ae48:	2b75      	cmp	r3, #117	; 0x75
 800ae4a:	bf0c      	ite	eq
 800ae4c:	2301      	moveq	r3, #1
 800ae4e:	2300      	movne	r3, #0
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	469c      	mov	ip, r3
 800ae54:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 800ae58:	466d      	mov	r5, sp
 800ae5a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800ae5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ae66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ae6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	4661      	mov	r1, ip
 800ae70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae72:	f001 f871 	bl	800bf58 <VdmInformSvids>
                   sop, svid_info);
    port->vdm_expecting_response_ = FALSE;
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
    TimerDisable(&port->vdm_timer_);
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fe f8dd 	bl	8009044 <TimerDisable>
    set_policy_state(port, port->original_policy_state_);
 800ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800ae90:	4619      	mov	r1, r3
 800ae92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae94:	f7fd f9a8 	bl	80081e8 <set_policy_state>
    return 0;
 800ae98:	2300      	movs	r3, #0
  }
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3784      	adds	r7, #132	; 0x84
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aea2 <ProcessDiscoverModes>:

FSC_S32 ProcessDiscoverModes(struct Port *port, SopType sop, FSC_U32 *arr_in,
                             FSC_U32 length_in)
{
 800aea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aea4:	b0a9      	sub	sp, #164	; 0xa4
 800aea6:	af08      	add	r7, sp, #32
 800aea8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aeaa:	627a      	str	r2, [r7, #36]	; 0x24
 800aeac:	623b      	str	r3, [r7, #32]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  doDataObject_t vdmh_in = {0};
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	673b      	str	r3, [r7, #112]	; 0x70
  doDataObject_t vdmh_out = {0};
 800aeb8:	2300      	movs	r3, #0
 800aeba:	66fb      	str	r3, [r7, #108]	; 0x6c
  ModesInfo modes_info;
  FSC_U32 i, j;
  FSC_U32 arr[7] = {0};
 800aebc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aec0:	2200      	movs	r2, #0
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	605a      	str	r2, [r3, #4]
 800aec6:	609a      	str	r2, [r3, #8]
 800aec8:	60da      	str	r2, [r3, #12]
 800aeca:	611a      	str	r2, [r3, #16]
 800aecc:	615a      	str	r2, [r3, #20]
 800aece:	619a      	str	r2, [r3, #24]
  FSC_U32 length;

  vdmh_in.object = arr_in[0];
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	673b      	str	r3, [r7, #112]	; 0x70

  modes_info.nack = TRUE;
 800aed6:	2301      	movs	r3, #1
 800aed8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  if (vdmh_in.SVDM.CommandType == INITIATOR) {
 800aedc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800aee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f040 80cb 	bne.w	800b082 <ProcessDiscoverModes+0x1e0>
    port->original_policy_state_ = port->policy_state_;
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800aef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800aef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d126      	bne.n	800af4e <ProcessDiscoverModes+0xac>
      if (evalResponseToSopVdm(port, vdmh_in)) {
 800af00:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800af02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af04:	f7ff fb40 	bl	800a588 <evalResponseToSopVdm>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00f      	beq.n	800af2e <ProcessDiscoverModes+0x8c>
        modes_info = VdmRequestModesInfo(port, vdmh_in.SVDM.SVID);
 800af0e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800af12:	463b      	mov	r3, r7
 800af14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af16:	4618      	mov	r0, r3
 800af18:	f000 feb3 	bl	800bc82 <VdmRequestModesInfo>
 800af1c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800af20:	463d      	mov	r5, r7
 800af22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800af2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
      set_policy_state(port, PE_RESP_VDM_Get_Modes);
 800af2e:	2181      	movs	r1, #129	; 0x81
 800af30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af32:	f7fd f959 	bl	80081e8 <set_policy_state>
      set_policy_state(port, modes_info.nack ? PE_RESP_VDM_Get_Modes_NAK :
 800af36:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <ProcessDiscoverModes+0xa0>
 800af3e:	2383      	movs	r3, #131	; 0x83
 800af40:	e000      	b.n	800af44 <ProcessDiscoverModes+0xa2>
 800af42:	2382      	movs	r3, #130	; 0x82
 800af44:	4619      	mov	r1, r3
 800af46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af48:	f7fd f94e 	bl	80081e8 <set_policy_state>
 800af4c:	e029      	b.n	800afa2 <ProcessDiscoverModes+0x100>
                                               PE_RESP_VDM_Send_Modes);
    }

    else if (sop == SOP_TYPE_SOP1) {
 800af4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af52:	2b01      	cmp	r3, #1
 800af54:	d125      	bne.n	800afa2 <ProcessDiscoverModes+0x100>
      if (evalResponseToCblVdm(port, vdmh_in)) {
 800af56:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800af58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af5a:	f7ff fb44 	bl	800a5e6 <evalResponseToCblVdm>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00f      	beq.n	800af84 <ProcessDiscoverModes+0xe2>
        modes_info = VdmRequestModesInfo(port, vdmh_in.SVDM.SVID);
 800af64:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800af68:	463b      	mov	r3, r7
 800af6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 fe88 	bl	800bc82 <VdmRequestModesInfo>
 800af72:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800af76:	463d      	mov	r5, r7
 800af78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800af80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
      set_policy_state(port, PE_RESP_VDM_Get_Modes);
 800af84:	2181      	movs	r1, #129	; 0x81
 800af86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af88:	f7fd f92e 	bl	80081e8 <set_policy_state>
      set_policy_state(port, modes_info.nack ? PE_RESP_VDM_Get_Modes_NAK :
 800af8c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <ProcessDiscoverModes+0xf6>
 800af94:	2383      	movs	r3, #131	; 0x83
 800af96:	e000      	b.n	800af9a <ProcessDiscoverModes+0xf8>
 800af98:	2382      	movs	r3, #130	; 0x82
 800af9a:	4619      	mov	r1, r3
 800af9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af9e:	f7fd f923 	bl	80081e8 <set_policy_state>
                                               PE_RESP_VDM_Send_Modes);
    }

    vdmh_out.SVDM.SVID = vdmh_in.SVDM.SVID;
 800afa2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800afa6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    vdmh_out.SVDM.VDMType = STRUCTURED_VDM;
 800afaa:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800afae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800afb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afba:	4619      	mov	r1, r3
 800afbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afbe:	f7fe fdd1 	bl	8009b64 <CurrentSVDMVersion>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f003 0303 	and.w	r3, r3, #3
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800afce:	f362 1346 	bfi	r3, r2, #5, #2
 800afd2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.ObjPos = 0;
 800afd6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800afda:	f36f 0302 	bfc	r3, #0, #3
 800afde:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.CommandType = modes_info.nack ? RESPONDER_NAK : RESPONDER_ACK;
 800afe2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <ProcessDiscoverModes+0x14c>
 800afea:	2202      	movs	r2, #2
 800afec:	e000      	b.n	800aff0 <ProcessDiscoverModes+0x14e>
 800afee:	2201      	movs	r2, #1
 800aff0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800aff4:	f362 1387 	bfi	r3, r2, #6, #2
 800aff8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

    /*  Reply with same command, Discover Modes */
    vdmh_out.SVDM.Command = DISCOVER_MODES;
 800affc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800b000:	2203      	movs	r2, #3
 800b002:	f362 0304 	bfi	r3, r2, #0, #5
 800b006:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    length = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	677b      	str	r3, [r7, #116]	; 0x74
    arr[length] = vdmh_out.object;
 800b00e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800b018:	440b      	add	r3, r1
 800b01a:	f843 2c50 	str.w	r2, [r3, #-80]
    length++;
 800b01e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b020:	3301      	adds	r3, #1
 800b022:	677b      	str	r3, [r7, #116]	; 0x74
    if (modes_info.nack == FALSE) {
 800b024:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d11c      	bne.n	800b066 <ProcessDiscoverModes+0x1c4>
      for (j = 0; j < modes_info.num_modes; j++) {
 800b02c:	2300      	movs	r3, #0
 800b02e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b030:	e015      	b.n	800b05e <ProcessDiscoverModes+0x1bc>
        arr[j + 1] = modes_info.modes[j];
 800b032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b034:	1c59      	adds	r1, r3, #1
 800b036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b038:	3302      	adds	r3, #2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b040:	4413      	add	r3, r2
 800b042:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800b046:	008b      	lsls	r3, r1, #2
 800b048:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800b04c:	440b      	add	r3, r1
 800b04e:	f843 2c50 	str.w	r2, [r3, #-80]
        length++;
 800b052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b054:	3301      	adds	r3, #1
 800b056:	677b      	str	r3, [r7, #116]	; 0x74
      for (j = 0; j < modes_info.num_modes; j++) {
 800b058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b05a:	3301      	adds	r3, #1
 800b05c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b05e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b060:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b062:	429a      	cmp	r2, r3
 800b064:	d3e5      	bcc.n	800b032 <ProcessDiscoverModes+0x190>
      }
    }
    SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800b066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b068:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b06c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b070:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b07a:	f000 fb21 	bl	800b6c0 <SendVdmMessage>
    return 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	e067      	b.n	800b152 <ProcessDiscoverModes+0x2b0>
  }
  else {
    /*  Incoming responses, ACKs, NAKs, BUSYs */
    if (port->policy_state_ != PE_INIT_VDM_Modes_Request) {
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b088:	2b77      	cmp	r3, #119	; 0x77
 800b08a:	d001      	beq.n	800b090 <ProcessDiscoverModes+0x1ee>
      return 1;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e060      	b.n	800b152 <ProcessDiscoverModes+0x2b0>
    }
    else {
      if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800b090:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800b094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b40      	cmp	r3, #64	; 0x40
 800b09c:	d126      	bne.n	800b0ec <ProcessDiscoverModes+0x24a>
        modes_info.svid = vdmh_in.SVDM.SVID;
 800b09e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800b0a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        modes_info.num_modes = length_in - 1;
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	653b      	str	r3, [r7, #80]	; 0x50
        modes_info.nack = FALSE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        for (i = 1; i < length_in; i++) {
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b0b6:	e010      	b.n	800b0da <ProcessDiscoverModes+0x238>
          modes_info.modes[i - 1] = arr_in[i];
 800b0b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0be:	441a      	add	r2, r3
 800b0c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	6812      	ldr	r2, [r2, #0]
 800b0c6:	3302      	adds	r3, #2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800b0ce:	440b      	add	r3, r1
 800b0d0:	f843 2c34 	str.w	r2, [r3, #-52]
        for (i = 1; i < length_in; i++) {
 800b0d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b0da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d3ea      	bcc.n	800b0b8 <ProcessDiscoverModes+0x216>
        }
        set_policy_state(port, PE_INIT_VDM_Modes_ACKed);
 800b0e2:	2178      	movs	r1, #120	; 0x78
 800b0e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0e6:	f7fd f87f 	bl	80081e8 <set_policy_state>
 800b0ea:	e006      	b.n	800b0fa <ProcessDiscoverModes+0x258>
      }
      else {
        modes_info.nack = TRUE;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        set_policy_state(port, PE_INIT_VDM_Modes_NAKed);
 800b0f2:	2179      	movs	r1, #121	; 0x79
 800b0f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0f6:	f7fd f877 	bl	80081e8 <set_policy_state>
      }
      VdmInformModes(port,
                 port->policy_state_ == PE_INIT_VDM_Modes_ACKed ? TRUE : FALSE,
 800b0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fc:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      VdmInformModes(port,
 800b100:	2b78      	cmp	r3, #120	; 0x78
 800b102:	bf0c      	ite	eq
 800b104:	2301      	moveq	r3, #1
 800b106:	2300      	movne	r3, #0
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	469c      	mov	ip, r3
 800b10c:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 800b110:	466d      	mov	r5, sp
 800b112:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800b116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b11a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b11e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800b122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b124:	4632      	mov	r2, r6
 800b126:	4661      	mov	r1, ip
 800b128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b12a:	f000 ff7a 	bl	800c022 <VdmInformModes>
                 sop, modes_info);
      port->vdm_expecting_response_ = FALSE;
 800b12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
      TimerDisable(&port->vdm_timer_);
 800b136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b138:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fd ff81 	bl	8009044 <TimerDisable>
      set_policy_state(port, port->original_policy_state_);
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b144:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b148:	4619      	mov	r1, r3
 800b14a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b14c:	f7fd f84c 	bl	80081e8 <set_policy_state>
    }
    return 0;
 800b150:	2300      	movs	r3, #0
  }
}
 800b152:	4618      	mov	r0, r3
 800b154:	3784      	adds	r7, #132	; 0x84
 800b156:	46bd      	mov	sp, r7
 800b158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b15a <ProcessEnterMode>:

FSC_S32 ProcessEnterMode(struct Port *port, SopType sop, FSC_U32 *arr_in,
                         FSC_U32 length_in)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b092      	sub	sp, #72	; 0x48
 800b15e:	af02      	add	r7, sp, #8
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
 800b166:	460b      	mov	r3, r1
 800b168:	72fb      	strb	r3, [r7, #11]
  doDataObject_t svdmh_in = {0};
 800b16a:	2300      	movs	r3, #0
 800b16c:	637b      	str	r3, [r7, #52]	; 0x34
  doDataObject_t svdmh_out = {0};
 800b16e:	2300      	movs	r3, #0
 800b170:	633b      	str	r3, [r7, #48]	; 0x30
  FSC_BOOL mode_entered = FALSE;
 800b172:	2300      	movs	r3, #0
 800b174:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  FSC_U32 arr_out[7] = {0};
 800b178:	f107 0314 	add.w	r3, r7, #20
 800b17c:	2200      	movs	r2, #0
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	605a      	str	r2, [r3, #4]
 800b182:	609a      	str	r2, [r3, #8]
 800b184:	60da      	str	r2, [r3, #12]
 800b186:	611a      	str	r2, [r3, #16]
 800b188:	615a      	str	r2, [r3, #20]
 800b18a:	619a      	str	r2, [r3, #24]
  FSC_U32 length_out;

  svdmh_in.object = arr_in[0];
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	637b      	str	r3, [r7, #52]	; 0x34

  if (svdmh_in.SVDM.CommandType == INITIATOR) {
 800b192:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b196:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f040 80a7 	bne.w	800b2f0 <ProcessEnterMode+0x196>
    port->original_policy_state_ = port->policy_state_;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800b1ae:	7afb      	ldrb	r3, [r7, #11]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d130      	bne.n	800b216 <ProcessEnterMode+0xbc>
      if (evalResponseToSopVdm(port, svdmh_in)) {
 800b1b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7ff f9e6 	bl	800a588 <evalResponseToSopVdm>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00c      	beq.n	800b1dc <ProcessEnterMode+0x82>
        mode_entered = VdmModeEntryRequest(port, svdmh_in.SVDM.SVID,
 800b1c2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                                                 svdmh_in.SVDM.ObjPos);
 800b1c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b1c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b1cc:	b2db      	uxtb	r3, r3
        mode_entered = VdmModeEntryRequest(port, svdmh_in.SVDM.SVID,
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f000 fd9f 	bl	800bd14 <VdmModeEntryRequest>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      set_policy_state(port, PE_UFP_VDM_Evaluate_Mode_Entry);
 800b1dc:	2190      	movs	r1, #144	; 0x90
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7fd f802 	bl	80081e8 <set_policy_state>
      set_policy_state(port, mode_entered ? PE_UFP_VDM_Mode_Entry_ACK :
 800b1e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <ProcessEnterMode+0x96>
 800b1ec:	2391      	movs	r3, #145	; 0x91
 800b1ee:	e000      	b.n	800b1f2 <ProcessEnterMode+0x98>
 800b1f0:	2392      	movs	r3, #146	; 0x92
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7fc fff7 	bl	80081e8 <set_policy_state>
                                            PE_UFP_VDM_Mode_Entry_NAK);
      svdmh_out.SVDM.CommandType = mode_entered ? RESPONDER_ACK :
 800b1fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <ProcessEnterMode+0xac>
 800b202:	2201      	movs	r2, #1
 800b204:	e000      	b.n	800b208 <ProcessEnterMode+0xae>
 800b206:	2202      	movs	r2, #2
 800b208:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b20c:	f362 1387 	bfi	r3, r2, #6, #2
 800b210:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800b214:	e032      	b.n	800b27c <ProcessEnterMode+0x122>
                                                  RESPONDER_NAK;
    }
    else if (sop == SOP_TYPE_SOP1) {
 800b216:	7afb      	ldrb	r3, [r7, #11]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d12f      	bne.n	800b27c <ProcessEnterMode+0x122>
      if (evalResponseToCblVdm(port, svdmh_in)) {
 800b21c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7ff f9e1 	bl	800a5e6 <evalResponseToCblVdm>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00c      	beq.n	800b244 <ProcessEnterMode+0xea>
        mode_entered = VdmModeEntryRequest(port, svdmh_in.SVDM.SVID,
 800b22a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                                                 svdmh_in.SVDM.ObjPos);
 800b22c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b230:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b234:	b2db      	uxtb	r3, r3
        mode_entered = VdmModeEntryRequest(port, svdmh_in.SVDM.SVID,
 800b236:	461a      	mov	r2, r3
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 fd6b 	bl	800bd14 <VdmModeEntryRequest>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      set_policy_state(port, PE_CBL_Evaluate_Mode_Entry);
 800b244:	219a      	movs	r1, #154	; 0x9a
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f7fc ffce 	bl	80081e8 <set_policy_state>
      set_policy_state(port, mode_entered ? PE_CBL_Mode_Entry_ACK :
 800b24c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <ProcessEnterMode+0xfe>
 800b254:	239b      	movs	r3, #155	; 0x9b
 800b256:	e000      	b.n	800b25a <ProcessEnterMode+0x100>
 800b258:	239c      	movs	r3, #156	; 0x9c
 800b25a:	4619      	mov	r1, r3
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f7fc ffc3 	bl	80081e8 <set_policy_state>
                                            PE_CBL_Mode_Entry_NAK);
      svdmh_out.SVDM.CommandType = mode_entered ? RESPONDER_ACK :
 800b262:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <ProcessEnterMode+0x114>
 800b26a:	2201      	movs	r2, #1
 800b26c:	e000      	b.n	800b270 <ProcessEnterMode+0x116>
 800b26e:	2202      	movs	r2, #2
 800b270:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b274:	f362 1387 	bfi	r3, r2, #6, #2
 800b278:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                                  RESPONDER_NAK;
    }

    /*  most of the message response will be the same whether we entered
     *  the mode or not */
    svdmh_out.SVDM.SVID = svdmh_in.SVDM.SVID;
 800b27c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b27e:	867b      	strh	r3, [r7, #50]	; 0x32
    svdmh_out.SVDM.VDMType = STRUCTURED_VDM;
 800b280:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b288:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    svdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	4619      	mov	r1, r3
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7fe fc67 	bl	8009b64 <CurrentSVDMVersion>
 800b296:	4603      	mov	r3, r0
 800b298:	f003 0303 	and.w	r3, r3, #3
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b2a2:	f362 1346 	bfi	r3, r2, #5, #2
 800b2a6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    svdmh_out.SVDM.ObjPos = svdmh_in.SVDM.ObjPos;
 800b2aa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b2ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b2b8:	f362 0302 	bfi	r3, r2, #0, #3
 800b2bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    svdmh_out.SVDM.Command = ENTER_MODE;
 800b2c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	f362 0304 	bfi	r3, r2, #0, #5
 800b2ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    arr_out[0] = svdmh_out.object;
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	617b      	str	r3, [r7, #20]
    length_out = 1;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	63bb      	str	r3, [r7, #56]	; 0x38
    SendVdmMessage(port, sop, arr_out, length_out,port->original_policy_state_);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b2dc:	f107 0214 	add.w	r2, r7, #20
 800b2e0:	7af9      	ldrb	r1, [r7, #11]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f000 f9ea 	bl	800b6c0 <SendVdmMessage>
    return 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	e02f      	b.n	800b350 <ProcessEnterMode+0x1f6>
  }
  else { /* Incoming responses, ACKs, NAKs, BUSYs */
    if (svdmh_in.SVDM.CommandType != RESPONDER_ACK) {
 800b2f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b2f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b40      	cmp	r3, #64	; 0x40
 800b2fc:	d00e      	beq.n	800b31c <ProcessEnterMode+0x1c2>
      set_policy_state(port, PE_DFP_VDM_Mode_Entry_NAKed);
 800b2fe:	2187      	movs	r1, #135	; 0x87
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7fc ff71 	bl	80081e8 <set_policy_state>
      VdmEnterModeResult(port, FALSE, svdmh_in.SVDM.SVID,
 800b306:	8efa      	ldrh	r2, [r7, #54]	; 0x36
                         svdmh_in.SVDM.ObjPos);
 800b308:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b30c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b310:	b2db      	uxtb	r3, r3
      VdmEnterModeResult(port, FALSE, svdmh_in.SVDM.SVID,
 800b312:	2100      	movs	r1, #0
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 fd7b 	bl	800be10 <VdmEnterModeResult>
 800b31a:	e00d      	b.n	800b338 <ProcessEnterMode+0x1de>
    }
    else {
      set_policy_state(port, PE_DFP_VDM_Mode_Entry_ACKed);
 800b31c:	2186      	movs	r1, #134	; 0x86
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7fc ff62 	bl	80081e8 <set_policy_state>
      VdmEnterModeResult(port, TRUE, svdmh_in.SVDM.SVID, svdmh_in.SVDM.ObjPos);
 800b324:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b326:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b32a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2101      	movs	r1, #1
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f000 fd6c 	bl	800be10 <VdmEnterModeResult>
    }
    set_policy_state(port, port->original_policy_state_);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b33e:	4619      	mov	r1, r3
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7fc ff51 	bl	80081e8 <set_policy_state>
    port->vdm_expecting_response_ = FALSE;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
    return 0;
 800b34e:	2300      	movs	r3, #0
  }
}
 800b350:	4618      	mov	r0, r3
 800b352:	3740      	adds	r7, #64	; 0x40
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <ProcessExitMode>:

FSC_S32 ProcessExitMode(struct Port *port, SopType sop, FSC_U32 *arr_in,
                        FSC_U32 length_in)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b092      	sub	sp, #72	; 0x48
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	607a      	str	r2, [r7, #4]
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	460b      	mov	r3, r1
 800b366:	72fb      	strb	r3, [r7, #11]
  doDataObject_t vdmh_in = {0};
 800b368:	2300      	movs	r3, #0
 800b36a:	637b      	str	r3, [r7, #52]	; 0x34
  doDataObject_t vdmh_out = {0};
 800b36c:	2300      	movs	r3, #0
 800b36e:	633b      	str	r3, [r7, #48]	; 0x30
  FSC_BOOL mode_exited;
  FSC_U32 arr[7] = {0};
 800b370:	f107 0314 	add.w	r3, r7, #20
 800b374:	2200      	movs	r2, #0
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	605a      	str	r2, [r3, #4]
 800b37a:	609a      	str	r2, [r3, #8]
 800b37c:	60da      	str	r2, [r3, #12]
 800b37e:	611a      	str	r2, [r3, #16]
 800b380:	615a      	str	r2, [r3, #20]
 800b382:	619a      	str	r2, [r3, #24]
  FSC_U32 length;

  vdmh_in.object = arr_in[0];
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	637b      	str	r3, [r7, #52]	; 0x34

  mode_exited = FALSE;
 800b38a:	2300      	movs	r3, #0
 800b38c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (vdmh_in.SVDM.CommandType == INITIATOR) {
 800b390:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f040 80a7 	bne.w	800b4ee <ProcessExitMode+0x196>
    port->original_policy_state_ = port->policy_state_;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d130      	bne.n	800b414 <ProcessExitMode+0xbc>
      if (evalResponseToSopVdm(port, vdmh_in)) {
 800b3b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7ff f8e7 	bl	800a588 <evalResponseToSopVdm>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00c      	beq.n	800b3da <ProcessExitMode+0x82>
        mode_exited = VdmModeExitRequest(port, vdmh_in.SVDM.SVID,
 800b3c0:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                                               vdmh_in.SVDM.ObjPos);
 800b3c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b3c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b3ca:	b2db      	uxtb	r3, r3
        mode_exited = VdmModeExitRequest(port, vdmh_in.SVDM.SVID,
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 fcd9 	bl	800bd86 <VdmModeExitRequest>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      set_policy_state(port, PE_UFP_VDM_Mode_Exit);
 800b3da:	2193      	movs	r1, #147	; 0x93
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7fc ff03 	bl	80081e8 <set_policy_state>
      set_policy_state(port, mode_exited ? PE_UFP_VDM_Mode_Exit_ACK :
 800b3e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d001      	beq.n	800b3ee <ProcessExitMode+0x96>
 800b3ea:	2394      	movs	r3, #148	; 0x94
 800b3ec:	e000      	b.n	800b3f0 <ProcessExitMode+0x98>
 800b3ee:	2395      	movs	r3, #149	; 0x95
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f7fc fef8 	bl	80081e8 <set_policy_state>
                                           PE_UFP_VDM_Mode_Exit_NAK);
      vdmh_out.SVDM.CommandType = mode_exited ? RESPONDER_ACK :
 800b3f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <ProcessExitMode+0xac>
 800b400:	2201      	movs	r2, #1
 800b402:	e000      	b.n	800b406 <ProcessExitMode+0xae>
 800b404:	2202      	movs	r2, #2
 800b406:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b40a:	f362 1387 	bfi	r3, r2, #6, #2
 800b40e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800b412:	e032      	b.n	800b47a <ProcessExitMode+0x122>
                                                RESPONDER_NAK ;
    }
    else if (sop == SOP_TYPE_SOP1) {
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d12f      	bne.n	800b47a <ProcessExitMode+0x122>
      if (evalResponseToCblVdm(port, vdmh_in)) {
 800b41a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff f8e2 	bl	800a5e6 <evalResponseToCblVdm>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00c      	beq.n	800b442 <ProcessExitMode+0xea>
        mode_exited = VdmModeExitRequest(port, vdmh_in.SVDM.SVID,
 800b428:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                                               vdmh_in.SVDM.ObjPos);
 800b42a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b42e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b432:	b2db      	uxtb	r3, r3
        mode_exited = VdmModeExitRequest(port, vdmh_in.SVDM.SVID,
 800b434:	461a      	mov	r2, r3
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 fca5 	bl	800bd86 <VdmModeExitRequest>
 800b43c:	4603      	mov	r3, r0
 800b43e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      set_policy_state(port, PE_CBL_Mode_Exit);
 800b442:	219d      	movs	r1, #157	; 0x9d
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f7fc fecf 	bl	80081e8 <set_policy_state>
      set_policy_state(port, mode_exited? PE_CBL_Mode_Exit_ACK :
 800b44a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <ProcessExitMode+0xfe>
 800b452:	239e      	movs	r3, #158	; 0x9e
 800b454:	e000      	b.n	800b458 <ProcessExitMode+0x100>
 800b456:	239f      	movs	r3, #159	; 0x9f
 800b458:	4619      	mov	r1, r3
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f7fc fec4 	bl	80081e8 <set_policy_state>
                                          PE_CBL_Mode_Exit_NAK);
      vdmh_out.SVDM.CommandType = mode_exited ? RESPONDER_ACK : RESPONDER_NAK;
 800b460:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <ProcessExitMode+0x114>
 800b468:	2201      	movs	r2, #1
 800b46a:	e000      	b.n	800b46e <ProcessExitMode+0x116>
 800b46c:	2202      	movs	r2, #2
 800b46e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b472:	f362 1387 	bfi	r3, r2, #6, #2
 800b476:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    vdmh_out.SVDM.SVID = vdmh_in.SVDM.SVID;
 800b47a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b47c:	867b      	strh	r3, [r7, #50]	; 0x32
    vdmh_out.SVDM.VDMType = STRUCTURED_VDM;
 800b47e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b486:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	4619      	mov	r1, r3
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7fe fb68 	bl	8009b64 <CurrentSVDMVersion>
 800b494:	4603      	mov	r3, r0
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b4a0:	f362 1346 	bfi	r3, r2, #5, #2
 800b4a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    vdmh_out.SVDM.ObjPos = vdmh_in.SVDM.ObjPos;
 800b4a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b4ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b4b6:	f362 0302 	bfi	r3, r2, #0, #3
 800b4ba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    vdmh_out.SVDM.Command = EXIT_MODE;
 800b4be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4c2:	2205      	movs	r2, #5
 800b4c4:	f362 0304 	bfi	r3, r2, #0, #5
 800b4c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    arr[0] = vdmh_out.object;
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	617b      	str	r3, [r7, #20]
    length = 1;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	63bb      	str	r3, [r7, #56]	; 0x38
    SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b4da:	f107 0214 	add.w	r2, r7, #20
 800b4de:	7af9      	ldrb	r1, [r7, #11]
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f8eb 	bl	800b6c0 <SendVdmMessage>
    return 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e044      	b.n	800b578 <ProcessExitMode+0x220>
  }
  else {
    if (vdmh_in.SVDM.CommandType != RESPONDER_ACK) {
 800b4ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b4f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b40      	cmp	r3, #64	; 0x40
 800b4fa:	d01d      	beq.n	800b538 <ProcessExitMode+0x1e0>
      VdmExitModeResult(port, FALSE, vdmh_in.SVDM.SVID, vdmh_in.SVDM.ObjPos);
 800b4fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b4fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b502:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b506:	b2db      	uxtb	r3, r3
 800b508:	2100      	movs	r1, #0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 fcb1 	bl	800be72 <VdmExitModeResult>
      /*  when exit mode not ACKed, go to hard reset state! */
      if (port->original_policy_state_ == PE_SRC_Ready) {
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b516:	2b05      	cmp	r3, #5
 800b518:	d104      	bne.n	800b524 <ProcessExitMode+0x1cc>
        set_policy_state(port, PE_SRC_Hard_Reset);
 800b51a:	2108      	movs	r1, #8
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f7fc fe63 	bl	80081e8 <set_policy_state>
 800b522:	e024      	b.n	800b56e <ProcessExitMode+0x216>
      }
      else if (port->original_policy_state_ == PE_SNK_Ready) {
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b52a:	2b13      	cmp	r3, #19
 800b52c:	d11f      	bne.n	800b56e <ProcessExitMode+0x216>
        set_policy_state(port, PE_SNK_Hard_Reset);
 800b52e:	2114      	movs	r1, #20
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7fc fe59 	bl	80081e8 <set_policy_state>
 800b536:	e01a      	b.n	800b56e <ProcessExitMode+0x216>
      else {
        /*  TODO: should never reach here, but you never know... */
      }
    }
    else {
      set_policy_state(port, PE_DFP_VDM_Mode_Exit_ACKed);
 800b538:	2189      	movs	r1, #137	; 0x89
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f7fc fe54 	bl	80081e8 <set_policy_state>
      VdmExitModeResult(port, TRUE, vdmh_in.SVDM.SVID, vdmh_in.SVDM.ObjPos);
 800b540:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b542:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800b546:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2101      	movs	r1, #1
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 fc8f 	bl	800be72 <VdmExitModeResult>
      set_policy_state(port, port->original_policy_state_);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b55a:	4619      	mov	r1, r3
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7fc fe43 	bl	80081e8 <set_policy_state>
      TimerDisable(&port->vdm_timer_);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fd fd6b 	bl	8009044 <TimerDisable>
    }
    port->vdm_expecting_response_ = FALSE;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
    return 0;
 800b576:	2300      	movs	r3, #0
  }
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3740      	adds	r7, #64	; 0x40
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <ProcessAttention>:

FSC_S32 ProcessAttention(struct Port *port, SopType sop, FSC_U32* arr_in,
                         FSC_U32 length_in)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	607a      	str	r2, [r7, #4]
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	460b      	mov	r3, r1
 800b58e:	72fb      	strb	r3, [r7, #11]
  doDataObject_t vdmh_in = {0};
 800b590:	2300      	movs	r3, #0
 800b592:	617b      	str	r3, [r7, #20]

  vdmh_in.object = arr_in[0];
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	617b      	str	r3, [r7, #20]
  port->original_policy_state_ = port->policy_state_;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  set_policy_state(port, PE_RCV_VDM_Attention_Request);
 800b5a6:	2184      	movs	r1, #132	; 0x84
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f7fc fe1d 	bl	80081e8 <set_policy_state>
  set_policy_state(port, port->original_policy_state_);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f7fc fe16 	bl	80081e8 <set_policy_state>

#ifdef FSC_HAVE_DP
  if (vdmh_in.SVDM.SVID == DP_SID)
 800b5bc:	8afb      	ldrh	r3, [r7, #22]
 800b5be:	f64f 7201 	movw	r2, #65281	; 0xff01
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d104      	bne.n	800b5d0 <ProcessAttention+0x50>
  {
    DP_ProcessCommand(port, arr_in);
 800b5c6:	6879      	ldr	r1, [r7, #4]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7f8 f9ff 	bl	80039cc <DP_ProcessCommand>
 800b5ce:	e008      	b.n	800b5e2 <ProcessAttention+0x62>
  }
  else
#endif /* FSC_HAVE_DP */
  {
    VdmInformAttention(port, vdmh_in.SVDM.SVID, vdmh_in.SVDM.ObjPos);
 800b5d0:	8af9      	ldrh	r1, [r7, #22]
 800b5d2:	7d7b      	ldrb	r3, [r7, #21]
 800b5d4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	461a      	mov	r2, r3
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 fd8b 	bl	800c0f8 <VdmInformAttention>
  }

  return 0;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <ProcessSvidSpecific>:

FSC_S32 ProcessSvidSpecific(struct Port *port, SopType sop, FSC_U32 *arr_in,
                            FSC_U32 length_in)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b090      	sub	sp, #64	; 0x40
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	607a      	str	r2, [r7, #4]
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	72fb      	strb	r3, [r7, #11]
  doDataObject_t vdmh_out = {0};
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	633b      	str	r3, [r7, #48]	; 0x30
  doDataObject_t vdmh_in = {0};
 800b600:	2300      	movs	r3, #0
 800b602:	62fb      	str	r3, [r7, #44]	; 0x2c
  FSC_U32 arr[7] = {0};
 800b604:	f107 0310 	add.w	r3, r7, #16
 800b608:	2200      	movs	r2, #0
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	605a      	str	r2, [r3, #4]
 800b60e:	609a      	str	r2, [r3, #8]
 800b610:	60da      	str	r2, [r3, #12]
 800b612:	611a      	str	r2, [r3, #16]
 800b614:	615a      	str	r2, [r3, #20]
 800b616:	619a      	str	r2, [r3, #24]
  FSC_U32 length;

  vdmh_in.object = arr_in[0];
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifdef FSC_HAVE_DP
  if (vdmh_in.SVDM.SVID == DP_SID) {
 800b61e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b620:	f64f 7201 	movw	r2, #65281	; 0xff01
 800b624:	4293      	cmp	r3, r2
 800b626:	d108      	bne.n	800b63a <ProcessSvidSpecific+0x4e>
    if (!DP_ProcessCommand(port, arr_in)) {
 800b628:	6879      	ldr	r1, [r7, #4]
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f7f8 f9ce 	bl	80039cc <DP_ProcessCommand>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <ProcessSvidSpecific+0x4e>
      return 0; /* DP code will send response, so return */
 800b636:	2300      	movs	r3, #0
 800b638:	e03e      	b.n	800b6b8 <ProcessSvidSpecific+0xcc>
    }
  }
#endif /*  FSC_HAVE_DP */
  /*  in this case the command is unrecognized. Reply with a NAK. */
  vdmh_out.SVDM.SVID = vdmh_in.SVDM.SVID;
 800b63a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b63c:	867b      	strh	r3, [r7, #50]	; 0x32
  vdmh_out.SVDM.VDMType = STRUCTURED_VDM;
 800b63e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b646:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	4619      	mov	r1, r3
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f7fe fa88 	bl	8009b64 <CurrentSVDMVersion>
 800b654:	4603      	mov	r3, r0
 800b656:	f003 0303 	and.w	r3, r3, #3
 800b65a:	b2da      	uxtb	r2, r3
 800b65c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b660:	f362 1346 	bfi	r3, r2, #5, #2
 800b664:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  vdmh_out.SVDM.ObjPos = 0;
 800b668:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b66c:	f36f 0302 	bfc	r3, #0, #3
 800b670:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  vdmh_out.SVDM.CommandType = RESPONDER_NAK;
 800b674:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b678:	2202      	movs	r2, #2
 800b67a:	f362 1387 	bfi	r3, r2, #6, #2
 800b67e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  vdmh_out.SVDM.Command = vdmh_in.SVDM.Command;
 800b682:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b686:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b690:	f362 0304 	bfi	r3, r2, #0, #5
 800b694:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  arr[0] = vdmh_out.object;
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	613b      	str	r3, [r7, #16]
  length = 1;
 800b69c:	2301      	movs	r3, #1
 800b69e:	637b      	str	r3, [r7, #52]	; 0x34
  SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800b6a6:	f107 0210 	add.w	r2, r7, #16
 800b6aa:	7af9      	ldrb	r1, [r7, #11]
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 f805 	bl	800b6c0 <SendVdmMessage>
  return 0;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3738      	adds	r7, #56	; 0x38
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <SendVdmMessage>:

/*  Internal utility functions */
void SendVdmMessage(struct Port *port, SopType sop, FSC_U32 *arr,
                    FSC_U32 length, PolicyState_t next_ps) {
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	607a      	str	r2, [r7, #4]
 800b6ca:	603b      	str	r3, [r7, #0]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	72fb      	strb	r3, [r7, #11]
  FSC_U32 i;

  port->vdm_msg_length_ = length;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
  port->vdm_next_ps_ = next_ps;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b6de:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
  for (i = 0; i < port->vdm_msg_length_; i++) {
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]
 800b6e6:	e00d      	b.n	800b704 <SendVdmMessage+0x44>
    port->vdm_msg_obj_[i].object = arr[i];
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68f9      	ldr	r1, [r7, #12]
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	339e      	adds	r3, #158	; 0x9e
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	440b      	add	r3, r1
 800b6fc:	605a      	str	r2, [r3, #4]
  for (i = 0; i < port->vdm_msg_length_; i++) {
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	3301      	adds	r3, #1
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d3eb      	bcc.n	800b6e8 <SendVdmMessage+0x28>
  }
  port->vdm_msg_tx_sop_  = sop;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	7afa      	ldrb	r2, [r7, #11]
 800b714:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
  port->vdm_sending_data_ = TRUE;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
  TimerDisable(&port->vdm_timer_);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b726:	4618      	mov	r0, r3
 800b728:	f7fd fc8c 	bl	8009044 <TimerDisable>
  set_policy_state(port, PE_GIVE_VDM);
 800b72c:	21a8      	movs	r1, #168	; 0xa8
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f7fc fd5a 	bl	80081e8 <set_policy_state>
  PolicyGiveVdm(port);
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7fe fab1 	bl	8009c9c <PolicyGiveVdm>
  port->idle_ = FALSE;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800b742:	bf00      	nop
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <SendVdmMessageWithTimeout>:

void SendVdmMessageWithTimeout(struct Port *port, SopType sop, FSC_U32 *arr,
                               FSC_U32 length, PolicyState_t n_pe)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b086      	sub	sp, #24
 800b74e:	af02      	add	r7, sp, #8
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	603b      	str	r3, [r7, #0]
 800b756:	460b      	mov	r3, r1
 800b758:	72fb      	strb	r3, [r7, #11]
  SendVdmMessage(port, sop, arr, length, n_pe);
 800b75a:	7af9      	ldrb	r1, [r7, #11]
 800b75c:	7e3b      	ldrb	r3, [r7, #24]
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7ff ffab 	bl	800b6c0 <SendVdmMessage>
  port->vdm_expecting_response_ = TRUE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
}
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
	...

0800b77c <StartVdmTimer>:

void StartVdmTimer(struct Port *port)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /*  start the appropriate timer */
  switch (port->policy_state_) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b78a:	3b71      	subs	r3, #113	; 0x71
 800b78c:	2b25      	cmp	r3, #37	; 0x25
 800b78e:	d86a      	bhi.n	800b866 <StartVdmTimer+0xea>
 800b790:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <StartVdmTimer+0x1c>)
 800b792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b796:	bf00      	nop
 800b798:	0800b831 	.word	0x0800b831
 800b79c:	0800b867 	.word	0x0800b867
 800b7a0:	0800b867 	.word	0x0800b867
 800b7a4:	0800b831 	.word	0x0800b831
 800b7a8:	0800b867 	.word	0x0800b867
 800b7ac:	0800b867 	.word	0x0800b867
 800b7b0:	0800b831 	.word	0x0800b831
 800b7b4:	0800b867 	.word	0x0800b867
 800b7b8:	0800b867 	.word	0x0800b867
 800b7bc:	0800b867 	.word	0x0800b867
 800b7c0:	0800b867 	.word	0x0800b867
 800b7c4:	0800b867 	.word	0x0800b867
 800b7c8:	0800b867 	.word	0x0800b867
 800b7cc:	0800b867 	.word	0x0800b867
 800b7d0:	0800b867 	.word	0x0800b867
 800b7d4:	0800b867 	.word	0x0800b867
 800b7d8:	0800b867 	.word	0x0800b867
 800b7dc:	0800b867 	.word	0x0800b867
 800b7e0:	0800b867 	.word	0x0800b867
 800b7e4:	0800b867 	.word	0x0800b867
 800b7e8:	0800b843 	.word	0x0800b843
 800b7ec:	0800b867 	.word	0x0800b867
 800b7f0:	0800b867 	.word	0x0800b867
 800b7f4:	0800b855 	.word	0x0800b855
 800b7f8:	0800b867 	.word	0x0800b867
 800b7fc:	0800b867 	.word	0x0800b867
 800b800:	0800b867 	.word	0x0800b867
 800b804:	0800b867 	.word	0x0800b867
 800b808:	0800b867 	.word	0x0800b867
 800b80c:	0800b867 	.word	0x0800b867
 800b810:	0800b867 	.word	0x0800b867
 800b814:	0800b867 	.word	0x0800b867
 800b818:	0800b867 	.word	0x0800b867
 800b81c:	0800b867 	.word	0x0800b867
 800b820:	0800b867 	.word	0x0800b867
 800b824:	0800b867 	.word	0x0800b867
 800b828:	0800b867 	.word	0x0800b867
 800b82c:	0800b831 	.word	0x0800b831
    case PE_INIT_PORT_VDM_Identity_Request:
    case PE_SRC_VDM_Identity_Request:
    case PE_INIT_VDM_SVIDs_Request:
    case PE_INIT_VDM_Modes_Request:
      TimerStart(&port->vdm_timer_, ktVDMSenderResponse);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b836:	f646 1178 	movw	r1, #27000	; 0x6978
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fd fbe4 	bl	8009008 <TimerStart>
      break;
 800b840:	e01a      	b.n	800b878 <StartVdmTimer+0xfc>
    case PE_DFP_VDM_Mode_Entry_Request:
      TimerStart(&port->vdm_timer_, ktVDMWaitModeEntry);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b848:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fd fbdb 	bl	8009008 <TimerStart>
      break;
 800b852:	e011      	b.n	800b878 <StartVdmTimer+0xfc>
    case PE_DFP_VDM_Mode_Exit_Request:
      TimerStart(&port->vdm_timer_, ktVDMWaitModeExit);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b85a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fd fbd2 	bl	8009008 <TimerStart>
      break;
 800b864:	e008      	b.n	800b878 <StartVdmTimer+0xfc>
//    case peDpRequestStatus:
//      TimerStart(&port->vdm_timer_, ktVDMSenderResponse);
//      break;
    default:
      /*  Time out immediately */
      TimerStart(&port->vdm_timer_, ktVDMSenderResponse);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b86c:	f646 1178 	movw	r1, #27000	; 0x6978
 800b870:	4618      	mov	r0, r3
 800b872:	f7fd fbc9 	bl	8009008 <TimerStart>
      return;
 800b876:	bf00      	nop
  }
}
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop

0800b880 <ResetPolicyState>:

void ResetPolicyState(struct Port *port, SopType sop) {
 800b880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b882:	b0a3      	sub	sp, #140	; 0x8c
 800b884:	af08      	add	r7, sp, #32
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
  /*  fake empty id, etc, Discover Identity for NAKs */
  Identity id = {0};
 800b88c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	605a      	str	r2, [r3, #4]
 800b896:	609a      	str	r2, [r3, #8]
 800b898:	60da      	str	r2, [r3, #12]
 800b89a:	611a      	str	r2, [r3, #16]
 800b89c:	615a      	str	r2, [r3, #20]
 800b89e:	619a      	str	r2, [r3, #24]
  SvidInfo svid_info = {0};
 800b8a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 ffdf 	bl	800c86c <memset>
  ModesInfo modes_info = {0};
 800b8ae:	f107 030c 	add.w	r3, r7, #12
 800b8b2:	2220      	movs	r2, #32
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 ffd8 	bl	800c86c <memset>

  port->vdm_expecting_response_ = FALSE;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
  TimerDisable(&port->vdm_timer_);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fd fbba 	bl	8009044 <TimerDisable>

  if (port->policy_state_ == PE_GIVE_VDM) {
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b8d6:	2ba8      	cmp	r3, #168	; 0xa8
 800b8d8:	d107      	bne.n	800b8ea <ResetPolicyState+0x6a>
    set_policy_state(port, port->vdm_next_ps_);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7fc fc80 	bl	80081e8 <set_policy_state>
 800b8e8:	e01e      	b.n	800b928 <ResetPolicyState+0xa8>
  }
  /* Reset from PE_GIVE_VDM is when message did not receive GoodCRC.
   * Reset from PE_VDM is when the message received GoodCRC. */
  else if (sop == SOP_TYPE_SOP1 &&
 800b8ea:	78fb      	ldrb	r3, [r7, #3]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d11b      	bne.n	800b928 <ResetPolicyState+0xa8>
      port->vdm_cbl_present_ == FALSE &&
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
  else if (sop == SOP_TYPE_SOP1 &&
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d116      	bne.n	800b928 <ResetPolicyState+0xa8>
      (port->policy_state_ == PE_INIT_PORT_VDM_Identity_Request ||
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      port->vdm_cbl_present_ == FALSE &&
 800b900:	2b71      	cmp	r3, #113	; 0x71
 800b902:	d004      	beq.n	800b90e <ResetPolicyState+0x8e>
      port->policy_state_ == PE_SRC_VDM_Identity_Request)) {
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      (port->policy_state_ == PE_INIT_PORT_VDM_Identity_Request ||
 800b90a:	2b96      	cmp	r3, #150	; 0x96
 800b90c:	d10c      	bne.n	800b928 <ResetPolicyState+0xa8>
    /* Cable discover id was successfully sent but the cable did not respond
     * with VDM. Try switching to PD 2.0 */
    if (port->dpm_pd_30_srccab_ == TRUE) {
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800b914:	2b01      	cmp	r3, #1
 800b916:	d107      	bne.n	800b928 <ResetPolicyState+0xa8>
      /* Set PD 2.0 for cable */
      port->dpm_pd_30_srccab_ = FALSE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
      /* Reset auto VDM only when it is active. It will prevent GUI from
       * activating AUTO vdm discovery when sending SOP' discovery */
      port->vdm_check_cbl_ = TRUE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
    }
  }

  if (sop == SOP_TYPE_SOP &&
 800b928:	78fb      	ldrb	r3, [r7, #3]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d108      	bne.n	800b940 <ResetPolicyState+0xc0>
      port->vdm_auto_state_ != AUTO_VDM_DONE) {
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  if (sop == SOP_TYPE_SOP &&
 800b934:	2b07      	cmp	r3, #7
 800b936:	d003      	beq.n	800b940 <ResetPolicyState+0xc0>
    port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2207      	movs	r2, #7
 800b93c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  }

  switch (port->policy_state_) {
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b946:	3b71      	subs	r3, #113	; 0x71
 800b948:	2b32      	cmp	r3, #50	; 0x32
 800b94a:	f200 810c 	bhi.w	800bb66 <ResetPolicyState+0x2e6>
 800b94e:	a201      	add	r2, pc, #4	; (adr r2, 800b954 <ResetPolicyState+0xd4>)
 800b950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b954:	0800ba21 	.word	0x0800ba21
 800b958:	0800bb67 	.word	0x0800bb67
 800b95c:	0800bb67 	.word	0x0800bb67
 800b960:	0800ba59 	.word	0x0800ba59
 800b964:	0800bb67 	.word	0x0800bb67
 800b968:	0800bb67 	.word	0x0800bb67
 800b96c:	0800ba91 	.word	0x0800ba91
 800b970:	0800bb67 	.word	0x0800bb67
 800b974:	0800bb67 	.word	0x0800bb67
 800b978:	0800bb67 	.word	0x0800bb67
 800b97c:	0800bb67 	.word	0x0800bb67
 800b980:	0800bb67 	.word	0x0800bb67
 800b984:	0800bb67 	.word	0x0800bb67
 800b988:	0800bb67 	.word	0x0800bb67
 800b98c:	0800bb67 	.word	0x0800bb67
 800b990:	0800bb67 	.word	0x0800bb67
 800b994:	0800bb67 	.word	0x0800bb67
 800b998:	0800bb67 	.word	0x0800bb67
 800b99c:	0800bb67 	.word	0x0800bb67
 800b9a0:	0800bb67 	.word	0x0800bb67
 800b9a4:	0800bac9 	.word	0x0800bac9
 800b9a8:	0800bb67 	.word	0x0800bb67
 800b9ac:	0800bb67 	.word	0x0800bb67
 800b9b0:	0800baed 	.word	0x0800baed
 800b9b4:	0800bb67 	.word	0x0800bb67
 800b9b8:	0800bb67 	.word	0x0800bb67
 800b9bc:	0800bb67 	.word	0x0800bb67
 800b9c0:	0800bb67 	.word	0x0800bb67
 800b9c4:	0800bb67 	.word	0x0800bb67
 800b9c8:	0800bb67 	.word	0x0800bb67
 800b9cc:	0800bb67 	.word	0x0800bb67
 800b9d0:	0800bb67 	.word	0x0800bb67
 800b9d4:	0800bb67 	.word	0x0800bb67
 800b9d8:	0800bb67 	.word	0x0800bb67
 800b9dc:	0800bb67 	.word	0x0800bb67
 800b9e0:	0800bb67 	.word	0x0800bb67
 800b9e4:	0800bb67 	.word	0x0800bb67
 800b9e8:	0800bb2f 	.word	0x0800bb2f
 800b9ec:	0800bb67 	.word	0x0800bb67
 800b9f0:	0800bb67 	.word	0x0800bb67
 800b9f4:	0800bb67 	.word	0x0800bb67
 800b9f8:	0800bb67 	.word	0x0800bb67
 800b9fc:	0800bb67 	.word	0x0800bb67
 800ba00:	0800bb67 	.word	0x0800bb67
 800ba04:	0800bb67 	.word	0x0800bb67
 800ba08:	0800bb67 	.word	0x0800bb67
 800ba0c:	0800bb67 	.word	0x0800bb67
 800ba10:	0800bb67 	.word	0x0800bb67
 800ba14:	0800bb67 	.word	0x0800bb67
 800ba18:	0800bb79 	.word	0x0800bb79
 800ba1c:	0800bb79 	.word	0x0800bb79
  case PE_INIT_PORT_VDM_Identity_Request:
    /* informing of a NAK */
    set_policy_state(port, PE_INIT_PORT_VDM_Identity_NAKed);
 800ba20:	2173      	movs	r1, #115	; 0x73
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7fc fbe0 	bl	80081e8 <set_policy_state>
    VdmInformIdentity(port, FALSE, sop, id);
 800ba28:	78fe      	ldrb	r6, [r7, #3]
 800ba2a:	466d      	mov	r5, sp
 800ba2c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800ba30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba34:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ba38:	e885 0003 	stmia.w	r5, {r0, r1}
 800ba3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3e:	4632      	mov	r2, r6
 800ba40:	2100      	movs	r1, #0
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fa3d 	bl	800bec2 <VdmInformIdentity>
    set_policy_state(port, port->original_policy_state_);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800ba4e:	4619      	mov	r1, r3
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7fc fbc9 	bl	80081e8 <set_policy_state>
    break;
 800ba56:	e090      	b.n	800bb7a <ResetPolicyState+0x2fa>
  case PE_INIT_VDM_SVIDs_Request:
    set_policy_state(port, PE_INIT_VDM_SVIDs_NAKed);
 800ba58:	2176      	movs	r1, #118	; 0x76
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7fc fbc4 	bl	80081e8 <set_policy_state>
    VdmInformSvids(port, FALSE, sop, svid_info);
 800ba60:	78fe      	ldrb	r6, [r7, #3]
 800ba62:	466d      	mov	r5, sp
 800ba64:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ba68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ba6c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ba70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ba74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba76:	4632      	mov	r2, r6
 800ba78:	2100      	movs	r1, #0
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fa6c 	bl	800bf58 <VdmInformSvids>
    set_policy_state(port, port->original_policy_state_);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7fc fbad 	bl	80081e8 <set_policy_state>
    break;
 800ba8e:	e074      	b.n	800bb7a <ResetPolicyState+0x2fa>
  case PE_INIT_VDM_Modes_Request:
    set_policy_state(port, PE_INIT_VDM_Modes_NAKed);
 800ba90:	2179      	movs	r1, #121	; 0x79
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7fc fba8 	bl	80081e8 <set_policy_state>
    VdmInformModes(port, FALSE, sop, modes_info);
 800ba98:	78fe      	ldrb	r6, [r7, #3]
 800ba9a:	466d      	mov	r5, sp
 800ba9c:	f107 0410 	add.w	r4, r7, #16
 800baa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800baa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800baa4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800baa8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4632      	mov	r2, r6
 800bab0:	2100      	movs	r1, #0
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fab5 	bl	800c022 <VdmInformModes>
    set_policy_state(port, port->original_policy_state_);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7fc fb91 	bl	80081e8 <set_policy_state>
    break;
 800bac6:	e058      	b.n	800bb7a <ResetPolicyState+0x2fa>
  case PE_DFP_VDM_Mode_Entry_Request:
    set_policy_state(port, PE_DFP_VDM_Mode_Entry_NAKed);
 800bac8:	2187      	movs	r1, #135	; 0x87
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7fc fb8c 	bl	80081e8 <set_policy_state>
    VdmEnterModeResult(port, FALSE, 0, 0);
 800bad0:	2300      	movs	r3, #0
 800bad2:	2200      	movs	r2, #0
 800bad4:	2100      	movs	r1, #0
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f99a 	bl	800be10 <VdmEnterModeResult>
    set_policy_state(port, port->original_policy_state_);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7fc fb7f 	bl	80081e8 <set_policy_state>
    break;
 800baea:	e046      	b.n	800bb7a <ResetPolicyState+0x2fa>
  case PE_DFP_VDM_Mode_Exit_Request:
    VdmExitModeResult(port, FALSE, 0, 0);
 800baec:	2300      	movs	r3, #0
 800baee:	2200      	movs	r2, #0
 800baf0:	2100      	movs	r1, #0
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f9bd 	bl	800be72 <VdmExitModeResult>

    /*  if Mode Exit request is NAKed, go to hard reset state! */
    if (port->original_policy_state_ == PE_SNK_Ready) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800bafe:	2b13      	cmp	r3, #19
 800bb00:	d104      	bne.n	800bb0c <ResetPolicyState+0x28c>
      set_policy_state(port, PE_SNK_Hard_Reset);
 800bb02:	2114      	movs	r1, #20
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7fc fb6f 	bl	80081e8 <set_policy_state>
 800bb0a:	e008      	b.n	800bb1e <ResetPolicyState+0x29e>
    }
    else if (port->original_policy_state_ == PE_SRC_Ready) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800bb12:	2b05      	cmp	r3, #5
 800bb14:	d103      	bne.n	800bb1e <ResetPolicyState+0x29e>
      set_policy_state(port, PE_SRC_Hard_Reset);
 800bb16:	2108      	movs	r1, #8
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7fc fb65 	bl	80081e8 <set_policy_state>
    }
    else {
      /*  TODO: should never reach here, but... */
    }
    set_policy_state(port, port->original_policy_state_);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fc fb5e 	bl	80081e8 <set_policy_state>
 800bb2c:	e025      	b.n	800bb7a <ResetPolicyState+0x2fa>
    return;
  case PE_SRC_VDM_Identity_Request:
    /*  informing of a NAK from cable */
    set_policy_state(port, PE_SRC_VDM_Identity_NAKed);
 800bb2e:	2198      	movs	r1, #152	; 0x98
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7fc fb59 	bl	80081e8 <set_policy_state>
    VdmInformIdentity(port, FALSE, sop, id);
 800bb36:	78fe      	ldrb	r6, [r7, #3]
 800bb38:	466d      	mov	r5, sp
 800bb3a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800bb3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb42:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bb46:	e885 0003 	stmia.w	r5, {r0, r1}
 800bb4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb4c:	4632      	mov	r2, r6
 800bb4e:	2100      	movs	r1, #0
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f9b6 	bl	800bec2 <VdmInformIdentity>
    set_policy_state(port, port->original_policy_state_);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7fc fb42 	bl	80081e8 <set_policy_state>
    break;
 800bb64:	e009      	b.n	800bb7a <ResetPolicyState+0x2fa>
  case PE_DFP_CBL_Send_Soft_Reset:
  case PE_DFP_CBL_Send_Cable_Reset:
    /* Allow PE to continue to reset states */
    break;
  default:
    set_policy_state(port, port->original_policy_state_);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f7fc fb3a 	bl	80081e8 <set_policy_state>
    break;
 800bb74:	bf00      	nop
 800bb76:	e000      	b.n	800bb7a <ResetPolicyState+0x2fa>
    break;
 800bb78:	bf00      	nop
  }
}
 800bb7a:	376c      	adds	r7, #108	; 0x6c
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb80 <VdmRequestIdentityInfo>:

/*  VDM "Callback" functionality (TODO) */
/*  TODO: These are the "vdm callback" functions from the 30x */
Identity VdmRequestIdentityInfo(struct Port *port, SopType sop)
{
 800bb80:	b5b0      	push	{r4, r5, r7, lr}
 800bb82:	b08c      	sub	sp, #48	; 0x30
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	71fb      	strb	r3, [r7, #7]
  Identity id = {0};
 800bb8e:	f107 0314 	add.w	r3, r7, #20
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	605a      	str	r2, [r3, #4]
 800bb98:	609a      	str	r2, [r3, #8]
 800bb9a:	60da      	str	r2, [r3, #12]
 800bb9c:	611a      	str	r2, [r3, #16]
 800bb9e:	615a      	str	r2, [r3, #20]
 800bba0:	619a      	str	r2, [r3, #24]
  if (port->mode_enable_ == TRUE &&
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f893 329f 	ldrb.w	r3, [r3, #671]	; 0x29f
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d109      	bne.n	800bbc0 <VdmRequestIdentityInfo+0x40>
      port->svid_enable_ == TRUE)
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
  if (port->mode_enable_ == TRUE &&
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d104      	bne.n	800bbc0 <VdmRequestIdentityInfo+0x40>
  {
    id.id_header.modal_op_supported = TRUE;
 800bbb6:	7dbb      	ldrb	r3, [r7, #22]
 800bbb8:	f043 0320 	orr.w	r3, r3, #32
 800bbbc:	75bb      	strb	r3, [r7, #22]
 800bbbe:	e003      	b.n	800bbc8 <VdmRequestIdentityInfo+0x48>
  }
  else
  {
    id.id_header.modal_op_supported = FALSE;
 800bbc0:	7dbb      	ldrb	r3, [r7, #22]
 800bbc2:	f36f 1345 	bfc	r3, #5, #1
 800bbc6:	75bb      	strb	r3, [r7, #22]
  }
  id.nack = FALSE;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	753b      	strb	r3, [r7, #20]
  id.id_header.usb_vid = USB_VID_SOP;
 800bbcc:	f44f 639d 	mov.w	r3, #1256	; 0x4e8
 800bbd0:	833b      	strh	r3, [r7, #24]
  id.id_header.product_type_ufp = Product_Type_UFP_SOP;
 800bbd2:	7dbb      	ldrb	r3, [r7, #22]
 800bbd4:	2205      	movs	r2, #5
 800bbd6:	f362 0384 	bfi	r3, r2, #2, #3
 800bbda:	75bb      	strb	r3, [r7, #22]
  if (DPM_CurrentSpecRev(port, sop) > PDSpecRev2p0)
 800bbdc:	79fb      	ldrb	r3, [r7, #7]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	68b8      	ldr	r0, [r7, #8]
 800bbe2:	f7f8 f9b3 	bl	8003f4c <DPM_CurrentSpecRev>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d903      	bls.n	800bbf4 <VdmRequestIdentityInfo+0x74>
  {
    id.id_header.product_type_dfp = Product_Type_DFP_SOP;
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	f36f 0302 	bfc	r3, #0, #3
 800bbf2:	75fb      	strb	r3, [r7, #23]
  }
  id.has_product_vdo = TRUE;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f887 3020 	strb.w	r3, [r7, #32]
  id.cert_stat_vdo.test_id = XID_SOP;
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	f36f 0313 	bfc	r3, #0, #20
 800bc00:	61fb      	str	r3, [r7, #28]
  id.product_vdo.usb_product_id = PID_SOP;
 800bc02:	2300      	movs	r3, #0
 800bc04:	847b      	strh	r3, [r7, #34]	; 0x22
  id.product_vdo.bcd_device = bcdDevice_SOP;
 800bc06:	2300      	movs	r3, #0
 800bc08:	84bb      	strh	r3, [r7, #36]	; 0x24

  return id;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	461d      	mov	r5, r3
 800bc0e:	f107 0414 	add.w	r4, r7, #20
 800bc12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc16:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bc1a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	3730      	adds	r7, #48	; 0x30
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bdb0      	pop	{r4, r5, r7, pc}

0800bc26 <VdmRequestSvidInfo>:

SvidInfo VdmRequestSvidInfo(struct Port *port)
{
 800bc26:	b5b0      	push	{r4, r5, r7, lr}
 800bc28:	b08a      	sub	sp, #40	; 0x28
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]
  SvidInfo svid_info = {0};
 800bc30:	f107 0308 	add.w	r3, r7, #8
 800bc34:	2220      	movs	r2, #32
 800bc36:	2100      	movs	r1, #0
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fe17 	bl	800c86c <memset>
  if (port->svid_enable_ == TRUE)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d108      	bne.n	800bc5a <VdmRequestSvidInfo+0x34>
  {
    svid_info.nack = FALSE;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	723b      	strb	r3, [r7, #8]
    svid_info.num_svids = 1;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	60fb      	str	r3, [r7, #12]
    svid_info.svids[0] = port->my_svid_;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800bc56:	823b      	strh	r3, [r7, #16]
 800bc58:	e005      	b.n	800bc66 <VdmRequestSvidInfo+0x40>
  }
  else
  {
    svid_info.nack = TRUE;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	723b      	strb	r3, [r7, #8]
    svid_info.num_svids = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
    svid_info.svids[0] = 0x0000;
 800bc62:	2300      	movs	r3, #0
 800bc64:	823b      	strh	r3, [r7, #16]
  }
  return svid_info;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	461d      	mov	r5, r3
 800bc6a:	f107 0408 	add.w	r4, r7, #8
 800bc6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bc76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	3728      	adds	r7, #40	; 0x28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bdb0      	pop	{r4, r5, r7, pc}

0800bc82 <VdmRequestModesInfo>:

ModesInfo VdmRequestModesInfo(struct Port *port, FSC_U16 svid)
{
 800bc82:	b5b0      	push	{r4, r5, r7, lr}
 800bc84:	b08c      	sub	sp, #48	; 0x30
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	60f8      	str	r0, [r7, #12]
 800bc8a:	60b9      	str	r1, [r7, #8]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	80fb      	strh	r3, [r7, #6]
  ModesInfo modes_info = {0};
 800bc90:	f107 0310 	add.w	r3, r7, #16
 800bc94:	2220      	movs	r2, #32
 800bc96:	2100      	movs	r1, #0
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fde7 	bl	800c86c <memset>
  if (port->svid_enable_ == TRUE &&
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d11f      	bne.n	800bce8 <VdmRequestModesInfo+0x66>
      port->mode_enable_ == TRUE &&
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f893 329f 	ldrb.w	r3, [r3, #671]	; 0x29f
  if (port->svid_enable_ == TRUE &&
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d11a      	bne.n	800bce8 <VdmRequestModesInfo+0x66>
      svid == port->my_svid_) {
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
      port->mode_enable_ == TRUE &&
 800bcb8:	88fa      	ldrh	r2, [r7, #6]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d114      	bne.n	800bce8 <VdmRequestModesInfo+0x66>
    modes_info.nack = FALSE;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	743b      	strb	r3, [r7, #16]
    modes_info.svid = svid;
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	827b      	strh	r3, [r7, #18]
    modes_info.num_modes = 1;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	617b      	str	r3, [r7, #20]
#ifdef FSC_HAVE_DP
    if (svid == DP_SID)
 800bcca:	88fb      	ldrh	r3, [r7, #6]
 800bccc:	f64f 7201 	movw	r2, #65281	; 0xff01
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d104      	bne.n	800bcde <VdmRequestModesInfo+0x5c>
    {
      modes_info.modes[0] = port->display_port_data_.DpCap.word;
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bcda:	61bb      	str	r3, [r7, #24]
    if (svid == DP_SID)
 800bcdc:	e00c      	b.n	800bcf8 <VdmRequestModesInfo+0x76>
    }
    else
#endif
    {
      modes_info.modes[0] = port->my_mode_;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bce4:	61bb      	str	r3, [r7, #24]
    if (svid == DP_SID)
 800bce6:	e007      	b.n	800bcf8 <VdmRequestModesInfo+0x76>
    }
  }
  else {
    modes_info.nack = TRUE;
 800bce8:	2301      	movs	r3, #1
 800bcea:	743b      	strb	r3, [r7, #16]
    modes_info.svid = svid;
 800bcec:	88fb      	ldrh	r3, [r7, #6]
 800bcee:	827b      	strh	r3, [r7, #18]
    modes_info.num_modes = 0;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	617b      	str	r3, [r7, #20]
    modes_info.modes[0] = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	61bb      	str	r3, [r7, #24]
  }
  return modes_info;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	461d      	mov	r5, r3
 800bcfc:	f107 0410 	add.w	r4, r7, #16
 800bd00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bd08:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	3730      	adds	r7, #48	; 0x30
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bdb0      	pop	{r4, r5, r7, pc}

0800bd14 <VdmModeEntryRequest>:

FSC_BOOL VdmModeEntryRequest(struct Port *port, FSC_U16 svid,
                             FSC_U32 mode_index)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	817b      	strh	r3, [r7, #10]
  if ((port->svid_enable_ == TRUE) &&
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d127      	bne.n	800bd7c <VdmModeEntryRequest+0x68>
      (port->mode_enable_ == TRUE) &&
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f893 329f 	ldrb.w	r3, [r3, #671]	; 0x29f
  if ((port->svid_enable_ == TRUE) &&
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d122      	bne.n	800bd7c <VdmModeEntryRequest+0x68>
      (svid == port->my_svid_))
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
      (port->mode_enable_ == TRUE) &&
 800bd3c:	897a      	ldrh	r2, [r7, #10]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d11c      	bne.n	800bd7c <VdmModeEntryRequest+0x68>
  {
    if (SVID1_mode1_enter_SOP && mode_index == 1)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d119      	bne.n	800bd7c <VdmModeEntryRequest+0x68>
    {
      port->mode_entered_ = TRUE;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
#ifdef FSC_HAVE_DP
      if (port->my_svid_ == DP_SID)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800bd56:	f64f 7201 	movw	r2, #65281	; 0xff01
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d103      	bne.n	800bd66 <VdmModeEntryRequest+0x52>
      {
        port->display_port_data_.DpModeEntered = mode_index;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
      }
#endif /*  FSC_HAVE_DP */
      notify_observers(EVENT_MODE_ENTER_SUCCESS, port->port_id_, 0);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	4619      	mov	r1, r3
 800bd70:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bd74:	f7f8 f938 	bl	8003fe8 <notify_observers>
      return TRUE;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e000      	b.n	800bd7e <VdmModeEntryRequest+0x6a>
    }
  }
  return FALSE;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <VdmModeExitRequest>:

FSC_BOOL VdmModeExitRequest(struct Port *port, FSC_U16 svid, FSC_U32 mode_index)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b084      	sub	sp, #16
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	60f8      	str	r0, [r7, #12]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	607a      	str	r2, [r7, #4]
 800bd92:	817b      	strh	r3, [r7, #10]
  if (port->mode_entered_ == TRUE &&
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d133      	bne.n	800be06 <VdmModeExitRequest+0x80>
      svid == port->my_svid_ &&
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
  if (port->mode_entered_ == TRUE &&
 800bda4:	897a      	ldrh	r2, [r7, #10]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d12d      	bne.n	800be06 <VdmModeExitRequest+0x80>
      svid == port->my_svid_ &&
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d12a      	bne.n	800be06 <VdmModeExitRequest+0x80>
      mode_index == 1) {
    port->mode_entered_ = FALSE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

#ifdef FSC_HAVE_DP
    if (port->display_port_data_.DpModeEntered &&
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d016      	beq.n	800bdf0 <VdmModeExitRequest+0x6a>
        (port->display_port_data_.DpModeEntered == mode_index) &&
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
    if (port->display_port_data_.DpModeEntered &&
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d110      	bne.n	800bdf0 <VdmModeExitRequest+0x6a>
        (port->display_port_data_.DpModeEntered == mode_index) &&
 800bdce:	897b      	ldrh	r3, [r7, #10]
 800bdd0:	f64f 7201 	movw	r2, #65281	; 0xff01
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d10b      	bne.n	800bdf0 <VdmModeExitRequest+0x6a>
        (svid == DP_SID))
    {
      port->display_port_data_.DpModeEntered = 0;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
      port->display_port_data_.DpConfigured = FALSE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
      platform_dp_enable_pins(FALSE, 0);
 800bde8:	2100      	movs	r1, #0
 800bdea:	2000      	movs	r0, #0
 800bdec:	f7f4 fdc7 	bl	800097e <platform_dp_enable_pins>
    }
#endif /*  FSC_HAVE_DP */
    notify_observers(EVENT_MODE_EXIT_SUCCESS, port->port_id_, 0);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bdfe:	f7f8 f8f3 	bl	8003fe8 <notify_observers>
    return TRUE;
 800be02:	2301      	movs	r3, #1
 800be04:	e000      	b.n	800be08 <VdmModeExitRequest+0x82>
  }
  return FALSE;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <VdmEnterModeResult>:

FSC_BOOL VdmEnterModeResult(struct Port *port, FSC_BOOL success, FSC_U16 svid,
                            FSC_U32 mode_index)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	607b      	str	r3, [r7, #4]
 800be1a:	460b      	mov	r3, r1
 800be1c:	72fb      	strb	r3, [r7, #11]
 800be1e:	4613      	mov	r3, r2
 800be20:	813b      	strh	r3, [r7, #8]
  port->auto_mode_entry_pos_ = -1;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	22ff      	movs	r2, #255	; 0xff
 800be26:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
  port->mode_entered_ = FALSE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
//  port->display_port_data_.DpModeEntered = 0;
  if (success == TRUE)
 800be32:	7afb      	ldrb	r3, [r7, #11]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d117      	bne.n	800be68 <VdmEnterModeResult+0x58>
  {
    port->mode_entered_ = TRUE;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
#ifdef FSC_HAVE_DP
    if (svid == DP_SID)
 800be40:	893b      	ldrh	r3, [r7, #8]
 800be42:	f64f 7201 	movw	r2, #65281	; 0xff01
 800be46:	4293      	cmp	r3, r2
 800be48:	d103      	bne.n	800be52 <VdmEnterModeResult+0x42>
    {
      port->display_port_data_.DpModeEntered = mode_index;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    }
#endif
    notify_observers(EVENT_MODE_ENTER_SUCCESS, port->port_id_, 0);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	b29b      	uxth	r3, r3
 800be58:	2200      	movs	r2, #0
 800be5a:	4619      	mov	r1, r3
 800be5c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800be60:	f7f8 f8c2 	bl	8003fe8 <notify_observers>
    return TRUE;
 800be64:	2301      	movs	r3, #1
 800be66:	e000      	b.n	800be6a <VdmEnterModeResult+0x5a>
  }

  return FALSE;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <VdmExitModeResult>:

void VdmExitModeResult(struct Port *port, FSC_BOOL success, FSC_U16 svid,
                       FSC_U32 mode_index)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b084      	sub	sp, #16
 800be76:	af00      	add	r7, sp, #0
 800be78:	60f8      	str	r0, [r7, #12]
 800be7a:	607b      	str	r3, [r7, #4]
 800be7c:	460b      	mov	r3, r1
 800be7e:	72fb      	strb	r3, [r7, #11]
 800be80:	4613      	mov	r3, r2
 800be82:	813b      	strh	r3, [r7, #8]
#ifdef FSC_HAVE_DP
  if (svid == DP_SID &&
 800be84:	893b      	ldrh	r3, [r7, #8]
 800be86:	f64f 7201 	movw	r2, #65281	; 0xff01
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d109      	bne.n	800bea2 <VdmExitModeResult+0x30>
      port->display_port_data_.DpModeEntered == mode_index)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
  if (svid == DP_SID &&
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d103      	bne.n	800bea2 <VdmExitModeResult+0x30>
  {
    port->display_port_data_.DpModeEntered = 0;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }
#endif /*  FSC_HAVE_DP */
  if (success == TRUE)
 800bea2:	7afb      	ldrb	r3, [r7, #11]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d108      	bne.n	800beba <VdmExitModeResult+0x48>
      notify_observers(EVENT_MODE_EXIT_SUCCESS, port->port_id_, 0);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	b29b      	uxth	r3, r3
 800beae:	2200      	movs	r2, #0
 800beb0:	4619      	mov	r1, r3
 800beb2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800beb6:	f7f8 f897 	bl	8003fe8 <notify_observers>
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <VdmInformIdentity>:

void VdmInformIdentity(struct Port *port, FSC_BOOL success, SopType sop,
                       Identity id)
{
 800bec2:	b082      	sub	sp, #8
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	617b      	str	r3, [r7, #20]
 800bece:	460b      	mov	r3, r1
 800bed0:	70fb      	strb	r3, [r7, #3]
 800bed2:	4613      	mov	r3, r2
 800bed4:	70bb      	strb	r3, [r7, #2]
  if (sop == SOP_TYPE_SOP1) {
 800bed6:	78bb      	ldrb	r3, [r7, #2]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d127      	bne.n	800bf2c <VdmInformIdentity+0x6a>
    if (success) {
 800bedc:	78fb      	ldrb	r3, [r7, #3]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d01e      	beq.n	800bf20 <VdmInformIdentity+0x5e>
      DPM_SetSOP1Details(port, success, port->policy_rx_header_.SpecRevision,
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800bee8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800beec:	b2db      	uxtb	r3, r3
 800beee:	461a      	mov	r2, r3
                         id.cable_vdo.vbus_current_handling_cap == VBUS_5A);
 800bef0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
      DPM_SetSOP1Details(port, success, port->policy_rx_header_.SpecRevision,
 800bef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b80      	cmp	r3, #128	; 0x80
 800befc:	bf0c      	ite	eq
 800befe:	2301      	moveq	r3, #1
 800bf00:	2300      	movne	r3, #0
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	78f9      	ldrb	r1, [r7, #3]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7f7 fff7 	bl	8003efa <DPM_SetSOP1Details>
      notify_observers(EVENT_CBL_IDENTITY_RECEIVED, port->port_id_, 0);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	2200      	movs	r2, #0
 800bf14:	4619      	mov	r1, r3
 800bf16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bf1a:	f7f8 f865 	bl	8003fe8 <notify_observers>
 800bf1e:	e005      	b.n	800bf2c <VdmInformIdentity+0x6a>
    }
    else {
      DPM_SetSOP1Details(port, success, 0, 0);
 800bf20:	78f9      	ldrb	r1, [r7, #3]
 800bf22:	2300      	movs	r3, #0
 800bf24:	2200      	movs	r2, #0
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7f7 ffe7 	bl	8003efa <DPM_SetSOP1Details>
    }
  }
  if (sop == SOP_TYPE_SOP)
 800bf2c:	78bb      	ldrb	r3, [r7, #2]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10b      	bne.n	800bf4a <VdmInformIdentity+0x88>
  {
      if (success == TRUE)
 800bf32:	78fb      	ldrb	r3, [r7, #3]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d108      	bne.n	800bf4a <VdmInformIdentity+0x88>
          notify_observers(EVENT_IDENTITY_RECEIVED, port->port_id_, 0);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	2200      	movs	r2, #0
 800bf40:	4619      	mov	r1, r3
 800bf42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bf46:	f7f8 f84f 	bl	8003fe8 <notify_observers>
  }
}
 800bf4a:	bf00      	nop
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf54:	b002      	add	sp, #8
 800bf56:	4770      	bx	lr

0800bf58 <VdmInformSvids>:

void VdmInformSvids(struct Port *port, FSC_BOOL success, SopType sop,
                    SvidInfo svid_info)
{
 800bf58:	b082      	sub	sp, #8
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	61fb      	str	r3, [r7, #28]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	70bb      	strb	r3, [r7, #2]
  FSC_U32 i;
  /* Reset the known index */
  port->svid_discv_idx_ = -1;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf72:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
  /* Assume we are are going to be done */
  port->svid_discvry_done_ = TRUE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  if (success == TRUE)
 800bf7e:	78fb      	ldrb	r3, [r7, #3]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d147      	bne.n	800c014 <VdmInformSvids+0xbc>
  {
    port->core_svid_info_.num_svids = svid_info.num_svids;
 800bf84:	6a3a      	ldr	r2, [r7, #32]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    for (i = 0; (i < svid_info.num_svids) && (i < MAX_NUM_SVIDS); i++)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60fb      	str	r3, [r7, #12]
 800bf90:	e022      	b.n	800bfd8 <VdmInformSvids+0x80>
    {
      port->core_svid_info_.svids[i] = svid_info.svids[i];
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3304      	adds	r3, #4
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	f107 0218 	add.w	r2, r7, #24
 800bf9c:	4413      	add	r3, r2
 800bf9e:	8899      	ldrh	r1, [r3, #4]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	4413      	add	r3, r2
 800bfac:	460a      	mov	r2, r1
 800bfae:	809a      	strh	r2, [r3, #4]
      if (port->core_svid_info_.svids[i] == SVID1_SOP)
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	4413      	add	r3, r2
 800bfbc:	889b      	ldrh	r3, [r3, #4]
 800bfbe:	f64f 7201 	movw	r2, #65281	; 0xff01
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d105      	bne.n	800bfd2 <VdmInformSvids+0x7a>
      {
        port->svid_discv_idx_ = i;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	b21a      	sxth	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
        break;
 800bfd0:	e009      	b.n	800bfe6 <VdmInformSvids+0x8e>
    for (i = 0; (i < svid_info.num_svids) && (i < MAX_NUM_SVIDS); i++)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d202      	bcs.n	800bfe6 <VdmInformSvids+0x8e>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b0b      	cmp	r3, #11
 800bfe4:	d9d5      	bls.n	800bf92 <VdmInformSvids+0x3a>
      }
    }

    if (port->svid_discv_idx_ < 0 &&
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	da08      	bge.n	800c002 <VdmInformSvids+0xaa>
        port->core_svid_info_.num_svids >= MAX_NUM_SVIDS)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    if (port->svid_discv_idx_ < 0 &&
 800bff6:	2b0b      	cmp	r3, #11
 800bff8:	d903      	bls.n	800c002 <VdmInformSvids+0xaa>
    {
      /* Continue discovery as no known svid is found and there are more svids */
      port->svid_discvry_done_ = FALSE;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    }

    notify_observers(EVENT_SVID_RECEIVED, port->port_id_, 0);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	b29b      	uxth	r3, r3
 800c008:	2200      	movs	r2, #0
 800c00a:	4619      	mov	r1, r3
 800c00c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c010:	f7f7 ffea 	bl	8003fe8 <notify_observers>
  }

  /* If multiple request to svids are required then reset the vdm auto
   * discovery state to request svids here. */
}
 800c014:	bf00      	nop
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c01e:	b002      	add	sp, #8
 800c020:	4770      	bx	lr

0800c022 <VdmInformModes>:

void VdmInformModes(struct Port *port, FSC_BOOL success, SopType sop,
                    ModesInfo modes_info)
{
 800c022:	b082      	sub	sp, #8
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	61fb      	str	r3, [r7, #28]
 800c02e:	460b      	mov	r3, r1
 800c030:	70fb      	strb	r3, [r7, #3]
 800c032:	4613      	mov	r3, r2
 800c034:	70bb      	strb	r3, [r7, #2]
  FSC_U8 i;
  if (success == TRUE && modes_info.nack == FALSE)
 800c036:	78fb      	ldrb	r3, [r7, #3]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d156      	bne.n	800c0ea <VdmInformModes+0xc8>
 800c03c:	7f3b      	ldrb	r3, [r7, #28]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d153      	bne.n	800c0ea <VdmInformModes+0xc8>
  {
#ifdef FSC_HAVE_DP
    /* Evaluate DP mode first if defined */
    if (modes_info.svid == DP_SID)
 800c042:	8bfb      	ldrh	r3, [r7, #30]
 800c044:	f64f 7201 	movw	r2, #65281	; 0xff01
 800c048:	4293      	cmp	r3, r2
 800c04a:	d120      	bne.n	800c08e <VdmInformModes+0x6c>
    {
      for (i = 0; i < modes_info.num_modes; i++)
 800c04c:	2300      	movs	r3, #0
 800c04e:	73fb      	strb	r3, [r7, #15]
 800c050:	e018      	b.n	800c084 <VdmInformModes+0x62>
      {
        if (DP_EvaluateSinkCapability(port, modes_info.modes[i]))
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	3302      	adds	r3, #2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	f107 0218 	add.w	r2, r7, #24
 800c05c:	4413      	add	r3, r2
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7f7 fc6e 	bl	8003944 <DP_EvaluateSinkCapability>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d007      	beq.n	800c07e <VdmInformModes+0x5c>
        {
          port->auto_mode_entry_pos_ = i + 1;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	3301      	adds	r3, #1
 800c072:	b2db      	uxtb	r3, r3
 800c074:	b25a      	sxtb	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
          break;
 800c07c:	e02c      	b.n	800c0d8 <VdmInformModes+0xb6>
      for (i = 0; i < modes_info.num_modes; i++)
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	3301      	adds	r3, #1
 800c082:	73fb      	strb	r3, [r7, #15]
 800c084:	7bfa      	ldrb	r2, [r7, #15]
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d3e2      	bcc.n	800c052 <VdmInformModes+0x30>
 800c08c:	e024      	b.n	800c0d8 <VdmInformModes+0xb6>
        }
      }
    }
    else
#endif /* FSC_HAVE_DP */
    if (modes_info.svid == SVID_AUTO_ENTRY)
 800c08e:	8bfb      	ldrh	r3, [r7, #30]
 800c090:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800c094:	4293      	cmp	r3, r2
 800c096:	d11f      	bne.n	800c0d8 <VdmInformModes+0xb6>
    {
      for (i = 0; i < modes_info.num_modes; i++)
 800c098:	2300      	movs	r3, #0
 800c09a:	73fb      	strb	r3, [r7, #15]
 800c09c:	e018      	b.n	800c0d0 <VdmInformModes+0xae>
      {
        if (MODE_AUTO_ENTRY == modes_info.modes[i] &&
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	3302      	adds	r3, #2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	f107 0218 	add.w	r2, r7, #24
 800c0a8:	4413      	add	r3, r2
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d10c      	bne.n	800c0ca <VdmInformModes+0xa8>
            port->auto_mode_entry_enabled_ == TRUE)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
        if (MODE_AUTO_ENTRY == modes_info.modes[i] &&
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d107      	bne.n	800c0ca <VdmInformModes+0xa8>
        {
          port->auto_mode_entry_pos_ = i + 1;
 800c0ba:	7bfb      	ldrb	r3, [r7, #15]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	b25a      	sxtb	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
          break;
 800c0c8:	e006      	b.n	800c0d8 <VdmInformModes+0xb6>
      for (i = 0; i < modes_info.num_modes; i++)
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	73fb      	strb	r3, [r7, #15]
 800c0d0:	7bfa      	ldrb	r2, [r7, #15]
 800c0d2:	6a3b      	ldr	r3, [r7, #32]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d3e2      	bcc.n	800c09e <VdmInformModes+0x7c>
        }
      }
    }
    notify_observers(EVENT_MODES_RECEIVED, port->port_id_, 0);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	2200      	movs	r2, #0
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c0e6:	f7f7 ff7f 	bl	8003fe8 <notify_observers>
  }
}
 800c0ea:	bf00      	nop
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0f4:	b002      	add	sp, #8
 800c0f6:	4770      	bx	lr

0800c0f8 <VdmInformAttention>:

void VdmInformAttention(struct Port *port, FSC_U16 svid, FSC_U8 mode_index)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	807b      	strh	r3, [r7, #2]
 800c104:	4613      	mov	r3, r2
 800c106:	707b      	strb	r3, [r7, #1]
/*  TODO */
    notify_observers(EVENT_MODE_VDM_ATTENTION, port->port_id_, 0);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	2200      	movs	r2, #0
 800c110:	4619      	mov	r1, r3
 800c112:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c116:	f7f7 ff67 	bl	8003fe8 <notify_observers>
}
 800c11a:	bf00      	nop
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <getIdHeader>:
  ret.command = (Command)((in >> 0) & 0x1F);
  return ret;
}

IdHeader getIdHeader(FSC_U32 in)
{
 800c122:	b480      	push	{r7}
 800c124:	b085      	sub	sp, #20
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  IdHeader ret;
  ret.usb_host_data_capable = (FSC_BOOL)((in >> 31) & 0x1);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	0fdb      	lsrs	r3, r3, #31
 800c12e:	f003 0301 	and.w	r3, r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	7a3b      	ldrb	r3, [r7, #8]
 800c136:	f362 0300 	bfi	r3, r2, #0, #1
 800c13a:	723b      	strb	r3, [r7, #8]
  ret.usb_device_data_capable = (FSC_BOOL)((in >> 30) & 0x1);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	0f9b      	lsrs	r3, r3, #30
 800c140:	f003 0301 	and.w	r3, r3, #1
 800c144:	b2da      	uxtb	r2, r3
 800c146:	7a3b      	ldrb	r3, [r7, #8]
 800c148:	f362 0341 	bfi	r3, r2, #1, #1
 800c14c:	723b      	strb	r3, [r7, #8]
  ret.product_type_ufp = (ProductType)((in >> 27) & 0x7);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	0edb      	lsrs	r3, r3, #27
 800c152:	f003 0307 	and.w	r3, r3, #7
 800c156:	b2da      	uxtb	r2, r3
 800c158:	7a3b      	ldrb	r3, [r7, #8]
 800c15a:	f362 0384 	bfi	r3, r2, #2, #3
 800c15e:	723b      	strb	r3, [r7, #8]
  ret.modal_op_supported = (FSC_BOOL)((in >> 26) & 0x1);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	0e9b      	lsrs	r3, r3, #26
 800c164:	f003 0301 	and.w	r3, r3, #1
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	7a3b      	ldrb	r3, [r7, #8]
 800c16c:	f362 1345 	bfi	r3, r2, #5, #1
 800c170:	723b      	strb	r3, [r7, #8]
  ret.product_type_dfp = (ProductType)((in >> 23));
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	0ddb      	lsrs	r3, r3, #23
 800c176:	f003 0307 	and.w	r3, r3, #7
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	7a7b      	ldrb	r3, [r7, #9]
 800c17e:	f362 0302 	bfi	r3, r2, #0, #3
 800c182:	727b      	strb	r3, [r7, #9]
  ret.usb_vid = (FSC_U16)((in >> 0) & 0xFFFF);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	b29b      	uxth	r3, r3
 800c188:	817b      	strh	r3, [r7, #10]
  return ret;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	60fb      	str	r3, [r7, #12]
 800c18e:	2300      	movs	r3, #0
 800c190:	89ba      	ldrh	r2, [r7, #12]
 800c192:	f362 030f 	bfi	r3, r2, #0, #16
 800c196:	89fa      	ldrh	r2, [r7, #14]
 800c198:	f362 431f 	bfi	r3, r2, #16, #16
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <getBitsForIdHeader>:
  ret |= (tmp << 0);
  return ret;
}

FSC_U32 getBitsForIdHeader(IdHeader in)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	60bb      	str	r3, [r7, #8]
  tmp = in.usb_host_data_capable;
 800c1b8:	793b      	ldrb	r3, [r7, #4]
 800c1ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 31);
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	07db      	lsls	r3, r3, #31
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	60fb      	str	r3, [r7, #12]
  tmp = in.usb_device_data_capable;
 800c1cc:	793b      	ldrb	r3, [r7, #4]
 800c1ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 30);
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	079b      	lsls	r3, r3, #30
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	60fb      	str	r3, [r7, #12]
  tmp = in.product_type_ufp;
 800c1e0:	793b      	ldrb	r3, [r7, #4]
 800c1e2:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 27);
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	06db      	lsls	r3, r3, #27
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]
  tmp = in.modal_op_supported;
 800c1f4:	793b      	ldrb	r3, [r7, #4]
 800c1f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 26);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	069b      	lsls	r3, r3, #26
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	4313      	orrs	r3, r2
 800c206:	60fb      	str	r3, [r7, #12]
  tmp = in.product_type_dfp;
 800c208:	797b      	ldrb	r3, [r7, #5]
 800c20a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 23);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	05db      	lsls	r3, r3, #23
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	4313      	orrs	r3, r2
 800c21a:	60fb      	str	r3, [r7, #12]
  tmp = in.usb_vid;
 800c21c:	88fb      	ldrh	r3, [r7, #6]
 800c21e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	4313      	orrs	r3, r2
 800c226:	60fb      	str	r3, [r7, #12]
  return ret;
 800c228:	68fb      	ldr	r3, [r7, #12]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <getCertStatVdo>:

/*  Functions that convert bits into internal VDO representations... */
CertStatVdo getCertStatVdo(FSC_U32 in)
{
 800c236:	b480      	push	{r7}
 800c238:	b085      	sub	sp, #20
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  CertStatVdo ret;
  ret.test_id = (in >> 0) & 0xFFFFF;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f362 0313 	bfi	r3, r2, #0, #20
 800c24a:	60fb      	str	r3, [r7, #12]
  return ret;
 800c24c:	68fb      	ldr	r3, [r7, #12]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <getProductVdo>:

ProductVdo getProductVdo(FSC_U32 in)
{
 800c25a:	b480      	push	{r7}
 800c25c:	b085      	sub	sp, #20
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  ProductVdo ret;
  ret.usb_product_id = (in >> 16) & 0xFFFF;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	0c1b      	lsrs	r3, r3, #16
 800c266:	b29b      	uxth	r3, r3
 800c268:	813b      	strh	r3, [r7, #8]
  ret.bcd_device = (in >> 0) & 0xFFFF;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	817b      	strh	r3, [r7, #10]
  return ret;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	2300      	movs	r3, #0
 800c276:	89ba      	ldrh	r2, [r7, #12]
 800c278:	f362 030f 	bfi	r3, r2, #0, #16
 800c27c:	89fa      	ldrh	r2, [r7, #14]
 800c27e:	f362 431f 	bfi	r3, r2, #16, #16
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <getCableVdo>:

CableVdo getCableVdo(FSC_U32 in)
{
 800c28e:	b480      	push	{r7}
 800c290:	b085      	sub	sp, #20
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  CableVdo ret;
  ret.cable_hw_version = (in >> 28) & 0xF;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	0f1b      	lsrs	r3, r3, #28
 800c29a:	f003 030f 	and.w	r3, r3, #15
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	7a3b      	ldrb	r3, [r7, #8]
 800c2a2:	f362 0303 	bfi	r3, r2, #0, #4
 800c2a6:	723b      	strb	r3, [r7, #8]
  ret.cable_fw_version = (in >> 24) & 0xF;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	0e1b      	lsrs	r3, r3, #24
 800c2ac:	f003 030f 	and.w	r3, r3, #15
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	7a3b      	ldrb	r3, [r7, #8]
 800c2b4:	f362 1307 	bfi	r3, r2, #4, #4
 800c2b8:	723b      	strb	r3, [r7, #8]
  ret.cable_to_type = (CableToType)((in >> 18) & 0x3);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	0c9b      	lsrs	r3, r3, #18
 800c2be:	f003 0303 	and.w	r3, r3, #3
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	7a7b      	ldrb	r3, [r7, #9]
 800c2c6:	f362 0301 	bfi	r3, r2, #0, #2
 800c2ca:	727b      	strb	r3, [r7, #9]
  ret.cable_to_pr = (CableToPr)((in >> 17) & 0x1);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	0c5b      	lsrs	r3, r3, #17
 800c2d0:	f003 0301 	and.w	r3, r3, #1
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	7a7b      	ldrb	r3, [r7, #9]
 800c2d8:	f362 0382 	bfi	r3, r2, #2, #1
 800c2dc:	727b      	strb	r3, [r7, #9]
  ret.cable_latency = (CableLatency)((in >> 13) & 0xF);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	0b5b      	lsrs	r3, r3, #13
 800c2e2:	f003 030f 	and.w	r3, r3, #15
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	7a7b      	ldrb	r3, [r7, #9]
 800c2ea:	f362 03c6 	bfi	r3, r2, #3, #4
 800c2ee:	727b      	strb	r3, [r7, #9]
  ret.cable_term = (CableTermType)((in >> 11) & 0x3);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	0adb      	lsrs	r3, r3, #11
 800c2f4:	f003 0303 	and.w	r3, r3, #3
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	7abb      	ldrb	r3, [r7, #10]
 800c2fc:	f362 0301 	bfi	r3, r2, #0, #2
 800c300:	72bb      	strb	r3, [r7, #10]
  ret.sstx1_dir_supp = (SsDirectionality)((in >> 10) & 0x1);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	0a9b      	lsrs	r3, r3, #10
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	7abb      	ldrb	r3, [r7, #10]
 800c30e:	f362 0382 	bfi	r3, r2, #2, #1
 800c312:	72bb      	strb	r3, [r7, #10]
  ret.sstx2_dir_supp = (SsDirectionality)((in >> 9) & 0x1);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	0a5b      	lsrs	r3, r3, #9
 800c318:	f003 0301 	and.w	r3, r3, #1
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	7abb      	ldrb	r3, [r7, #10]
 800c320:	f362 03c3 	bfi	r3, r2, #3, #1
 800c324:	72bb      	strb	r3, [r7, #10]
  ret.ssrx1_dir_supp = (SsDirectionality)((in >> 8) & 0x1);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	0a1b      	lsrs	r3, r3, #8
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	7abb      	ldrb	r3, [r7, #10]
 800c332:	f362 1304 	bfi	r3, r2, #4, #1
 800c336:	72bb      	strb	r3, [r7, #10]
  ret.ssrx2_dir_supp = (SsDirectionality)((in >> 7) & 0x1);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	09db      	lsrs	r3, r3, #7
 800c33c:	f003 0301 	and.w	r3, r3, #1
 800c340:	b2da      	uxtb	r2, r3
 800c342:	7abb      	ldrb	r3, [r7, #10]
 800c344:	f362 1345 	bfi	r3, r2, #5, #1
 800c348:	72bb      	strb	r3, [r7, #10]
  ret.vbus_current_handling_cap =
      (VbusCurrentHandlingCapability)((in >> 5) & 0x3);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	095b      	lsrs	r3, r3, #5
 800c34e:	f003 0303 	and.w	r3, r3, #3
 800c352:	b2da      	uxtb	r2, r3
  ret.vbus_current_handling_cap =
 800c354:	7abb      	ldrb	r3, [r7, #10]
 800c356:	f362 1387 	bfi	r3, r2, #6, #2
 800c35a:	72bb      	strb	r3, [r7, #10]
  ret.vbus_thru_cable = (VbusThruCable)((in >> 4) & 0x1);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	091b      	lsrs	r3, r3, #4
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	b2da      	uxtb	r2, r3
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	f362 0300 	bfi	r3, r2, #0, #1
 800c36c:	72fb      	strb	r3, [r7, #11]
  ret.sop2_presence = (Sop2Presence)((in >> 3) & 0x1);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	08db      	lsrs	r3, r3, #3
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	b2da      	uxtb	r2, r3
 800c378:	7afb      	ldrb	r3, [r7, #11]
 800c37a:	f362 0341 	bfi	r3, r2, #1, #1
 800c37e:	72fb      	strb	r3, [r7, #11]
  ret.usb_ss_supp = (UsbSsSupport)((in >> 0) & 0x7);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f003 0307 	and.w	r3, r3, #7
 800c386:	b2da      	uxtb	r2, r3
 800c388:	7afb      	ldrb	r3, [r7, #11]
 800c38a:	f362 0384 	bfi	r3, r2, #2, #3
 800c38e:	72fb      	strb	r3, [r7, #11]
  return ret;
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	60fb      	str	r3, [r7, #12]
 800c394:	2300      	movs	r3, #0
 800c396:	7b3a      	ldrb	r2, [r7, #12]
 800c398:	f362 0307 	bfi	r3, r2, #0, #8
 800c39c:	7b7a      	ldrb	r2, [r7, #13]
 800c39e:	f362 230f 	bfi	r3, r2, #8, #8
 800c3a2:	7bba      	ldrb	r2, [r7, #14]
 800c3a4:	f362 4317 	bfi	r3, r2, #16, #8
 800c3a8:	7bfa      	ldrb	r2, [r7, #15]
 800c3aa:	f362 631f 	bfi	r3, r2, #24, #8
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <getAmaVdo>:

AmaVdo getAmaVdo(FSC_U32 in)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  AmaVdo ret;
  ret.cable_hw_version = (in >> 28) & 0xF;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	0f1b      	lsrs	r3, r3, #28
 800c3c6:	f003 030f 	and.w	r3, r3, #15
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	7a3b      	ldrb	r3, [r7, #8]
 800c3ce:	f362 0303 	bfi	r3, r2, #0, #4
 800c3d2:	723b      	strb	r3, [r7, #8]
  ret.cable_fw_version = (in >> 24) & 0xF;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	0e1b      	lsrs	r3, r3, #24
 800c3d8:	f003 030f 	and.w	r3, r3, #15
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	7a3b      	ldrb	r3, [r7, #8]
 800c3e0:	f362 1307 	bfi	r3, r2, #4, #4
 800c3e4:	723b      	strb	r3, [r7, #8]
  ret.sstx1_dir_supp = (SsDirectionality)((in >> 11) & 0x1);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	0adb      	lsrs	r3, r3, #11
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	7a7b      	ldrb	r3, [r7, #9]
 800c3f2:	f362 0300 	bfi	r3, r2, #0, #1
 800c3f6:	727b      	strb	r3, [r7, #9]
  ret.sstx2_dir_supp = (SsDirectionality)((in >> 10) & 0x1);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	0a9b      	lsrs	r3, r3, #10
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	b2da      	uxtb	r2, r3
 800c402:	7a7b      	ldrb	r3, [r7, #9]
 800c404:	f362 0341 	bfi	r3, r2, #1, #1
 800c408:	727b      	strb	r3, [r7, #9]
  ret.ssrx1_dir_supp = (SsDirectionality)((in >> 9) & 0x1);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	0a5b      	lsrs	r3, r3, #9
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	b2da      	uxtb	r2, r3
 800c414:	7a7b      	ldrb	r3, [r7, #9]
 800c416:	f362 0382 	bfi	r3, r2, #2, #1
 800c41a:	727b      	strb	r3, [r7, #9]
  ret.ssrx2_dir_supp = (SsDirectionality)((in >> 8) & 0x1);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	0a1b      	lsrs	r3, r3, #8
 800c420:	f003 0301 	and.w	r3, r3, #1
 800c424:	b2da      	uxtb	r2, r3
 800c426:	7a7b      	ldrb	r3, [r7, #9]
 800c428:	f362 03c3 	bfi	r3, r2, #3, #1
 800c42c:	727b      	strb	r3, [r7, #9]
  ret.vconn_full_power = (VConnFullPower)((in >> 5) & 0x7);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	095b      	lsrs	r3, r3, #5
 800c432:	f003 0307 	and.w	r3, r3, #7
 800c436:	b2da      	uxtb	r2, r3
 800c438:	7a7b      	ldrb	r3, [r7, #9]
 800c43a:	f362 1306 	bfi	r3, r2, #4, #3
 800c43e:	727b      	strb	r3, [r7, #9]
  ret.vconn_requirement = (VConnRequirement)((in >> 4) & 0x1);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	091b      	lsrs	r3, r3, #4
 800c444:	f003 0301 	and.w	r3, r3, #1
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	7a7b      	ldrb	r3, [r7, #9]
 800c44c:	f362 13c7 	bfi	r3, r2, #7, #1
 800c450:	727b      	strb	r3, [r7, #9]
  ret.vbus_requirement = (VBusRequirement)((in >> 3) & 0x1);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	08db      	lsrs	r3, r3, #3
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	7abb      	ldrb	r3, [r7, #10]
 800c45e:	f362 0300 	bfi	r3, r2, #0, #1
 800c462:	72bb      	strb	r3, [r7, #10]
  ret.usb_ss_supp = (AmaUsbSsSupport)((in >> 0) & 0x7);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	7abb      	ldrb	r3, [r7, #10]
 800c46e:	f362 0343 	bfi	r3, r2, #1, #3
 800c472:	72bb      	strb	r3, [r7, #10]
  return ret;
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	f107 0208 	add.w	r2, r7, #8
 800c47c:	6812      	ldr	r2, [r2, #0]
 800c47e:	4611      	mov	r1, r2
 800c480:	8019      	strh	r1, [r3, #0]
 800c482:	3302      	adds	r3, #2
 800c484:	0c12      	lsrs	r2, r2, #16
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	2300      	movs	r3, #0
 800c48a:	7b3a      	ldrb	r2, [r7, #12]
 800c48c:	f362 0307 	bfi	r3, r2, #0, #8
 800c490:	7b7a      	ldrb	r2, [r7, #13]
 800c492:	f362 230f 	bfi	r3, r2, #8, #8
 800c496:	7bba      	ldrb	r2, [r7, #14]
 800c498:	f362 4317 	bfi	r3, r2, #16, #8
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <getBitsForProductVdo>:

/*  Functions that convert internal VDO representations into bits. */
FSC_U32 getBitsForProductVdo(ProductVdo in)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	60bb      	str	r3, [r7, #8]
  tmp = in.usb_product_id;
 800c4b8:	88bb      	ldrh	r3, [r7, #4]
 800c4ba:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 16);
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	041b      	lsls	r3, r3, #16
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	60fb      	str	r3, [r7, #12]
  tmp = in.bcd_device;
 800c4c6:	88fb      	ldrh	r3, [r7, #6]
 800c4c8:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
  return ret;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <getBitsForCertStatVdo>:

FSC_U32 getBitsForCertStatVdo(CertStatVdo in)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	60bb      	str	r3, [r7, #8]
  tmp = in.test_id;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4f6:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	60fb      	str	r3, [r7, #12]
  return ret;
 800c500:	68fb      	ldr	r3, [r7, #12]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <getBitsForCableVdo>:

FSC_U32 getBitsForCableVdo(CableVdo in)
{
 800c50e:	b480      	push	{r7}
 800c510:	b085      	sub	sp, #20
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	60bb      	str	r3, [r7, #8]
  tmp = in.cable_hw_version;
 800c51e:	793b      	ldrb	r3, [r7, #4]
 800c520:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c524:	b2db      	uxtb	r3, r3
 800c526:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 28);
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	071b      	lsls	r3, r3, #28
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	4313      	orrs	r3, r2
 800c530:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_fw_version;
 800c532:	793b      	ldrb	r3, [r7, #4]
 800c534:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 24);
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	061b      	lsls	r3, r3, #24
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4313      	orrs	r3, r2
 800c544:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_to_type;
 800c546:	797b      	ldrb	r3, [r7, #5]
 800c548:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 18);
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	049b      	lsls	r3, r3, #18
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_to_pr;
 800c55a:	797b      	ldrb	r3, [r7, #5]
 800c55c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c560:	b2db      	uxtb	r3, r3
 800c562:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 17);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	045b      	lsls	r3, r3, #17
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_latency;
 800c56e:	797b      	ldrb	r3, [r7, #5]
 800c570:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800c574:	b2db      	uxtb	r3, r3
 800c576:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 13);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	035b      	lsls	r3, r3, #13
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	4313      	orrs	r3, r2
 800c580:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_term;
 800c582:	79bb      	ldrb	r3, [r7, #6]
 800c584:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 11);
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	02db      	lsls	r3, r3, #11
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	4313      	orrs	r3, r2
 800c594:	60fb      	str	r3, [r7, #12]
  tmp = in.sstx1_dir_supp;
 800c596:	79bb      	ldrb	r3, [r7, #6]
 800c598:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 10);
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	029b      	lsls	r3, r3, #10
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	60fb      	str	r3, [r7, #12]
  tmp = in.sstx2_dir_supp;
 800c5aa:	79bb      	ldrb	r3, [r7, #6]
 800c5ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 9);
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	025b      	lsls	r3, r3, #9
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	60fb      	str	r3, [r7, #12]
  tmp = in.ssrx1_dir_supp;
 800c5be:	79bb      	ldrb	r3, [r7, #6]
 800c5c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 8);
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	021b      	lsls	r3, r3, #8
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	60fb      	str	r3, [r7, #12]
  tmp = in.ssrx2_dir_supp;
 800c5d2:	79bb      	ldrb	r3, [r7, #6]
 800c5d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 7);
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	01db      	lsls	r3, r3, #7
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	60fb      	str	r3, [r7, #12]
  tmp = in.vbus_current_handling_cap;
 800c5e6:	79bb      	ldrb	r3, [r7, #6]
 800c5e8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 5);
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	015b      	lsls	r3, r3, #5
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	60fb      	str	r3, [r7, #12]
  tmp = in.vbus_thru_cable;
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c600:	b2db      	uxtb	r3, r3
 800c602:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 4);
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	011b      	lsls	r3, r3, #4
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	60fb      	str	r3, [r7, #12]
  tmp = in.sop2_presence;
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c614:	b2db      	uxtb	r3, r3
 800c616:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 3);
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	00db      	lsls	r3, r3, #3
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	4313      	orrs	r3, r2
 800c620:	60fb      	str	r3, [r7, #12]
  tmp = in.usb_ss_supp;
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	4313      	orrs	r3, r2
 800c632:	60fb      	str	r3, [r7, #12]
  return ret;
 800c634:	68fb      	ldr	r3, [r7, #12]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <getBitsForAmaVdo>:

FSC_U32 getBitsForAmaVdo(AmaVdo in)
{
 800c642:	b480      	push	{r7}
 800c644:	b085      	sub	sp, #20
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	60bb      	str	r3, [r7, #8]
  tmp = in.cable_hw_version;
 800c652:	793b      	ldrb	r3, [r7, #4]
 800c654:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 28);
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	071b      	lsls	r3, r3, #28
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	4313      	orrs	r3, r2
 800c664:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_fw_version;
 800c666:	793b      	ldrb	r3, [r7, #4]
 800c668:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 24);
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	061b      	lsls	r3, r3, #24
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	4313      	orrs	r3, r2
 800c678:	60fb      	str	r3, [r7, #12]
  tmp = in.sstx1_dir_supp;
 800c67a:	797b      	ldrb	r3, [r7, #5]
 800c67c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c680:	b2db      	uxtb	r3, r3
 800c682:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 11);
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	02db      	lsls	r3, r3, #11
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	60fb      	str	r3, [r7, #12]
  tmp = in.sstx2_dir_supp;
 800c68e:	797b      	ldrb	r3, [r7, #5]
 800c690:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c694:	b2db      	uxtb	r3, r3
 800c696:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 10);
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	029b      	lsls	r3, r3, #10
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	60fb      	str	r3, [r7, #12]
  tmp = in.ssrx1_dir_supp;
 800c6a2:	797b      	ldrb	r3, [r7, #5]
 800c6a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 9);
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	025b      	lsls	r3, r3, #9
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]
  tmp = in.ssrx2_dir_supp;
 800c6b6:	797b      	ldrb	r3, [r7, #5]
 800c6b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 8);
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	021b      	lsls	r3, r3, #8
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]
  tmp = in.vconn_full_power;
 800c6ca:	797b      	ldrb	r3, [r7, #5]
 800c6cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 5);
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	015b      	lsls	r3, r3, #5
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	60fb      	str	r3, [r7, #12]
  tmp = in.vconn_requirement;
 800c6de:	797b      	ldrb	r3, [r7, #5]
 800c6e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 4);
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	011b      	lsls	r3, r3, #4
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	60fb      	str	r3, [r7, #12]
  tmp = in.vbus_requirement;
 800c6f2:	79bb      	ldrb	r3, [r7, #6]
 800c6f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 3);
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	4313      	orrs	r3, r2
 800c704:	60fb      	str	r3, [r7, #12]
  tmp = in.usb_ss_supp;
 800c706:	79bb      	ldrb	r3, [r7, #6]
 800c708:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	4313      	orrs	r3, r2
 800c716:	60fb      	str	r3, [r7, #12]
  return ret;
 800c718:	68fb      	ldr	r3, [r7, #12]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <VIF_InitializeSnkCaps>:
    };

    for(i = 0; i < 7; ++i) {src_caps[i].object = gSrc_caps[i].object;}
}
void VIF_InitializeSnkCaps(doDataObject_t *snk_caps)
{
 800c726:	b480      	push	{r7}
 800c728:	b08b      	sub	sp, #44	; 0x2c
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
    FSC_U8 i;
    doDataObject_t gSnk_caps[7] =
 800c72e:	f107 0308 	add.w	r3, r7, #8
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	605a      	str	r2, [r3, #4]
 800c738:	609a      	str	r2, [r3, #8]
 800c73a:	60da      	str	r2, [r3, #12]
 800c73c:	611a      	str	r2, [r3, #16]
 800c73e:	615a      	str	r2, [r3, #20]
 800c740:	619a      	str	r2, [r3, #24]
 800c742:	893b      	ldrh	r3, [r7, #8]
 800c744:	2264      	movs	r2, #100	; 0x64
 800c746:	f362 0309 	bfi	r3, r2, #0, #10
 800c74a:	813b      	strh	r3, [r7, #8]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2264      	movs	r2, #100	; 0x64
 800c750:	f362 2393 	bfi	r3, r2, #10, #10
 800c754:	60bb      	str	r3, [r7, #8]
 800c756:	7afb      	ldrb	r3, [r7, #11]
 800c758:	f043 0304 	orr.w	r3, r3, #4
 800c75c:	72fb      	strb	r3, [r7, #11]
 800c75e:	7afb      	ldrb	r3, [r7, #11]
 800c760:	f043 0320 	orr.w	r3, r3, #32
 800c764:	72fb      	strb	r3, [r7, #11]
 800c766:	89bb      	ldrh	r3, [r7, #12]
 800c768:	220a      	movs	r2, #10
 800c76a:	f362 0309 	bfi	r3, r2, #0, #10
 800c76e:	81bb      	strh	r3, [r7, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	22b4      	movs	r2, #180	; 0xb4
 800c774:	f362 2393 	bfi	r3, r2, #10, #10
 800c778:	60fb      	str	r3, [r7, #12]
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	f043 0304 	orr.w	r3, r3, #4
 800c780:	73fb      	strb	r3, [r7, #15]
 800c782:	7bfb      	ldrb	r3, [r7, #15]
 800c784:	f043 0320 	orr.w	r3, r3, #32
 800c788:	73fb      	strb	r3, [r7, #15]
 800c78a:	7cfb      	ldrb	r3, [r7, #19]
 800c78c:	f043 0304 	orr.w	r3, r3, #4
 800c790:	74fb      	strb	r3, [r7, #19]
 800c792:	7cfb      	ldrb	r3, [r7, #19]
 800c794:	f043 0320 	orr.w	r3, r3, #32
 800c798:	74fb      	strb	r3, [r7, #19]
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
 800c79c:	f043 0304 	orr.w	r3, r3, #4
 800c7a0:	75fb      	strb	r3, [r7, #23]
 800c7a2:	7dfb      	ldrb	r3, [r7, #23]
 800c7a4:	f043 0320 	orr.w	r3, r3, #32
 800c7a8:	75fb      	strb	r3, [r7, #23]
 800c7aa:	7efb      	ldrb	r3, [r7, #27]
 800c7ac:	f043 0304 	orr.w	r3, r3, #4
 800c7b0:	76fb      	strb	r3, [r7, #27]
 800c7b2:	7efb      	ldrb	r3, [r7, #27]
 800c7b4:	f043 0320 	orr.w	r3, r3, #32
 800c7b8:	76fb      	strb	r3, [r7, #27]
 800c7ba:	7ffb      	ldrb	r3, [r7, #31]
 800c7bc:	f043 0304 	orr.w	r3, r3, #4
 800c7c0:	77fb      	strb	r3, [r7, #31]
 800c7c2:	7ffb      	ldrb	r3, [r7, #31]
 800c7c4:	f043 0320 	orr.w	r3, r3, #32
 800c7c8:	77fb      	strb	r3, [r7, #31]
 800c7ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c7ce:	f043 0304 	orr.w	r3, r3, #4
 800c7d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c7da:	f043 0320 	orr.w	r3, r3, #32
 800c7de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        CREATE_SINK_PDO(5, Snk_PDO_Supply_Type5),
        CREATE_SINK_PDO(6, Snk_PDO_Supply_Type6),
        CREATE_SINK_PDO(7, Snk_PDO_Supply_Type7),
    };

    for(i = 0; i < 7; ++i) {snk_caps[i].object = gSnk_caps[i].object;}
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7e8:	e012      	b.n	800c810 <VIF_InitializeSnkCaps+0xea>
 800c7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c7f2:	0092      	lsls	r2, r2, #2
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	440a      	add	r2, r1
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c7fe:	440b      	add	r3, r1
 800c800:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c804:	6013      	str	r3, [r2, #0]
 800c806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c80a:	3301      	adds	r3, #1
 800c80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c814:	2b06      	cmp	r3, #6
 800c816:	d9e8      	bls.n	800c7ea <VIF_InitializeSnkCaps+0xc4>

}
 800c818:	bf00      	nop
 800c81a:	372c      	adds	r7, #44	; 0x2c
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <__libc_init_array>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	4e0d      	ldr	r6, [pc, #52]	; (800c85c <__libc_init_array+0x38>)
 800c828:	4c0d      	ldr	r4, [pc, #52]	; (800c860 <__libc_init_array+0x3c>)
 800c82a:	1ba4      	subs	r4, r4, r6
 800c82c:	10a4      	asrs	r4, r4, #2
 800c82e:	2500      	movs	r5, #0
 800c830:	42a5      	cmp	r5, r4
 800c832:	d109      	bne.n	800c848 <__libc_init_array+0x24>
 800c834:	4e0b      	ldr	r6, [pc, #44]	; (800c864 <__libc_init_array+0x40>)
 800c836:	4c0c      	ldr	r4, [pc, #48]	; (800c868 <__libc_init_array+0x44>)
 800c838:	f000 f820 	bl	800c87c <_init>
 800c83c:	1ba4      	subs	r4, r4, r6
 800c83e:	10a4      	asrs	r4, r4, #2
 800c840:	2500      	movs	r5, #0
 800c842:	42a5      	cmp	r5, r4
 800c844:	d105      	bne.n	800c852 <__libc_init_array+0x2e>
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c84c:	4798      	blx	r3
 800c84e:	3501      	adds	r5, #1
 800c850:	e7ee      	b.n	800c830 <__libc_init_array+0xc>
 800c852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c856:	4798      	blx	r3
 800c858:	3501      	adds	r5, #1
 800c85a:	e7f2      	b.n	800c842 <__libc_init_array+0x1e>
 800c85c:	0800c944 	.word	0x0800c944
 800c860:	0800c944 	.word	0x0800c944
 800c864:	0800c944 	.word	0x0800c944
 800c868:	0800c948 	.word	0x0800c948

0800c86c <memset>:
 800c86c:	4402      	add	r2, r0
 800c86e:	4603      	mov	r3, r0
 800c870:	4293      	cmp	r3, r2
 800c872:	d100      	bne.n	800c876 <memset+0xa>
 800c874:	4770      	bx	lr
 800c876:	f803 1b01 	strb.w	r1, [r3], #1
 800c87a:	e7f9      	b.n	800c870 <memset+0x4>

0800c87c <_init>:
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87e:	bf00      	nop
 800c880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c882:	bc08      	pop	{r3}
 800c884:	469e      	mov	lr, r3
 800c886:	4770      	bx	lr

0800c888 <_fini>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	bf00      	nop
 800c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88e:	bc08      	pop	{r3}
 800c890:	469e      	mov	lr, r3
 800c892:	4770      	bx	lr
