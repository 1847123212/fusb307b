
FUSB307B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800dcdc  0800dcdc  0001dcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd8c  0800dd8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd8c  0800dd8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd8c  0800dd8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd8c  0800dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd90  0800dd90  0001dd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800dd94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  2000000c  0800dda0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800dda0  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a8a7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004226  00000000  00000000  0005a8e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001af0  00000000  00000000  0005eb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018f8  00000000  00000000  00060600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028075  00000000  00000000  00061ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ed5  00000000  00000000  00089f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4b8d  00000000  00000000  0009ae42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f9cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071a0  00000000  00000000  0018fa4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800dcc4 	.word	0x0800dcc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800dcc4 	.word	0x0800dcc4

080001c8 <WakeOnTimer>:
struct Port g_ports[FSC_NUMBER_OF_PORTS];
volatile FSC_BOOL g_port_active[FSC_NUMBER_OF_PORTS];
volatile FSC_BOOL g_timer_int_active;
FSC_S8 g_IdleIdx;

void WakeOnTimer() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  FSC_U32 timeout_value;
  FSC_U32 timer_value;
  FSC_U8 j = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	72fb      	strb	r3, [r7, #11]

  /* Set to the largest value */
  timeout_value = ~0U;
 80001d2:	f04f 33ff 	mov.w	r3, #4294967295
 80001d6:	60fb      	str	r3, [r7, #12]
  g_IdleIdx = -1;
 80001d8:	4b23      	ldr	r3, [pc, #140]	; (8000268 <WakeOnTimer+0xa0>)
 80001da:	22ff      	movs	r2, #255	; 0xff
 80001dc:	701a      	strb	r2, [r3, #0]

  /* Go through all Ports and find the shortest timer  */
  for (j = 0; j < FSC_NUMBER_OF_PORTS; j++) {
 80001de:	2300      	movs	r3, #0
 80001e0:	72fb      	strb	r3, [r7, #11]
 80001e2:	e02a      	b.n	800023a <WakeOnTimer+0x72>
    timer_value = core_get_next_timeout(&g_ports[j]);
 80001e4:	7afb      	ldrb	r3, [r7, #11]
 80001e6:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 80001ea:	fb02 f303 	mul.w	r3, r2, r3
 80001ee:	4a1f      	ldr	r2, [pc, #124]	; (800026c <WakeOnTimer+0xa4>)
 80001f0:	4413      	add	r3, r2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f004 fac8 	bl	8004788 <core_get_next_timeout>
 80001f8:	6078      	str	r0, [r7, #4]
    /* Get the shortest timer.
     * 0 - No active timer
     * 1 - An active timer has expired, set port to active
     * Other - Set timer interrupt */
    if (timer_value == 0) {
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d018      	beq.n	8000232 <WakeOnTimer+0x6a>
      continue;
    } else if (timer_value == 1) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d10a      	bne.n	800021c <WakeOnTimer+0x54>
      g_ports[j].idle_ = FALSE;
 8000206:	7afb      	ldrb	r3, [r7, #11]
 8000208:	4a18      	ldr	r2, [pc, #96]	; (800026c <WakeOnTimer+0xa4>)
 800020a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800020e:	fb01 f303 	mul.w	r3, r1, r3
 8000212:	4413      	add	r3, r2
 8000214:	337c      	adds	r3, #124	; 0x7c
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
 800021a:	e00b      	b.n	8000234 <WakeOnTimer+0x6c>
    } else if (timer_value < timeout_value) {
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	429a      	cmp	r2, r3
 8000222:	d207      	bcs.n	8000234 <WakeOnTimer+0x6c>
      /* New shorter timer found */
      timeout_value = timer_value;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	60fb      	str	r3, [r7, #12]
      g_IdleIdx = j;
 8000228:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <WakeOnTimer+0xa0>)
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	e000      	b.n	8000234 <WakeOnTimer+0x6c>
      continue;
 8000232:	bf00      	nop
  for (j = 0; j < FSC_NUMBER_OF_PORTS; j++) {
 8000234:	7afb      	ldrb	r3, [r7, #11]
 8000236:	3301      	adds	r3, #1
 8000238:	72fb      	strb	r3, [r7, #11]
 800023a:	7afb      	ldrb	r3, [r7, #11]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d0d1      	beq.n	80001e4 <WakeOnTimer+0x1c>
    }
  }

  if ((timeout_value < ~0U) &&
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000246:	d00a      	beq.n	800025e <WakeOnTimer+0x96>
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d007      	beq.n	800025e <WakeOnTimer+0x96>
      (timeout_value > 0) &&
      (g_IdleIdx > -1)) {
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <WakeOnTimer+0xa0>)
 8000250:	f993 3000 	ldrsb.w	r3, [r3]
      (timeout_value > 0) &&
 8000254:	2b00      	cmp	r3, #0
 8000256:	db02      	blt.n	800025e <WakeOnTimer+0x96>
    /* Wake up port[g_IdleIdx] after timeout */
    SetTimeInterrupt(timeout_value);
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f000 fcb1 	bl	8000bc0 <SetTimeInterrupt>
  }
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000844 	.word	0x20000844
 800026c:	20000554 	.word	0x20000554

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fede 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f8c9 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 faab 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000282:	f000 f94b 	bl	800051c <MX_I2C3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000286:	f000 fa79 	bl	800077c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800028a:	f000 fa29 	bl	80006e0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800028e:	f000 f9d9 	bl	8000644 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000292:	f000 f983 	bl	800059c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  FSC_U8 i = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	71fb      	strb	r3, [r7, #7]
  FSC_U32 check_idle = FALSE;
 800029a:	2300      	movs	r3, #0
 800029c:	603b      	str	r3, [r7, #0]

  PlatformInitialize();
 800029e:	f000 fb04 	bl	80008aa <PlatformInitialize>
  InitializeVars(&g_ports[0], 1, I2C_ADDRESS_PORT1);
 80002a2:	22a0      	movs	r2, #160	; 0xa0
 80002a4:	2101      	movs	r1, #1
 80002a6:	4857      	ldr	r0, [pc, #348]	; (8000404 <main+0x194>)
 80002a8:	f007 ff2a 	bl	8008100 <InitializeVars>
  g_port_active[0] = TRUE;
 80002ac:	4b56      	ldr	r3, [pc, #344]	; (8000408 <main+0x198>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
     for (i = 0; i < FSC_NUMBER_OF_PORTS; ++i) {
 80002b2:	2300      	movs	r3, #0
 80002b4:	71fb      	strb	r3, [r7, #7]
 80002b6:	e095      	b.n	80003e4 <main+0x174>
       /* Initializing */
       if (g_ports[i].initialized_ == FALSE) {
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	4a52      	ldr	r2, [pc, #328]	; (8000404 <main+0x194>)
 80002bc:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80002c0:	fb01 f303 	mul.w	r3, r1, r3
 80002c4:	4413      	add	r3, r2
 80002c6:	337d      	adds	r3, #125	; 0x7d
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d138      	bne.n	8000340 <main+0xd0>
         /* If we haven't been initialized yet, wait on the init interrupt */
         if (ReadRegister(&g_ports[i], regPWRSTAT) != FALSE) {
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 80002d4:	fb02 f303 	mul.w	r3, r2, r3
 80002d8:	4a4a      	ldr	r2, [pc, #296]	; (8000404 <main+0x194>)
 80002da:	4413      	add	r3, r2
 80002dc:	211e      	movs	r1, #30
 80002de:	4618      	mov	r0, r3
 80002e0:	f008 f9a9 	bl	8008636 <ReadRegister>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d078      	beq.n	80003dc <main+0x16c>
           if (g_ports[i].registers_.PwrStat.TCPC_INIT == 0) {
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4a45      	ldr	r2, [pc, #276]	; (8000404 <main+0x194>)
 80002ee:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80002f2:	fb01 f303 	mul.w	r3, r1, r3
 80002f6:	4413      	add	r3, r2
 80002f8:	3318      	adds	r3, #24
 80002fa:	789b      	ldrb	r3, [r3, #2]
 80002fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	d16a      	bne.n	80003dc <main+0x16c>
             /* Chip is ready - initialize and continue. */
        	 HAL_Delay(500);
 8000306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800030a:	f000 ff05 	bl	8001118 <HAL_Delay>
             InitializePort(&g_ports[i]);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8000314:	fb02 f303 	mul.w	r3, r2, r3
 8000318:	4a3a      	ldr	r2, [pc, #232]	; (8000404 <main+0x194>)
 800031a:	4413      	add	r3, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f008 f929 	bl	8008574 <InitializePort>
             platform_printf(g_ports[i].port_id_, "Port Initialized.\n", -1);
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4a37      	ldr	r2, [pc, #220]	; (8000404 <main+0x194>)
 8000326:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800032a:	fb01 f303 	mul.w	r3, r1, r3
 800032e:	4413      	add	r3, r2
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	f04f 32ff 	mov.w	r2, #4294967295
 8000336:	4935      	ldr	r1, [pc, #212]	; (800040c <main+0x19c>)
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fca7 	bl	8000c8c <platform_printf>
           }
         }
         continue;
 800033e:	e04d      	b.n	80003dc <main+0x16c>
       }

       /* State Machine Processing */
       if (g_port_active[i] || !g_ports[i].idle_) {
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4a31      	ldr	r2, [pc, #196]	; (8000408 <main+0x198>)
 8000344:	5cd3      	ldrb	r3, [r2, r3]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d10a      	bne.n	8000362 <main+0xf2>
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4a2d      	ldr	r2, [pc, #180]	; (8000404 <main+0x194>)
 8000350:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8000354:	fb01 f303 	mul.w	r3, r1, r3
 8000358:	4413      	add	r3, r2
 800035a:	337c      	adds	r3, #124	; 0x7c
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d13d      	bne.n	80003de <main+0x16e>
         /* Disable interrupt to prevent conflict */
         ClearTimeInterrupt();
 8000362:	f000 fc51 	bl	8000c08 <ClearTimeInterrupt>

         /* Reset for next interrupt */
         g_port_active[i] = FALSE;
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a27      	ldr	r2, [pc, #156]	; (8000408 <main+0x198>)
 800036a:	2100      	movs	r1, #0
 800036c:	54d1      	strb	r1, [r2, r3]

         platform_SetDebugPin(TRUE);
 800036e:	2001      	movs	r0, #1
 8000370:	f000 fb87 	bl	8000a82 <platform_SetDebugPin>

         /* Process port */
         core_state_machine(&g_ports[i]);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800037a:	fb02 f303 	mul.w	r3, r2, r3
 800037e:	4a21      	ldr	r2, [pc, #132]	; (8000404 <main+0x194>)
 8000380:	4413      	add	r3, r2
 8000382:	4618      	mov	r0, r3
 8000384:	f004 f9cc 	bl	8004720 <core_state_machine>

         //g_ports[i].idle_ = FALSE;

         /* Wait on the next alert/interrupt */
         /* This also allows a final state machine run if still active. */
         if (g_ports[i].idle_) {
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	4a1e      	ldr	r2, [pc, #120]	; (8000404 <main+0x194>)
 800038c:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8000390:	fb01 f303 	mul.w	r3, r1, r3
 8000394:	4413      	add	r3, r2
 8000396:	337c      	adds	r3, #124	; 0x7c
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d01f      	beq.n	80003de <main+0x16e>
           if (platform_get_device_irq_state(g_ports[i].port_id_))
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a18      	ldr	r2, [pc, #96]	; (8000404 <main+0x194>)
 80003a2:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80003a6:	fb01 f303 	mul.w	r3, r1, r3
 80003aa:	4413      	add	r3, r2
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fb34 	bl	8000a1c <platform_get_device_irq_state>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d00a      	beq.n	80003d0 <main+0x160>
           {
             g_ports[i].idle_ = FALSE;
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <main+0x194>)
 80003be:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80003c2:	fb01 f303 	mul.w	r3, r1, r3
 80003c6:	4413      	add	r3, r2
 80003c8:	337c      	adds	r3, #124	; 0x7c
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
 80003ce:	e006      	b.n	80003de <main+0x16e>
           }
           else
           {
             check_idle = TRUE;
 80003d0:	2301      	movs	r3, #1
 80003d2:	603b      	str	r3, [r7, #0]
             platform_SetDebugPin(FALSE);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 fb54 	bl	8000a82 <platform_SetDebugPin>
 80003da:	e000      	b.n	80003de <main+0x16e>
         continue;
 80003dc:	bf00      	nop
     for (i = 0; i < FSC_NUMBER_OF_PORTS; ++i) {
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	3301      	adds	r3, #1
 80003e2:	71fb      	strb	r3, [r7, #7]
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f43f af66 	beq.w	80002b8 <main+0x48>
           }
         }
       }
     }

     if (check_idle == TRUE)
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d103      	bne.n	80003fa <main+0x18a>
     {
       /* Looks like State Machine can Idle */
       WakeOnTimer();
 80003f2:	f7ff fee9 	bl	80001c8 <WakeOnTimer>
       check_idle = FALSE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	603b      	str	r3, [r7, #0]
     }

     /* System Policy process function to handle debug/system IO, etc. */
     SystemPolicyProcess(g_ports);
 80003fa:	4802      	ldr	r0, [pc, #8]	; (8000404 <main+0x194>)
 80003fc:	f00a f81e 	bl	800a43c <SystemPolicyProcess>
     for (i = 0; i < FSC_NUMBER_OF_PORTS; ++i) {
 8000400:	e757      	b.n	80002b2 <main+0x42>
 8000402:	bf00      	nop
 8000404:	20000554 	.word	0x20000554
 8000408:	20000550 	.word	0x20000550
 800040c:	0800dcdc 	.word	0x0800dcdc

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b0b8      	sub	sp, #224	; 0xe0
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800041a:	2244      	movs	r2, #68	; 0x44
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f00d fc48 	bl	800dcb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2288      	movs	r2, #136	; 0x88
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f00d fc3a 	bl	800dcb4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000440:	2301      	movs	r3, #1
 8000442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044e:	2302      	movs	r3, #2
 8000450:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000454:	2303      	movs	r3, #3
 8000456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800045a:	2301      	movs	r3, #1
 800045c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000460:	2308      	movs	r3, #8
 8000462:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000466:	2307      	movs	r3, #7
 8000468:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800046c:	2302      	movs	r3, #2
 800046e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000472:	2302      	movs	r3, #2
 8000474:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800047c:	4618      	mov	r0, r3
 800047e:	f002 f8a7 	bl	80025d0 <HAL_RCC_OscConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000488:	f000 fa08 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	230f      	movs	r3, #15
 800048e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000492:	2303      	movs	r3, #3
 8000494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004ae:	2102      	movs	r1, #2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 fc3d 	bl	8002d30 <HAL_RCC_ClockConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004bc:	f000 f9ee 	bl	800089c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_USB;
 80004c0:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80004c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80004ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80004ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80004d0:	2303      	movs	r3, #3
 80004d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80004d8:	2308      	movs	r3, #8
 80004da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80004dc:	2307      	movs	r3, #7
 80004de:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004e0:	2302      	movs	r3, #2
 80004e2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80004e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ec:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ee:	463b      	mov	r3, r7
 80004f0:	4618      	mov	r0, r3
 80004f2:	f002 fde9 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80004fc:	f000 f9ce 	bl	800089c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000500:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000504:	f001 fffe 	bl	8002504 <HAL_PWREx_ControlVoltageScaling>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x102>
  {
    Error_Handler();
 800050e:	f000 f9c5 	bl	800089c <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	37e0      	adds	r7, #224	; 0xe0
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_I2C3_Init+0x74>)
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <MX_I2C3_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_I2C3_Init+0x74>)
 8000528:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <MX_I2C3_Init+0x7c>)
 800052a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_I2C3_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_I2C3_Init+0x74>)
 8000534:	2201      	movs	r2, #1
 8000536:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_I2C3_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_I2C3_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MX_I2C3_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_I2C3_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_I2C3_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000556:	480e      	ldr	r0, [pc, #56]	; (8000590 <MX_I2C3_Init+0x74>)
 8000558:	f001 f90d 	bl	8001776 <HAL_I2C_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000562:	f000 f99b 	bl	800089c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000566:	2100      	movs	r1, #0
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <MX_I2C3_Init+0x74>)
 800056a:	f001 fddd 	bl	8002128 <HAL_I2CEx_ConfigAnalogFilter>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000574:	f000 f992 	bl	800089c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000578:	2100      	movs	r1, #0
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_I2C3_Init+0x74>)
 800057c:	f001 fe1f 	bl	80021be <HAL_I2CEx_ConfigDigitalFilter>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000586:	f000 f989 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000038 	.word	0x20000038
 8000594:	40005c00 	.word	0x40005c00
 8000598:	20303e5d 	.word	0x20303e5d

0800059c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <MX_TIM1_Init+0xa0>)
 80005bc:	4a20      	ldr	r2, [pc, #128]	; (8000640 <MX_TIM1_Init+0xa4>)
 80005be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_TIM1_Init+0xa0>)
 80005c2:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80005c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_TIM1_Init+0xa0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_TIM1_Init+0xa0>)
 80005d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80005d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_TIM1_Init+0xa0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_TIM1_Init+0xa0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_TIM1_Init+0xa0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <MX_TIM1_Init+0xa0>)
 80005ea:	f003 fa1d 	bl	8003a28 <HAL_TIM_Base_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80005f4:	f000 f952 	bl	800089c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_TIM1_Init+0xa0>)
 8000606:	f003 fb59 	bl	8003cbc <HAL_TIM_ConfigClockSource>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000610:	f000 f944 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_TIM1_Init+0xa0>)
 8000626:	f003 fd69 	bl	80040fc <HAL_TIMEx_MasterConfigSynchronization>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000630:	f000 f934 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200004cc 	.word	0x200004cc
 8000640:	40012c00 	.word	0x40012c00

08000644 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_TIM2_Init+0x98>)
 8000664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000668:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_TIM2_Init+0x98>)
 800066c:	2230      	movs	r2, #48	; 0x30
 800066e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_TIM2_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_TIM2_Init+0x98>)
 8000678:	f04f 32ff 	mov.w	r2, #4294967295
 800067c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_TIM2_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_TIM2_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_TIM2_Init+0x98>)
 800068c:	f003 f9cc 	bl	8003a28 <HAL_TIM_Base_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000696:	f000 f901 	bl	800089c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_TIM2_Init+0x98>)
 80006a8:	f003 fb08 	bl	8003cbc <HAL_TIM_ConfigClockSource>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006b2:	f000 f8f3 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_TIM2_Init+0x98>)
 80006c4:	f003 fd1a 	bl	80040fc <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006ce:	f000 f8e5 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000510 	.word	0x20000510

080006e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_TIM3_Init+0x94>)
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <MX_TIM3_Init+0x98>)
 8000702:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_TIM3_Init+0x94>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_TIM3_Init+0x94>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_TIM3_Init+0x94>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_TIM3_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_TIM3_Init+0x94>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <MX_TIM3_Init+0x94>)
 8000724:	f003 f980 	bl	8003a28 <HAL_TIM_Base_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f8b5 	bl	800089c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_TIM3_Init+0x94>)
 8000740:	f003 fabc 	bl	8003cbc <HAL_TIM_ConfigClockSource>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f8a7 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_TIM3_Init+0x94>)
 800075c:	f003 fcce 	bl	80040fc <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000766:	f000 f899 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000048c 	.word	0x2000048c
 8000778:	40000400 	.word	0x40000400

0800077c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000786:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2206      	movs	r2, #6
 800078c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2202      	movs	r2, #2
 8000798:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	f001 fd49 	bl	8002256 <HAL_PCD_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 f867 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000084 	.word	0x20000084

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_GPIO_Init+0xbc>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a28      	ldr	r2, [pc, #160]	; (8000894 <MX_GPIO_Init+0xbc>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0xbc>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_GPIO_Init+0xbc>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a22      	ldr	r2, [pc, #136]	; (8000894 <MX_GPIO_Init+0xbc>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_GPIO_Init+0xbc>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_GPIO_Init+0xbc>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_GPIO_Init+0xbc>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_GPIO_Init+0xbc>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_5, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	21a0      	movs	r1, #160	; 0xa0
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f000 ff5f 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f000 fd90 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_GPIO_Init+0xc0>)
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f000 fd83 	bl	8001380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2017      	movs	r0, #23
 8000880:	f000 fd47 	bl	8001312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000884:	2017      	movs	r0, #23
 8000886:	f000 fd60 	bl	800134a <HAL_NVIC_EnableIRQ>

}
 800088a:	bf00      	nop
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000
 8000898:	10210000 	.word	0x10210000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PlatformInitialize>:
#ifdef FSC_HAVE_UART
void InitializeUART(void);
#endif /* FSC_HAVE_UART */

void PlatformInitialize(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  UARTXmitBuffer = UARTXmitBuffer_Ping;
  UARTXmitIndex = 0;
  UARTXmitBuffer_IsPing = TRUE;
#endif /* FSC_HAVE_UART */

  SystemClockConfig();
 80008ae:	f000 f813 	bl	80008d8 <SystemClockConfig>

  InitializePeripheralClocks();
 80008b2:	f000 f809 	bl	80008c8 <InitializePeripheralClocks>

  //HAL_Init();
  HAL_InitTick(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 fbd6 	bl	8001068 <HAL_InitTick>

  //InitializeI2C();
  //InitializeGPIO();
  InitializeTickTimer();
 80008bc:	f000 f91a 	bl	8000af4 <InitializeTickTimer>
  InitializeTSTimer();
 80008c0:	f000 f9b2 	bl	8000c28 <InitializeTSTimer>
  InitializeUART();
#endif /* FSC_HAVE_UART */
#ifdef FSC_HAVE_6295
  FAN6295_Initialize();
#endif /* FSC_HAVE_6295 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <InitializePeripheralClocks>:

void InitializePeripheralClocks(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;

  /* DMA1 */
  RCC->AHBENR |= RCC_AHBENR_DMA1EN;
#endif /* FSC_HAVE_UART */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <SystemClockConfig>:

void SystemClockConfig(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
   *   PLLMUL                         = 2
   *   Flash Latency(WS)              = 1
   */

  /* Enable HSI, HSI48 */
  RCC->CR |= RCC_CR_HSION;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <SystemClockConfig+0x54>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <SystemClockConfig+0x54>)
 80008e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e6:	6013      	str	r3, [r2, #0]
  /* Config PLL - Predivide by 2 */
  //RCC->CFGR |= RCC_CFGR_PLLSRC_HSI48_PREDIV;
  //RCC->CFGR2 |= RCC_CFGR2_PREDIV_DIV2;

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <SystemClockConfig+0x54>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <SystemClockConfig+0x54>)
 80008ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008f2:	6013      	str	r3, [r2, #0]

  /* Wait on PLL to start */
  while (!(RCC->CR & RCC_CR_PLLRDY)) {};
 80008f4:	bf00      	nop
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <SystemClockConfig+0x54>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <SystemClockConfig+0x1e>

  /* Set Flash latency bit 1 */
  FLASH->ACR |= FLASH_ACR_LATENCY;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <SystemClockConfig+0x58>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SystemClockConfig+0x58>)
 8000908:	f043 0307 	orr.w	r3, r3, #7
 800090c:	6013      	str	r3, [r2, #0]

  /* No dividers and use the PLL for the system clock. */
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <SystemClockConfig+0x54>)
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <SystemClockConfig+0x54>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <SystemClockConfig+0x54>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <SystemClockConfig+0x54>)
 800091c:	f043 0303 	orr.w	r3, r3, #3
 8000920:	6093      	str	r3, [r2, #8]
  //RCC->CFGR |= RCC_CFGR_PPRE_DIV1;

  //RCC->CFGR3 = 0x00;
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000
 8000930:	40022000 	.word	0x40022000

08000934 <platform_i2c_read>:


FSC_BOOL platform_i2c_read(FSC_U8 slaveaddress, FSC_U8 regaddr,
                           FSC_U8 length, FSC_U8 *data)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b09b      	sub	sp, #108	; 0x6c
 8000938:	af04      	add	r7, sp, #16
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	460b      	mov	r3, r1
 8000942:	71bb      	strb	r3, [r7, #6]
 8000944:	4613      	mov	r3, r2
 8000946:	717b      	strb	r3, [r7, #5]
  I2C_HandleTypeDef i2chandle = {};
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	224c      	movs	r2, #76	; 0x4c
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f00d f9af 	bl	800dcb4 <memset>
  HAL_StatusTypeDef result = HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* To prevent storing a global, re-initialize the basic items here. */
  i2chandle.Instance = I2C3;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <platform_i2c_read+0x70>)
 800095e:	60bb      	str	r3, [r7, #8]
  i2chandle.State    = HAL_I2C_STATE_READY;
 8000960:	2320      	movs	r3, #32
 8000962:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

  result = HAL_I2C_Mem_Read(&i2chandle, slaveaddress,
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	b299      	uxth	r1, r3
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	b29c      	uxth	r4, r3
 800096e:	797b      	ldrb	r3, [r7, #5]
 8000970:	b29b      	uxth	r3, r3
 8000972:	f107 0008 	add.w	r0, r7, #8
 8000976:	2210      	movs	r2, #16
 8000978:	9202      	str	r2, [sp, #8]
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	4622      	mov	r2, r4
 8000984:	f001 f89a 	bl	8001abc <HAL_I2C_Mem_Read>
 8000988:	4603      	mov	r3, r0
 800098a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                            regaddr, 1, data, length, 0x10);

  return ((result == HAL_OK) ? TRUE : FALSE);
 800098e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf0c      	ite	eq
 8000996:	2301      	moveq	r3, #1
 8000998:	2300      	movne	r3, #0
 800099a:	b2db      	uxtb	r3, r3
}
 800099c:	4618      	mov	r0, r3
 800099e:	375c      	adds	r7, #92	; 0x5c
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	40005c00 	.word	0x40005c00

080009a8 <platform_i2c_write>:

FSC_BOOL platform_i2c_write(FSC_U8 slaveaddress, FSC_U8 regaddr,
                            FSC_U8 length, FSC_U8 *data)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b09b      	sub	sp, #108	; 0x6c
 80009ac:	af04      	add	r7, sp, #16
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4603      	mov	r3, r0
 80009b2:	71fb      	strb	r3, [r7, #7]
 80009b4:	460b      	mov	r3, r1
 80009b6:	71bb      	strb	r3, [r7, #6]
 80009b8:	4613      	mov	r3, r2
 80009ba:	717b      	strb	r3, [r7, #5]
  I2C_HandleTypeDef i2chandle = {};
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	224c      	movs	r2, #76	; 0x4c
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00d f975 	bl	800dcb4 <memset>
  HAL_StatusTypeDef result = HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* To prevent storing a global, re-initialize the basic items here. */
  i2chandle.Instance = I2C3;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <platform_i2c_write+0x70>)
 80009d2:	60bb      	str	r3, [r7, #8]
  i2chandle.State    = HAL_I2C_STATE_READY;
 80009d4:	2320      	movs	r3, #32
 80009d6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

  result = HAL_I2C_Mem_Write(&i2chandle, slaveaddress,
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	b299      	uxth	r1, r3
 80009de:	79bb      	ldrb	r3, [r7, #6]
 80009e0:	b29c      	uxth	r4, r3
 80009e2:	797b      	ldrb	r3, [r7, #5]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f107 0008 	add.w	r0, r7, #8
 80009ea:	2210      	movs	r2, #16
 80009ec:	9202      	str	r2, [sp, #8]
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2301      	movs	r3, #1
 80009f6:	4622      	mov	r2, r4
 80009f8:	f000 ff4c 	bl	8001894 <HAL_I2C_Mem_Write>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                             regaddr, 1, data, length, 0x10);

  return ((result == HAL_OK) ? TRUE : FALSE);
 8000a02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf0c      	ite	eq
 8000a0a:	2301      	moveq	r3, #1
 8000a0c:	2300      	movne	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	375c      	adds	r7, #92	; 0x5c
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	40005c00 	.word	0x40005c00

08000a1c <platform_get_device_irq_state>:

FSC_BOOL platform_get_device_irq_state(FSC_U8 port)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  GPIO_PinState state = GPIO_PIN_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]

  switch(port) {
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d00c      	beq.n	8000a4a <platform_get_device_irq_state+0x2e>
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d013      	beq.n	8000a5c <platform_get_device_irq_state+0x40>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d000      	beq.n	8000a3a <platform_get_device_irq_state+0x1e>
    break;
  case 3:
    state = HAL_GPIO_ReadPin(GPIOA, PIN_ALERT_3);
    break;
  default:
    break;
 8000a38:	e019      	b.n	8000a6e <platform_get_device_irq_state+0x52>
    state = HAL_GPIO_ReadPin(GPIOA, PIN_ALERT_1);
 8000a3a:	2140      	movs	r1, #64	; 0x40
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 fe46 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
    break;
 8000a48:	e011      	b.n	8000a6e <platform_get_device_irq_state+0x52>
    state = HAL_GPIO_ReadPin(GPIOA, PIN_ALERT_2);
 8000a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 fe3d 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
    break;
 8000a5a:	e008      	b.n	8000a6e <platform_get_device_irq_state+0x52>
    state = HAL_GPIO_ReadPin(GPIOA, PIN_ALERT_3);
 8000a5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f000 fe34 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8000a6c:	bf00      	nop
  }

  /* ALERT signals are active low, so this looks backwards! */
  return (state == GPIO_PIN_SET) ? FALSE : TRUE;
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	bf14      	ite	ne
 8000a74:	2301      	movne	r3, #1
 8000a76:	2300      	moveq	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <platform_SetDebugPin>:

void platform_SetDebugPin(FSC_BOOL enable)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, PIN_DEBUG,
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	bf14      	ite	ne
 8000a92:	2301      	movne	r3, #1
 8000a94:	2300      	moveq	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f000 fe2e 	bl	8001700 <HAL_GPIO_WritePin>
                    enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <platform_setHVSwitch>:

void platform_setHVSwitch(FSC_BOOL enable)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOB, PIN_HV_ENABLE,
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <platform_setHVSwitch+0x2c>)
 8000aca:	f000 fe19 	bl	8001700 <HAL_GPIO_WritePin>
                    enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	48000400 	.word	0x48000400

08000adc <platform_setPPSVoltage>:
  GPIO_PinState state = HAL_GPIO_ReadPin(GPIOB, PIN_HV_ENABLE);
  return (state == GPIO_PIN_SET) ? TRUE : FALSE;
}

void platform_setPPSVoltage(FSC_U8 port, FSC_U32 mv)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
#ifdef FSC_HAVE_6295
    FAN6295_SetVoltage(mv);
    FAN6295_SetEnable(TRUE);
#endif /* FSC_HAVE_6295 */
  }
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <InitializeTickTimer>:
  return 0;
#endif /* FSC_HAVE_6295 */
}

void InitializeTickTimer(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Disable */
  TIM2->CR1 = 0x00000000;
 8000af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]

  /* SystemCoreClock is 48MHz. */
  /* Prescaler - 48 gives 1us resolution */
  TIM2->PSC = 48;
 8000b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b04:	2230      	movs	r2, #48	; 0x30
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Start the count at the end.  Certain registers (PSC,ARR,...) are */
  /* "shadowed" and only get updated on a rollover or other event. */
  TIM2->CNT = 0xFFFFFFFF;
 8000b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Period/Reload - a long period give a free-running time-stamp-mode timer */
  TIM2->ARR = 0xFFFFFFFF;
 8000b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable! */
  EnableTickTimer(TRUE);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 f80e 	bl	8000b3e <EnableTickTimer>

  /* Enable and set TIM2 Interrupt */
  TIM2->SR = 0;
 8000b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	201c      	movs	r0, #28
 8000b30:	f000 fbef 	bl	8001312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b34:	201c      	movs	r0, #28
 8000b36:	f000 fc08 	bl	800134a <HAL_NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <EnableTickTimer>:

void EnableTickTimer(FSC_BOOL enable)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
  if (enable) {
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d008      	beq.n	8000b60 <EnableTickTimer+0x22>
    TIM2->CR1 |= TIM_CR1_CEN;
 8000b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6013      	str	r3, [r2, #0]
  }
  else {
    TIM2->CR1 &= ~TIM_CR1_CEN;
  }
}
 8000b5e:	e007      	b.n	8000b70 <EnableTickTimer+0x32>
    TIM2->CR1 &= ~TIM_CR1_CEN;
 8000b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6a:	f023 0301 	bic.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <platform_current_time>:

FSC_U32 platform_current_time(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return TIM2->CNT;
 8000b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <platform_delay>:

void platform_delay(FSC_U32 microseconds)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  FSC_U32 currentTime = TIM2->CNT;
 8000b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	60fb      	str	r3, [r7, #12]
  while((FSC_U32)(TIM2->CNT - currentTime) < microseconds);
 8000ba0:	bf00      	nop
 8000ba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d8f7      	bhi.n	8000ba2 <platform_delay+0x12>
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SetTimeInterrupt>:

void SetTimeInterrupt(FSC_U32 microseconds)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Set the offset for the next interrupt request */
  TIM2->CCR1 = TIM2->CNT + microseconds;
 8000bc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	634b      	str	r3, [r1, #52]	; 0x34
  /* Clear the previous and enable the next CC1 Interrupt */
  TIM2->SR = 0;
 8000bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  TIM2->DIER |= TIM_DIER_CC1IE;
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	60d3      	str	r3, [r2, #12]
  g_timer_int_active = TRUE;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SetTimeInterrupt+0x44>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2000050c 	.word	0x2000050c

08000c08 <ClearTimeInterrupt>:

void ClearTimeInterrupt()
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  TIM2->DIER &= ~TIM_DIER_CC1IE;
 8000c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	f023 0302 	bic.w	r3, r3, #2
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <InitializeTSTimer>:

void InitializeTSTimer(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* Use Timer1 to count at 0.1ms resolution up to one second. */
  /* Use Timer3, triggered by Timer16, to count seconds. */

  /* SystemCoreClock is 48MHz. */
  TIM1->PSC = 4800;               /* A prescaler of 4800 gives 0.1ms res */
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <InitializeTSTimer+0x5c>)
 8000c2e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  TIM1->ARR = 10000;              /* A period of 10000 gives 1sec intervals */
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <InitializeTSTimer+0x5c>)
 8000c36:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->CR2 |= TIM_CR2_MMS_1;     /* MMS = 0b010 generates TRGO */
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <InitializeTSTimer+0x5c>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <InitializeTSTimer+0x5c>)
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	6053      	str	r3, [r2, #4]

  /* Start the count at the end.  Certain registers (PSC,ARR,...) are */
  /* "shadowed" and only get updated on a rollover or other event. */
  TIM1->CNT = 0xFFFFFFFF;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <InitializeTSTimer+0x5c>)
 8000c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Timer3 up as a slave to Timer1.  Timer3 will count in seconds. */
  TIM3->SMCR |= TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <InitializeTSTimer+0x60>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	4a0c      	ldr	r2, [pc, #48]	; (8000c88 <InitializeTSTimer+0x60>)
 8000c56:	f043 0307 	orr.w	r3, r3, #7
 8000c5a:	6093      	str	r3, [r2, #8]
  TIM3->CNT = 0;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <InitializeTSTimer+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable both. */
  TIM1->CR1 |= TIM_CR1_CEN;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <InitializeTSTimer+0x5c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <InitializeTSTimer+0x5c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <InitializeTSTimer+0x60>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <InitializeTSTimer+0x60>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	40000400 	.word	0x40000400

08000c8c <platform_printf>:
  return;
}
#endif /* FSC_HAVE_UART */

void platform_printf(FSC_U8 port, const char *msg, FSC_S32 value)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	73fb      	strb	r3, [r7, #15]
  WriteUART('\r');
  WriteUART('\n');

  return;
#endif /* FSC_HAVE_UART */
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <platform_dp_enable_pins>:
#endif /* FSC_HAVE_UART */


#ifdef FSC_HAVE_DP
FSC_BOOL platform_dp_enable_pins(FSC_BOOL enable, FSC_U32 config)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	6039      	str	r1, [r7, #0]
 8000cb0:	71fb      	strb	r3, [r7, #7]
  return TRUE;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <platform_dp_status_update>:

void platform_dp_status_update(FSC_U32 status)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_I2C_MspInit+0x7c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d127      	bne.n	8000d8e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000d56:	2303      	movs	r3, #3
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d66:	2304      	movs	r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d72:	f000 fb05 	bl	8001380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40005c00 	.word	0x40005c00
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000800 	.word	0x48000800

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_TIM_Base_MspInit+0x8c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10c      	bne.n	8000dd0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000dbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dce:	e02a      	b.n	8000e26 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d114      	bne.n	8000e04 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	201c      	movs	r0, #28
 8000df8:	f000 fa8b 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dfc:	201c      	movs	r0, #28
 8000dfe:	f000 faa4 	bl	800134a <HAL_NVIC_EnableIRQ>
}
 8000e02:	e010      	b.n	8000e26 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_TIM_Base_MspInit+0x94>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10b      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_TIM_Base_MspInit+0x90>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40012c00 	.word	0x40012c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40000400 	.word	0x40000400

08000e3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e5c:	d146      	bne.n	8000eec <HAL_PCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a24      	ldr	r2, [pc, #144]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000e76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f000 fa73 	bl	8001380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d114      	bne.n	8000ee8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000ed6:	f001 fb6b 	bl	80025b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <HAL_PCD_MspInit+0xb8>)
 8000ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ee6:	e001      	b.n	8000eec <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8000ee8:	f001 fb62 	bl	80025b0 <HAL_PWREx_EnableVddUSB>
}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f8c6 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f58:	2040      	movs	r0, #64	; 0x40
 8000f5a:	f000 fbe9 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM2_IRQHandler+0x10>)
 8000f6a:	f002 fd88 	bl	8003a7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000510 	.word	0x20000510

08000f78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <SystemInit+0x64>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <SystemInit+0x64>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <SystemInit+0x68>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <SystemInit+0x68>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <SystemInit+0x68>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <SystemInit+0x68>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <SystemInit+0x68>)
 8000fa4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fa8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <SystemInit+0x68>)
 8000fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <SystemInit+0x68>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <SystemInit+0x68>)
 8000fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <SystemInit+0x68>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SystemInit+0x64>)
 8000fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fce:	609a      	str	r2, [r3, #8]
#endif
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fe8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fea:	e003      	b.n	8000ff4 <LoopCopyDataInit>

08000fec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ff0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ff2:	3104      	adds	r1, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ff8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ffa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ffc:	d3f6      	bcc.n	8000fec <CopyDataInit>
	ldr	r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001000:	e002      	b.n	8001008 <LoopFillZerobss>

08001002 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001002:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001004:	f842 3b04 	str.w	r3, [r2], #4

08001008 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <LoopForever+0x16>)
	cmp	r2, r3
 800100a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800100c:	d3f9      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800100e:	f7ff ffb3 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f00c fe2b 	bl	800dc6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001016:	f7ff f92b 	bl	8000270 <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800101c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001020:	0800dd94 	.word	0x0800dd94
	ldr	r0, =_sdata
 8001024:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001028:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800102c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001030:	2000084c 	.word	0x2000084c

08001034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_2_IRQHandler>

08001036 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f95b 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f80e 	bl	8001068 <HAL_InitTick>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e001      	b.n	800105c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001058:	f7ff fe3c 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_InitTick+0x68>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d022      	beq.n	80010c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_InitTick+0x6c>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_InitTick+0x68>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001088:	fbb1 f3f3 	udiv	r3, r1, r3
 800108c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f968 	bl	8001366 <HAL_SYSTICK_Config>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10f      	bne.n	80010bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	d809      	bhi.n	80010b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a2:	2200      	movs	r2, #0
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	f04f 30ff 	mov.w	r0, #4294967295
 80010aa:	f000 f932 	bl	8001312 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_InitTick+0x70>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	e007      	b.n	80010c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	e004      	b.n	80010c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e001      	b.n	80010c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x1c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x20>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <HAL_IncTick+0x1c>)
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000848 	.word	0x20000848
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000848 	.word	0x20000848

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d004      	beq.n	800113c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_Delay+0x40>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113c:	bf00      	nop
 800113e:	f7ff ffdf 	bl	8001100 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	429a      	cmp	r2, r3
 800114c:	d8f7      	bhi.n	800113e <HAL_Delay+0x26>
  {
  }
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff29 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff3e 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff31 	bl	80011c0 <__NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffa2 	bl	80012b8 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e17f      	b.n	8001690 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8171 	beq.w	800168a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x38>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b12      	cmp	r3, #18
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00b      	beq.n	8001454 <HAL_GPIO_Init+0xd4>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001448:	2b11      	cmp	r3, #17
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 0201 	and.w	r2, r3, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d118      	bne.n	80014f4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014c8:	2201      	movs	r2, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f003 0201 	and.w	r2, r3, #1
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80ac 	beq.w	800168a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <HAL_GPIO_Init+0x32c>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a5d      	ldr	r2, [pc, #372]	; (80016ac <HAL_GPIO_Init+0x32c>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_GPIO_Init+0x32c>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800154a:	4a59      	ldr	r2, [pc, #356]	; (80016b0 <HAL_GPIO_Init+0x330>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001574:	d025      	beq.n	80015c2 <HAL_GPIO_Init+0x242>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_GPIO_Init+0x334>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01f      	beq.n	80015be <HAL_GPIO_Init+0x23e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4d      	ldr	r2, [pc, #308]	; (80016b8 <HAL_GPIO_Init+0x338>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x23a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4c      	ldr	r2, [pc, #304]	; (80016bc <HAL_GPIO_Init+0x33c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x236>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_GPIO_Init+0x340>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x232>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4a      	ldr	r2, [pc, #296]	; (80016c4 <HAL_GPIO_Init+0x344>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x22e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_GPIO_Init+0x348>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x22a>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00c      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e00a      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e008      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e004      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_GPIO_Init+0x244>
 80015c2:	2300      	movs	r3, #0
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	4093      	lsls	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d4:	4936      	ldr	r1, [pc, #216]	; (80016b0 <HAL_GPIO_Init+0x330>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <HAL_GPIO_Init+0x34c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001606:	4a31      	ldr	r2, [pc, #196]	; (80016cc <HAL_GPIO_Init+0x34c>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800160c:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <HAL_GPIO_Init+0x34c>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001630:	4a26      	ldr	r2, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x34c>)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_GPIO_Init+0x34c>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <HAL_GPIO_Init+0x34c>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_GPIO_Init+0x34c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001684:	4a11      	ldr	r2, [pc, #68]	; (80016cc <HAL_GPIO_Init+0x34c>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f ae78 	bne.w	8001390 <HAL_GPIO_Init+0x10>
  }
}
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	48000400 	.word	0x48000400
 80016b8:	48000800 	.word	0x48000800
 80016bc:	48000c00 	.word	0x48000c00
 80016c0:	48001000 	.word	0x48001000
 80016c4:	48001400 	.word	0x48001400
 80016c8:	48001800 	.word	0x48001800
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800171c:	e002      	b.n	8001724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f806 	bl	8001760 <HAL_GPIO_EXTI_Callback>
  }
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e081      	b.n	800188c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fabd 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2224      	movs	r2, #36	; 0x24
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	e006      	b.n	80017fe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d104      	bne.n	8001810 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800180e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800181e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001822:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001832:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	ea42 0103 	orr.w	r1, r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	021a      	lsls	r2, r3, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69d9      	ldr	r1, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2220      	movs	r2, #32
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af02      	add	r7, sp, #8
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	4608      	mov	r0, r1
 800189e:	4611      	mov	r1, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	817b      	strh	r3, [r7, #10]
 80018a6:	460b      	mov	r3, r1
 80018a8:	813b      	strh	r3, [r7, #8]
 80018aa:	4613      	mov	r3, r2
 80018ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	f040 80f9 	bne.w	8001aae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_I2C_Mem_Write+0x34>
 80018c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0ed      	b.n	8001ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_I2C_Mem_Write+0x4e>
 80018de:	2302      	movs	r3, #2
 80018e0:	e0e6      	b.n	8001ab0 <HAL_I2C_Mem_Write+0x21c>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ea:	f7ff fc09 	bl	8001100 <HAL_GetTick>
 80018ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2319      	movs	r3, #25
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fac3 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0d1      	b.n	8001ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2221      	movs	r2, #33	; 0x21
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2240      	movs	r2, #64	; 0x40
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a3a      	ldr	r2, [r7, #32]
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800192c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001934:	88f8      	ldrh	r0, [r7, #6]
 8001936:	893a      	ldrh	r2, [r7, #8]
 8001938:	8979      	ldrh	r1, [r7, #10]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4603      	mov	r3, r0
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f9d3 	bl	8001cf0 <I2C_RequestMemoryWrite>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0a9      	b.n	8001ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001960:	b29b      	uxth	r3, r3
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d90e      	bls.n	8001984 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	22ff      	movs	r2, #255	; 0xff
 800196a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001970:	b2da      	uxtb	r2, r3
 8001972:	8979      	ldrh	r1, [r7, #10]
 8001974:	2300      	movs	r3, #0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fba5 	bl	80020cc <I2C_TransferConfig>
 8001982:	e00f      	b.n	80019a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	b2da      	uxtb	r2, r3
 8001994:	8979      	ldrh	r1, [r7, #10]
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fb94 	bl	80020cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 faad 	bl	8001f08 <I2C_WaitOnTXISFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e07b      	b.n	8001ab0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d034      	beq.n	8001a5c <HAL_I2C_Mem_Write+0x1c8>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d130      	bne.n	8001a5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	2200      	movs	r2, #0
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 fa3f 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e04d      	b.n	8001ab0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d90e      	bls.n	8001a3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	22ff      	movs	r2, #255	; 0xff
 8001a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	8979      	ldrh	r1, [r7, #10]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 fb49 	bl	80020cc <I2C_TransferConfig>
 8001a3a:	e00f      	b.n	8001a5c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	8979      	ldrh	r1, [r7, #10]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fb38 	bl	80020cc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d19e      	bne.n	80019a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 fa8c 	bl	8001f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e01a      	b.n	8001ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_I2C_Mem_Write+0x224>)
 8001a8e:	400b      	ands	r3, r1
 8001a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001aae:	2302      	movs	r3, #2
  }
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	fe00e800 	.word	0xfe00e800

08001abc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4603      	mov	r3, r0
 8001acc:	817b      	strh	r3, [r7, #10]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	813b      	strh	r3, [r7, #8]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	f040 80fd 	bne.w	8001cde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_I2C_Mem_Read+0x34>
 8001aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0f1      	b.n	8001ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_I2C_Mem_Read+0x4e>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e0ea      	b.n	8001ce0 <HAL_I2C_Mem_Read+0x224>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b12:	f7ff faf5 	bl	8001100 <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2319      	movs	r3, #25
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f9af 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0d5      	b.n	8001ce0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2222      	movs	r2, #34	; 0x22
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2240      	movs	r2, #64	; 0x40
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b5c:	88f8      	ldrh	r0, [r7, #6]
 8001b5e:	893a      	ldrh	r2, [r7, #8]
 8001b60:	8979      	ldrh	r1, [r7, #10]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f913 	bl	8001d98 <I2C_RequestMemoryRead>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0ad      	b.n	8001ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d90e      	bls.n	8001bac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	22ff      	movs	r2, #255	; 0xff
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	8979      	ldrh	r1, [r7, #10]
 8001b9c:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_I2C_Mem_Read+0x22c>)
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fa91 	bl	80020cc <I2C_TransferConfig>
 8001baa:	e00f      	b.n	8001bcc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <HAL_I2C_Mem_Read+0x22c>)
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fa80 	bl	80020cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f956 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e07c      	b.n	8001ce0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d034      	beq.n	8001c8c <HAL_I2C_Mem_Read+0x1d0>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d130      	bne.n	8001c8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	2200      	movs	r2, #0
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f927 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e04d      	b.n	8001ce0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2bff      	cmp	r3, #255	; 0xff
 8001c4c:	d90e      	bls.n	8001c6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	22ff      	movs	r2, #255	; 0xff
 8001c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	8979      	ldrh	r1, [r7, #10]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fa31 	bl	80020cc <I2C_TransferConfig>
 8001c6a:	e00f      	b.n	8001c8c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	8979      	ldrh	r1, [r7, #10]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fa20 	bl	80020cc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d19a      	bne.n	8001bcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f974 	bl	8001f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e01a      	b.n	8001ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_I2C_Mem_Read+0x230>)
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
  }
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	80002400 	.word	0x80002400
 8001cec:	fe00e800 	.word	0xfe00e800

08001cf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4603      	mov	r3, r0
 8001d00:	817b      	strh	r3, [r7, #10]
 8001d02:	460b      	mov	r3, r1
 8001d04:	813b      	strh	r3, [r7, #8]
 8001d06:	4613      	mov	r3, r2
 8001d08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	8979      	ldrh	r1, [r7, #10]
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <I2C_RequestMemoryWrite+0xa4>)
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f9d7 	bl	80020cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	69b9      	ldr	r1, [r7, #24]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f8f0 	bl	8001f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e02c      	b.n	8001d8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d38:	893b      	ldrh	r3, [r7, #8]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
 8001d42:	e015      	b.n	8001d70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d44:	893b      	ldrh	r3, [r7, #8]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	69b9      	ldr	r1, [r7, #24]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f8d6 	bl	8001f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e012      	b.n	8001d8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d66:	893b      	ldrh	r3, [r7, #8]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2200      	movs	r2, #0
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f884 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	80002000 	.word	0x80002000

08001d98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	8979      	ldrh	r1, [r7, #10]
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <I2C_RequestMemoryRead+0xa4>)
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f984 	bl	80020cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f89d 	bl	8001f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e02c      	b.n	8001e32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d105      	bne.n	8001dea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dde:	893b      	ldrh	r3, [r7, #8]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
 8001de8:	e015      	b.n	8001e16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dea:	893b      	ldrh	r3, [r7, #8]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	69b9      	ldr	r1, [r7, #24]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f883 	bl	8001f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e012      	b.n	8001e32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e0c:	893b      	ldrh	r3, [r7, #8]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2140      	movs	r1, #64	; 0x40
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f831 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	80002000 	.word	0x80002000

08001e40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d103      	bne.n	8001e5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d007      	beq.n	8001e7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	619a      	str	r2, [r3, #24]
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e98:	e022      	b.n	8001ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d01e      	beq.n	8001ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea2:	f7ff f92d 	bl	8001100 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d302      	bcc.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d113      	bne.n	8001ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e00f      	b.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d0cd      	beq.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f14:	e02c      	b.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f870 	bl	8002000 <I2C_IsAcknowledgeFailed>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e02a      	b.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d01e      	beq.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f32:	f7ff f8e5 	bl	8001100 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d113      	bne.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e007      	b.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d1cb      	bne.n	8001f16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f94:	e028      	b.n	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f830 	bl	8002000 <I2C_IsAcknowledgeFailed>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e026      	b.n	8001ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7ff f8a9 	bl	8001100 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d113      	bne.n	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e007      	b.n	8001ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d1cf      	bne.n	8001f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b10      	cmp	r3, #16
 8002018:	d151      	bne.n	80020be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201a:	e022      	b.n	8002062 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d01e      	beq.n	8002062 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002024:	f7ff f86c 	bl	8001100 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d302      	bcc.n	800203a <I2C_IsAcknowledgeFailed+0x3a>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d113      	bne.n	8002062 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f043 0220 	orr.w	r2, r3, #32
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e02e      	b.n	80020c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b20      	cmp	r3, #32
 800206e:	d1d5      	bne.n	800201c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2210      	movs	r2, #16
 8002076:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2220      	movs	r2, #32
 800207e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fedd 	bl	8001e40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002092:	400b      	ands	r3, r1
 8002094:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f043 0204 	orr.w	r2, r3, #4
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	fe00e800 	.word	0xfe00e800

080020cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	817b      	strh	r3, [r7, #10]
 80020da:	4613      	mov	r3, r2
 80020dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	0d5b      	lsrs	r3, r3, #21
 80020e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <I2C_TransferConfig+0x58>)
 80020ee:	430b      	orrs	r3, r1
 80020f0:	43db      	mvns	r3, r3
 80020f2:	ea02 0103 	and.w	r1, r2, r3
 80020f6:	897b      	ldrh	r3, [r7, #10]
 80020f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020fc:	7a7b      	ldrb	r3, [r7, #9]
 80020fe:	041b      	lsls	r3, r3, #16
 8002100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	431a      	orrs	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	03ff63ff 	.word	0x03ff63ff

08002128 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	d138      	bne.n	80021b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002148:	2302      	movs	r3, #2
 800214a:	e032      	b.n	80021b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800217a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d139      	bne.n	8002248 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021de:	2302      	movs	r3, #2
 80021e0:	e033      	b.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2224      	movs	r2, #36	; 0x24
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002210:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002258:	b08f      	sub	sp, #60	; 0x3c
 800225a:	af0a      	add	r7, sp, #40	; 0x28
 800225c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e116      	b.n	8002496 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fdda 	bl	8000e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2203      	movs	r2, #3
 800228c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fff4 	bl	8004294 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	687e      	ldr	r6, [r7, #4]
 80022b4:	466d      	mov	r5, sp
 80022b6:	f106 0410 	add.w	r4, r6, #16
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ca:	1d33      	adds	r3, r6, #4
 80022cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	f001 ff8e 	bl	80041f0 <USB_CoreInit>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0d7      	b.n	8002496 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 ffe2 	bl	80042b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e04a      	b.n	800238e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	333d      	adds	r3, #61	; 0x3d
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	333c      	adds	r3, #60	; 0x3c
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b298      	uxth	r0, r3
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3342      	adds	r3, #66	; 0x42
 8002334:	4602      	mov	r2, r0
 8002336:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	333f      	adds	r3, #63	; 0x3f
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3344      	adds	r3, #68	; 0x44
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3348      	adds	r3, #72	; 0x48
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3350      	adds	r3, #80	; 0x50
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3af      	bcc.n	80022f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e044      	b.n	8002428 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3301      	adds	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3b5      	bcc.n	800239e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	687e      	ldr	r6, [r7, #4]
 800243a:	466d      	mov	r5, sp
 800243c:	f106 0410 	add.w	r4, r6, #16
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002448:	e894 0003 	ldmia.w	r4, {r0, r1}
 800244c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002450:	1d33      	adds	r3, r6, #4
 8002452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f001 ff59 	bl	800430c <USB_DevInit>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e014      	b.n	8002496 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f80a 	bl	800249e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f002 f8df 	bl	8004652 <USB_DevDisconnect>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800249e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	f043 0303 	orr.w	r3, r3, #3
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_PWREx_GetVoltageRange+0x18>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000

08002504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002512:	d130      	bne.n	8002576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002520:	d038      	beq.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2232      	movs	r2, #50	; 0x32
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	4a1b      	ldr	r2, [pc, #108]	; (80025ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	3301      	adds	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002548:	e002      	b.n	8002550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3b01      	subs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255c:	d102      	bne.n	8002564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f2      	bne.n	800254a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002570:	d110      	bne.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e00f      	b.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002582:	d007      	beq.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800258c:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40007000 	.word	0x40007000
 80025a8:	20000000 	.word	0x20000000
 80025ac:	431bde83 	.word	0x431bde83

080025b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80025ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025be:	6053      	str	r3, [r2, #4]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e39d      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e2:	4ba4      	ldr	r3, [pc, #656]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ec:	4ba1      	ldr	r3, [pc, #644]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80e1 	beq.w	80027c6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_RCC_OscConfig+0x4a>
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	f040 8088 	bne.w	8002722 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 8084 	bne.w	8002722 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800261a:	4b96      	ldr	r3, [pc, #600]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e375      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_RCC_OscConfig+0x7c>
 8002642:	4b8c      	ldr	r3, [pc, #560]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264a:	e005      	b.n	8002658 <HAL_RCC_OscConfig+0x88>
 800264c:	4b89      	ldr	r3, [pc, #548]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	4293      	cmp	r3, r2
 800265a:	d223      	bcs.n	80026a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fcd1 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e356      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002670:	4b80      	ldr	r3, [pc, #512]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a7f      	ldr	r2, [pc, #508]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b7d      	ldr	r3, [pc, #500]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	497a      	ldr	r1, [pc, #488]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268e:	4b79      	ldr	r3, [pc, #484]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	4975      	ldr	r1, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
 80026a2:	e022      	b.n	80026ea <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	4b73      	ldr	r3, [pc, #460]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a72      	ldr	r2, [pc, #456]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b70      	ldr	r3, [pc, #448]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	496d      	ldr	r1, [pc, #436]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c2:	4b6c      	ldr	r3, [pc, #432]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	4968      	ldr	r1, [pc, #416]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fc94 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e319      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ea:	f000 fc03 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 80026ee:	4601      	mov	r1, r0
 80026f0:	4b60      	ldr	r3, [pc, #384]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	4a5f      	ldr	r2, [pc, #380]	; (8002878 <HAL_RCC_OscConfig+0x2a8>)
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	fa21 f303 	lsr.w	r3, r1, r3
 8002706:	4a5d      	ldr	r2, [pc, #372]	; (800287c <HAL_RCC_OscConfig+0x2ac>)
 8002708:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_RCC_OscConfig+0x2b0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fcaa 	bl	8001068 <HAL_InitTick>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d052      	beq.n	80027c4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	e2fd      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d032      	beq.n	8002790 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800272a:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a51      	ldr	r2, [pc, #324]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002736:	f7fe fce3 	bl	8001100 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800273e:	f7fe fcdf 	bl	8001100 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e2e6      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002750:	4b48      	ldr	r3, [pc, #288]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275c:	4b45      	ldr	r3, [pc, #276]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a44      	ldr	r2, [pc, #272]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b42      	ldr	r3, [pc, #264]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	493f      	ldr	r1, [pc, #252]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277a:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	493a      	ldr	r1, [pc, #232]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
 800278e:	e01a      	b.n	80027c6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002790:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279c:	f7fe fcb0 	bl	8001100 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a4:	f7fe fcac 	bl	8001100 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e2b3      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1d4>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d074      	beq.n	80028bc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_OscConfig+0x214>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d10e      	bne.n	80027fc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d10b      	bne.n	80027fc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	4b23      	ldr	r3, [pc, #140]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d064      	beq.n	80028ba <HAL_RCC_OscConfig+0x2ea>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d160      	bne.n	80028ba <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e290      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d106      	bne.n	8002814 <HAL_RCC_OscConfig+0x244>
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0x280>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x268>
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a14      	ldr	r2, [pc, #80]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a11      	ldr	r2, [pc, #68]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x280>
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_RCC_OscConfig+0x2a4>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01c      	beq.n	8002892 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fc52 	bl	8001100 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285e:	e011      	b.n	8002884 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fc4e 	bl	8001100 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d90a      	bls.n	8002884 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e255      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	0800dd4c 	.word	0x0800dd4c
 800287c:	20000000 	.word	0x20000000
 8002880:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002884:	4bae      	ldr	r3, [pc, #696]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0e7      	beq.n	8002860 <HAL_RCC_OscConfig+0x290>
 8002890:	e014      	b.n	80028bc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe fc35 	bl	8001100 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289a:	f7fe fc31 	bl	8001100 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	; 0x64
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e238      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ac:	4ba4      	ldr	r3, [pc, #656]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x2ca>
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d060      	beq.n	800298a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x30a>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d119      	bne.n	8002908 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d116      	bne.n	8002908 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028da:	4b99      	ldr	r3, [pc, #612]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x322>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e215      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b93      	ldr	r3, [pc, #588]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	498f      	ldr	r1, [pc, #572]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002906:	e040      	b.n	800298a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d023      	beq.n	8002958 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002910:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a8a      	ldr	r2, [pc, #552]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fbf0 	bl	8001100 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe fbec 	bl	8001100 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1f3      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002936:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	497b      	ldr	r1, [pc, #492]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
 8002956:	e018      	b.n	800298a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002958:	4b79      	ldr	r3, [pc, #484]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a78      	ldr	r2, [pc, #480]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 800295e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fbcc 	bl	8001100 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296c:	f7fe fbc8 	bl	8001100 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1cf      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297e:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d03c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299e:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 80029a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a4:	4a66      	ldr	r2, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ae:	f7fe fba7 	bl	8001100 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b6:	f7fe fba3 	bl	8001100 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1aa      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c8:	4b5d      	ldr	r3, [pc, #372]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ef      	beq.n	80029b6 <HAL_RCC_OscConfig+0x3e6>
 80029d6:	e01b      	b.n	8002a10 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 80029da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029de:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7fe fb8a 	bl	8001100 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7fe fb86 	bl	8001100 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e18d      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a02:	4b4f      	ldr	r3, [pc, #316]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ef      	bne.n	80029f0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a5 	beq.w	8002b68 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	4b44      	ldr	r3, [pc, #272]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6593      	str	r3, [r2, #88]	; 0x58
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_OscConfig+0x574>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_OscConfig+0x574>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <HAL_RCC_OscConfig+0x574>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fb4d 	bl	8001100 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7fe fb49 	bl	8001100 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e150      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_OscConfig+0x574>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d108      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4d2>
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	4a2a      	ldr	r2, [pc, #168]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa0:	e024      	b.n	8002aec <HAL_RCC_OscConfig+0x51c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d110      	bne.n	8002acc <HAL_RCC_OscConfig+0x4fc>
 8002aaa:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002ab2:	f043 0304 	orr.w	r3, r3, #4
 8002ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aca:	e00f      	b.n	8002aec <HAL_RCC_OscConfig+0x51c>
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d016      	beq.n	8002b22 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fb04 	bl	8001100 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe fb00 	bl	8001100 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e105      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x570>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ed      	beq.n	8002afc <HAL_RCC_OscConfig+0x52c>
 8002b20:	e019      	b.n	8002b56 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7fe faed 	bl	8001100 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b28:	e00e      	b.n	8002b48 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fae9 	bl	8001100 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d905      	bls.n	8002b48 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0ee      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b48:	4b77      	ldr	r3, [pc, #476]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e9      	bne.n	8002b2a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b56:	7ffb      	ldrb	r3, [r7, #31]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b72      	ldr	r3, [pc, #456]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4a71      	ldr	r2, [pc, #452]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80d5 	beq.w	8002d1c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	f000 808e 	beq.w	8002c96 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d15b      	bne.n	8002c3a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b69      	ldr	r3, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a68      	ldr	r2, [pc, #416]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fab7 	bl	8001100 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe fab3 	bl	8001100 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0ba      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4b5c      	ldr	r3, [pc, #368]	; (8002d2c <HAL_RCC_OscConfig+0x75c>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	4311      	orrs	r1, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bce:	0212      	lsls	r2, r2, #8
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bd6:	0852      	lsrs	r2, r2, #1
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	0552      	lsls	r2, r2, #21
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002be2:	0852      	lsrs	r2, r2, #1
 8002be4:	3a01      	subs	r2, #1
 8002be6:	0652      	lsls	r2, r2, #25
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bee:	0912      	lsrs	r2, r2, #4
 8002bf0:	0452      	lsls	r2, r2, #17
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	494c      	ldr	r1, [pc, #304]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfa:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a4a      	ldr	r2, [pc, #296]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c04:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c06:	4b48      	ldr	r3, [pc, #288]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4a47      	ldr	r2, [pc, #284]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c10:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe fa75 	bl	8001100 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe fa71 	bl	8001100 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e078      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x64a>
 8002c38:	e070      	b.n	8002d1c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c44:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c52:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c58:	f023 0303 	bic.w	r3, r3, #3
 8002c5c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c5e:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fa47 	bl	8001100 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7fe fa43 	bl	8001100 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e04a      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x6a6>
 8002c94:	e042      	b.n	8002d1c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e03d      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCC_OscConfig+0x758>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0203 	and.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d130      	bne.n	8002d18 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d127      	bne.n	8002d18 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d11f      	bne.n	8002d18 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce2:	2a07      	cmp	r2, #7
 8002ce4:	bf14      	ite	ne
 8002ce6:	2201      	movne	r2, #1
 8002ce8:	2200      	moveq	r2, #0
 8002cea:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d113      	bne.n	8002d18 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d109      	bne.n	8002d18 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	3b01      	subs	r3, #1
 8002d12:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	f99d808c 	.word	0xf99d808c

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0c8      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d910      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b63      	ldr	r3, [pc, #396]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 0207 	bic.w	r2, r3, #7
 8002d5a:	4961      	ldr	r1, [pc, #388]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b0      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d04c      	beq.n	8002e1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d88:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d121      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e09e      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da0:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d115      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e092      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e086      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e07e      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f023 0203 	bic.w	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	493f      	ldr	r1, [pc, #252]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dea:	f7fe f989 	bl	8001100 <HAL_GetTick>
 8002dee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df2:	f7fe f985 	bl	8001100 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e066      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e08:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 020c 	and.w	r2, r3, #12
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d1eb      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	492c      	ldr	r1, [pc, #176]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d210      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4924      	ldr	r1, [pc, #144]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e036      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4918      	ldr	r1, [pc, #96]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4910      	ldr	r1, [pc, #64]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ea6:	f000 f825 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002eaa:	4601      	mov	r1, r0
 8002eac:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b4>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	5cd3      	ldrb	r3, [r2, r3]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe f8cc 	bl	8001068 <HAL_InitTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	0800dd4c 	.word	0x0800dd4c
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000004 	.word	0x20000004

08002ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0c:	4b3a      	ldr	r3, [pc, #232]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x34>
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d11e      	bne.n	8002f66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f28:	4b33      	ldr	r3, [pc, #204]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f34:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e005      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f44:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f50:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10d      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e004      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d133      	bne.n	8002fea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0xa4>
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0xaa>
 8002f96:	e005      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f9a:	617b      	str	r3, [r7, #20]
      break;
 8002f9c:	e005      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fa0:	617b      	str	r3, [r7, #20]
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	617b      	str	r3, [r7, #20]
      break;
 8002fa8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	fb02 f203 	mul.w	r2, r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0e5b      	lsrs	r3, r3, #25
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fea:	69bb      	ldr	r3, [r7, #24]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3724      	adds	r7, #36	; 0x24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	0800dd5c 	.word	0x0800dd5c
 8003000:	00f42400 	.word	0x00f42400
 8003004:	00b71b00 	.word	0x00b71b00

08003008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003020:	f7ff fa62 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 8003024:	6178      	str	r0, [r7, #20]
 8003026:	e014      	b.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	6593      	str	r3, [r2, #88]	; 0x58
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003040:	f7ff fa52 	bl	80024e8 <HAL_PWREx_GetVoltageRange>
 8003044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003050:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d10b      	bne.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b80      	cmp	r3, #128	; 0x80
 800305e:	d919      	bls.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2ba0      	cmp	r3, #160	; 0xa0
 8003064:	d902      	bls.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003066:	2302      	movs	r3, #2
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e013      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800306c:	2301      	movs	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	e010      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d902      	bls.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003078:	2303      	movs	r3, #3
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e00a      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d102      	bne.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003084:	2302      	movs	r3, #2
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	e004      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b70      	cmp	r3, #112	; 0x70
 800308e:	d101      	bne.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003090:	2301      	movs	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 0207 	bic.w	r2, r3, #7
 800309c:	4909      	ldr	r1, [pc, #36]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40022000 	.word	0x40022000

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d4:	2300      	movs	r3, #0
 80030d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d03f      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ec:	d01c      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80030ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f2:	d802      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00e      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80030f8:	e01f      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80030fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030fe:	d003      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003100:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003104:	d01c      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003106:	e018      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003108:	4b85      	ldr	r3, [pc, #532]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a84      	ldr	r2, [pc, #528]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003112:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003114:	e015      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fab9 	bl	8003694 <RCCEx_PLLSAI1_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003126:	e00c      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3320      	adds	r3, #32
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fba0 	bl	8003874 <RCCEx_PLLSAI2_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003138:	e003      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	74fb      	strb	r3, [r7, #19]
      break;
 800313e:	e000      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003148:	4b75      	ldr	r3, [pc, #468]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003156:	4972      	ldr	r1, [pc, #456]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800315e:	e001      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03f      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003178:	d01c      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800317a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800317e:	d802      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003184:	e01f      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800318a:	d003      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800318c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003190:	d01c      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003192:	e018      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003194:	4b62      	ldr	r3, [pc, #392]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a61      	ldr	r2, [pc, #388]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a0:	e015      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fa73 	bl	8003694 <RCCEx_PLLSAI1_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b2:	e00c      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3320      	adds	r3, #32
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fb5a 	bl	8003874 <RCCEx_PLLSAI2_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c4:	e003      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	74fb      	strb	r3, [r7, #19]
      break;
 80031ca:	e000      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031d4:	4b52      	ldr	r3, [pc, #328]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e2:	494f      	ldr	r1, [pc, #316]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ea:	e001      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a0 	beq.w	800333e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00d      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a40      	ldr	r2, [pc, #256]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
 8003224:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003230:	2301      	movs	r3, #1
 8003232:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a3a      	ldr	r2, [pc, #232]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003240:	f7fd ff5e 	bl	8001100 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003246:	e009      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fd ff5a 	bl	8001100 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d902      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	74fb      	strb	r3, [r7, #19]
        break;
 800325a:	e005      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ef      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d15c      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800326e:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003278:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01f      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	d019      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fd ff19 	bl	8001100 <HAL_GetTick>
 80032ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d0:	e00b      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fd ff15 	bl	8001100 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d902      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	74fb      	strb	r3, [r7, #19]
            break;
 80032e8:	e006      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ec      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10c      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330e:	4904      	ldr	r1, [pc, #16]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003316:	e009      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	74bb      	strb	r3, [r7, #18]
 800331c:	e006      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332c:	7c7b      	ldrb	r3, [r7, #17]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b9e      	ldr	r3, [pc, #632]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	4a9d      	ldr	r2, [pc, #628]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800334a:	4b98      	ldr	r3, [pc, #608]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f023 0203 	bic.w	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	4994      	ldr	r1, [pc, #592]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800336c:	4b8f      	ldr	r3, [pc, #572]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f023 020c 	bic.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	498c      	ldr	r1, [pc, #560]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800338e:	4b87      	ldr	r3, [pc, #540]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	4983      	ldr	r1, [pc, #524]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b0:	4b7e      	ldr	r3, [pc, #504]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	497b      	ldr	r1, [pc, #492]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033d2:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e0:	4972      	ldr	r1, [pc, #456]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033f4:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	496a      	ldr	r1, [pc, #424]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003416:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	4961      	ldr	r1, [pc, #388]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003438:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	4959      	ldr	r1, [pc, #356]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003468:	4950      	ldr	r1, [pc, #320]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800347c:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	4948      	ldr	r1, [pc, #288]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	493f      	ldr	r1, [pc, #252]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d028      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c0:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ce:	4937      	ldr	r1, [pc, #220]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034de:	d106      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e0:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a31      	ldr	r2, [pc, #196]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ea:	60d3      	str	r3, [r2, #12]
 80034ec:	e011      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f6:	d10c      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	2101      	movs	r1, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f8c8 	bl	8003694 <RCCEx_PLLSAI1_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d028      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800351e:	4b23      	ldr	r3, [pc, #140]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	491f      	ldr	r1, [pc, #124]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800353c:	d106      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003548:	60d3      	str	r3, [r2, #12]
 800354a:	e011      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003554:	d10c      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2101      	movs	r1, #1
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f899 	bl	8003694 <RCCEx_PLLSAI1_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02b      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358a:	4908      	ldr	r1, [pc, #32]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359a:	d109      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a02      	ldr	r2, [pc, #8]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a6:	60d3      	str	r3, [r2, #12]
 80035a8:	e014      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f867 	bl	8003694 <RCCEx_PLLSAI1_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d02f      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ee:	4928      	ldr	r1, [pc, #160]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035fe:	d10d      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f844 	bl	8003694 <RCCEx_PLLSAI1_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d014      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	74bb      	strb	r3, [r7, #18]
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003624:	d10c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3320      	adds	r3, #32
 800362a:	2102      	movs	r1, #2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f921 	bl	8003874 <RCCEx_PLLSAI2_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365a:	490d      	ldr	r1, [pc, #52]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367e:	4904      	ldr	r1, [pc, #16]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003686:	7cbb      	ldrb	r3, [r7, #18]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000

08003694 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036a2:	4b73      	ldr	r3, [pc, #460]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d018      	beq.n	80036e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036ae:	4b70      	ldr	r3, [pc, #448]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0203 	and.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d10d      	bne.n	80036da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
       ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036c6:	4b6a      	ldr	r3, [pc, #424]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
       ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d044      	beq.n	8003764 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
 80036de:	e041      	b.n	8003764 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d00c      	beq.n	8003702 <RCCEx_PLLSAI1_Config+0x6e>
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d013      	beq.n	8003714 <RCCEx_PLLSAI1_Config+0x80>
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d120      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036f0:	4b5f      	ldr	r3, [pc, #380]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11d      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e01a      	b.n	8003738 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003702:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370a:	2b00      	cmp	r3, #0
 800370c:	d116      	bne.n	800373c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003712:	e013      	b.n	800373c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003714:	4b56      	ldr	r3, [pc, #344]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10f      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003730:	e006      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
      break;
 8003736:	e004      	b.n	8003742 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003738:	bf00      	nop
 800373a:	e002      	b.n	8003742 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003740:	bf00      	nop
    }

    if(status == HAL_OK)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10d      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003748:	4b49      	ldr	r3, [pc, #292]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	3b01      	subs	r3, #1
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	430b      	orrs	r3, r1
 800375e:	4944      	ldr	r1, [pc, #272]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d17d      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a40      	ldr	r2, [pc, #256]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003770:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003776:	f7fd fcc3 	bl	8001100 <HAL_GetTick>
 800377a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800377c:	e009      	b.n	8003792 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800377e:	f7fd fcbf 	bl	8001100 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d902      	bls.n	8003792 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	73fb      	strb	r3, [r7, #15]
        break;
 8003790:	e005      	b.n	800379e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ef      	bne.n	800377e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d160      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d111      	bne.n	80037ce <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037aa:	4b31      	ldr	r3, [pc, #196]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6892      	ldr	r2, [r2, #8]
 80037ba:	0211      	lsls	r1, r2, #8
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68d2      	ldr	r2, [r2, #12]
 80037c0:	0912      	lsrs	r2, r2, #4
 80037c2:	0452      	lsls	r2, r2, #17
 80037c4:	430a      	orrs	r2, r1
 80037c6:	492a      	ldr	r1, [pc, #168]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	610b      	str	r3, [r1, #16]
 80037cc:	e027      	b.n	800381e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d112      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d4:	4b26      	ldr	r3, [pc, #152]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6892      	ldr	r2, [r2, #8]
 80037e4:	0211      	lsls	r1, r2, #8
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6912      	ldr	r2, [r2, #16]
 80037ea:	0852      	lsrs	r2, r2, #1
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0552      	lsls	r2, r2, #21
 80037f0:	430a      	orrs	r2, r1
 80037f2:	491f      	ldr	r1, [pc, #124]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	610b      	str	r3, [r1, #16]
 80037f8:	e011      	b.n	800381e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003802:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	0211      	lsls	r1, r2, #8
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6952      	ldr	r2, [r2, #20]
 8003810:	0852      	lsrs	r2, r2, #1
 8003812:	3a01      	subs	r2, #1
 8003814:	0652      	lsls	r2, r2, #25
 8003816:	430a      	orrs	r2, r1
 8003818:	4915      	ldr	r1, [pc, #84]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003828:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fd fc69 	bl	8001100 <HAL_GetTick>
 800382e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003830:	e009      	b.n	8003846 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003832:	f7fd fc65 	bl	8001100 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d902      	bls.n	8003846 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	73fb      	strb	r3, [r7, #15]
          break;
 8003844:	e005      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ef      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000

08003874 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003882:	4b68      	ldr	r3, [pc, #416]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0203 	and.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d10d      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
       ||
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038a6:	4b5f      	ldr	r3, [pc, #380]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
       ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d044      	beq.n	8003944 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	e041      	b.n	8003944 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d00c      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0x6e>
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d013      	beq.n	80038f4 <RCCEx_PLLSAI2_Config+0x80>
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d120      	bne.n	8003912 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038d0:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11d      	bne.n	8003918 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e0:	e01a      	b.n	8003918 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038e2:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d116      	bne.n	800391c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f2:	e013      	b.n	800391c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10f      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003900:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003910:	e006      	b.n	8003920 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      break;
 8003916:	e004      	b.n	8003922 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003918:	bf00      	nop
 800391a:	e002      	b.n	8003922 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003920:	bf00      	nop
    }

    if(status == HAL_OK)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10d      	bne.n	8003944 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003928:	4b3e      	ldr	r3, [pc, #248]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	3b01      	subs	r3, #1
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	430b      	orrs	r3, r1
 800393e:	4939      	ldr	r1, [pc, #228]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d167      	bne.n	8003a1a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800394a:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a35      	ldr	r2, [pc, #212]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003956:	f7fd fbd3 	bl	8001100 <HAL_GetTick>
 800395a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800395c:	e009      	b.n	8003972 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800395e:	f7fd fbcf 	bl	8001100 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d902      	bls.n	8003972 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	73fb      	strb	r3, [r7, #15]
        break;
 8003970:	e005      	b.n	800397e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003972:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ef      	bne.n	800395e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d14a      	bne.n	8003a1a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d111      	bne.n	80039ae <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800398a:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6892      	ldr	r2, [r2, #8]
 800399a:	0211      	lsls	r1, r2, #8
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	68d2      	ldr	r2, [r2, #12]
 80039a0:	0912      	lsrs	r2, r2, #4
 80039a2:	0452      	lsls	r2, r2, #17
 80039a4:	430a      	orrs	r2, r1
 80039a6:	491f      	ldr	r1, [pc, #124]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	614b      	str	r3, [r1, #20]
 80039ac:	e011      	b.n	80039d2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6892      	ldr	r2, [r2, #8]
 80039be:	0211      	lsls	r1, r2, #8
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6912      	ldr	r2, [r2, #16]
 80039c4:	0852      	lsrs	r2, r2, #1
 80039c6:	3a01      	subs	r2, #1
 80039c8:	0652      	lsls	r2, r2, #25
 80039ca:	430a      	orrs	r2, r1
 80039cc:	4915      	ldr	r1, [pc, #84]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fd fb8f 	bl	8001100 <HAL_GetTick>
 80039e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039e4:	e009      	b.n	80039fa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039e6:	f7fd fb8b 	bl	8001100 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d902      	bls.n	80039fa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	73fb      	strb	r3, [r7, #15]
          break;
 80039f8:	e005      	b.n	8003a06 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ef      	beq.n	80039e6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	4903      	ldr	r1, [pc, #12]	; (8003a24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000

08003a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01d      	b.n	8003a76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fd f9a8 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f000 fa14 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d122      	bne.n	8003ada <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d11b      	bne.n	8003ada <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0202 	mvn.w	r2, #2
 8003aaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f9c8 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003ac6:	e005      	b.n	8003ad4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f9ba 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9cb 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d122      	bne.n	8003b2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d11b      	bne.n	8003b2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f06f 0204 	mvn.w	r2, #4
 8003afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f99e 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003b1a:	e005      	b.n	8003b28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f990 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f9a1 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d122      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11b      	bne.n	8003b82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f06f 0208 	mvn.w	r2, #8
 8003b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2204      	movs	r2, #4
 8003b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f974 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003b6e:	e005      	b.n	8003b7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f966 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f977 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d122      	bne.n	8003bd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d11b      	bne.n	8003bd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f06f 0210 	mvn.w	r2, #16
 8003ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2208      	movs	r2, #8
 8003bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f94a 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003bc2:	e005      	b.n	8003bd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f93c 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f94d 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d10e      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d107      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f06f 0201 	mvn.w	r2, #1
 8003bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f916 	bl	8003e2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d10e      	bne.n	8003c2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d107      	bne.n	8003c2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 facd 	bl	80041c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fac0 	bl	80041dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8fb 	bl	8003e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0220 	mvn.w	r2, #32
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa80 	bl	80041b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_TIM_ConfigClockSource+0x18>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e0a8      	b.n	8003e26 <HAL_TIM_ConfigClockSource+0x16a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d067      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0x124>
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d80b      	bhi.n	8003d2c <HAL_TIM_ConfigClockSource+0x70>
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d073      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x144>
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d802      	bhi.n	8003d22 <HAL_TIM_ConfigClockSource+0x66>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d06f      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d20:	e078      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d06c      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x144>
 8003d26:	2b30      	cmp	r3, #48	; 0x30
 8003d28:	d06a      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003d2a:	e073      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d2c:	2b70      	cmp	r3, #112	; 0x70
 8003d2e:	d00d      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0x90>
 8003d30:	2b70      	cmp	r3, #112	; 0x70
 8003d32:	d804      	bhi.n	8003d3e <HAL_TIM_ConfigClockSource+0x82>
 8003d34:	2b50      	cmp	r3, #80	; 0x50
 8003d36:	d033      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0xe4>
 8003d38:	2b60      	cmp	r3, #96	; 0x60
 8003d3a:	d041      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003d3c:	e06a      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d42:	d066      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x156>
 8003d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d48:	d017      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003d4a:	e063      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f000 f9ae 	bl	80040bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
      break;
 8003d78:	e04c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f000 f997 	bl	80040bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9c:	609a      	str	r2, [r3, #8]
      break;
 8003d9e:	e039      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	461a      	mov	r2, r3
 8003dae:	f000 f90b 	bl	8003fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2150      	movs	r1, #80	; 0x50
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f964 	bl	8004086 <TIM_ITRx_SetConfig>
      break;
 8003dbe:	e029      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f000 f92a 	bl	8004026 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2160      	movs	r1, #96	; 0x60
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f954 	bl	8004086 <TIM_ITRx_SetConfig>
      break;
 8003dde:	e019      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f000 f8eb 	bl	8003fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2140      	movs	r1, #64	; 0x40
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f944 	bl	8004086 <TIM_ITRx_SetConfig>
      break;
 8003dfe:	e009      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 f93b 	bl	8004086 <TIM_ITRx_SetConfig>
      break;
 8003e10:	e000      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d00f      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3d      	ldr	r2, [pc, #244]	; (8003fac <TIM_Base_SetConfig+0x118>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3c      	ldr	r2, [pc, #240]	; (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <TIM_Base_SetConfig+0x120>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3a      	ldr	r2, [pc, #232]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <TIM_Base_SetConfig+0x9a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d01b      	beq.n	8003f2e <TIM_Base_SetConfig+0x9a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <TIM_Base_SetConfig+0x118>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d017      	beq.n	8003f2e <TIM_Base_SetConfig+0x9a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2b      	ldr	r2, [pc, #172]	; (8003fb0 <TIM_Base_SetConfig+0x11c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <TIM_Base_SetConfig+0x9a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <TIM_Base_SetConfig+0x120>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00f      	beq.n	8003f2e <TIM_Base_SetConfig+0x9a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00b      	beq.n	8003f2e <TIM_Base_SetConfig+0x9a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <TIM_Base_SetConfig+0x128>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <TIM_Base_SetConfig+0x9a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_Base_SetConfig+0x9a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <TIM_Base_SetConfig+0x130>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <TIM_Base_SetConfig+0x114>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <TIM_Base_SetConfig+0xf8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <TIM_Base_SetConfig+0x124>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0xf8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <TIM_Base_SetConfig+0x128>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0xf8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0xf8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <TIM_Base_SetConfig+0x130>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d103      	bne.n	8003f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	615a      	str	r2, [r3, #20]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800
 8003fb4:	40000c00 	.word	0x40000c00
 8003fb8:	40013400 	.word	0x40013400
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800

08003fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 030a 	bic.w	r3, r3, #10
 8004004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004026:	b480      	push	{r7}
 8004028:	b087      	sub	sp, #28
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0210 	bic.w	r2, r3, #16
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	031b      	lsls	r3, r3, #12
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f043 0307 	orr.w	r3, r3, #7
 80040a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	609a      	str	r2, [r3, #8]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	021a      	lsls	r2, r3, #8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	431a      	orrs	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	609a      	str	r2, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004110:	2302      	movs	r3, #2
 8004112:	e045      	b.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800414e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004172:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40013400 	.word	0x40013400

080041b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041f0:	b084      	sub	sp, #16
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	f107 001c 	add.w	r0, r7, #28
 80041fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	d122      	bne.n	800424e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800421c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d105      	bne.n	8004242 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa1e 	bl	8004684 <USB_CoreReset>
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	e01a      	b.n	8004284 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fa12 	bl	8004684 <USB_CoreReset>
 8004260:	4603      	mov	r3, r0
 8004262:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
 8004276:	e005      	b.n	8004284 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004290:	b004      	add	sp, #16
 8004292:	4770      	bx	lr

08004294 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 0201 	bic.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	e00b      	b.n	80042fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	e001      	b.n	80042fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e003      	b.n	8004302 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80042fa:	2032      	movs	r0, #50	; 0x32
 80042fc:	f7fc ff0c 	bl	8001118 <HAL_Delay>

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800430c:	b084      	sub	sp, #16
 800430e:	b580      	push	{r7, lr}
 8004310:	b086      	sub	sp, #24
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800431a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	e009      	b.n	8004340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3340      	adds	r3, #64	; 0x40
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3301      	adds	r3, #1
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0e      	cmp	r3, #14
 8004344:	d9f2      	bls.n	800432c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d112      	bne.n	8004372 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e005      	b.n	800437e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004384:	461a      	mov	r2, r3
 8004386:	2300      	movs	r3, #0
 8004388:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	4619      	mov	r1, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	461a      	mov	r2, r3
 800439a:	680b      	ldr	r3, [r1, #0]
 800439c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800439e:	2103      	movs	r1, #3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f93d 	bl	8004620 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043a6:	2110      	movs	r1, #16
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f8f1 	bl	8004590 <USB_FlushTxFifo>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f90f 	bl	80045dc <USB_FlushRxFifo>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	461a      	mov	r2, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	461a      	mov	r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e043      	b.n	800447a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004408:	d118      	bne.n	800443c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	461a      	mov	r2, r3
 800441e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	e013      	b.n	800444e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	461a      	mov	r2, r3
 8004434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e008      	b.n	800444e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	461a      	mov	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	461a      	mov	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	461a      	mov	r2, r3
 800446e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004472:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	3301      	adds	r3, #1
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	429a      	cmp	r2, r3
 8004480:	d3b7      	bcc.n	80043f2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e043      	b.n	8004510 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800449a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449e:	d118      	bne.n	80044d2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	461a      	mov	r2, r3
 80044b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e013      	b.n	80044e4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	461a      	mov	r2, r3
 80044ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	e008      	b.n	80044e4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	461a      	mov	r2, r3
 80044e0:	2300      	movs	r3, #0
 80044e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	461a      	mov	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	461a      	mov	r2, r3
 8004504:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004508:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3301      	adds	r3, #1
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	429a      	cmp	r2, r3
 8004516:	d3b7      	bcc.n	8004488 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800452a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004538:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <USB_DevInit+0x280>)
 800454c:	4313      	orrs	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f043 0208 	orr.w	r2, r3, #8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004586:	b004      	add	sp, #16
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	803c3800 	.word	0x803c3800

08004590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <USB_FlushTxFifo+0x48>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e006      	b.n	80045ca <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d0f0      	beq.n	80045aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	00030d40 	.word	0x00030d40

080045dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2210      	movs	r2, #16
 80045ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <USB_FlushRxFifo+0x40>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e006      	b.n	800460e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b10      	cmp	r3, #16
 800460a:	d0f0      	beq.n	80045ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	00030d40 	.word	0x00030d40

08004620 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800466c:	f043 0302 	orr.w	r3, r3, #2
 8004670:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004672:	2003      	movs	r0, #3
 8004674:	f7fc fd50 	bl	8001118 <HAL_Delay>

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a13      	ldr	r2, [pc, #76]	; (80046e8 <USB_CoreReset+0x64>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e01b      	b.n	80046da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	daf2      	bge.n	8004690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3301      	adds	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <USB_CoreReset+0x64>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e006      	b.n	80046da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d0f0      	beq.n	80046ba <USB_CoreReset+0x36>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	00030d40 	.word	0x00030d40

080046ec <core_initialize>:
#include "core.h"
#include "typec.h"
#include "dpm.h"

void core_initialize(struct Port *port)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  InitializeVars(port, 1, 0xA0);
 80046f4:	22a0      	movs	r2, #160	; 0xa0
 80046f6:	2101      	movs	r1, #1
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f003 fd01 	bl	8008100 <InitializeVars>
  InitializePort(port);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f003 ff38 	bl	8008574 <InitializePort>
  platform_printf(port->port_id_, "Port Initialized.\n", -1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	4903      	ldr	r1, [pc, #12]	; (800471c <core_initialize+0x30>)
 800470e:	4618      	mov	r0, r3
 8004710:	f7fc fabc 	bl	8000c8c <platform_printf>
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	0800dcf0 	.word	0x0800dcf0

08004720 <core_state_machine>:

void core_state_machine(struct Port *port)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  FSC_U8 data = TRANSMIT_HARDRESET;
 8004728:	2305      	movs	r3, #5
 800472a:	73fb      	strb	r3, [r7, #15]

  if (port->tc_enabled_ == TRUE) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004732:	2b01      	cmp	r3, #1
 8004734:	d125      	bne.n	8004782 <core_state_machine+0x62>
    /* Hard reset timeout shortcut.
     * Helps prevent driver interrupt latency issues
     */
    if (port->waiting_on_hr_ && TimerExpired(&port->policy_state_timer_)) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00f      	beq.n	8004760 <core_state_machine+0x40>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	338c      	adds	r3, #140	; 0x8c
 8004744:	4618      	mov	r0, r3
 8004746:	f005 fecd 	bl	800a4e4 <TimerExpired>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <core_state_machine+0x40>
      /* Don't disable the timer here as we expect the states might be waiting for
       * expiration. */
      platform_i2c_write(port->i2c_addr_, regTRANSMIT, 1, &data);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7858      	ldrb	r0, [r3, #1]
 8004754:	f107 030f 	add.w	r3, r7, #15
 8004758:	2201      	movs	r2, #1
 800475a:	2150      	movs	r1, #80	; 0x50
 800475c:	f7fc f924 	bl	80009a8 <platform_i2c_write>
    }

    /* Read status registers for ALL chip features */
    ReadStatusRegisters(port);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f003 ff9e 	bl	80086a2 <ReadStatusRegisters>

    /* Check and handle a chip reset */
    if (port->registers_.FaultStat.ALL_REGS_RESET) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7edb      	ldrb	r3, [r3, #27]
 800476a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <core_state_machine+0x5c>
      core_initialize(port);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ffb9 	bl	80046ec <core_initialize>
 800477a:	e002      	b.n	8004782 <core_state_machine+0x62>
      return;
    }

    /* TypeC/PD state machines */
    StateMachineTypeC(port);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f005 feff 	bl	800a580 <StateMachineTypeC>
  }
}
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <core_get_next_timeout>:
{
  port->tc_enabled_ = enable;
}

FSC_U32 core_get_next_timeout(struct Port *port)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  FSC_U32 time = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
  FSC_U32 nexttime = 0xFFFFFFFF;
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->pps_timer_);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	33e0      	adds	r3, #224	; 0xe0
 800479e:	4618      	mov	r0, r3
 80047a0:	f005 febd 	bl	800a51e <TimerRemaining>
 80047a4:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <core_get_next_timeout+0x30>
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d201      	bcs.n	80047b8 <core_get_next_timeout+0x30>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->tc_state_timer_);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3380      	adds	r3, #128	; 0x80
 80047bc:	4618      	mov	r0, r3
 80047be:	f005 feae 	bl	800a51e <TimerRemaining>
 80047c2:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <core_get_next_timeout+0x4e>
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d201      	bcs.n	80047d6 <core_get_next_timeout+0x4e>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->policy_state_timer_);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	338c      	adds	r3, #140	; 0x8c
 80047da:	4618      	mov	r0, r3
 80047dc:	f005 fe9f 	bl	800a51e <TimerRemaining>
 80047e0:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <core_get_next_timeout+0x6c>
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d201      	bcs.n	80047f4 <core_get_next_timeout+0x6c>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	60fb      	str	r3, [r7, #12]

#ifdef FSC_HAVE_VDM
  time = TimerRemaining(&port->vdm_timer_);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80047fa:	4618      	mov	r0, r3
 80047fc:	f005 fe8f 	bl	800a51e <TimerRemaining>
 8004800:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <core_get_next_timeout+0x8c>
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	429a      	cmp	r2, r3
 800480e:	d201      	bcs.n	8004814 <core_get_next_timeout+0x8c>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	60fb      	str	r3, [r7, #12]
#endif /* FSC_HAVE_VDM */

  time = TimerRemaining(&port->no_response_timer_);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	33bc      	adds	r3, #188	; 0xbc
 8004818:	4618      	mov	r0, r3
 800481a:	f005 fe80 	bl	800a51e <TimerRemaining>
 800481e:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <core_get_next_timeout+0xaa>
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	429a      	cmp	r2, r3
 800482c:	d201      	bcs.n	8004832 <core_get_next_timeout+0xaa>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->swap_source_start_timer_);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	33c8      	adds	r3, #200	; 0xc8
 8004836:	4618      	mov	r0, r3
 8004838:	f005 fe71 	bl	800a51e <TimerRemaining>
 800483c:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <core_get_next_timeout+0xc8>
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	429a      	cmp	r2, r3
 800484a:	d201      	bcs.n	8004850 <core_get_next_timeout+0xc8>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->pd_debounce_timer_);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	33b0      	adds	r3, #176	; 0xb0
 8004854:	4618      	mov	r0, r3
 8004856:	f005 fe62 	bl	800a51e <TimerRemaining>
 800485a:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <core_get_next_timeout+0xe6>
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d201      	bcs.n	800486e <core_get_next_timeout+0xe6>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->cc_debounce_timer_);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	33a4      	adds	r3, #164	; 0xa4
 8004872:	4618      	mov	r0, r3
 8004874:	f005 fe53 	bl	800a51e <TimerRemaining>
 8004878:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <core_get_next_timeout+0x104>
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	429a      	cmp	r2, r3
 8004886:	d201      	bcs.n	800488c <core_get_next_timeout+0x104>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	60fb      	str	r3, [r7, #12]

  time = TimerRemaining(&port->policy_sinktx_timer_);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3398      	adds	r3, #152	; 0x98
 8004890:	4618      	mov	r0, r3
 8004892:	f005 fe44 	bl	800a51e <TimerRemaining>
 8004896:	60b8      	str	r0, [r7, #8]
  if (time > 0 && time < nexttime) nexttime = time;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <core_get_next_timeout+0x122>
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d201      	bcs.n	80048aa <core_get_next_timeout+0x122>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	60fb      	str	r3, [r7, #12]

  if (nexttime == 0xFFFFFFFF) nexttime = 0;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d101      	bne.n	80048b6 <core_get_next_timeout+0x12e>
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]

  return nexttime;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <DP_Initialize>:
#include "port.h"
#include "vdm.h"
#include "vdm_types.h"

void DP_Initialize(struct Port *port)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  DisplayPortCaps_t *cap = &port->display_port_data_.DpCap;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Initialize display port capabilities */
  cap->word = 0;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
  cap->UfpDCapable = DisplayPort_UFP_Capable;
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	7813      	ldrb	r3, [r2, #0]
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	7013      	strb	r3, [r2, #0]
  cap->DfpDCapable = DisplayPort_DFP_Capable;
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	7813      	ldrb	r3, [r2, #0]
 80048e4:	f36f 0341 	bfc	r3, #1, #1
 80048e8:	7013      	strb	r3, [r2, #0]
  cap->Transport = DisplayPort_Signaling;
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	7813      	ldrb	r3, [r2, #0]
 80048ee:	2101      	movs	r1, #1
 80048f0:	f361 0385 	bfi	r3, r1, #2, #4
 80048f4:	7013      	strb	r3, [r2, #0]
  cap->ReceptacleIndication = DisplayPort_Receptacle;
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	7813      	ldrb	r3, [r2, #0]
 80048fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048fe:	7013      	strb	r3, [r2, #0]
  cap->USB2p0NotUsed = !DisplayPort_USBr2p0Signal_Req;
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	7813      	ldrb	r3, [r2, #0]
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	7013      	strb	r3, [r2, #0]
  cap->DFP_DPinAssignments = DisplayPort_DFP_Pin_Mask;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	221c      	movs	r2, #28
 800490e:	705a      	strb	r2, [r3, #1]
  cap->UFP_DPinAssignments = DisplayPort_UFP_Pin_Mask;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2204      	movs	r2, #4
 8004914:	709a      	strb	r2, [r3, #2]
  /* Initialize other variables */
  port->display_port_data_.DpConfigured = FALSE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
  port->display_port_data_.DpStatus.word = 0;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
  port->display_port_data_.DpCapMatched = FALSE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
  port->display_port_data_.DpPpConfig.word = 0;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
  port->display_port_data_.DpPpStatus.word = 0;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  port->display_port_data_.DpModeEntered = 0;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  if (cap->UfpDCapable)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00f      	beq.n	8004974 <DP_Initialize+0xb4>
  {
    port->display_port_data_.DpStatus.Connection |= DP_MODE_UFP_D;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800495a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	b2d9      	uxtb	r1, r3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 800496c:	f361 0301 	bfi	r3, r1, #0, #2
 8004970:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
  }
  if (cap->DfpDCapable)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00f      	beq.n	80049a2 <DP_Initialize+0xe2>
  {
    port->display_port_data_.DpStatus.Connection |= DP_MODE_DFP_D;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 8004988:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	b2d9      	uxtb	r1, r3
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 800499a:	f361 0301 	bfi	r3, r1, #0, #2
 800499e:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
  }

  platform_dp_enable_pins(FALSE, 0);
 80049a2:	2100      	movs	r1, #0
 80049a4:	2000      	movs	r0, #0
 80049a6:	f7fc f97e 	bl	8000ca6 <platform_dp_enable_pins>
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <DP_RequestPartnerStatus>:

void DP_RequestPartnerStatus(struct Port *port)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b088      	sub	sp, #32
 80049b6:	af02      	add	r7, sp, #8
 80049b8:	6078      	str	r0, [r7, #4]
  doDataObject_t svdmh = {0};
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
  FSC_U32 length = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[2] = {0};
 80049c2:	f107 0308 	add.w	r3, r7, #8
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
  svdmh.SVDM.SVID = DP_SID;
 80049cc:	f64f 7301 	movw	r3, #65281	; 0xff01
 80049d0:	827b      	strh	r3, [r7, #18]
  svdmh.SVDM.VDMType = STRUCTURED_VDM;
 80049d2:	7c7b      	ldrb	r3, [r7, #17]
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.Version = CurrentSVDMVersion(port, SOP_TYPE_SOP);
 80049da:	2100      	movs	r1, #0
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f006 fae5 	bl	800afac <CurrentSVDMVersion>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	7c7b      	ldrb	r3, [r7, #17]
 80049ec:	f362 1346 	bfi	r3, r2, #5, #2
 80049f0:	747b      	strb	r3, [r7, #17]
  /* saved mode position */
  svdmh.SVDM.ObjPos = port->display_port_data_.DpModeEntered & 0x7;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	7c7b      	ldrb	r3, [r7, #17]
 8004a00:	f362 0302 	bfi	r3, r2, #0, #3
 8004a04:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.CommandType = INITIATOR;
 8004a06:	7c3b      	ldrb	r3, [r7, #16]
 8004a08:	f36f 1387 	bfc	r3, #6, #2
 8004a0c:	743b      	strb	r3, [r7, #16]
  svdmh.SVDM.Command = DP_COMMAND_STATUS;
 8004a0e:	7c3b      	ldrb	r3, [r7, #16]
 8004a10:	2210      	movs	r2, #16
 8004a12:	f362 0304 	bfi	r3, r2, #0, #5
 8004a16:	743b      	strb	r3, [r7, #16]
  arr[0] = svdmh.object;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	60bb      	str	r3, [r7, #8]
  length++;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
  arr[1] = port->display_port_data_.DpStatus.word;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8004a28:	60fb      	str	r3, [r7, #12]
  length++;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]
  port->original_policy_state_ = port->policy_state_;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  SendVdmMessageWithTimeout(port, SOP_TYPE_SOP, arr, length,
 8004a3c:	f107 0208 	add.w	r2, r7, #8
 8004a40:	238a      	movs	r3, #138	; 0x8a
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2100      	movs	r1, #0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f008 f8a2 	bl	800cb92 <SendVdmMessageWithTimeout>
                            PE_DFP_VDM_DP_Status_Request);
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <DP_RequestPartnerConfig>:

void DP_RequestPartnerConfig(struct Port *port, DisplayPortConfig_t in)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b088      	sub	sp, #32
 8004a5a:	af02      	add	r7, sp, #8
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  doDataObject_t svdmh = {0};
 8004a60:	2300      	movs	r3, #0
 8004a62:	613b      	str	r3, [r7, #16]
  FSC_U32 length = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[2] = {0};
 8004a68:	f107 0308 	add.w	r3, r7, #8
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	605a      	str	r2, [r3, #4]
  svdmh.SVDM.SVID = DP_SID;
 8004a72:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004a76:	827b      	strh	r3, [r7, #18]
  svdmh.SVDM.VDMType = STRUCTURED_VDM;
 8004a78:	7c7b      	ldrb	r3, [r7, #17]
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.Version = CurrentSVDMVersion(port, SOP_TYPE_SOP);
 8004a80:	2100      	movs	r1, #0
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f006 fa92 	bl	800afac <CurrentSVDMVersion>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	7c7b      	ldrb	r3, [r7, #17]
 8004a92:	f362 1346 	bfi	r3, r2, #5, #2
 8004a96:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.ObjPos = port->display_port_data_.DpModeEntered & 0x7;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	7c7b      	ldrb	r3, [r7, #17]
 8004aa6:	f362 0302 	bfi	r3, r2, #0, #3
 8004aaa:	747b      	strb	r3, [r7, #17]
  svdmh.SVDM.CommandType = INITIATOR;
 8004aac:	7c3b      	ldrb	r3, [r7, #16]
 8004aae:	f36f 1387 	bfc	r3, #6, #2
 8004ab2:	743b      	strb	r3, [r7, #16]
  svdmh.SVDM.Command = DP_COMMAND_CONFIG;
 8004ab4:	7c3b      	ldrb	r3, [r7, #16]
 8004ab6:	2211      	movs	r2, #17
 8004ab8:	f362 0304 	bfi	r3, r2, #0, #5
 8004abc:	743b      	strb	r3, [r7, #16]
  arr[0] = svdmh.object;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	60bb      	str	r3, [r7, #8]
  length++;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
  arr[1] = in.word;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
  length++;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	617b      	str	r3, [r7, #20]
  port->original_policy_state_ = port->policy_state_;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  SendVdmMessageWithTimeout(port, SOP_TYPE_SOP, arr, length,
 8004ade:	f107 0208 	add.w	r2, r7, #8
 8004ae2:	238d      	movs	r3, #141	; 0x8d
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f008 f851 	bl	800cb92 <SendVdmMessageWithTimeout>
                            PE_DFP_VDM_DP_Config_Request);
}
 8004af0:	bf00      	nop
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <DP_SetPortMode>:


void DP_SetPortMode(struct Port *port, DisplayPortMode_t conn)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	70fb      	strb	r3, [r7, #3]
  switch (conn)
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	f200 8086 	bhi.w	8004c18 <DP_SetPortMode+0x120>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <DP_SetPortMode+0x1c>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b9f 	.word	0x08004b9f
 8004b1c:	08004b61 	.word	0x08004b61
 8004b20:	08004bdd 	.word	0x08004bdd
  {
  case DP_MODE_DISABLED:
    port->display_port_data_.DpCap.UfpDCapable = 0;
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 8004b2a:	f36f 0300 	bfc	r3, #0, #1
 8004b2e:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.DfpDCapable = 0;
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 8004b38:	f36f 0341 	bfc	r3, #1, #1
 8004b3c:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.UFP_DPinAssignments = 0;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
    port->display_port_data_.DpCap.DFP_DPinAssignments = 0;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
    port->display_port_data_.DpStatus.Connection = DP_MODE_DISABLED;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 8004b56:	f36f 0301 	bfc	r3, #0, #2
 8004b5a:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
    break;
 8004b5e:	e05c      	b.n	8004c1a <DP_SetPortMode+0x122>
  case DP_MODE_UFP_D:
    port->display_port_data_.DpCap.UfpDCapable = DisplayPort_UFP_Capable;
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.DfpDCapable = 0;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 8004b74:	f36f 0341 	bfc	r3, #1, #1
 8004b78:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.UFP_DPinAssignments = DisplayPort_UFP_Pin_Mask;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2204      	movs	r2, #4
 8004b80:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
    port->display_port_data_.DpCap.DFP_DPinAssignments = 0;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
    port->display_port_data_.DpStatus.Connection = DP_MODE_UFP_D;
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 8004b92:	2102      	movs	r1, #2
 8004b94:	f361 0301 	bfi	r3, r1, #0, #2
 8004b98:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
    break;
 8004b9c:	e03d      	b.n	8004c1a <DP_SetPortMode+0x122>
  case DP_MODE_DFP_D:
    port->display_port_data_.DpCap.UfpDCapable = 0;
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 8004ba4:	f36f 0300 	bfc	r3, #0, #1
 8004ba8:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.DfpDCapable = DisplayPort_DFP_Capable;
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 8004bb2:	f36f 0341 	bfc	r3, #1, #1
 8004bb6:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.UFP_DPinAssignments = 0;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
    port->display_port_data_.DpCap.DFP_DPinAssignments = DisplayPort_DFP_Pin_Mask;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	221c      	movs	r2, #28
 8004bc6:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
    port->display_port_data_.DpStatus.Connection = DP_MODE_DFP_D;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	f361 0301 	bfi	r3, r1, #0, #2
 8004bd6:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
    break;
 8004bda:	e01e      	b.n	8004c1a <DP_SetPortMode+0x122>
  case DP_MODE_BOTH:
    port->display_port_data_.DpCap.UfpDCapable = DisplayPort_UFP_Capable;
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.DfpDCapable = DisplayPort_DFP_Capable;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	f892 32d8 	ldrb.w	r3, [r2, #728]	; 0x2d8
 8004bf0:	f36f 0341 	bfc	r3, #1, #1
 8004bf4:	f882 32d8 	strb.w	r3, [r2, #728]	; 0x2d8
    port->display_port_data_.DpCap.UFP_DPinAssignments = DisplayPort_UFP_Pin_Mask;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
    port->display_port_data_.DpCap.DFP_DPinAssignments = DisplayPort_DFP_Pin_Mask;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	221c      	movs	r2, #28
 8004c04:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
    port->display_port_data_.DpStatus.Connection = DP_MODE_BOTH;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	f892 32dc 	ldrb.w	r3, [r2, #732]	; 0x2dc
 8004c0e:	f043 0303 	orr.w	r3, r3, #3
 8004c12:	f882 32dc 	strb.w	r3, [r2, #732]	; 0x2dc
    break;
 8004c16:	e000      	b.n	8004c1a <DP_SetPortMode+0x122>
  default:
    break;
 8004c18:	bf00      	nop
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop

08004c28 <DP_SelectPinAssignment>:

static FSC_BOOL DP_SelectPinAssignment(struct Port *port)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  DisplayPortConfig_t *config;        /* sent to port partner Type-C UFP_U */
  DisplayPortCaps_t   *dpPartnerCap;    /* type-C UFP capability */
  FSC_U32 dp_pin_match;

  dpPartnerCap = &port->display_port_data_.DpPpCap;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8004c36:	613b      	str	r3, [r7, #16]
  config = &port->display_port_data_.DpPpConfig;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Plug indicates connections receptacle must use */
  config->PinAssign = DP_PIN_ASSIGN_NS;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	705a      	strb	r2, [r3, #1]
  if (config->Mode == DP_CONF_UFP_D)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d118      	bne.n	8004c86 <DP_SelectPinAssignment+0x5e>
  {
     /* Configuring as display port sink */
     if (dpPartnerCap->ReceptacleIndication == DP_Plug)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <DP_SelectPinAssignment+0x4c>
     {
       /* Plug describes receptacle's pin assignment */
       dp_pin_match = dpPartnerCap->DFP_DPinAssignments &
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	785a      	ldrb	r2, [r3, #1]
                      port->display_port_data_.DpCap.DFP_DPinAssignments;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 32d9 	ldrb.w	r3, [r3, #729]	; 0x2d9
       dp_pin_match = dpPartnerCap->DFP_DPinAssignments &
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e020      	b.n	8004cb6 <DP_SelectPinAssignment+0x8e>
     }
     else
     {
       dp_pin_match = dpPartnerCap->UFP_DPinAssignments &
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	789a      	ldrb	r2, [r3, #2]
                      port->display_port_data_.DpCap.DFP_DPinAssignments;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 32d9 	ldrb.w	r3, [r3, #729]	; 0x2d9
       dp_pin_match = dpPartnerCap->UFP_DPinAssignments &
 8004c7e:	4013      	ands	r3, r2
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e017      	b.n	8004cb6 <DP_SelectPinAssignment+0x8e>
     }
   }
   else
   {
     if (dpPartnerCap->ReceptacleIndication == DP_Plug)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d108      	bne.n	8004ca6 <DP_SelectPinAssignment+0x7e>
     {
       dp_pin_match = dpPartnerCap->UFP_DPinAssignments &
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	789a      	ldrb	r2, [r3, #2]
                      port->display_port_data_.DpCap.UFP_DPinAssignments;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
       dp_pin_match = dpPartnerCap->UFP_DPinAssignments &
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e007      	b.n	8004cb6 <DP_SelectPinAssignment+0x8e>
     }
     else
     {
       dp_pin_match = dpPartnerCap->DFP_DPinAssignments &
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	785a      	ldrb	r2, [r3, #1]
                      port->display_port_data_.DpCap.UFP_DPinAssignments;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
       dp_pin_match = dpPartnerCap->DFP_DPinAssignments &
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	617b      	str	r3, [r7, #20]

   /* Match pins assignment C, D, E in order of preference. Lets start with
    * lowest preference available and then move up */
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'E') &&
                        (dp_pin_match & DP_PIN_ASSIGN_E)) ?
                         DP_PIN_ASSIGN_E : DP_PIN_ASSIGN_NS;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	b2da      	uxtb	r2, r3
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'E') &&
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	705a      	strb	r2, [r3, #1]
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'D') &&
                        (dp_pin_match & DP_PIN_ASSIGN_D)) ?
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
                         DP_PIN_ASSIGN_D : config->PinAssign;
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <DP_SelectPinAssignment+0xac>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	785a      	ldrb	r2, [r3, #1]
 8004cd2:	e000      	b.n	8004cd6 <DP_SelectPinAssignment+0xae>
 8004cd4:	2208      	movs	r2, #8
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'D') &&
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	705a      	strb	r2, [r3, #1]
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'C') &&
                        (dp_pin_match & DP_PIN_ASSIGN_C)) ?
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
                         DP_PIN_ASSIGN_C : config->PinAssign;
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <DP_SelectPinAssignment+0xc2>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	785a      	ldrb	r2, [r3, #1]
 8004ce8:	e000      	b.n	8004cec <DP_SelectPinAssignment+0xc4>
 8004cea:	2204      	movs	r2, #4
   config->PinAssign = ((DisplayPort_UFP_PinAssign_Start <= 'C') &&
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	705a      	strb	r2, [r3, #1]

   if (config->PinAssign == DP_PIN_ASSIGN_NS)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <DP_SelectPinAssignment+0xd4>
   {
     return FALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <DP_SelectPinAssignment+0xd6>
   }
   return TRUE;
 8004cfc:	2301      	movs	r3, #1
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <DP_SelectRole>:

static FSC_BOOL DP_SelectRole(struct Port *port)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  DisplayPortConfig_t *config;        /* sent to port partner Type-C UFP_U */
  DisplayPortCaps_t *dpPartnerCap;    /* type-C UFP capability */

  dpPartnerCap = &port->display_port_data_.DpPpCap;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8004d18:	60fb      	str	r3, [r7, #12]
  config = &port->display_port_data_.DpPpConfig;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8004d20:	60bb      	str	r3, [r7, #8]

  /* Select whether to configure partner (UFP_U) as DPF_D or UFP_D */
  if (dpPartnerCap->UfpDCapable &&
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00f      	beq.n	8004d50 <DP_SelectRole+0x46>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <DP_SelectRole+0x46>
      /* DFP_D capable and preferred */
      config->Mode = DP_CONF_DFP_D;
    }
    else
    {
      config->Mode = DP_CONF_UFP_D;
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	7813      	ldrb	r3, [r2, #0]
 8004d44:	2102      	movs	r1, #2
 8004d46:	f361 0301 	bfi	r3, r1, #0, #2
 8004d4a:	7013      	strb	r3, [r2, #0]
    }
    return TRUE;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e017      	b.n	8004d80 <DP_SelectRole+0x76>
  }
  else if (dpPartnerCap->DfpDCapable &&
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00f      	beq.n	8004d7e <DP_SelectRole+0x74>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <DP_SelectRole+0x74>
           port->display_port_data_.DpCap.UfpDCapable)
  {
    config->Mode = DP_CONF_DFP_D;
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	7813      	ldrb	r3, [r2, #0]
 8004d72:	2101      	movs	r1, #1
 8004d74:	f361 0301 	bfi	r3, r1, #0, #2
 8004d78:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <DP_SelectRole+0x76>
  }

  return FALSE;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <DP_EvaluateSinkCapability>:
 * @brief This function Evaluates the UFP_U capability and selects UFP_U
 * configuration that will be used. The configuration is set in configuration
 * VDM.
 */
FSC_BOOL DP_EvaluateSinkCapability(struct Port *port, FSC_U32 mode_in)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  DisplayPortConfig_t *config;        /* sent to port partner Type-C UFP_U */
  DisplayPortCaps_t *dpPartnerCap;    /* type-C UFP capability */

  port->display_port_data_.DpCapMatched = FALSE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3

  /* If display port features are disabled return */
  if (port->display_port_data_.DpEnabled == FALSE) return FALSE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 32d1 	ldrb.w	r3, [r3, #721]	; 0x2d1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <DP_EvaluateSinkCapability+0x20>
 8004da8:	2300      	movs	r3, #0
 8004daa:	e02f      	b.n	8004e0c <DP_EvaluateSinkCapability+0x80>
  if (port->display_port_data_.DpAutoModeEntryEnabled == FALSE) return FALSE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <DP_EvaluateSinkCapability+0x2e>
 8004db6:	2300      	movs	r3, #0
 8004db8:	e028      	b.n	8004e0c <DP_EvaluateSinkCapability+0x80>

  dpPartnerCap = &port->display_port_data_.DpPpCap;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8004dc0:	60fb      	str	r3, [r7, #12]
  config = &port->display_port_data_.DpPpConfig;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8004dc8:	60bb      	str	r3, [r7, #8]

  /* Copy the capability from the mode ACK*/
  dpPartnerCap->word = mode_in;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	601a      	str	r2, [r3, #0]
  config->word = 0;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

  if (FALSE == DP_SelectRole(port))
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ff97 	bl	8004d0a <DP_SelectRole>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <DP_EvaluateSinkCapability+0x5a>
  {
    return FALSE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e012      	b.n	8004e0c <DP_EvaluateSinkCapability+0x80>
  /* Match USB 2.0 signaling */
  if (dpPartnerCap->USB2p0NotUsed == 0 && DisplayPort_USBr2p0Signal_Req)
  {
    return FALSE;
  }
  config->SignalConfig = DisplayPort_Signaling;
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	7813      	ldrb	r3, [r2, #0]
 8004dea:	2101      	movs	r1, #1
 8004dec:	f361 0385 	bfi	r3, r1, #2, #4
 8004df0:	7013      	strb	r3, [r2, #0]

  if (DP_SelectPinAssignment(port) != TRUE)
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff ff18 	bl	8004c28 <DP_SelectPinAssignment>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d001      	beq.n	8004e02 <DP_EvaluateSinkCapability+0x76>
  {
    return FALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e004      	b.n	8004e0c <DP_EvaluateSinkCapability+0x80>
  }

  port->display_port_data_.DpCapMatched = TRUE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
  return TRUE;
 8004e0a:	2301      	movs	r3, #1
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <DP_ProcessCommand>:

FSC_BOOL DP_ProcessCommand(struct Port *port, FSC_U32* arr_in)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  doDataObject_t svdmh_in = {0};
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
  DisplayPortStatus_t stat;
  DisplayPortConfig_t config;
  FSC_BOOL is_ack = FALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	75fb      	strb	r3, [r7, #23]

  if (port->display_port_data_.DpEnabled == FALSE) return TRUE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 32d1 	ldrb.w	r3, [r3, #721]	; 0x2d1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <DP_ProcessCommand+0x20>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0b6      	b.n	8004fa2 <DP_ProcessCommand+0x18e>
  svdmh_in.object = arr_in[0];
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	613b      	str	r3, [r7, #16]
  is_ack = (svdmh_in.SVDM.CommandType == RESPONDER_ACK) ? TRUE : FALSE;
 8004e3a:	7c3b      	ldrb	r3, [r7, #16]
 8004e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	75fb      	strb	r3, [r7, #23]

  switch (svdmh_in.SVDM.Command)
 8004e4e:	7c3b      	ldrb	r3, [r7, #16]
 8004e50:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d040      	beq.n	8004edc <DP_ProcessCommand+0xc8>
 8004e5a:	2b11      	cmp	r3, #17
 8004e5c:	d06c      	beq.n	8004f38 <DP_ProcessCommand+0x124>
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	f040 809b 	bne.w	8004f9a <DP_ProcessCommand+0x186>
  {
  case DP_COMMAND_ATTENTION:
    if (svdmh_in.SVDM.CommandType == INITIATOR)
 8004e64:	7c3b      	ldrb	r3, [r7, #16]
 8004e66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d12d      	bne.n	8004ecc <DP_ProcessCommand+0xb8>
    {
      stat.word = arr_in[1];
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
      /* Attention can occur anytime after enter mode */
      if (port->vdm_auto_state_ > AUTO_VDM_ENTER_MODE_PP &&
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d90a      	bls.n	8004e96 <DP_ProcessCommand+0x82>
          port->vdm_auto_state_ < AUTO_VDM_DONE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
      if (port->vdm_auto_state_ > AUTO_VDM_ENTER_MODE_PP &&
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d805      	bhi.n	8004e96 <DP_ProcessCommand+0x82>
      {
        DP_UpdatePartnerStatus(port, stat, TRUE);
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f98d 	bl	80051ae <DP_UpdatePartnerStatus>
        /* let vdm state machine continue if already active */
        break;
 8004e94:	e084      	b.n	8004fa0 <DP_ProcessCommand+0x18c>
      }
      else if (port->policy_state_ == PE_DFP_VDM_DP_Status_Request ||
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004e9c:	2b8a      	cmp	r3, #138	; 0x8a
 8004e9e:	d004      	beq.n	8004eaa <DP_ProcessCommand+0x96>
               port->policy_state_ == PE_DFP_VDM_DP_Config_Request)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      else if (port->policy_state_ == PE_DFP_VDM_DP_Status_Request ||
 8004ea6:	2b8d      	cmp	r3, #141	; 0x8d
 8004ea8:	d106      	bne.n	8004eb8 <DP_ProcessCommand+0xa4>
      {
        /* Interrupted by attention during request for stat/config.
         * Restore the original policy and continue.
         */
        set_policy_state(port, port->original_policy_state_);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f004 fbbc 	bl	8009630 <set_policy_state>
      }
      DP_ProcessPartnerAttention(port, stat);
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8f1 	bl	80050a2 <DP_ProcessPartnerAttention>
      DP_UpdatePartnerStatus(port, stat, TRUE);
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f972 	bl	80051ae <DP_UpdatePartnerStatus>
    else
    {
      /* Restore policy state after getting response */
      set_policy_state(port, port->original_policy_state_);
    }
    break;
 8004eca:	e069      	b.n	8004fa0 <DP_ProcessCommand+0x18c>
      set_policy_state(port, port->original_policy_state_);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f004 fbab 	bl	8009630 <set_policy_state>
    break;
 8004eda:	e061      	b.n	8004fa0 <DP_ProcessCommand+0x18c>
  case DP_COMMAND_STATUS:
    if (svdmh_in.SVDM.CommandType == INITIATOR)
 8004edc:	7c3b      	ldrb	r3, [r7, #16]
 8004ede:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10c      	bne.n	8004f02 <DP_ProcessCommand+0xee>
    {
      stat.word = arr_in[1];
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	60fb      	str	r3, [r7, #12]
      /* Copy the partner status */
      DP_UpdatePartnerStatus(port, stat, TRUE);
 8004eee:	2201      	movs	r2, #1
 8004ef0:	68f9      	ldr	r1, [r7, #12]
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f95b 	bl	80051ae <DP_UpdatePartnerStatus>
      /* Send the port status */
      DP_SendPortStatus(port, svdmh_in);
 8004ef8:	6939      	ldr	r1, [r7, #16]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f855 	bl	8004faa <DP_SendPortStatus>
      set_policy_state(port, (is_ack == TRUE) ? PE_DFP_VDM_DP_Status_ACKed :
                                                PE_DFP_VDM_DP_Status_NAKed);
      /* Restore policy state after getting response */
      set_policy_state(port, port->original_policy_state_);
    }
    break;
 8004f00:	e04e      	b.n	8004fa0 <DP_ProcessCommand+0x18c>
      stat.word = arr_in[1];
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	60fb      	str	r3, [r7, #12]
      DP_UpdatePartnerStatus(port, stat, is_ack);
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68f9      	ldr	r1, [r7, #12]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f94d 	bl	80051ae <DP_UpdatePartnerStatus>
      set_policy_state(port, (is_ack == TRUE) ? PE_DFP_VDM_DP_Status_ACKed :
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <DP_ProcessCommand+0x10a>
 8004f1a:	238b      	movs	r3, #139	; 0x8b
 8004f1c:	e000      	b.n	8004f20 <DP_ProcessCommand+0x10c>
 8004f1e:	238c      	movs	r3, #140	; 0x8c
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f004 fb84 	bl	8009630 <set_policy_state>
      set_policy_state(port, port->original_policy_state_);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f004 fb7d 	bl	8009630 <set_policy_state>
    break;
 8004f36:	e033      	b.n	8004fa0 <DP_ProcessCommand+0x18c>
  case DP_COMMAND_CONFIG:
    if (svdmh_in.SVDM.CommandType == INITIATOR)
 8004f38:	7c3b      	ldrb	r3, [r7, #16]
 8004f3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d113      	bne.n	8004f6c <DP_ProcessCommand+0x158>
    {
      config.word = arr_in[1];
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	60bb      	str	r3, [r7, #8]
      if (DP_ProcessConfigRequest(port, config) == TRUE)
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f966 	bl	800521e <DP_ProcessConfigRequest>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d122      	bne.n	8004f9e <DP_ProcessCommand+0x18a>
      {
        /* if pin reconfig is successful */
        DP_SendPortConfig(port, svdmh_in, TRUE);
 8004f58:	2201      	movs	r2, #1
 8004f5a:	6939      	ldr	r1, [r7, #16]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f860 	bl	8005022 <DP_SendPortConfig>
        port->display_port_data_.DpConfigured = TRUE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
      set_policy_state(port, (is_ack == TRUE) ? PE_DFP_VDM_DP_Config_ACKed :
                                                PE_DFP_VDM_DP_Config_NAKed);
      /* Restore policy state after getting response */
      set_policy_state(port, port->original_policy_state_);
    }
    break;
 8004f6a:	e018      	b.n	8004f9e <DP_ProcessCommand+0x18a>
      DP_ProcessConfigResponse(port, is_ack);
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f934 	bl	80051de <DP_ProcessConfigResponse>
      set_policy_state(port, (is_ack == TRUE) ? PE_DFP_VDM_DP_Config_ACKed :
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <DP_ProcessCommand+0x16c>
 8004f7c:	238e      	movs	r3, #142	; 0x8e
 8004f7e:	e000      	b.n	8004f82 <DP_ProcessCommand+0x16e>
 8004f80:	238f      	movs	r3, #143	; 0x8f
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f004 fb53 	bl	8009630 <set_policy_state>
      set_policy_state(port, port->original_policy_state_);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f004 fb4c 	bl	8009630 <set_policy_state>
    break;
 8004f98:	e001      	b.n	8004f9e <DP_ProcessCommand+0x18a>
  default:
      /* command not recognized */
      return TRUE;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e001      	b.n	8004fa2 <DP_ProcessCommand+0x18e>
    break;
 8004f9e:	bf00      	nop
    }
    return FALSE;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <DP_SendPortStatus>:

void DP_SendPortStatus(struct Port *port, doDataObject_t svdmh_in)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b088      	sub	sp, #32
 8004fae:	af02      	add	r7, sp, #8
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  doDataObject_t svdmh_out = {0};
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
  FSC_U32 length_out = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
  FSC_U32 arr_out[2] = {0};
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	605a      	str	r2, [r3, #4]

  /*  Reflect most fields */
  svdmh_out.object = svdmh_in.object;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	613b      	str	r3, [r7, #16]
  svdmh_out.SVDM.Version = CurrentSVDMVersion(port, SOP_TYPE_SOP);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f005 ffed 	bl	800afac <CurrentSVDMVersion>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	7c7b      	ldrb	r3, [r7, #17]
 8004fdc:	f362 1346 	bfi	r3, r2, #5, #2
 8004fe0:	747b      	strb	r3, [r7, #17]
  svdmh_out.SVDM.CommandType = RESPONDER_ACK;
 8004fe2:	7c3b      	ldrb	r3, [r7, #16]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f362 1387 	bfi	r3, r2, #6, #2
 8004fea:	743b      	strb	r3, [r7, #16]
  arr_out[0] = svdmh_out.object;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	60bb      	str	r3, [r7, #8]
  length_out++;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]
  arr_out[1] = port->display_port_data_.DpStatus.word;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8004ffc:	60fb      	str	r3, [r7, #12]
  length_out++;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	3301      	adds	r3, #1
 8005002:	617b      	str	r3, [r7, #20]

  SendVdmMessage(port, SOP_TYPE_SOP, arr_out, length_out,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800500a:	f107 0208 	add.w	r2, r7, #8
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f007 fd77 	bl	800cb08 <SendVdmMessage>
                 port->policy_state_);
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <DP_SendPortConfig>:

void DP_SendPortConfig(struct Port *port, doDataObject_t svdmh_in,
                                FSC_BOOL success)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b08a      	sub	sp, #40	; 0x28
 8005026:	af02      	add	r7, sp, #8
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  doDataObject_t svdmh_out = {0};
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
  FSC_U32 length_out = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	61fb      	str	r3, [r7, #28]
  FSC_U32 arr_out[2] = {0};
 8005038:	f107 0310 	add.w	r3, r7, #16
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]

  /* a callback to platform to put all dp pins to safe state */
  platform_dp_enable_pins(FALSE, 0);
 8005042:	2100      	movs	r1, #0
 8005044:	2000      	movs	r0, #0
 8005046:	f7fb fe2e 	bl	8000ca6 <platform_dp_enable_pins>

  /*  Reflect most fields */
  svdmh_out.object = svdmh_in.object;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	61bb      	str	r3, [r7, #24]
  svdmh_out.SVDM.Version = CurrentSVDMVersion(port, SOP_TYPE_SOP);
 800504e:	2100      	movs	r1, #0
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f005 ffab 	bl	800afac <CurrentSVDMVersion>
 8005056:	4603      	mov	r3, r0
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	b2da      	uxtb	r2, r3
 800505e:	7e7b      	ldrb	r3, [r7, #25]
 8005060:	f362 1346 	bfi	r3, r2, #5, #2
 8005064:	767b      	strb	r3, [r7, #25]
  svdmh_out.SVDM.CommandType = success == TRUE ? RESPONDER_ACK : RESPONDER_NAK;
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <DP_SendPortConfig+0x4e>
 800506c:	2201      	movs	r2, #1
 800506e:	e000      	b.n	8005072 <DP_SendPortConfig+0x50>
 8005070:	2202      	movs	r2, #2
 8005072:	7e3b      	ldrb	r3, [r7, #24]
 8005074:	f362 1387 	bfi	r3, r2, #6, #2
 8005078:	763b      	strb	r3, [r7, #24]
  arr_out[0] = svdmh_out.object;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	613b      	str	r3, [r7, #16]
  length_out++;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
  SendVdmMessage(port, SOP_TYPE_SOP, arr_out, length_out,
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800508a:	f107 0210 	add.w	r2, r7, #16
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2100      	movs	r1, #0
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f007 fd37 	bl	800cb08 <SendVdmMessage>
                 port->policy_state_);
}
 800509a:	bf00      	nop
 800509c:	3720      	adds	r7, #32
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <DP_ProcessPartnerAttention>:

/**
 * The status update might be sent using attention or DP status message
 */
void DP_ProcessPartnerAttention(struct Port *port, DisplayPortStatus_t stat)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  DisplayPortStatus_t diff;
  /* Compare which bits has changed. Bits that are changed is set to 1 */
  diff.word =  (port->display_port_data_.DpPpStatus.word ^ stat.word);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	4053      	eors	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  if (diff.Connection)
 80050b8:	7b3b      	ldrb	r3, [r7, #12]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d05d      	beq.n	8005180 <DP_ProcessPartnerAttention+0xde>
  {
    /* Change in connection detected */
    switch(stat.Connection)
 80050c4:	783b      	ldrb	r3, [r7, #0]
 80050c6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d026      	beq.n	800511e <DP_ProcessPartnerAttention+0x7c>
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d046      	beq.n	8005162 <DP_ProcessPartnerAttention+0xc0>
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d000      	beq.n	80050da <DP_ProcessPartnerAttention+0x38>
      /* Connection lost by partner device*/
      if (port->display_port_data_.DpConfigured == TRUE)
      {
        /* disable display port data if active */
      }
      break;
 80050d8:	e052      	b.n	8005180 <DP_ProcessPartnerAttention+0xde>
    case DP_MODE_DFP_D:
      /* TODO: handle DP source device present */
      if (port->display_port_data_.DpCapMatched == TRUE &&
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d14a      	bne.n	800517a <DP_ProcessPartnerAttention+0xd8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d042      	beq.n	800517a <DP_ProcessPartnerAttention+0xd8>
          port->display_port_data_.DpCap.UfpDCapable)
      {
        port->display_port_data_.DpPpConfig.Mode = DP_CONF_DFP_D;
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	f892 32e4 	ldrb.w	r3, [r2, #740]	; 0x2e4
 80050fa:	2101      	movs	r1, #1
 80050fc:	f361 0301 	bfi	r3, r1, #0, #2
 8005100:	f882 32e4 	strb.w	r3, [r2, #740]	; 0x2e4
        /* Select pin assignment again to make sure that capability match */
        if (DP_SelectPinAssignment(port) == TRUE)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff fd8f 	bl	8004c28 <DP_SelectPinAssignment>
 800510a:	4603      	mov	r3, r0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d134      	bne.n	800517a <DP_ProcessPartnerAttention+0xd8>
        {
          DP_RequestPartnerConfig(port, port->display_port_data_.DpPpConfig);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff fc9d 	bl	8004a56 <DP_RequestPartnerConfig>
        }
      }
      break;
 800511c:	e02d      	b.n	800517a <DP_ProcessPartnerAttention+0xd8>
    case DP_MODE_UFP_D:
      /* DP sink device present */
      if (port->display_port_data_.DpCapMatched == TRUE &&
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d12a      	bne.n	800517e <DP_ProcessPartnerAttention+0xdc>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 32d8 	ldrb.w	r3, [r3, #728]	; 0x2d8
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d022      	beq.n	800517e <DP_ProcessPartnerAttention+0xdc>
          port->display_port_data_.DpCap.DfpDCapable)
      {
        port->display_port_data_.DpPpConfig.Mode = DP_CONF_UFP_D;
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	f892 32e4 	ldrb.w	r3, [r2, #740]	; 0x2e4
 800513e:	2102      	movs	r1, #2
 8005140:	f361 0301 	bfi	r3, r1, #0, #2
 8005144:	f882 32e4 	strb.w	r3, [r2, #740]	; 0x2e4
        if (DP_SelectPinAssignment(port) == TRUE)
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff fd6d 	bl	8004c28 <DP_SelectPinAssignment>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d114      	bne.n	800517e <DP_ProcessPartnerAttention+0xdc>
        {
          DP_RequestPartnerConfig(port, port->display_port_data_.DpPpConfig);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fc7b 	bl	8004a56 <DP_RequestPartnerConfig>
        }
      }
      break;
 8005160:	e00d      	b.n	800517e <DP_ProcessPartnerAttention+0xdc>
    case DP_MODE_BOTH:
      if (port->display_port_data_.DpCapMatched)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <DP_ProcessPartnerAttention+0xde>
      {
        /* Send previously selected configuration */
        DP_RequestPartnerConfig(port, port->display_port_data_.DpPpConfig);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fc6f 	bl	8004a56 <DP_RequestPartnerConfig>
 8005178:	e002      	b.n	8005180 <DP_ProcessPartnerAttention+0xde>
      break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <DP_ProcessPartnerAttention+0xde>
      break;
 800517e:	bf00      	nop
      }
    }
  }

    if (stat.ExitDpModeRequest)
 8005180:	783b      	ldrb	r3, [r7, #0]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <DP_ProcessPartnerAttention+0xfc>
    {
      RequestExitMode(port, SOP_TYPE_SOP, DP_SID, port->display_port_data_.DpModeEntered);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005192:	f64f 7201 	movw	r2, #65281	; 0xff01
 8005196:	2100      	movs	r1, #0
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f006 fb3e 	bl	800b81a <RequestExitMode>
    }

    /* For all non-pd events do a callback */
    platform_dp_status_update(stat.word);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fb fd8d 	bl	8000cc0 <platform_dp_status_update>
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <DP_UpdatePartnerStatus>:

void DP_UpdatePartnerStatus(struct Port *port, DisplayPortStatus_t status,
                           FSC_BOOL success)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	4613      	mov	r3, r2
 80051ba:	71fb      	strb	r3, [r7, #7]
  /* If a device is both sink and source capable and our preferred connection
   * is not currently connected. It can be changed immediately after receiving
   * status and before sending config. For now we can wait for preferred
   * connection to be active.  */
  if (success == TRUE)
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d109      	bne.n	80051d6 <DP_UpdatePartnerStatus+0x28>
  {
    port->display_port_data_.DpPpStatus = status;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    platform_dp_status_update(port->display_port_data_.DpPpStatus.word);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fb fd75 	bl	8000cc0 <platform_dp_status_update>
  }
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <DP_ProcessConfigResponse>:

/**
 * The response is sent by partner device for config request
 */
void DP_ProcessConfigResponse(struct Port *port, FSC_BOOL success)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	70fb      	strb	r3, [r7, #3]
  if (success == TRUE)
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d112      	bne.n	8005216 <DP_ProcessConfigResponse+0x38>
  {
    if (port->display_port_data_.DpPpStatus.Connection > 0)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <DP_ProcessConfigResponse+0x38>
       * was active then we can safely start sourcing DFP_D data. This can
       * happen with UFP_D devices that report plugged in or always plugged.
       * Otherwise wait for ATTENTION and connection status.
       * do a callback to start providing data */
      /* Just set active status here */
      port->display_port_data_.DpConfigured = TRUE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
      platform_dp_enable_pins(TRUE, port->display_port_data_.DpPpConfig.word);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 800520e:	4619      	mov	r1, r3
 8005210:	2001      	movs	r0, #1
 8005212:	f7fb fd48 	bl	8000ca6 <platform_dp_enable_pins>
    }
  }
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <DP_ProcessConfigRequest>:

/**
 * The request is sent by partner device for config request
 */
FSC_BOOL DP_ProcessConfigRequest(struct Port *port, DisplayPortConfig_t config)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  return platform_dp_enable_pins(TRUE, config.word);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	2001      	movs	r0, #1
 800522e:	f7fb fd3a 	bl	8000ca6 <platform_dp_enable_pins>
 8005232:	4603      	mov	r3, r0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <DPM_Initialize>:
#include "typec.h"
#include "vdm.h"
#include "vendor_info.h"

void DPM_Initialize(struct Port *port)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  port->dpm_active_ = FALSE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250

  DPM_Reset(port);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f804 	bl	800525a <DPM_Reset>
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <DPM_Reset>:

void DPM_Reset(struct Port *port)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
    port->dpm_supply_ready_ = FALSE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
    port->dpm_alert_ = FALSE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    port->dpm_reject_count_ = 0;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
    port->dpm_initial_connected_ = TRUE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
    port->dpm_5a_possible_ = FALSE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
    port->dpm_5a_capsent_ = FALSE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
    port->dpm_disc_id_returned_ = FALSE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
    port->dpm_disc_id_done_ = FALSE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
    port->dpm_disc_id_count_ = 0;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
    port->dpm_first_attach_ = TRUE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
    port->dpm_pd_30_ = (port->pd_preferred_rev_ == PDSpecRev3p0) ? TRUE : FALSE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    port->dpm_pd_30_srccab_ = (port->pd_preferred_rev_ == PDSpecRev3p0) ? TRUE : FALSE;;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	bf0c      	ite	eq
 80052d4:	2301      	moveq	r3, #1
 80052d6:	2300      	movne	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
    port->dpm_pd_20_cabchk_ = FALSE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
#ifdef FSC_HAVE_VDM
    port->vdm_cbl_present_ = FALSE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
    port->vdm_check_cbl_ = DPM_IsSOPPAllowed(port);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f876 	bl	80053e4 <DPM_IsSOPPAllowed>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
#endif /* FSC_HAVE_VDM */
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <DPM_SetSOPVersion>:
{
  return port->is_vconn_source_;
}

void DPM_SetSOPVersion(struct Port *port, FSC_U8 ver)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	70fb      	strb	r3, [r7, #3]
  /* Catch a compliance trick where they send 4p0... */
  if (ver > PDSpecRev3p0) {
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <DPM_SetSOPVersion+0x16>
      ver = PDSpecRev3p0;
 800531c:	2302      	movs	r3, #2
 800531e:	70fb      	strb	r3, [r7, #3]
  }

  if (ver != PDSpecRev3p0) {
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d007      	beq.n	8005336 <DPM_SetSOPVersion+0x2c>
    port->dpm_pd_30_ = FALSE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    port->dpm_pd_30_srccab_ = FALSE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <DPM_SetSOP1Details>:

void DPM_SetSOP1Details(struct Port *port,
                        FSC_BOOL ack, FSC_U8 ver, FSC_BOOL is_5a_capable)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	4608      	mov	r0, r1
 800534c:	4611      	mov	r1, r2
 800534e:	461a      	mov	r2, r3
 8005350:	4603      	mov	r3, r0
 8005352:	70fb      	strb	r3, [r7, #3]
 8005354:	460b      	mov	r3, r1
 8005356:	70bb      	strb	r3, [r7, #2]
 8005358:	4613      	mov	r3, r2
 800535a:	707b      	strb	r3, [r7, #1]
  port->dpm_disc_id_returned_ = TRUE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
  port->dpm_disc_id_result_ = ack;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258

  if (ack) {
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <DPM_SetSOP1Details+0x46>
    if (ver != PDSpecRev3p0)
 8005372:	78bb      	ldrb	r3, [r7, #2]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d003      	beq.n	8005380 <DPM_SetSOP1Details+0x3e>
      port->dpm_pd_30_srccab_ = FALSE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d

    port->dpm_5a_possible_ = is_5a_capable;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	787a      	ldrb	r2, [r7, #1]
 8005384:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
  }
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <DPM_CurrentSpecRev>:

FSC_U8 DPM_CurrentSpecRev(struct Port *port, SopType sop)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
    if (sop == SOP_TYPE_SOP) {
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d108      	bne.n	80053b8 <DPM_CurrentSpecRev+0x24>
      if (port->dpm_pd_30_) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <DPM_CurrentSpecRev+0x20>
        return PDSpecRev3p0;
 80053b0:	2302      	movs	r3, #2
 80053b2:	e011      	b.n	80053d8 <DPM_CurrentSpecRev+0x44>
      }
      else {
          return PDSpecRev2p0;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e00f      	b.n	80053d8 <DPM_CurrentSpecRev+0x44>
      }
    }
    else if (sop == SOP_TYPE_SOP1 || sop == SOP_TYPE_SOP2) {
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d002      	beq.n	80053c4 <DPM_CurrentSpecRev+0x30>
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d108      	bne.n	80053d6 <DPM_CurrentSpecRev+0x42>
      if (port->dpm_pd_30_srccab_) {
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <DPM_CurrentSpecRev+0x3e>
          return PDSpecRev3p0;
 80053ce:	2302      	movs	r3, #2
 80053d0:	e002      	b.n	80053d8 <DPM_CurrentSpecRev+0x44>
      }
      else {
          return PDSpecRev2p0;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <DPM_CurrentSpecRev+0x44>
      }
    }
    else {
        return PDSpecRev2p0;
 80053d6:	2301      	movs	r3, #1
    }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <DPM_IsSOPPAllowed>:
/**
 * @brief Returns true if allowed to talk to cable
 */
FSC_BOOL DPM_IsSOPPAllowed(struct Port *port)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  if (SOP_P_Capable == FALSE) {
      return FALSE;
 80053ec:	2300      	movs	r3, #0
      /* PD 2.0 dfp communicates with SOP' and SOP'' */
      return TRUE;
    }

  return FALSE;
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <DPM_ReConfigureRxDetect>:

void DPM_ReConfigureRxDetect(struct Port *port)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]

  if (DPM_IsSOPPAllowed(port)) {
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff ffee 	bl	80053e4 <DPM_IsSOPPAllowed>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <DPM_ReConfigureRxDetect+0x26>
    set_sop_p_detect(port, TRUE);
 800540e:	2101      	movs	r1, #1
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f004 f8ad 	bl	8009570 <set_sop_p_detect>
#ifdef FSC_HAVE_VDM
    port->discover_id_counter_ = 0;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
#endif /* FSC_HAVE_VDM */
  }
  else {
    set_sop_p_detect(port, FALSE);
  }
}
 800541e:	e003      	b.n	8005428 <DPM_ReConfigureRxDetect+0x2e>
    set_sop_p_detect(port, FALSE);
 8005420:	2100      	movs	r1, #0
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f004 f8a4 	bl	8009570 <set_sop_p_detect>
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <notify_observers>:
        observers.obs_count--;
    }
}

void notify_observers(Event_t event, FSC_U16 portId, void *app_ctx)
{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	460b      	mov	r3, r1
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	817b      	strh	r3, [r7, #10]
    int i;
    for (i = 0; i < observers.obs_count; i++)
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e025      	b.n	8005490 <notify_observers+0x60>
    {
        if (observers.list[i].event & event)
 8005444:	4917      	ldr	r1, [pc, #92]	; (80054a4 <notify_observers+0x74>)
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	3304      	adds	r3, #4
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d015      	beq.n	800548a <notify_observers+0x5a>
        {
            observers.list[i].event_handler(event, portId,
 800545e:	4911      	ldr	r1, [pc, #68]	; (80054a4 <notify_observers+0x74>)
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4613      	mov	r3, r2
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	3308      	adds	r3, #8
 800546e:	681c      	ldr	r4, [r3, #0]
 8005470:	490c      	ldr	r1, [pc, #48]	; (80054a4 <notify_observers+0x74>)
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4613      	mov	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	330c      	adds	r3, #12
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	8979      	ldrh	r1, [r7, #10]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	47a0      	blx	r4
    for (i = 0; i < observers.obs_count; i++)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3301      	adds	r3, #1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <notify_observers+0x74>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4293      	cmp	r3, r2
 800549a:	dbd3      	blt.n	8005444 <notify_observers+0x14>
                                            observers.list[i].context, app_ctx);
        }
    }
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd90      	pop	{r4, r7, pc}
 80054a4:	20000028 	.word	0x20000028

080054a8 <USBPDPolicyEngine>:
#include "display_port.h"
#endif /* FSC_HAVE_DP */
#endif /* FSC_HAVE_VDM */

void USBPDPolicyEngine(struct Port *port)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  switch (port->policy_state_) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80054b6:	3b0d      	subs	r3, #13
 80054b8:	2b9d      	cmp	r3, #157	; 0x9d
 80054ba:	f200 81c5 	bhi.w	8005848 <USBPDPolicyEngine+0x3a0>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <USBPDPolicyEngine+0x1c>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	08005745 	.word	0x08005745
 80054c8:	0800576d 	.word	0x0800576d
 80054cc:	08005775 	.word	0x08005775
 80054d0:	0800577d 	.word	0x0800577d
 80054d4:	08005785 	.word	0x08005785
 80054d8:	0800578d 	.word	0x0800578d
 80054dc:	08005795 	.word	0x08005795
 80054e0:	0800574d 	.word	0x0800574d
 80054e4:	08005765 	.word	0x08005765
 80054e8:	0800579d 	.word	0x0800579d
 80054ec:	080057a5 	.word	0x080057a5
 80054f0:	08005849 	.word	0x08005849
 80054f4:	08005849 	.word	0x08005849
 80054f8:	0800575d 	.word	0x0800575d
 80054fc:	08005755 	.word	0x08005755
 8005500:	08005849 	.word	0x08005849
 8005504:	08005849 	.word	0x08005849
 8005508:	08005849 	.word	0x08005849
 800550c:	080057dd 	.word	0x080057dd
 8005510:	080057e5 	.word	0x080057e5
 8005514:	08005849 	.word	0x08005849
 8005518:	08005849 	.word	0x08005849
 800551c:	08005849 	.word	0x08005849
 8005520:	08005849 	.word	0x08005849
 8005524:	08005849 	.word	0x08005849
 8005528:	08005849 	.word	0x08005849
 800552c:	08005849 	.word	0x08005849
 8005530:	08005849 	.word	0x08005849
 8005534:	08005849 	.word	0x08005849
 8005538:	08005849 	.word	0x08005849
 800553c:	08005849 	.word	0x08005849
 8005540:	08005849 	.word	0x08005849
 8005544:	08005849 	.word	0x08005849
 8005548:	08005849 	.word	0x08005849
 800554c:	08005849 	.word	0x08005849
 8005550:	08005849 	.word	0x08005849
 8005554:	08005849 	.word	0x08005849
 8005558:	08005849 	.word	0x08005849
 800555c:	08005849 	.word	0x08005849
 8005560:	08005849 	.word	0x08005849
 8005564:	08005849 	.word	0x08005849
 8005568:	08005849 	.word	0x08005849
 800556c:	08005849 	.word	0x08005849
 8005570:	08005849 	.word	0x08005849
 8005574:	08005849 	.word	0x08005849
 8005578:	08005849 	.word	0x08005849
 800557c:	08005849 	.word	0x08005849
 8005580:	08005849 	.word	0x08005849
 8005584:	08005849 	.word	0x08005849
 8005588:	08005849 	.word	0x08005849
 800558c:	08005849 	.word	0x08005849
 8005590:	08005849 	.word	0x08005849
 8005594:	08005849 	.word	0x08005849
 8005598:	08005849 	.word	0x08005849
 800559c:	08005849 	.word	0x08005849
 80055a0:	080057c5 	.word	0x080057c5
 80055a4:	08005849 	.word	0x08005849
 80055a8:	08005849 	.word	0x08005849
 80055ac:	080057bd 	.word	0x080057bd
 80055b0:	08005849 	.word	0x08005849
 80055b4:	08005849 	.word	0x08005849
 80055b8:	08005849 	.word	0x08005849
 80055bc:	08005849 	.word	0x08005849
 80055c0:	08005849 	.word	0x08005849
 80055c4:	08005849 	.word	0x08005849
 80055c8:	08005849 	.word	0x08005849
 80055cc:	08005849 	.word	0x08005849
 80055d0:	080057d5 	.word	0x080057d5
 80055d4:	08005849 	.word	0x08005849
 80055d8:	08005849 	.word	0x08005849
 80055dc:	08005849 	.word	0x08005849
 80055e0:	08005849 	.word	0x08005849
 80055e4:	080057cd 	.word	0x080057cd
 80055e8:	08005849 	.word	0x08005849
 80055ec:	08005849 	.word	0x08005849
 80055f0:	08005849 	.word	0x08005849
 80055f4:	08005849 	.word	0x08005849
 80055f8:	08005849 	.word	0x08005849
 80055fc:	08005849 	.word	0x08005849
 8005600:	08005849 	.word	0x08005849
 8005604:	08005849 	.word	0x08005849
 8005608:	08005849 	.word	0x08005849
 800560c:	08005849 	.word	0x08005849
 8005610:	08005849 	.word	0x08005849
 8005614:	08005849 	.word	0x08005849
 8005618:	08005849 	.word	0x08005849
 800561c:	08005849 	.word	0x08005849
 8005620:	08005849 	.word	0x08005849
 8005624:	080057ad 	.word	0x080057ad
 8005628:	080057b5 	.word	0x080057b5
 800562c:	08005849 	.word	0x08005849
 8005630:	08005849 	.word	0x08005849
 8005634:	080057ed 	.word	0x080057ed
 8005638:	080057ff 	.word	0x080057ff
 800563c:	08005849 	.word	0x08005849
 8005640:	08005849 	.word	0x08005849
 8005644:	08005849 	.word	0x08005849
 8005648:	08005849 	.word	0x08005849
 800564c:	08005849 	.word	0x08005849
 8005650:	08005849 	.word	0x08005849
 8005654:	08005849 	.word	0x08005849
 8005658:	08005849 	.word	0x08005849
 800565c:	08005849 	.word	0x08005849
 8005660:	08005849 	.word	0x08005849
 8005664:	08005849 	.word	0x08005849
 8005668:	08005849 	.word	0x08005849
 800566c:	08005849 	.word	0x08005849
 8005670:	08005849 	.word	0x08005849
 8005674:	08005849 	.word	0x08005849
 8005678:	08005849 	.word	0x08005849
 800567c:	08005849 	.word	0x08005849
 8005680:	08005849 	.word	0x08005849
 8005684:	08005849 	.word	0x08005849
 8005688:	08005849 	.word	0x08005849
 800568c:	08005849 	.word	0x08005849
 8005690:	08005849 	.word	0x08005849
 8005694:	08005849 	.word	0x08005849
 8005698:	08005849 	.word	0x08005849
 800569c:	08005849 	.word	0x08005849
 80056a0:	08005849 	.word	0x08005849
 80056a4:	08005849 	.word	0x08005849
 80056a8:	08005849 	.word	0x08005849
 80056ac:	08005849 	.word	0x08005849
 80056b0:	08005849 	.word	0x08005849
 80056b4:	08005849 	.word	0x08005849
 80056b8:	08005849 	.word	0x08005849
 80056bc:	08005849 	.word	0x08005849
 80056c0:	08005849 	.word	0x08005849
 80056c4:	08005849 	.word	0x08005849
 80056c8:	08005849 	.word	0x08005849
 80056cc:	08005849 	.word	0x08005849
 80056d0:	08005849 	.word	0x08005849
 80056d4:	08005849 	.word	0x08005849
 80056d8:	08005849 	.word	0x08005849
 80056dc:	08005849 	.word	0x08005849
 80056e0:	08005849 	.word	0x08005849
 80056e4:	08005849 	.word	0x08005849
 80056e8:	08005849 	.word	0x08005849
 80056ec:	08005849 	.word	0x08005849
 80056f0:	08005849 	.word	0x08005849
 80056f4:	08005849 	.word	0x08005849
 80056f8:	08005849 	.word	0x08005849
 80056fc:	08005849 	.word	0x08005849
 8005700:	08005849 	.word	0x08005849
 8005704:	08005849 	.word	0x08005849
 8005708:	08005849 	.word	0x08005849
 800570c:	08005849 	.word	0x08005849
 8005710:	08005849 	.word	0x08005849
 8005714:	08005849 	.word	0x08005849
 8005718:	08005811 	.word	0x08005811
 800571c:	08005819 	.word	0x08005819
 8005720:	08005849 	.word	0x08005849
 8005724:	08005839 	.word	0x08005839
 8005728:	0800573d 	.word	0x0800573d
 800572c:	08005841 	.word	0x08005841
 8005730:	08005821 	.word	0x08005821
 8005734:	08005829 	.word	0x08005829
 8005738:	08005831 	.word	0x08005831
    case PE_ErrorRecovery:
      PolicyErrorRecovery(port);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f89d 	bl	800587c <PolicyErrorRecovery>
      break;
 8005742:	e096      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
      break;
#endif /* FSC_HAVE_SRC */
/* ###################### Sink States  ####################### */
#ifdef FSC_HAVE_SNK
    case PE_SNK_Startup:
      PolicySinkStartup(port);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8a4 	bl	8005892 <PolicySinkStartup>
      break;
 800574a:	e092      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Hard_Reset:
      PolicySinkSendHardReset(port);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f96e 	bl	8005a2e <PolicySinkSendHardReset>
      break;
 8005752:	e08e      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Soft_Reset:
      PolicySinkSoftReset(port);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f97b 	bl	8005a50 <PolicySinkSoftReset>
      break;
 800575a:	e08a      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Send_Soft_Reset:
      PolicySinkSendSoftReset(port);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f99d 	bl	8005a9c <PolicySinkSendSoftReset>
      break;
 8005762:	e086      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Transition_To_Default:
      PolicySinkTransitionDefault(port);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fa17 	bl	8005b98 <PolicySinkTransitionDefault>
      break;
 800576a:	e082      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Discovery:
      PolicySinkDiscovery(port);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fb63 	bl	8005e38 <PolicySinkDiscovery>
      break;
 8005772:	e07e      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Wait_For_Capabilities:
      PolicySinkWaitCaps(port);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fb77 	bl	8005e68 <PolicySinkWaitCaps>
      break;
 800577a:	e07a      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Evaluate_Capability:
      PolicySinkEvaluateCaps(port);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fc15 	bl	8005fac <PolicySinkEvaluateCaps>
      break;
 8005782:	e076      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Select_Capability:
      PolicySinkSelectCapability(port);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fded 	bl	8006364 <PolicySinkSelectCapability>
      break;
 800578a:	e072      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Transition_Sink:
      PolicySinkTransitionSink(port);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 ff6f 	bl	8006670 <PolicySinkTransitionSink>
      break;
 8005792:	e06e      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Ready:
      PolicySinkReady(port);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 ffff 	bl	8006798 <PolicySinkReady>
      break;
 800579a:	e06a      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Give_Sink_Cap:
      PolicySinkGiveSinkCap(port);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 fa74 	bl	8006c8a <PolicySinkGiveSinkCap>
      break;
 80057a2:	e066      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Get_Source_Cap:
      PolicySinkGetSourceCap(port);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fa91 	bl	8006ccc <PolicySinkGetSourceCap>
      break;
 80057aa:	e062      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_DR_SNK_Get_Sink_Cap:
      PolicySinkGetSinkCap(port);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 f9e1 	bl	8006b74 <PolicySinkGetSinkCap>
      break;
 80057b2:	e05e      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_DR_SNK_Give_Source_Cap:
      PolicySinkGiveSourceCap(port);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 fb03 	bl	8006dc0 <PolicySinkGiveSourceCap>
      break;
 80057ba:	e05a      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_DRS_UFP_DFP_Send_Swap:
      PolicySinkSendDRSwap(port);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 fb0a 	bl	8006dd6 <PolicySinkSendDRSwap>
      break;
 80057c2:	e056      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_DRS_UFP_DFP_Evaluate_Swap:
      PolicySinkEvaluateDRSwap(port);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fbb7 	bl	8006f38 <PolicySinkEvaluateDRSwap>
      break;
 80057ca:	e052      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_PRS_SNK_SRC_Send_Swap:
      PolicySinkSendPRSwap(port);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 fe43 	bl	8007458 <PolicySinkSendPRSwap>
      break;
 80057d2:	e04e      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_PRS_SNK_SRC_Evaluate_Swap:
      PolicySinkEvaluatePRSwap(port);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 fe49 	bl	800746c <PolicySinkEvaluatePRSwap>
      break;
 80057da:	e04a      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_FRS_SNK_SRC_Send_Swap:
      PolicySinkSendFRSwap(port);
      break;
#endif /* FSC_HAVE_FRSWAP */
    case PE_SNK_Send_Not_Supported:
      PolicySendNotSupported(port);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 fe50 	bl	8007482 <PolicySendNotSupported>
      break;
 80057e2:	e046      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_SNK_Not_Supported_Received:
      PolicyNotSupported(port);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 fee0 	bl	80075aa <PolicyNotSupported>
      break;
 80057ea:	e042      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
#endif /* FSC_HAVE_SNK */
    case PE_VCS_Send_Swap:
      if (port->policy_is_source_) {
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d13a      	bne.n	800586c <USBPDPolicyEngine+0x3c4>
        PolicySourceSendVCONNSwap(port);
#endif /* FSC_HAVE_SRC */
      }
      else {
#ifdef FSC_HAVE_SNK
        PolicySinkSendVCONNSwap(port);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fc04 	bl	8007004 <PolicySinkSendVCONNSwap>
#endif /* FSC_HAVE_SNK */
      }
      break;
 80057fc:	e036      	b.n	800586c <USBPDPolicyEngine+0x3c4>
    case PE_VCS_Evaluate_Swap:
      if (port->policy_is_source_) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d133      	bne.n	8005870 <USBPDPolicyEngine+0x3c8>
        PolicySourceEvaluateVCONNSwap(port);
#endif /* FSC_HAVE_SRC */
      }
      else {
#ifdef FSC_HAVE_SNK
        PolicySinkEvaluateVCONNSwap(port);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 fd3b 	bl	8007284 <PolicySinkEvaluateVCONNSwap>
#endif /* FSC_HAVE_SNK */
      }
      break;
 800580e:	e02f      	b.n	8005870 <USBPDPolicyEngine+0x3c8>
    case PE_DFP_CBL_Send_Soft_Reset:
      PolicyDFPCBLSendSoftReset(port);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fede 	bl	80075d2 <PolicyDFPCBLSendSoftReset>
      break;
 8005816:	e02c      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_DFP_CBL_Send_Cable_Reset:
      PolicyDFPCBLSendReset(port);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 ff53 	bl	80076c4 <PolicyDFPCBLSendReset>
      break;
 800581e:	e028      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
      PolicyGiveManufacturerInfo(port);
      break;
#endif /* FSC_HAVE_EXTENDED */
#ifdef FSC_HAVE_VDM
    case PE_GIVE_VDM:
      PolicyGiveVdm(port);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f005 fc5f 	bl	800b0e4 <PolicyGiveVdm>
      break;
 8005826:	e024      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
#endif /* FSC_HAVE_VDM */

    case PE_Send_Generic_Cmd:
      PolicySendGenericCommand(port);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f002 f801 	bl	8007830 <PolicySendGenericCommand>
      break;
 800582e:	e020      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
    case PE_Send_Generic_Data:
      PolicySendGenericData(port);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f002 f872 	bl	800791a <PolicySendGenericData>
      break;
 8005836:	e01c      	b.n	8005872 <USBPDPolicyEngine+0x3ca>

    /* ---------- BIST Carrier Mode and Eye Pattern ----- */
    case PE_BIST_Carrier_Mode:     /* BIST Carrier Mode 2 */
      PolicyBISTCarrierMode2(port);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f002 fb37 	bl	8007eac <PolicyBISTCarrierMode2>
      break;
 800583e:	e018      	b.n	8005872 <USBPDPolicyEngine+0x3ca>

    case PE_BIST_Test_Data:
      PolicyBISTTestData(port);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f002 fbb4 	bl	8007fae <PolicyBISTTestData>
      break;
 8005846:	e014      	b.n	8005872 <USBPDPolicyEngine+0x3ca>

    default:
#ifdef FSC_HAVE_VDM
      if ((port->policy_state_ >= FIRST_VDM_STATE) &&
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800584e:	2b70      	cmp	r3, #112	; 0x70
 8005850:	d908      	bls.n	8005864 <USBPDPolicyEngine+0x3bc>
          (port->policy_state_ <= LAST_VDM_STATE) ) {
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      if ((port->policy_state_ >= FIRST_VDM_STATE) &&
 8005858:	2b98      	cmp	r3, #152	; 0x98
 800585a:	d803      	bhi.n	8005864 <USBPDPolicyEngine+0x3bc>
        /* valid VDM state */
        PolicyVdm(port);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f005 fbba 	bl	800afd6 <PolicyVdm>
#endif /* FSC_HAVE_VDM */
      {
        /* invalid state, reset */
        PolicyInvalidState(port);
      }
      break;
 8005862:	e006      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
        PolicyInvalidState(port);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f002 fbac 	bl	8007fc2 <PolicyInvalidState>
      break;
 800586a:	e002      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
      break;
 800586c:	bf00      	nop
 800586e:	e000      	b.n	8005872 <USBPDPolicyEngine+0x3ca>
      break;
 8005870:	bf00      	nop
  }
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop

0800587c <PolicyErrorRecovery>:

void PolicyErrorRecovery(struct Port *port)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  SetStateErrorRecovery(port);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f005 f93d 	bl	800ab04 <SetStateErrorRecovery>
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <PolicySinkStartup>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void PolicySinkStartup(struct Port *port)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  FSC_U8 i = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]

  /* Reset the protocol layer */
  for (i = SOP_TYPE_SOP; i < NUM_SOP_SUPPORTED; i++) {
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
 80058a2:	e007      	b.n	80058b4 <PolicySinkStartup+0x22>
    ResetProtocolLayer(port, i);
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f003 fd12 	bl	80092d2 <ResetProtocolLayer>
  for (i = SOP_TYPE_SOP; i < NUM_SOP_SUPPORTED; i++) {
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	3301      	adds	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d9f4      	bls.n	80058a4 <PolicySinkStartup+0x12>
  }

  /* Enable Masks */
  port->registers_.AlertMskL.M_TX_DISC = 1;
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	7c13      	ldrb	r3, [r2, #16]
 80058be:	f043 0320 	orr.w	r3, r3, #32
 80058c2:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_TXFAIL = 1;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	7c13      	ldrb	r3, [r2, #16]
 80058c8:	f043 0310 	orr.w	r3, r3, #16
 80058cc:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_TXSUCC = 1;
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	7c13      	ldrb	r3, [r2, #16]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d6:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_RXSTAT = 1;
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	7c13      	ldrb	r3, [r2, #16]
 80058dc:	f043 0304 	orr.w	r3, r3, #4
 80058e0:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_RXHRDRST = 1;
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	7c13      	ldrb	r3, [r2, #16]
 80058e6:	f043 0308 	orr.w	r3, r3, #8
 80058ea:	7413      	strb	r3, [r2, #16]
  WriteRegister(port, regALERTMSKL);
 80058ec:	2112      	movs	r1, #18
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f003 f804 	bl	80088fc <WriteRegister>

  /* Disable BIST TMODE bit if needed */
  if(port->registers_.TcpcCtrl.BIST_TMODE == 1) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	7d5b      	ldrb	r3, [r3, #21]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <PolicySinkStartup+0x82>
    port->registers_.TcpcCtrl.BIST_TMODE = 0;
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	7d53      	ldrb	r3, [r2, #21]
 8005906:	f36f 0341 	bfc	r3, #1, #1
 800590a:	7553      	strb	r3, [r2, #21]
    WriteRegister(port, regTCPC_CTRL);
 800590c:	2119      	movs	r1, #25
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f002 fff4 	bl	80088fc <WriteRegister>
  }

  port->sink_selected_voltage_ = FSC_VBUS_05_V;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f241 3288 	movw	r2, #5000	; 0x1388
 800591a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  port->usb_pd_contract_.object = 0;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  port->sink_partner_max_power_ = 0;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  port->partner_caps_.object = 0;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
#ifdef FSC_HAVE_FRSWAP
  port->is_fr_swap_ = FALSE;
#endif /* FSC_HAVE_FRSWAP */
  port->is_pr_swap_ = FALSE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  port->is_hard_reset_ = FALSE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  port->policy_is_source_ = FALSE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
  port->registers_.MsgHeadr.POWER_ROLE = port->policy_is_source_;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	b2d9      	uxtb	r1, r3
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8005960:	f361 0300 	bfi	r3, r1, #0, #1
 8005964:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  port->registers_.MsgHeadr.DATA_ROLE = port->policy_is_dfp_;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	b2d9      	uxtb	r1, r3
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800597a:	f361 03c3 	bfi	r3, r1, #3, #1
 800597e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  WriteRegister(port, regMSGHEADR);
 8005982:	212e      	movs	r1, #46	; 0x2e
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f002 ffb9 	bl	80088fc <WriteRegister>

  /* If coming out of a hard reset, this will signal the Type-C state
   * machine to re-check the VBus level.
   */
  port->registers_.AlertL.I_PORT_PWR = 1;
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	7b93      	ldrb	r3, [r2, #14]
 800598e:	f043 0302 	orr.w	r3, r3, #2
 8005992:	7393      	strb	r3, [r2, #14]

  port->caps_counter_ = 0;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  port->collision_counter_ = 0;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  TimerDisable(&port->no_response_timer_);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	33bc      	adds	r3, #188	; 0xbc
 80059a8:	4618      	mov	r0, r3
 80059aa:	f004 fd6f 	bl	800a48c <TimerDisable>
  TimerDisable(&port->policy_state_timer_);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	338c      	adds	r3, #140	; 0x8c
 80059b2:	4618      	mov	r0, r3
 80059b4:	f004 fd6a 	bl	800a48c <TimerDisable>
  TimerDisable(&port->pps_timer_);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	33e0      	adds	r3, #224	; 0xe0
 80059bc:	4618      	mov	r0, r3
 80059be:	f004 fd65 	bl	800a48c <TimerDisable>
  set_policy_state(port, PE_SNK_Discovery);
 80059c2:	210e      	movs	r1, #14
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f003 fe33 	bl	8009630 <set_policy_state>

#ifdef FSC_HAVE_VDM
  port->vdm_auto_state_ = Attempts_Discov_SOP ? AUTO_VDM_INIT : AUTO_VDM_DONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2207      	movs	r2, #7
 80059ce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  port->mode_entered_ = FALSE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  port->core_svid_info_.num_svids = 0;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  for (i = 0; i < MAX_NUM_SVIDS; i++) {
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
 80059e6:	e00a      	b.n	80059fe <PolicySinkStartup+0x16c>
    port->core_svid_info_.svids[i] = 0;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	2200      	movs	r2, #0
 80059f6:	809a      	strh	r2, [r3, #4]
  for (i = 0; i < MAX_NUM_SVIDS; i++) {
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	3301      	adds	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b0b      	cmp	r3, #11
 8005a02:	d9f1      	bls.n	80059e8 <PolicySinkStartup+0x156>
  }
  port->auto_mode_entry_pos_ = -1;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	22ff      	movs	r2, #255	; 0xff
 8005a08:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
  port->auto_mode_entry_pos_ = -1;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	22ff      	movs	r2, #255	; 0xff
 8005a10:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
  port->svid_discvry_done_ = FALSE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  port->svid_discv_idx_ = -1;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a22:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
#endif /* FSC_HAVE_VDM */
}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <PolicySinkSendHardReset>:

void PolicySinkSendHardReset(struct Port *port)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  set_policy_state(port, PE_SNK_Hard_Reset);
 8005a36:	2114      	movs	r1, #20
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f003 fdf9 	bl	8009630 <set_policy_state>

  PolicySendHardReset(port, PE_SNK_Transition_To_Default, FALSE);
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2115      	movs	r1, #21
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 fea7 	bl	8007796 <PolicySendHardReset>
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <PolicySinkSoftReset>:

void PolicySinkSoftReset(struct Port *port)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af04      	add	r7, sp, #16
 8005a56:	6078      	str	r0, [r7, #4]
  if (PolicySend(port, CMTAccept, 0, 0,  PE_SNK_Wait_For_Capabilities,
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9303      	str	r3, [sp, #12]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9302      	str	r3, [sp, #8]
 8005a60:	2300      	movs	r3, #0
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	230f      	movs	r3, #15
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2103      	movs	r1, #3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 ffd6 	bl	8007a20 <PolicySend>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d109      	bne.n	8005a8e <PolicySinkSoftReset+0x3e>
                 0, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
#ifdef FSC_HAVE_VDM
    port->discover_id_counter_ = 0;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
#endif /* FSC_HAVE_VDM */
    TimerStart(&port->policy_state_timer_, ktTypeCSinkWaitCap);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	338c      	adds	r3, #140	; 0x8c
 8005a86:	4904      	ldr	r1, [pc, #16]	; (8005a98 <PolicySinkSoftReset+0x48>)
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f004 fce1 	bl	800a450 <TimerStart>
  }
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	00055730 	.word	0x00055730

08005a9c <PolicySinkSendSoftReset>:

void PolicySinkSendSoftReset(struct Port *port)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af04      	add	r7, sp, #16
 8005aa2:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <PolicySinkSendSoftReset+0x18>
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d01d      	beq.n	8005aee <PolicySinkSendSoftReset+0x52>
 8005ab2:	e063      	b.n	8005b7c <PolicySinkSendSoftReset+0xe0>
    case 0:
      if (PolicySend(port, CMTSoftReset, 0, 0, PE_SNK_Send_Soft_Reset,
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9303      	str	r3, [sp, #12]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9302      	str	r3, [sp, #8]
 8005abc:	2301      	movs	r3, #1
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	231a      	movs	r3, #26
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	210d      	movs	r1, #13
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f001 ffa8 	bl	8007a20 <PolicySend>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d157      	bne.n	8005b86 <PolicySinkSendSoftReset+0xea>
                     1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	338c      	adds	r3, #140	; 0x8c
 8005ada:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f004 fcb6 	bl	800a450 <TimerStart>
        port->waiting_on_hr_ = TRUE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
      }
      break;
 8005aec:	e04b      	b.n	8005b86 <PolicySinkSendSoftReset+0xea>
    case 1:
      if (port->protocol_msg_rx_) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d02b      	beq.n	8005b50 <PolicySinkSendSoftReset+0xb4>
        TimerDisable(&port->policy_state_timer_);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	338c      	adds	r3, #140	; 0x8c
 8005afc:	4618      	mov	r0, r3
 8005afe:	f004 fcc5 	bl	800a48c <TimerDisable>
        port->protocol_msg_rx_ = FALSE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        port->pd_tx_status_ = txIdle;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d133      	bne.n	8005b8a <PolicySinkSendSoftReset+0xee>
            (port->policy_rx_header_.MessageType == CMTAccept)) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	b2db      	uxtb	r3, r3
        if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d12b      	bne.n	8005b8a <PolicySinkSendSoftReset+0xee>
#ifdef FSC_HAVE_VDM
          port->discover_id_counter_ = 0;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
#endif /* FSC_HAVE_VDM */
          set_policy_state(port, PE_SNK_Wait_For_Capabilities);
 8005b3a:	210f      	movs	r1, #15
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f003 fd77 	bl	8009630 <set_policy_state>
          TimerStart(&port->policy_state_timer_, ktTypeCSinkWaitCap);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	338c      	adds	r3, #140	; 0x8c
 8005b46:	4913      	ldr	r1, [pc, #76]	; (8005b94 <PolicySinkSendSoftReset+0xf8>)
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f004 fc81 	bl	800a450 <TimerStart>
        PolicySinkSendHardReset(port);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8005b4e:	e01c      	b.n	8005b8a <PolicySinkSendSoftReset+0xee>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	338c      	adds	r3, #140	; 0x8c
 8005b54:	4618      	mov	r0, r3
 8005b56:	f004 fcc5 	bl	800a4e4 <TimerExpired>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <PolicySinkSendSoftReset+0xd6>
        TimerDisable(&port->policy_state_timer_);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	338c      	adds	r3, #140	; 0x8c
 8005b64:	4618      	mov	r0, r3
 8005b66:	f004 fc91 	bl	800a48c <TimerDisable>
        PolicySinkSendHardReset(port);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff ff5f 	bl	8005a2e <PolicySinkSendHardReset>
      break;
 8005b70:	e00b      	b.n	8005b8a <PolicySinkSendSoftReset+0xee>
        port->idle_ = TRUE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005b7a:	e006      	b.n	8005b8a <PolicySinkSendSoftReset+0xee>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8005b7c:	21a6      	movs	r1, #166	; 0xa6
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f003 fd56 	bl	8009630 <set_policy_state>
      break;
 8005b84:	e002      	b.n	8005b8c <PolicySinkSendSoftReset+0xf0>
      break;
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <PolicySinkSendSoftReset+0xf0>
      break;
 8005b8a:	bf00      	nop
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	00055730 	.word	0x00055730

08005b98 <PolicySinkTransitionDefault>:

void PolicySinkTransitionDefault(struct Port *port)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d079      	beq.n	8005c9e <PolicySinkTransitionDefault+0x106>
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	f000 80ca 	beq.w	8005d44 <PolicySinkTransitionDefault+0x1ac>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 8134 	bne.w	8005e1e <PolicySinkTransitionDefault+0x286>
    case 0:
      port->is_hard_reset_ = TRUE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      port->policy_has_contract_ = FALSE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

      DPM_Reset(port);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fb47 	bl	800525a <DPM_Reset>

      /* Disable auto-discharge system */
      port->registers_.PwrCtrl.AUTO_DISCH = 0;
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	7e13      	ldrb	r3, [r2, #24]
 8005bd0:	f36f 1304 	bfc	r3, #4, #1
 8005bd4:	7613      	strb	r3, [r2, #24]
      port->registers_.PwrCtrl.DIS_VALARM = 0;
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	7e13      	ldrb	r3, [r2, #24]
 8005bda:	f36f 1345 	bfc	r3, #5, #1
 8005bde:	7613      	strb	r3, [r2, #24]
      WriteRegister(port, regPWRCTRL);
 8005be0:	211c      	movs	r1, #28
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f002 fe8a 	bl	80088fc <WriteRegister>

      /* Timeout (Vbus Off) handling required for Type-C only connections */
      TimerStart(&port->policy_state_timer_, ktPSHardResetMax + ktSafe0V);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	338c      	adds	r3, #140	; 0x8c
 8005bec:	4990      	ldr	r1, [pc, #576]	; (8005e30 <PolicySinkTransitionDefault+0x298>)
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f004 fc2e 	bl	800a450 <TimerStart>

      if (port->policy_is_dfp_) {
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d014      	beq.n	8005c28 <PolicySinkTransitionDefault+0x90>
        port->policy_is_dfp_ = FALSE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        port->registers_.MsgHeadr.DATA_ROLE = port->policy_is_dfp_;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	b2d9      	uxtb	r1, r3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8005c18:	f361 03c3 	bfi	r3, r1, #3, #1
 8005c1c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
        WriteRegister(port, regMSGHEADR);
 8005c20:	212e      	movs	r1, #46	; 0x2e
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f002 fe6a 	bl	80088fc <WriteRegister>
      }

      /* Disable VConn source */
      if (port->is_vconn_source_) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00c      	beq.n	8005c4c <PolicySinkTransitionDefault+0xb4>
        port->registers_.PwrCtrl.EN_VCONN = 0;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	7e13      	ldrb	r3, [r2, #24]
 8005c36:	f36f 0300 	bfc	r3, #0, #1
 8005c3a:	7613      	strb	r3, [r2, #24]
        WriteRegister(port, regPWRCTRL);
 8005c3c:	211c      	movs	r1, #28
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f002 fe5c 	bl	80088fc <WriteRegister>
        port->is_vconn_source_ = FALSE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      }

      /* Disable VBus sinking during the reset */
      SendCommand(port, DisableSinkVbus);
 8005c4c:	2144      	movs	r1, #68	; 0x44
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f002 febc 	bl	80089cc <SendCommand>

      /* Set up alert to wait for vSafe0V */
      SetVBusAlarm(port, FSC_VSAFE0V, FSC_VBUS_LVL_HIGHEST);
 8005c54:	f44f 7252 	mov.w	r2, #840	; 0x348
 8005c58:	2120      	movs	r1, #32
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f003 f824 	bl	8008ca8 <SetVBusAlarm>

      ClearInterrupt(port, regALERTL, MSK_I_ALARM_LO_ALL);
 8005c60:	22ff      	movs	r2, #255	; 0xff
 8005c62:	2110      	movs	r1, #16
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f002 fe94 	bl	8008992 <ClearInterrupt>
      ClearInterrupt(port, regALERTH, MSK_I_ALARM_HI_ALL);
 8005c6a:	228f      	movs	r2, #143	; 0x8f
 8005c6c:	2111      	movs	r1, #17
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f002 fe8f 	bl	8008992 <ClearInterrupt>

      port->registers_.AlertMskH.M_VBUS_ALRM_LO = 1;
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	7c53      	ldrb	r3, [r2, #17]
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	7453      	strb	r3, [r2, #17]
      WriteRegister(port, regALERTMSKH);
 8005c7e:	2113      	movs	r1, #19
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f002 fe3b 	bl	80088fc <WriteRegister>
#ifdef FSC_HAVE_DP
      DP_Initialize(port);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fe fe1a 	bl	80048c0 <DP_Initialize>
#endif /* FSC_HAVE_DP */
      port->policy_subindex_++;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005c92:	3301      	adds	r3, #1
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 8005c9c:	e0c4      	b.n	8005e28 <PolicySinkTransitionDefault+0x290>
    case 1:
      if (port->registers_.AlertH.I_VBUS_ALRM_LO) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	7bdb      	ldrb	r3, [r3, #15]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d034      	beq.n	8005d16 <PolicySinkTransitionDefault+0x17e>
        /* We've reached vSafe0V */
        ClearInterrupt(port, regALERTH, MSK_I_VBUS_ALRM_LO);
 8005cac:	2201      	movs	r2, #1
 8005cae:	2111      	movs	r1, #17
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f002 fe6e 	bl	8008992 <ClearInterrupt>

        /* Set up to wait for vSafe5V */
        SetVBusAlarm(port, 0, FSC_VSAFE5V_L);
 8005cb6:	22be      	movs	r2, #190	; 0xbe
 8005cb8:	2100      	movs	r1, #0
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f002 fff4 	bl	8008ca8 <SetVBusAlarm>

        ClearInterrupt(port, regALERTL, MSK_I_VBUS_ALRM_HI | MSK_I_PORT_PWR);
 8005cc0:	2282      	movs	r2, #130	; 0x82
 8005cc2:	2110      	movs	r1, #16
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f002 fe64 	bl	8008992 <ClearInterrupt>
        ClearInterrupt(port, regALERTH, MSK_I_VBUS_ALRM_LO);
 8005cca:	2201      	movs	r2, #1
 8005ccc:	2111      	movs	r1, #17
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f002 fe5f 	bl	8008992 <ClearInterrupt>

        port->registers_.AlertMskH.M_VBUS_ALRM_LO = 0;
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	7c53      	ldrb	r3, [r2, #17]
 8005cd8:	f36f 0300 	bfc	r3, #0, #1
 8005cdc:	7453      	strb	r3, [r2, #17]
        WriteRegister(port, regALERTMSKH);
 8005cde:	2113      	movs	r1, #19
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 fe0b 	bl	80088fc <WriteRegister>
        port->registers_.AlertMskL.M_VBUS_ALRM_HI = 1;
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	7c13      	ldrb	r3, [r2, #16]
 8005cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cee:	7413      	strb	r3, [r2, #16]
        WriteRegister(port, regALERTMSKL);
 8005cf0:	2112      	movs	r1, #18
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f002 fe02 	bl	80088fc <WriteRegister>

        /* Timeout (Vbus On) handling required for Type-C only connections */
        TimerStart(&port->policy_state_timer_, ktSrcRecoverMax + ktSrcTurnOn);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	338c      	adds	r3, #140	; 0x8c
 8005cfc:	494d      	ldr	r1, [pc, #308]	; (8005e34 <PolicySinkTransitionDefault+0x29c>)
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f004 fba6 	bl	800a450 <TimerStart>

        port->policy_subindex_++;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        set_policy_state(port, PE_SNK_Startup);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8005d14:	e088      	b.n	8005e28 <PolicySinkTransitionDefault+0x290>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	338c      	adds	r3, #140	; 0x8c
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f004 fbe2 	bl	800a4e4 <TimerExpired>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <PolicySinkTransitionDefault+0x1a2>
        TimerDisable(&port->policy_state_timer_);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	338c      	adds	r3, #140	; 0x8c
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f004 fbae 	bl	800a48c <TimerDisable>
        set_policy_state(port, PE_SNK_Startup);
 8005d30:	210d      	movs	r1, #13
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f003 fc7c 	bl	8009630 <set_policy_state>
      break;
 8005d38:	e076      	b.n	8005e28 <PolicySinkTransitionDefault+0x290>
        port->idle_ = TRUE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005d42:	e071      	b.n	8005e28 <PolicySinkTransitionDefault+0x290>
    case 2:
      if (port->registers_.AlertL.I_VBUS_ALRM_HI) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7b9b      	ldrb	r3, [r3, #14]
 8005d48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d04e      	beq.n	8005df0 <PolicySinkTransitionDefault+0x258>
        ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 8005d52:	2202      	movs	r2, #2
 8005d54:	2110      	movs	r1, #16
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f002 fe1b 	bl	8008992 <ClearInterrupt>
        ClearInterrupt(port, regALERTL, MSK_I_VBUS_ALRM_HI);
 8005d5c:	2280      	movs	r2, #128	; 0x80
 8005d5e:	2110      	movs	r1, #16
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f002 fe16 	bl	8008992 <ClearInterrupt>

        /* Re-enable sinking VBus and discharge system */
        SendCommand(port, SinkVbus);
 8005d66:	2155      	movs	r1, #85	; 0x55
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f002 fe2f 	bl	80089cc <SendCommand>

        SetVBusSnkDisc(port, FSC_VSAFE5V_DISC);
 8005d6e:	2192      	movs	r1, #146	; 0x92
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f002 ff5f 	bl	8008c34 <SetVBusSnkDisc>

        port->registers_.AlertMskL.M_VBUS_ALRM_HI = 0;
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	7c13      	ldrb	r3, [r2, #16]
 8005d7a:	f36f 13c7 	bfc	r3, #7, #1
 8005d7e:	7413      	strb	r3, [r2, #16]
        port->registers_.AlertMskL.M_PORT_PWR = 1;
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	7c13      	ldrb	r3, [r2, #16]
 8005d84:	f043 0302 	orr.w	r3, r3, #2
 8005d88:	7413      	strb	r3, [r2, #16]
        WriteRegister(port, regALERTMSKL);
 8005d8a:	2112      	movs	r1, #18
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f002 fdb5 	bl	80088fc <WriteRegister>
        port->registers_.AlertMskH.M_VBUS_SNK_DISC = 1;
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	7c53      	ldrb	r3, [r2, #17]
 8005d96:	f043 0308 	orr.w	r3, r3, #8
 8005d9a:	7453      	strb	r3, [r2, #17]
        WriteRegister(port, regALERTMSKH);
 8005d9c:	2113      	movs	r1, #19
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f002 fdac 	bl	80088fc <WriteRegister>

        ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 8005da4:	2202      	movs	r2, #2
 8005da6:	2110      	movs	r1, #16
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f002 fdf2 	bl	8008992 <ClearInterrupt>
        ClearInterrupt(port, regALERTH, MSK_I_VBUS_SNK_DISC);
 8005dae:	2208      	movs	r2, #8
 8005db0:	2111      	movs	r1, #17
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f002 fded 	bl	8008992 <ClearInterrupt>

        port->registers_.PwrCtrl.AUTO_DISCH = 1;
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	7e13      	ldrb	r3, [r2, #24]
 8005dbc:	f043 0310 	orr.w	r3, r3, #16
 8005dc0:	7613      	strb	r3, [r2, #24]
        port->registers_.PwrCtrl.DIS_VALARM = 1;
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	7e13      	ldrb	r3, [r2, #24]
 8005dc6:	f043 0320 	orr.w	r3, r3, #32
 8005dca:	7613      	strb	r3, [r2, #24]
        WriteRegister(port, regPWRCTRL);
 8005dcc:	211c      	movs	r1, #28
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f002 fd94 	bl	80088fc <WriteRegister>

        set_policy_state(port, PE_SNK_Startup);
 8005dd4:	210d      	movs	r1, #13
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f003 fc2a 	bl	8009630 <set_policy_state>
        port->pd_tx_status_ = txIdle;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

        TimerDisable(&port->policy_state_timer_);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	338c      	adds	r3, #140	; 0x8c
 8005de8:	4618      	mov	r0, r3
 8005dea:	f004 fb4f 	bl	800a48c <TimerDisable>
        set_policy_state(port, PE_ErrorRecovery);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8005dee:	e01b      	b.n	8005e28 <PolicySinkTransitionDefault+0x290>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	338c      	adds	r3, #140	; 0x8c
 8005df4:	4618      	mov	r0, r3
 8005df6:	f004 fb75 	bl	800a4e4 <TimerExpired>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <PolicySinkTransitionDefault+0x27c>
        TimerDisable(&port->policy_state_timer_);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	338c      	adds	r3, #140	; 0x8c
 8005e04:	4618      	mov	r0, r3
 8005e06:	f004 fb41 	bl	800a48c <TimerDisable>
        set_policy_state(port, PE_ErrorRecovery);
 8005e0a:	21a6      	movs	r1, #166	; 0xa6
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f003 fc0f 	bl	8009630 <set_policy_state>
      break;
 8005e12:	e009      	b.n	8005e28 <PolicySinkTransitionDefault+0x290>
        port->idle_ = TRUE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8005e1c:	e004      	b.n	8005e28 <PolicySinkTransitionDefault+0x290>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8005e1e:	21a6      	movs	r1, #166	; 0xa6
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f003 fc05 	bl	8009630 <set_policy_state>
      break;
 8005e26:	bf00      	nop
  }
}
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	000a73c8 	.word	0x000a73c8
 8005e34:	00137478 	.word	0x00137478

08005e38 <PolicySinkDiscovery>:

void PolicySinkDiscovery(struct Port *port)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  set_policy_state(port, PE_SNK_Wait_For_Capabilities);
 8005e40:	210f      	movs	r1, #15
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f003 fbf4 	bl	8009630 <set_policy_state>
  port->is_hard_reset_ = FALSE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  TimerStart(&port->policy_state_timer_, ktTypeCSinkWaitCap);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	338c      	adds	r3, #140	; 0x8c
 8005e54:	4903      	ldr	r1, [pc, #12]	; (8005e64 <PolicySinkDiscovery+0x2c>)
 8005e56:	4618      	mov	r0, r3
 8005e58:	f004 fafa 	bl	800a450 <TimerStart>
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	00055730 	.word	0x00055730

08005e68 <PolicySinkWaitCaps>:

void PolicySinkWaitCaps(struct Port *port)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  if (port->protocol_msg_rx_) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d040      	beq.n	8005efc <PolicySinkWaitCaps+0x94>
    port->protocol_msg_rx_ = FALSE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005e88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01f      	beq.n	8005ed2 <PolicySinkWaitCaps+0x6a>
        (port->policy_rx_header_.MessageType == DMTSourceCapabilities)) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	b2db      	uxtb	r3, r3
    if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d117      	bne.n	8005ed2 <PolicySinkWaitCaps+0x6a>
      UpdateCapabilitiesRx(port, TRUE);
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 fc26 	bl	80076f6 <UpdateCapabilitiesRx>
      set_policy_state(port, PE_SNK_Evaluate_Capability);
 8005eaa:	2110      	movs	r1, #16
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f003 fbbf 	bl	8009630 <set_policy_state>
      TimerDisable(&port->policy_state_timer_);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	338c      	adds	r3, #140	; 0x8c
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f004 fae8 	bl	800a48c <TimerDisable>
      DPM_SetSOPVersion(port, port->policy_rx_header_.SpecRevision);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005ec2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff fa1d 	bl	800530a <DPM_SetSOPVersion>
 8005ed0:	e067      	b.n	8005fa2 <PolicySinkWaitCaps+0x13a>
    }
    else if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005ed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d15f      	bne.n	8005fa2 <PolicySinkWaitCaps+0x13a>
             (port->policy_rx_header_.MessageType == CMTSoftReset)) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	b2db      	uxtb	r3, r3
    else if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8005eee:	2b0d      	cmp	r3, #13
 8005ef0:	d157      	bne.n	8005fa2 <PolicySinkWaitCaps+0x13a>
      set_policy_state(port, PE_SNK_Soft_Reset);
 8005ef2:	211b      	movs	r1, #27
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f003 fb9b 	bl	8009630 <set_policy_state>
    TimerDisable(&port->no_response_timer_);
  }
  else {
    port->idle_ = TRUE;
  }
}
 8005efa:	e052      	b.n	8005fa2 <PolicySinkWaitCaps+0x13a>
  else if ((port->policy_has_contract_ == TRUE) &&
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d116      	bne.n	8005f34 <PolicySinkWaitCaps+0xcc>
           TimerExpired(&port->no_response_timer_) &&
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	33bc      	adds	r3, #188	; 0xbc
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f004 faea 	bl	800a4e4 <TimerExpired>
 8005f10:	4603      	mov	r3, r0
  else if ((port->policy_has_contract_ == TRUE) &&
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00e      	beq.n	8005f34 <PolicySinkWaitCaps+0xcc>
           (port->hard_reset_counter_ > HARD_RESET_COUNT)) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
           TimerExpired(&port->no_response_timer_) &&
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d909      	bls.n	8005f34 <PolicySinkWaitCaps+0xcc>
    TimerDisable(&port->no_response_timer_);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	33bc      	adds	r3, #188	; 0xbc
 8005f24:	4618      	mov	r0, r3
 8005f26:	f004 fab1 	bl	800a48c <TimerDisable>
    set_policy_state(port, PE_ErrorRecovery);
 8005f2a:	21a6      	movs	r1, #166	; 0xa6
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f003 fb7f 	bl	8009630 <set_policy_state>
 8005f32:	e036      	b.n	8005fa2 <PolicySinkWaitCaps+0x13a>
  else if (TimerExpired(&port->policy_state_timer_) &&
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	338c      	adds	r3, #140	; 0x8c
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f004 fad3 	bl	800a4e4 <TimerExpired>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <PolicySinkWaitCaps+0xf8>
           (port->hard_reset_counter_ <= HARD_RESET_COUNT)) {
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
  else if (TimerExpired(&port->policy_state_timer_) &&
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d808      	bhi.n	8005f60 <PolicySinkWaitCaps+0xf8>
    TimerDisable(&port->policy_state_timer_);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	338c      	adds	r3, #140	; 0x8c
 8005f52:	4618      	mov	r0, r3
 8005f54:	f004 fa9a 	bl	800a48c <TimerDisable>
    PolicySinkSendHardReset(port);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fd68 	bl	8005a2e <PolicySinkSendHardReset>
 8005f5e:	e020      	b.n	8005fa2 <PolicySinkWaitCaps+0x13a>
  else if ((port->policy_has_contract_ == FALSE) &&
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <PolicySinkWaitCaps+0x130>
           TimerExpired(&port->no_response_timer_) &&
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	33bc      	adds	r3, #188	; 0xbc
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f004 fab8 	bl	800a4e4 <TimerExpired>
 8005f74:	4603      	mov	r3, r0
  else if ((port->policy_has_contract_ == FALSE) &&
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00e      	beq.n	8005f98 <PolicySinkWaitCaps+0x130>
           (port->hard_reset_counter_ > HARD_RESET_COUNT)) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
           TimerExpired(&port->no_response_timer_) &&
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d909      	bls.n	8005f98 <PolicySinkWaitCaps+0x130>
    port->idle_ = TRUE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    TimerDisable(&port->no_response_timer_);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	33bc      	adds	r3, #188	; 0xbc
 8005f90:	4618      	mov	r0, r3
 8005f92:	f004 fa7b 	bl	800a48c <TimerDisable>
 8005f96:	e004      	b.n	8005fa2 <PolicySinkWaitCaps+0x13a>
    port->idle_ = TRUE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8005fa0:	e7ff      	b.n	8005fa2 <PolicySinkWaitCaps+0x13a>
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <PolicySinkEvaluateCaps>:

void PolicySinkEvaluateCaps(struct Port *port)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	; 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* All math here should be in mv, ma, mw.  Conversion done on incoming
   * and outgoing values.
   */
  FSC_U8 i = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FSC_S32 req_position = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	623b      	str	r3, [r7, #32]
  FSC_U32 obj_voltage = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
  FSC_U32 obj_current = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61bb      	str	r3, [r7, #24]
  FSC_U32 sel_voltage = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
  FSC_U32 max_power = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]
  FSC_U32 obj_power = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  FSC_U32 req_current = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]

  TimerDisable(&port->no_response_timer_);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	33bc      	adds	r3, #188	; 0xbc
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f004 fa56 	bl	800a48c <TimerDisable>
  port->hard_reset_counter_ = 0;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151

  /* Select the highest power object that we are compatible with */
  for (i = 0; i < port->caps_header_received_.NumDataObjects; i++) {
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005fee:	e0a6      	b.n	800613e <PolicySinkEvaluateCaps+0x192>
    switch (port->caps_received_[i].PDO.SupplyType) {
 8005ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	337e      	adds	r3, #126	; 0x7e
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	79db      	ldrb	r3, [r3, #7]
 8005ffe:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b03      	cmp	r3, #3
 8006006:	d87e      	bhi.n	8006106 <PolicySinkEvaluateCaps+0x15a>
 8006008:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <PolicySinkEvaluateCaps+0x64>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006021 	.word	0x08006021
 8006014:	080060fb 	.word	0x080060fb
 8006018:	0800607f 	.word	0x0800607f
 800601c:	08006101 	.word	0x08006101
      case pdoTypeFixed:
        obj_voltage = port->caps_received_[i].FPDOSupply.Voltage * 50;
 8006020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	337e      	adds	r3, #126	; 0x7e
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8006032:	b29b      	uxth	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	2332      	movs	r3, #50	; 0x32
 8006038:	fb03 f302 	mul.w	r3, r3, r2
 800603c:	61fb      	str	r3, [r7, #28]
        if (obj_voltage > port->sink_request_max_voltage_) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	429a      	cmp	r2, r3
 8006048:	d871      	bhi.n	800612e <PolicySinkEvaluateCaps+0x182>
          continue;
        }
        else {
          obj_current = port->caps_received_[i].FPDOSupply.MaxCurrent * 10;
 800604a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	337e      	adds	r3, #126	; 0x7e
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	889b      	ldrh	r3, [r3, #4]
 8006058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	61bb      	str	r3, [r7, #24]
          obj_power = (obj_voltage * obj_current) / 1000;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	4ab9      	ldr	r2, [pc, #740]	; (8006358 <PolicySinkEvaluateCaps+0x3ac>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	099b      	lsrs	r3, r3, #6
 800607a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800607c:	e046      	b.n	800610c <PolicySinkEvaluateCaps+0x160>
      case pdoTypeVariable:
        obj_voltage = port->caps_received_[i].VPDO.MaxVoltage * 50;
 800607e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	337e      	adds	r3, #126	; 0x7e
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	88db      	ldrh	r3, [r3, #6]
 800608c:	f3c3 1309 	ubfx	r3, r3, #4, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	2332      	movs	r3, #50	; 0x32
 8006096:	fb03 f302 	mul.w	r3, r3, r2
 800609a:	61fb      	str	r3, [r7, #28]
        if (obj_voltage > port->sink_request_max_voltage_) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d844      	bhi.n	8006132 <PolicySinkEvaluateCaps+0x186>
          continue;
        }
        else {
          obj_voltage = port->caps_received_[i].VPDO.MinVoltage * 50;
 80060a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	337e      	adds	r3, #126	; 0x7e
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	2332      	movs	r3, #50	; 0x32
 80060c0:	fb03 f302 	mul.w	r3, r3, r2
 80060c4:	61fb      	str	r3, [r7, #28]
          obj_current = port->caps_received_[i].VPDO.MaxCurrent * 10;
 80060c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	337e      	adds	r3, #126	; 0x7e
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	889b      	ldrh	r3, [r3, #4]
 80060d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d8:	b29b      	uxth	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	61bb      	str	r3, [r7, #24]
          obj_power = (obj_voltage * obj_current) / 1000;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	4a9a      	ldr	r2, [pc, #616]	; (8006358 <PolicySinkEvaluateCaps+0x3ac>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	099b      	lsrs	r3, r3, #6
 80060f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80060f8:	e008      	b.n	800610c <PolicySinkEvaluateCaps+0x160>
      case pdoTypeBattery:
        /* Ignore battery powered sources (for now) */
        obj_power = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
        break;
 80060fe:	e005      	b.n	800610c <PolicySinkEvaluateCaps+0x160>
      case pdoTypeAugmented:
        //obj_voltage = port->caps_received_[i].PPSDOSupply.MaxVoltage * 100;
        //obj_current = port->caps_received_[i].PPSDOSupply.MaxCurrent * 50;
        //obj_power = (obj_voltage * obj_current) / 1000;
        /* Set object power to 0 to ignore Augmented/PPS sources (for now) */
        obj_power = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
        break;
 8006104:	e002      	b.n	800610c <PolicySinkEvaluateCaps+0x160>
      default:
        /* Ignore undefined/unsupported supply types */
        obj_power = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
        break;
 800610a:	bf00      	nop
    }

    /* Track object with highest power */
    if (obj_power >= max_power) {
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	429a      	cmp	r2, r3
 8006112:	d30f      	bcc.n	8006134 <PolicySinkEvaluateCaps+0x188>
      max_power = obj_power;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	613b      	str	r3, [r7, #16]
      sel_voltage = obj_voltage;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	617b      	str	r3, [r7, #20]
      req_position = i + 1;
 800611c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006120:	3301      	adds	r3, #1
 8006122:	623b      	str	r3, [r7, #32]

      port->sink_partner_max_power_ = max_power;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 800612c:	e002      	b.n	8006134 <PolicySinkEvaluateCaps+0x188>
          continue;
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <PolicySinkEvaluateCaps+0x188>
          continue;
 8006132:	bf00      	nop
  for (i = 0; i < port->caps_header_received_.NumDataObjects; i++) {
 8006134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006138:	3301      	adds	r3, #1
 800613a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 8006144:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006150:	4293      	cmp	r3, r2
 8006152:	f4ff af4d 	bcc.w	8005ff0 <PolicySinkEvaluateCaps+0x44>
    }
  }

  /* If another port is sinking the highest power available, we'll just */
  /* request a basic low power PDO here. */
  if (port->sink_request_low_power_) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02d      	beq.n	80061bc <PolicySinkEvaluateCaps+0x210>
    if (port->caps_received_[0].PDO.SupplyType == pdoTypeFixed) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006166:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10b      	bne.n	8006188 <PolicySinkEvaluateCaps+0x1dc>
      sel_voltage = port->caps_received_[0].FPDOSupply.Voltage * 50;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006176:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	2332      	movs	r3, #50	; 0x32
 8006180:	fb03 f302 	mul.w	r3, r3, r2
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e012      	b.n	80061ae <PolicySinkEvaluateCaps+0x202>
    }
    else if (port->caps_received_[0].PDO.SupplyType == pdoTypeVariable){
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800618e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b80      	cmp	r3, #128	; 0x80
 8006196:	d10a      	bne.n	80061ae <PolicySinkEvaluateCaps+0x202>
      sel_voltage = port->caps_received_[0].VPDO.MaxVoltage * 50;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 800619e:	f3c3 1309 	ubfx	r3, r3, #4, #10
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	2332      	movs	r3, #50	; 0x32
 80061a8:	fb03 f302 	mul.w	r3, r3, r2
 80061ac:	617b      	str	r3, [r7, #20]
    else {
      /* Skipping battery sources for now... */
    }

    /* Make sure the first position is a 5V object */
    if (sel_voltage == (PD_05_V * 50)) {
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d101      	bne.n	80061bc <PolicySinkEvaluateCaps+0x210>
      req_position = 1;
 80061b8:	2301      	movs	r3, #1
 80061ba:	623b      	str	r3, [r7, #32]
    }
  }

  if ((req_position > 0) && (sel_voltage > 0)) {
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f340 80b3 	ble.w	800632a <PolicySinkEvaluateCaps+0x37e>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80af 	beq.w	800632a <PolicySinkEvaluateCaps+0x37e>
    port->partner_caps_.object = port->caps_received_[0].object;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    port->sink_request_.FVRDO.ObjectPosition = req_position & 0x07;
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	b2d9      	uxtb	r1, r3
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 80061e6:	f361 1306 	bfi	r3, r1, #4, #3
 80061ea:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    port->sink_request_.FVRDO.GiveBack = port->sink_goto_min_compatible_;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	b2d9      	uxtb	r1, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8006200:	f361 03c3 	bfi	r3, r1, #3, #1
 8006204:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    port->sink_request_.FVRDO.NoUSBSuspend = port->sink_usb_suspend_compatible_;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 323a 	ldrb.w	r3, [r3, #570]	; 0x23a
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	b2d9      	uxtb	r1, r3
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 800621a:	f361 0300 	bfi	r3, r1, #0, #1
 800621e:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    port->sink_request_.FVRDO.USBCommCapable = port->sink_usb_comm_capable_;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 323b 	ldrb.w	r3, [r3, #571]	; 0x23b
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	b2d9      	uxtb	r1, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8006234:	f361 0341 	bfi	r3, r1, #1, #1
 8006238:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
    req_current = (port->sink_request_op_power_ * 1000) / sel_voltage;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006246:	fb02 f203 	mul.w	r2, r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006250:	60bb      	str	r3, [r7, #8]
    /* Set the current based on the selected voltage (in 10mA units) */
    port->sink_request_.FVRDO.OpCurrent = ((req_current / 10) & 0x3FF);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4a41      	ldr	r2, [pc, #260]	; (800635c <PolicySinkEvaluateCaps+0x3b0>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	08db      	lsrs	r3, r3, #3
 800625c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006260:	b299      	uxth	r1, r3
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 8006268:	f361 2393 	bfi	r3, r1, #10, #10
 800626c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
    req_current = (port->sink_request_max_power_ * 1000) / sel_voltage;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800627a:	fb02 f203 	mul.w	r2, r2, r3
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
 8006284:	60bb      	str	r3, [r7, #8]
    /* Set the min/max current based on the selected voltage (in 10mA units) */
    port->sink_request_.FVRDO.MinMaxCurrent = ((req_current / 10) & 0x3FF);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4a34      	ldr	r2, [pc, #208]	; (800635c <PolicySinkEvaluateCaps+0x3b0>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	08db      	lsrs	r3, r3, #3
 8006290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006294:	b299      	uxth	r1, r3
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	f8b2 321c 	ldrh.w	r3, [r2, #540]	; 0x21c
 800629c:	f361 0309 	bfi	r3, r1, #0, #10
 80062a0:	f8a2 321c 	strh.w	r3, [r2, #540]	; 0x21c
    if (port->sink_goto_min_compatible_) {
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3239 	ldrb.w	r3, [r3, #569]	; 0x239
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <PolicySinkEvaluateCaps+0x312>
      port->sink_request_.FVRDO.CapabilityMismatch = FALSE;
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 80062b4:	f36f 0382 	bfc	r3, #2, #1
 80062b8:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
 80062bc:	e030      	b.n	8006320 <PolicySinkEvaluateCaps+0x374>
    }
    else {
      if (obj_current < req_current) {
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d225      	bcs.n	8006312 <PolicySinkEvaluateCaps+0x366>
        /* Indicate that we need more power */
        port->sink_request_.FVRDO.CapabilityMismatch = TRUE;
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 80062cc:	f043 0304 	orr.w	r3, r3, #4
 80062d0:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
        port->sink_request_.FVRDO.MinMaxCurrent = obj_current / 10;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	4a21      	ldr	r2, [pc, #132]	; (800635c <PolicySinkEvaluateCaps+0x3b0>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	08db      	lsrs	r3, r3, #3
 80062de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062e2:	b299      	uxth	r1, r3
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	f8b2 321c 	ldrh.w	r3, [r2, #540]	; 0x21c
 80062ea:	f361 0309 	bfi	r3, r1, #0, #10
 80062ee:	f8a2 321c 	strh.w	r3, [r2, #540]	; 0x21c
        port->sink_request_.FVRDO.OpCurrent = obj_current / 10;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	4a19      	ldr	r2, [pc, #100]	; (800635c <PolicySinkEvaluateCaps+0x3b0>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	08db      	lsrs	r3, r3, #3
 80062fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006300:	b299      	uxth	r1, r3
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 8006308:	f361 2393 	bfi	r3, r1, #10, #10
 800630c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8006310:	e006      	b.n	8006320 <PolicySinkEvaluateCaps+0x374>
      }
      else {
        port->sink_request_.FVRDO.CapabilityMismatch = FALSE;
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	f892 321f 	ldrb.w	r3, [r2, #543]	; 0x21f
 8006318:	f36f 0382 	bfc	r3, #2, #1
 800631c:	f882 321f 	strb.w	r3, [r2, #543]	; 0x21f
      }
    }
    set_policy_state(port, PE_SNK_Select_Capability);
 8006320:	2111      	movs	r1, #17
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f003 f984 	bl	8009630 <set_policy_state>
 8006328:	e011      	b.n	800634e <PolicySinkEvaluateCaps+0x3a2>
  }
  else {
    /* TODO: For now, we just go back to the wait state instead of */
    /* sending a reject or reset (may change in future) */
    set_policy_state(port, PE_SNK_Wait_For_Capabilities);
 800632a:	210f      	movs	r1, #15
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f003 f97f 	bl	8009630 <set_policy_state>
    TimerStart(&port->policy_state_timer_, ktTypeCSinkWaitCap);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	338c      	adds	r3, #140	; 0x8c
 8006336:	490a      	ldr	r1, [pc, #40]	; (8006360 <PolicySinkEvaluateCaps+0x3b4>)
 8006338:	4618      	mov	r0, r3
 800633a:	f004 f889 	bl	800a450 <TimerStart>
    port->idle_ = TRUE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    port->sink_partner_max_power_ = 0;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  }
}
 800634e:	bf00      	nop
 8006350:	3728      	adds	r7, #40	; 0x28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	10624dd3 	.word	0x10624dd3
 800635c:	cccccccd 	.word	0xcccccccd
 8006360:	00055730 	.word	0x00055730

08006364 <PolicySinkSelectCapability>:

void PolicySinkSelectCapability(struct Port *port)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af04      	add	r7, sp, #16
 800636a:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <PolicySinkSelectCapability+0x18>
 8006376:	2b01      	cmp	r3, #1
 8006378:	d021      	beq.n	80063be <PolicySinkSelectCapability+0x5a>
 800637a:	e167      	b.n	800664c <PolicySinkSelectCapability+0x2e8>
    case 0:
      if (PolicySend(port, DMTRequest, 4, (FSC_U8 *)&port->sink_request_,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8006382:	2300      	movs	r3, #0
 8006384:	9303      	str	r3, [sp, #12]
 8006386:	2300      	movs	r3, #0
 8006388:	9302      	str	r3, [sp, #8]
 800638a:	2301      	movs	r3, #1
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	2311      	movs	r3, #17
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	2204      	movs	r2, #4
 8006396:	2102      	movs	r1, #2
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 fb41 	bl	8007a20 <PolicySend>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	f040 8158 	bne.w	8006656 <PolicySinkSelectCapability+0x2f2>
            PE_SNK_Select_Capability, 1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	338c      	adds	r3, #140	; 0x8c
 80063aa:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80063ae:	4618      	mov	r0, r3
 80063b0:	f004 f84e 	bl	800a450 <TimerStart>
        port->waiting_on_hr_ = TRUE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
      }
      break;
 80063bc:	e14b      	b.n	8006656 <PolicySinkSelectCapability+0x2f2>
    case 1:
      if (port->protocol_msg_rx_) {
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 812b 	beq.w	8006620 <PolicySinkSelectCapability+0x2bc>
        TimerDisable(&port->policy_state_timer_);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	338c      	adds	r3, #140	; 0x8c
 80063ce:	4618      	mov	r0, r3
 80063d0:	f004 f85c 	bl	800a48c <TimerDisable>
        port->protocol_msg_rx_ = FALSE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80063e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 80fe 	bne.w	80065ea <PolicySinkSelectCapability+0x286>
          switch (port->policy_rx_header_.MessageType) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80063f4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	3b03      	subs	r3, #3
 80063fc:	2b0a      	cmp	r3, #10
 80063fe:	f200 80ee 	bhi.w	80065de <PolicySinkSelectCapability+0x27a>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <PolicySinkSelectCapability+0xa4>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006435 	.word	0x08006435
 800640c:	0800659f 	.word	0x0800659f
 8006410:	080065df 	.word	0x080065df
 8006414:	080065df 	.word	0x080065df
 8006418:	080065df 	.word	0x080065df
 800641c:	080065df 	.word	0x080065df
 8006420:	080065df 	.word	0x080065df
 8006424:	080065df 	.word	0x080065df
 8006428:	080065df 	.word	0x080065df
 800642c:	0800659f 	.word	0x0800659f
 8006430:	080065d5 	.word	0x080065d5
            case CMTAccept:
              port->policy_has_contract_ = TRUE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
              port->source_is_apdo_ = FALSE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249

              port->usb_pd_contract_.object = port->sink_request_.object;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

              if ((port->caps_received_[
                port->usb_pd_contract_.FVRDO.ObjectPosition - 1].PDO.
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8006456:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800645a:	b2db      	uxtb	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	337e      	adds	r3, #126	; 0x7e
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	79db      	ldrb	r3, [r3, #7]
 8006468:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800646c:	b2db      	uxtb	r3, r3
              if ((port->caps_received_[
 800646e:	2b03      	cmp	r3, #3
 8006470:	d12a      	bne.n	80064c8 <PolicySinkSelectCapability+0x164>
                  SupplyType == pdoTypeAugmented) &&
                  (port->caps_received_[
                port->usb_pd_contract_.FVRDO.ObjectPosition - 1].APDO.
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8006478:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800647c:	b2db      	uxtb	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	337e      	adds	r3, #126	; 0x7e
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	79db      	ldrb	r3, [r3, #7]
 800648a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800648e:	b2db      	uxtb	r3, r3
                  SupplyType == pdoTypeAugmented) &&
 8006490:	2b00      	cmp	r3, #0
 8006492:	d119      	bne.n	80064c8 <PolicySinkSelectCapability+0x164>
                  APDOType == apdoTypePPS)) {
                port->source_is_apdo_ = TRUE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
                /* Set to minimum in case of current fold back */
                port->sink_selected_voltage_ = FSC_VBUS_03_V;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80064a2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
                port->sink_transition_up_ = FALSE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
                port->stored_apdo_.object = port->sink_request_.object;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
                TimerStart(&port->pps_timer_, ktPPSRequest);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	33e0      	adds	r3, #224	; 0xe0
 80064be:	4968      	ldr	r1, [pc, #416]	; (8006660 <PolicySinkSelectCapability+0x2fc>)
 80064c0:	4618      	mov	r0, r3
 80064c2:	f003 ffc5 	bl	800a450 <TimerStart>
 80064c6:	e046      	b.n	8006556 <PolicySinkSelectCapability+0x1f2>
              }
              else if (port->caps_received_[
                port->usb_pd_contract_.FVRDO.ObjectPosition - 1].PDO.SupplyType
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80064ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	337e      	adds	r3, #126	; 0x7e
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	79db      	ldrb	r3, [r3, #7]
 80064e0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80064e4:	b2db      	uxtb	r3, r3
              else if (port->caps_received_[
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d135      	bne.n	8006556 <PolicySinkSelectCapability+0x1f2>
                  == pdoTypeFixed) {
                /* TODO - Not reliable if received caps have changed/cleared */
                port->sink_transition_up_ =
                    port->sink_selected_voltage_ < port->caps_received_[
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
                        port->usb_pd_contract_.FVRDO.ObjectPosition - 1].
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80064f6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	3b01      	subs	r3, #1
                            FPDOSupply.Voltage * 50 ? TRUE : FALSE;
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	337e      	adds	r3, #126	; 0x7e
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800650c:	b29b      	uxth	r3, r3
 800650e:	4619      	mov	r1, r3
 8006510:	2332      	movs	r3, #50	; 0x32
 8006512:	fb03 f301 	mul.w	r3, r3, r1
 8006516:	429a      	cmp	r2, r3
 8006518:	bf34      	ite	cc
 800651a:	2301      	movcc	r3, #1
 800651c:	2300      	movcs	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	461a      	mov	r2, r3
                port->sink_transition_up_ =
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224

                port->sink_selected_voltage_ = port->caps_received_
                    [port->usb_pd_contract_.FVRDO.ObjectPosition - 1].
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800652e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006532:	b2db      	uxtb	r3, r3
 8006534:	3b01      	subs	r3, #1
                        FPDOSupply.Voltage * 50; /* mV */
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	337e      	adds	r3, #126	; 0x7e
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8006544:	b29b      	uxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	2332      	movs	r3, #50	; 0x32
 800654a:	fb03 f302 	mul.w	r3, r3, r2
 800654e:	461a      	mov	r2, r3
                port->sink_selected_voltage_ = port->caps_received_
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
              }
              else {
                /* TODO - Other supply types */
              }

              if (!port->sink_transition_up_) {
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 800655c:	2b00      	cmp	r3, #0
 800655e:	d113      	bne.n	8006588 <PolicySinkSelectCapability+0x224>
                /* Set up the new disconnect level - before the level drops */
                SetVBusSnkDisc(port,
                               FSC_VBUS_LVL_DISC(port->sink_selected_voltage_));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800656c:	493d      	ldr	r1, [pc, #244]	; (8006664 <PolicySinkSelectCapability+0x300>)
 800656e:	fba1 1303 	umull	r1, r3, r1, r3
 8006572:	089b      	lsrs	r3, r3, #2
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <PolicySinkSelectCapability+0x304>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	08db      	lsrs	r3, r3, #3
                SetVBusSnkDisc(port,
 800657e:	b29b      	uxth	r3, r3
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f002 fb56 	bl	8008c34 <SetVBusSnkDisc>
              }

              TimerStart(&port->policy_state_timer_, ktPSTransition);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	338c      	adds	r3, #140	; 0x8c
 800658c:	4937      	ldr	r1, [pc, #220]	; (800666c <PolicySinkSelectCapability+0x308>)
 800658e:	4618      	mov	r0, r3
 8006590:	f003 ff5e 	bl	800a450 <TimerStart>
              set_policy_state(port, PE_SNK_Transition_Sink);
 8006594:	2112      	movs	r1, #18
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f003 f84a 	bl	8009630 <set_policy_state>
              break;
 800659c:	e03b      	b.n	8006616 <PolicySinkSelectCapability+0x2b2>
            case CMTWait:
            case CMTReject:
              if (port->policy_has_contract_) {
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <PolicySinkSelectCapability+0x24e>
                set_policy_state(port, PE_SNK_Ready);
 80065a8:	2113      	movs	r1, #19
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f003 f840 	bl	8009630 <set_policy_state>
 80065b0:	e007      	b.n	80065c2 <PolicySinkSelectCapability+0x25e>
              }
              else {
                set_policy_state(port, PE_SNK_Wait_For_Capabilities);
 80065b2:	210f      	movs	r1, #15
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f003 f83b 	bl	8009630 <set_policy_state>
                /* Set the counter to avoid a hard reset loop */
                port->hard_reset_counter_ = HARD_RESET_COUNT + 1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2203      	movs	r2, #3
 80065be:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
              }
              notify_observers(EVENT_PD_CONTRACT_FAILED, port->port_id_, 0);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2200      	movs	r2, #0
 80065ca:	4619      	mov	r1, r3
 80065cc:	2040      	movs	r0, #64	; 0x40
 80065ce:	f7fe ff2f 	bl	8005430 <notify_observers>
              break;
 80065d2:	e020      	b.n	8006616 <PolicySinkSelectCapability+0x2b2>
            case CMTSoftReset:
              set_policy_state(port, PE_SNK_Soft_Reset);
 80065d4:	211b      	movs	r1, #27
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f003 f82a 	bl	8009630 <set_policy_state>
              break;
 80065dc:	e01b      	b.n	8006616 <PolicySinkSelectCapability+0x2b2>
            default:
              set_policy_state(port, PE_SNK_Send_Soft_Reset);
 80065de:	211a      	movs	r1, #26
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f003 f825 	bl	8009630 <set_policy_state>
              break;
 80065e6:	bf00      	nop
 80065e8:	e015      	b.n	8006616 <PolicySinkSelectCapability+0x2b2>
          }
        }
        else {
          switch (port->policy_rx_header_.MessageType) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80065f0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d108      	bne.n	800660c <PolicySinkSelectCapability+0x2a8>
            case DMTSourceCapabilities:
              UpdateCapabilitiesRx(port, TRUE);
 80065fa:	2101      	movs	r1, #1
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f87a 	bl	80076f6 <UpdateCapabilitiesRx>
              set_policy_state(port, PE_SNK_Evaluate_Capability);
 8006602:	2110      	movs	r1, #16
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f003 f813 	bl	8009630 <set_policy_state>
              break;
 800660a:	e004      	b.n	8006616 <PolicySinkSelectCapability+0x2b2>
            default:
              set_policy_state(port, PE_SNK_Send_Soft_Reset);
 800660c:	211a      	movs	r1, #26
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f003 f80e 	bl	8009630 <set_policy_state>
              break;
 8006614:	bf00      	nop
          }
        }
        port->pd_tx_status_ = txIdle;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        PolicySinkSendHardReset(port);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 800661e:	e01b      	b.n	8006658 <PolicySinkSelectCapability+0x2f4>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	338c      	adds	r3, #140	; 0x8c
 8006624:	4618      	mov	r0, r3
 8006626:	f003 ff5d 	bl	800a4e4 <TimerExpired>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <PolicySinkSelectCapability+0x2de>
        TimerDisable(&port->policy_state_timer_);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	338c      	adds	r3, #140	; 0x8c
 8006634:	4618      	mov	r0, r3
 8006636:	f003 ff29 	bl	800a48c <TimerDisable>
        PolicySinkSendHardReset(port);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff f9f7 	bl	8005a2e <PolicySinkSendHardReset>
      break;
 8006640:	e00a      	b.n	8006658 <PolicySinkSelectCapability+0x2f4>
        port->idle_ = TRUE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 800664a:	e005      	b.n	8006658 <PolicySinkSelectCapability+0x2f4>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 800664c:	21a6      	movs	r1, #166	; 0xa6
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f002 ffee 	bl	8009630 <set_policy_state>
      break;
 8006654:	e000      	b.n	8006658 <PolicySinkSelectCapability+0x2f4>
      break;
 8006656:	bf00      	nop
  }
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	00989680 	.word	0x00989680
 8006664:	cccccccd 	.word	0xcccccccd
 8006668:	51eb851f 	.word	0x51eb851f
 800666c:	0007a120 	.word	0x0007a120

08006670 <PolicySinkTransitionSink>:

void PolicySinkTransitionSink(struct Port *port)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  if (port->protocol_msg_rx_) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d06c      	beq.n	800675c <PolicySinkTransitionSink+0xec>
    port->protocol_msg_rx_ = FALSE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    if (port->policy_rx_header_.NumDataObjects == 0) {
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d145      	bne.n	8006726 <PolicySinkTransitionSink+0xb6>
      /* Disable the PSTransition timer */
      TimerDisable(&port->policy_state_timer_);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	338c      	adds	r3, #140	; 0x8c
 800669e:	4618      	mov	r0, r3
 80066a0:	f003 fef4 	bl	800a48c <TimerDisable>
      switch (port->policy_rx_header_.MessageType) {
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80066aa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b06      	cmp	r3, #6
 80066b2:	d002      	beq.n	80066ba <PolicySinkTransitionSink+0x4a>
 80066b4:	2b0d      	cmp	r3, #13
 80066b6:	d02c      	beq.n	8006712 <PolicySinkTransitionSink+0xa2>
 80066b8:	e030      	b.n	800671c <PolicySinkTransitionSink+0xac>
        case CMTPS_RDY:
          /* Set up the new disconnect level */
          /* FPDO Option only for now! */
          if (port->sink_transition_up_) {
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d013      	beq.n	80066ec <PolicySinkTransitionSink+0x7c>
            /* Set up the new disconnect level - once we've reached our
             * new level */
            SetVBusSnkDisc(port,
                           FSC_VBUS_LVL_DISC(port->sink_selected_voltage_));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80066d0:	492f      	ldr	r1, [pc, #188]	; (8006790 <PolicySinkTransitionSink+0x120>)
 80066d2:	fba1 1303 	umull	r1, r3, r1, r3
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	4a2e      	ldr	r2, [pc, #184]	; (8006794 <PolicySinkTransitionSink+0x124>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	08db      	lsrs	r3, r3, #3
            SetVBusSnkDisc(port,
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 faa4 	bl	8008c34 <SetVBusSnkDisc>
          }

          SetVBusStopDisc(port, FSC_VSAFE0V_DISCH);
 80066ec:	211c      	movs	r1, #28
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f002 fabd 	bl	8008c6e <SetVBusStopDisc>
          notify_observers(EVENT_PD_NEW_CONTRACT, port->port_id_,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b299      	uxth	r1, r3
                           &port->usb_pd_contract_);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f503 7306 	add.w	r3, r3, #536	; 0x218
          notify_observers(EVENT_PD_NEW_CONTRACT, port->port_id_,
 8006700:	461a      	mov	r2, r3
 8006702:	2020      	movs	r0, #32
 8006704:	f7fe fe94 	bl	8005430 <notify_observers>

          set_policy_state(port, PE_SNK_Ready);
 8006708:	2113      	movs	r1, #19
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f002 ff90 	bl	8009630 <set_policy_state>
          break;
 8006710:	e01f      	b.n	8006752 <PolicySinkTransitionSink+0xe2>
        case CMTSoftReset:
          set_policy_state(port, PE_SNK_Soft_Reset);
 8006712:	211b      	movs	r1, #27
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f002 ff8b 	bl	8009630 <set_policy_state>
          break;
 800671a:	e01a      	b.n	8006752 <PolicySinkTransitionSink+0xe2>
        default:
          PolicySinkSendHardReset(port);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff f986 	bl	8005a2e <PolicySinkSendHardReset>
          break;
 8006722:	bf00      	nop
 8006724:	e015      	b.n	8006752 <PolicySinkTransitionSink+0xe2>
      }
    }
    else {
      switch (port->policy_rx_header_.MessageType) {
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800672c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b01      	cmp	r3, #1
 8006734:	d108      	bne.n	8006748 <PolicySinkTransitionSink+0xd8>
        case DMTSourceCapabilities:
          UpdateCapabilitiesRx(port, TRUE);
 8006736:	2101      	movs	r1, #1
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 ffdc 	bl	80076f6 <UpdateCapabilitiesRx>
          set_policy_state(port, PE_SNK_Evaluate_Capability);
 800673e:	2110      	movs	r1, #16
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f002 ff75 	bl	8009630 <set_policy_state>
          break;
 8006746:	e004      	b.n	8006752 <PolicySinkTransitionSink+0xe2>
        default:
          /* Unexpected data message */
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8006748:	211a      	movs	r1, #26
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f002 ff70 	bl	8009630 <set_policy_state>
          break;
 8006750:	bf00      	nop
      }
    }
    port->pd_tx_status_ = txIdle;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    PolicySinkSendHardReset(port);
  }
  else {
    port->idle_ = TRUE;
  }
}
 800675a:	e014      	b.n	8006786 <PolicySinkTransitionSink+0x116>
  else if (TimerExpired(&port->policy_state_timer_)) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	338c      	adds	r3, #140	; 0x8c
 8006760:	4618      	mov	r0, r3
 8006762:	f003 febf 	bl	800a4e4 <TimerExpired>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <PolicySinkTransitionSink+0x10e>
    TimerDisable(&port->policy_state_timer_);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	338c      	adds	r3, #140	; 0x8c
 8006770:	4618      	mov	r0, r3
 8006772:	f003 fe8b 	bl	800a48c <TimerDisable>
    PolicySinkSendHardReset(port);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff f959 	bl	8005a2e <PolicySinkSendHardReset>
}
 800677c:	e003      	b.n	8006786 <PolicySinkTransitionSink+0x116>
    port->idle_ = TRUE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	cccccccd 	.word	0xcccccccd
 8006794:	51eb851f 	.word	0x51eb851f

08006798 <PolicySinkReady>:

void PolicySinkReady(struct Port *port)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  if (port->protocol_msg_rx_) {
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80e0 	beq.w	800696c <PolicySinkReady+0x1d4>
    port->protocol_msg_rx_ = FALSE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    if (port->policy_rx_header_.NumDataObjects == 0) {
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80067ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d158      	bne.n	8006876 <PolicySinkReady+0xde>
      switch (port->policy_rx_header_.MessageType) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80067ca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	3b02      	subs	r3, #2
 80067d2:	2b0e      	cmp	r3, #14
 80067d4:	d844      	bhi.n	8006860 <PolicySinkReady+0xc8>
 80067d6:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <PolicySinkReady+0x44>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	08006819 	.word	0x08006819
 80067e0:	08006857 	.word	0x08006857
 80067e4:	0800686b 	.word	0x0800686b
 80067e8:	0800686b 	.word	0x0800686b
 80067ec:	08006861 	.word	0x08006861
 80067f0:	08006861 	.word	0x08006861
 80067f4:	0800682f 	.word	0x0800682f
 80067f8:	08006839 	.word	0x08006839
 80067fc:	08006861 	.word	0x08006861
 8006800:	08006843 	.word	0x08006843
 8006804:	08006857 	.word	0x08006857
 8006808:	0800684d 	.word	0x0800684d
 800680c:	08006861 	.word	0x08006861
 8006810:	08006861 	.word	0x08006861
 8006814:	0800686b 	.word	0x0800686b
        case CMTGotoMin:
          set_policy_state(port, PE_SNK_Transition_Sink);
 8006818:	2112      	movs	r1, #18
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 ff08 	bl	8009630 <set_policy_state>
          TimerStart(&port->policy_state_timer_, ktPSTransition);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	338c      	adds	r3, #140	; 0x8c
 8006824:	49ba      	ldr	r1, [pc, #744]	; (8006b10 <PolicySinkReady+0x378>)
 8006826:	4618      	mov	r0, r3
 8006828:	f003 fe12 	bl	800a450 <TimerStart>
          break;
 800682c:	e01e      	b.n	800686c <PolicySinkReady+0xd4>
        case CMTGetSinkCap:
          set_policy_state(port, PE_SNK_Give_Sink_Cap);
 800682e:	2116      	movs	r1, #22
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f002 fefd 	bl	8009630 <set_policy_state>
          break;
 8006836:	e019      	b.n	800686c <PolicySinkReady+0xd4>
        case CMTGetSourceCap:
          set_policy_state(port, PE_DR_SNK_Give_Source_Cap);
          break;
#endif /* FSC_HAVE_SRC */
        case CMTDR_Swap:
          set_policy_state(port, PE_DRS_UFP_DFP_Evaluate_Swap);
 8006838:	2144      	movs	r1, #68	; 0x44
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f002 fef8 	bl	8009630 <set_policy_state>
          break;
 8006840:	e014      	b.n	800686c <PolicySinkReady+0xd4>
          set_policy_state(port, PE_DR_SNK_Give_Source_Cap_Ext);
          break;
#endif /* FSC_HAVE_EXTENDED */
#endif /* FSC_HAVE_SRC */
       case CMTVCONN_Swap:
          set_policy_state(port, PE_VCS_Evaluate_Swap);
 8006842:	216a      	movs	r1, #106	; 0x6a
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f002 fef3 	bl	8009630 <set_policy_state>
          break;
 800684a:	e00f      	b.n	800686c <PolicySinkReady+0xd4>
        case CMTSoftReset:
          set_policy_state(port, PE_SNK_Soft_Reset);
 800684c:	211b      	movs	r1, #27
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f002 feee 	bl	8009630 <set_policy_state>
          break;
 8006854:	e00a      	b.n	800686c <PolicySinkReady+0xd4>
            /* Rx'd Reject/NS are ignored - notify DPM if needed */
            break;
        case CMTAccept:
        case CMTWait:
          /* Unexpected messages */
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8006856:	211a      	movs	r1, #26
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f002 fee9 	bl	8009630 <set_policy_state>
          break;
 800685e:	e005      	b.n	800686c <PolicySinkReady+0xd4>
        default:
          /* Send a reject message for all other commands */
          set_policy_state(port, PE_SNK_Send_Not_Supported);
 8006860:	211f      	movs	r1, #31
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f002 fee4 	bl	8009630 <set_policy_state>
          break;
 8006868:	e000      	b.n	800686c <PolicySinkReady+0xd4>
            break;
 800686a:	bf00      	nop
      }
      port->pd_tx_status_ = txIdle;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  else {
    port->idle_ = TRUE;
    TimerDisable(&port->policy_state_timer_);
    TimerDisable(&port->no_response_timer_);
  }
}
 8006874:	e17a      	b.n	8006b6c <PolicySinkReady+0x3d4>
    else if (port->policy_rx_header_.Extended == 1) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800687c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d02b      	beq.n	80068de <PolicySinkReady+0x146>
      switch (port->policy_rx_header_.MessageType) {
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800688c:	f3c3 0304 	ubfx	r3, r3, #0, #5
            port->policy_rx_data_obj_[0].byte[0];
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
        port->protocol_ext_header_.byte[0] =
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
            port->policy_rx_data_obj_[0].byte[1];
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 2161 	ldrb.w	r2, [r3, #353]	; 0x161
        port->protocol_ext_header_.byte[1] =
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
        if (port->protocol_ext_header_.DataSize > MAX_EXT_MSG_LEGACY_LEN) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b1a      	cmp	r3, #26
 80068b6:	d904      	bls.n	80068c2 <PolicySinkReady+0x12a>
          port->wait_for_not_supported_ = TRUE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 80068c0:	e003      	b.n	80068ca <PolicySinkReady+0x132>
          port->wait_for_not_supported_ = FALSE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
        set_policy_state(port, PE_SNK_Send_Not_Supported);
 80068ca:	211f      	movs	r1, #31
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f002 feaf 	bl	8009630 <set_policy_state>
        break;
 80068d2:	bf00      	nop
      port->pd_tx_status_ = txIdle;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 80068dc:	e146      	b.n	8006b6c <PolicySinkReady+0x3d4>
      switch (port->policy_rx_header_.MessageType) {
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80068e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	2b0e      	cmp	r3, #14
 80068ee:	d832      	bhi.n	8006956 <PolicySinkReady+0x1be>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <PolicySinkReady+0x160>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	08006935 	.word	0x08006935
 80068fc:	08006957 	.word	0x08006957
 8006900:	0800694f 	.word	0x0800694f
 8006904:	08006961 	.word	0x08006961
 8006908:	08006957 	.word	0x08006957
 800690c:	08006957 	.word	0x08006957
 8006910:	08006957 	.word	0x08006957
 8006914:	08006957 	.word	0x08006957
 8006918:	08006957 	.word	0x08006957
 800691c:	08006957 	.word	0x08006957
 8006920:	08006957 	.word	0x08006957
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
 800692c:	08006957 	.word	0x08006957
 8006930:	08006947 	.word	0x08006947
          UpdateCapabilitiesRx(port, TRUE);
 8006934:	2101      	movs	r1, #1
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fedd 	bl	80076f6 <UpdateCapabilitiesRx>
          set_policy_state(port, PE_SNK_Evaluate_Capability);
 800693c:	2110      	movs	r1, #16
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f002 fe76 	bl	8009630 <set_policy_state>
          break;
 8006944:	e00d      	b.n	8006962 <PolicySinkReady+0x1ca>
          ConvertAndProcessVdmMessage(port);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f004 fc46 	bl	800b1d8 <ConvertAndProcessVdmMessage>
          break;
 800694c:	e009      	b.n	8006962 <PolicySinkReady+0x1ca>
          ProcessDmtBist(port);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fa4c 	bl	8007dec <ProcessDmtBist>
          break;
 8006954:	e005      	b.n	8006962 <PolicySinkReady+0x1ca>
          set_policy_state(port, PE_SNK_Send_Not_Supported);
 8006956:	211f      	movs	r1, #31
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f002 fe69 	bl	8009630 <set_policy_state>
          break;
 800695e:	e000      	b.n	8006962 <PolicySinkReady+0x1ca>
          break;
 8006960:	bf00      	nop
      port->pd_tx_status_ = txIdle;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 800696a:	e0ff      	b.n	8006b6c <PolicySinkReady+0x3d4>
  else if (port->pd_tx_flag_) {
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8006972:	2b00      	cmp	r3, #0
 8006974:	d072      	beq.n	8006a5c <PolicySinkReady+0x2c4>
    if (port->pd_transmit_header_.NumDataObjects == 0) {
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800697c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d14b      	bne.n	8006a1e <PolicySinkReady+0x286>
      switch (port->pd_transmit_header_.MessageType) {
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 800698c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006990:	b2db      	uxtb	r3, r3
 8006992:	3b07      	subs	r3, #7
 8006994:	2b0d      	cmp	r3, #13
 8006996:	d83c      	bhi.n	8006a12 <PolicySinkReady+0x27a>
 8006998:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <PolicySinkReady+0x208>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069d9 	.word	0x080069d9
 80069a4:	080069e3 	.word	0x080069e3
 80069a8:	080069ed 	.word	0x080069ed
 80069ac:	08006a13 	.word	0x08006a13
 80069b0:	080069f7 	.word	0x080069f7
 80069b4:	08006a13 	.word	0x08006a13
 80069b8:	08006a01 	.word	0x08006a01
 80069bc:	08006a13 	.word	0x08006a13
 80069c0:	08006a13 	.word	0x08006a13
 80069c4:	08006a13 	.word	0x08006a13
 80069c8:	08006a13 	.word	0x08006a13
 80069cc:	08006a13 	.word	0x08006a13
 80069d0:	08006a13 	.word	0x08006a13
 80069d4:	08006a0b 	.word	0x08006a0b
          set_policy_state(port, PE_SNK_Get_Source_Cap);
 80069d8:	2117      	movs	r1, #23
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f002 fe28 	bl	8009630 <set_policy_state>
          break;
 80069e0:	e018      	b.n	8006a14 <PolicySinkReady+0x27c>
          set_policy_state(port, PE_DR_SNK_Get_Sink_Cap);
 80069e2:	2165      	movs	r1, #101	; 0x65
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f002 fe23 	bl	8009630 <set_policy_state>
          break;
 80069ea:	e013      	b.n	8006a14 <PolicySinkReady+0x27c>
          set_policy_state(port, PE_DRS_UFP_DFP_Send_Swap);
 80069ec:	2147      	movs	r1, #71	; 0x47
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f002 fe1e 	bl	8009630 <set_policy_state>
          break;
 80069f4:	e00e      	b.n	8006a14 <PolicySinkReady+0x27c>
          set_policy_state(port, PE_VCS_Send_Swap);
 80069f6:	2169      	movs	r1, #105	; 0x69
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f002 fe19 	bl	8009630 <set_policy_state>
          break;
 80069fe:	e009      	b.n	8006a14 <PolicySinkReady+0x27c>
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8006a00:	211a      	movs	r1, #26
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f002 fe14 	bl	8009630 <set_policy_state>
          break;
 8006a08:	e004      	b.n	8006a14 <PolicySinkReady+0x27c>
          set_policy_state(port, PE_SNK_Get_PPS_Status);
 8006a0a:	212d      	movs	r1, #45	; 0x2d
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f002 fe0f 	bl	8009630 <set_policy_state>
          break;
 8006a12:	bf00      	nop
      port->pd_tx_status_ = txIdle;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8006a1c:	e019      	b.n	8006a52 <PolicySinkReady+0x2ba>
      switch (port->pd_transmit_header_.MessageType) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8006a24:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d002      	beq.n	8006a34 <PolicySinkReady+0x29c>
 8006a2e:	2b0f      	cmp	r3, #15
 8006a30:	d00b      	beq.n	8006a4a <PolicySinkReady+0x2b2>
          break;
 8006a32:	e00e      	b.n	8006a52 <PolicySinkReady+0x2ba>
          port->sink_request_.object = port->pd_transmit_objects_[0].object;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
          set_policy_state(port, PE_SNK_Select_Capability);
 8006a40:	2111      	movs	r1, #17
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f002 fdf4 	bl	8009630 <set_policy_state>
          break;
 8006a48:	e003      	b.n	8006a52 <PolicySinkReady+0x2ba>
          DoVdmCommand(port);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f004 fbff 	bl	800b24e <DoVdmCommand>
          break;
 8006a50:	bf00      	nop
    port->pd_tx_flag_ = FALSE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
}
 8006a5a:	e087      	b.n	8006b6c <PolicySinkReady+0x3d4>
  else if (port->cbl_rst_state_ > CBL_RST_DISABLED)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <PolicySinkReady+0x2d6>
    ProcessCableResetState(port);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fabc 	bl	8007fe4 <ProcessCableResetState>
}
 8006a6c:	e07e      	b.n	8006b6c <PolicySinkReady+0x3d4>
  else if ((port->port_type_ == USBTypeC_DRP) &&
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d111      	bne.n	8006a9c <PolicySinkReady+0x304>
           (port->req_pr_swap_as_snk_ == TRUE) &&
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
  else if ((port->port_type_ == USBTypeC_DRP) &&
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d10c      	bne.n	8006a9c <PolicySinkReady+0x304>
           (port->partner_caps_.FPDOSupply.DualRolePower == TRUE))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 323f 	ldrb.w	r3, [r3, #575]	; 0x23f
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	b2db      	uxtb	r3, r3
           (port->req_pr_swap_as_snk_ == TRUE) &&
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <PolicySinkReady+0x304>
    set_policy_state(port, PE_PRS_SNK_SRC_Send_Swap);
 8006a92:	2155      	movs	r1, #85	; 0x55
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f002 fdcb 	bl	8009630 <set_policy_state>
 8006a9a:	e067      	b.n	8006b6c <PolicySinkReady+0x3d4>
  else if (port->req_vconn_swap_to_on_as_sink_ == TRUE &&
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d104      	bne.n	8006ab0 <PolicySinkReady+0x318>
           GetVConn(port) == FALSE &&
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f002 fa46 	bl	8008f38 <GetVConn>
 8006aac:	4603      	mov	r3, r0
  else if (port->req_vconn_swap_to_on_as_sink_ == TRUE &&
 8006aae:	2b00      	cmp	r3, #0
  else if (port->vdm_check_cbl_ && DPM_IsSOPPAllowed(port)) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 329a 	ldrb.w	r3, [r3, #666]	; 0x29a
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <PolicySinkReady+0x340>
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fe fc92 	bl	80053e4 <DPM_IsSOPPAllowed>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <PolicySinkReady+0x340>
    RequestDiscoverIdentity(port, SOP_TYPE_SOP1);
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f004 fd19 	bl	800b500 <RequestDiscoverIdentity>
    port->vdm_check_cbl_ = FALSE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 8006ad6:	e049      	b.n	8006b6c <PolicySinkReady+0x3d4>
  else if (port->policy_is_dfp_ == TRUE &&
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d108      	bne.n	8006af4 <PolicySinkReady+0x35c>
      port->vdm_auto_state_ != AUTO_VDM_DONE) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if (port->policy_is_dfp_ == TRUE &&
 8006ae8:	2b07      	cmp	r3, #7
 8006aea:	d003      	beq.n	8006af4 <PolicySinkReady+0x35c>
    AutoVdmDiscovery(port);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f004 fc21 	bl	800b334 <AutoVdmDiscovery>
 8006af2:	e03b      	b.n	8006b6c <PolicySinkReady+0x3d4>
  else if (port->renegotiate_) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <PolicySinkReady+0x37c>
    port->renegotiate_ = FALSE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    set_policy_state(port, PE_SNK_Evaluate_Capability);
 8006b06:	2110      	movs	r1, #16
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f002 fd91 	bl	8009630 <set_policy_state>
}
 8006b0e:	e02d      	b.n	8006b6c <PolicySinkReady+0x3d4>
 8006b10:	0007a120 	.word	0x0007a120
  else if (port->source_is_apdo_ && TimerExpired(&port->pps_timer_)) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d017      	beq.n	8006b4e <PolicySinkReady+0x3b6>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	33e0      	adds	r3, #224	; 0xe0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f003 fcde 	bl	800a4e4 <TimerExpired>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00f      	beq.n	8006b4e <PolicySinkReady+0x3b6>
    TimerDisable(&port->pps_timer_);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	33e0      	adds	r3, #224	; 0xe0
 8006b32:	4618      	mov	r0, r3
 8006b34:	f003 fcaa 	bl	800a48c <TimerDisable>
    port->sink_request_.object = port->stored_apdo_.object;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    set_policy_state(port, PE_SNK_Select_Capability);
 8006b44:	2111      	movs	r1, #17
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 fd72 	bl	8009630 <set_policy_state>
 8006b4c:	e00e      	b.n	8006b6c <PolicySinkReady+0x3d4>
    port->idle_ = TRUE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    TimerDisable(&port->policy_state_timer_);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	338c      	adds	r3, #140	; 0x8c
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f003 fc96 	bl	800a48c <TimerDisable>
    TimerDisable(&port->no_response_timer_);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	33bc      	adds	r3, #188	; 0xbc
 8006b64:	4618      	mov	r0, r3
 8006b66:	f003 fc91 	bl	800a48c <TimerDisable>
}
 8006b6a:	e7ff      	b.n	8006b6c <PolicySinkReady+0x3d4>
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <PolicySinkGetSinkCap>:

void PolicySinkGetSinkCap(struct Port *port)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af04      	add	r7, sp, #16
 8006b7a:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <PolicySinkGetSinkCap+0x18>
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d019      	beq.n	8006bbe <PolicySinkGetSinkCap+0x4a>
 8006b8a:	e074      	b.n	8006c76 <PolicySinkGetSinkCap+0x102>
    case 0:
      if (PolicySend(port, CMTGetSinkCap, 0, 0, PE_DR_SNK_Get_Sink_Cap,
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9303      	str	r3, [sp, #12]
 8006b90:	2300      	movs	r3, #0
 8006b92:	9302      	str	r3, [sp, #8]
 8006b94:	2301      	movs	r3, #1
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	2365      	movs	r3, #101	; 0x65
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2108      	movs	r1, #8
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 ff3c 	bl	8007a20 <PolicySend>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d168      	bne.n	8006c80 <PolicySinkGetSinkCap+0x10c>
                     1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	338c      	adds	r3, #140	; 0x8c
 8006bb2:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f003 fc4a 	bl	800a450 <TimerStart>
      }
      break;
 8006bbc:	e060      	b.n	8006c80 <PolicySinkGetSinkCap+0x10c>
    case 1:
      if (port->protocol_msg_rx_) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d03e      	beq.n	8006c46 <PolicySinkGetSinkCap+0xd2>
        port->protocol_msg_rx_ = FALSE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        port->pd_tx_status_ = txIdle;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00c      	beq.n	8006c02 <PolicySinkGetSinkCap+0x8e>
            (port->policy_rx_header_.MessageType == DMTSinkCapabilities)) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	b2db      	uxtb	r3, r3
        if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d104      	bne.n	8006c02 <PolicySinkGetSinkCap+0x8e>
          /* Process new sink caps here if necessary */
          set_policy_state(port, PE_SNK_Ready);
 8006bf8:	2113      	movs	r1, #19
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f002 fd18 	bl	8009630 <set_policy_state>
 8006c00:	e038      	b.n	8006c74 <PolicySinkGetSinkCap+0x100>
        }
        else if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d114      	bne.n	8006c3c <PolicySinkGetSinkCap+0xc8>
                 (port->policy_rx_header_.MessageType == CMTReject ||
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	b2db      	uxtb	r3, r3
        else if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d007      	beq.n	8006c32 <PolicySinkGetSinkCap+0xbe>
                  port->policy_rx_header_.MessageType == CMTNotSupported)) {
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	b2db      	uxtb	r3, r3
                 (port->policy_rx_header_.MessageType == CMTReject ||
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d104      	bne.n	8006c3c <PolicySinkGetSinkCap+0xc8>
          set_policy_state(port, PE_SNK_Ready);
 8006c32:	2113      	movs	r1, #19
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f002 fcfb 	bl	8009630 <set_policy_state>
 8006c3a:	e01b      	b.n	8006c74 <PolicySinkGetSinkCap+0x100>
        }
        else {
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8006c3c:	211a      	movs	r1, #26
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f002 fcf6 	bl	8009630 <set_policy_state>
        set_policy_state(port, PE_SNK_Ready);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8006c44:	e01d      	b.n	8006c82 <PolicySinkGetSinkCap+0x10e>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	338c      	adds	r3, #140	; 0x8c
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f003 fc4a 	bl	800a4e4 <TimerExpired>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <PolicySinkGetSinkCap+0xf6>
        TimerDisable(&port->policy_state_timer_);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	338c      	adds	r3, #140	; 0x8c
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f003 fc16 	bl	800a48c <TimerDisable>
        set_policy_state(port, PE_SNK_Ready);
 8006c60:	2113      	movs	r1, #19
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f002 fce4 	bl	8009630 <set_policy_state>
      break;
 8006c68:	e00b      	b.n	8006c82 <PolicySinkGetSinkCap+0x10e>
        port->idle_ = TRUE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8006c72:	e006      	b.n	8006c82 <PolicySinkGetSinkCap+0x10e>
 8006c74:	e005      	b.n	8006c82 <PolicySinkGetSinkCap+0x10e>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8006c76:	21a6      	movs	r1, #166	; 0xa6
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f002 fcd9 	bl	8009630 <set_policy_state>
      break;
 8006c7e:	e000      	b.n	8006c82 <PolicySinkGetSinkCap+0x10e>
      break;
 8006c80:	bf00      	nop
  }
}
 8006c82:	bf00      	nop
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <PolicySinkGiveSinkCap>:

void PolicySinkGiveSinkCap(struct Port *port)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b086      	sub	sp, #24
 8006c8e:	af04      	add	r7, sp, #16
 8006c90:	6078      	str	r0, [r7, #4]
  PolicySend(port, DMTSinkCapabilities,
             port->caps_header_sink_.NumDataObjects * 4,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8006c98:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006c9c:	b2db      	uxtb	r3, r3
  PolicySend(port, DMTSinkCapabilities,
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	b29a      	uxth	r2, r3
             (FSC_U8 *)port->caps_sink_, PE_SNK_Ready, 0, SOP_TYPE_SOP, FALSE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
  PolicySend(port, DMTSinkCapabilities,
 8006caa:	2300      	movs	r3, #0
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9302      	str	r3, [sp, #8]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	2313      	movs	r3, #19
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	2104      	movs	r1, #4
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 feae 	bl	8007a20 <PolicySend>
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <PolicySinkGetSourceCap>:

void PolicySinkGetSourceCap(struct Port *port)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af04      	add	r7, sp, #16
 8006cd2:	6078      	str	r0, [r7, #4]
    switch (port->policy_subindex_) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <PolicySinkGetSourceCap+0x18>
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d019      	beq.n	8006d16 <PolicySinkGetSourceCap+0x4a>
 8006ce2:	e063      	b.n	8006dac <PolicySinkGetSourceCap+0xe0>
      case 0:
        if (PolicySend(port, CMTGetSourceCap, 0, 0, PE_SNK_Get_Source_Cap,
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	9302      	str	r3, [sp, #8]
 8006cec:	2301      	movs	r3, #1
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	2317      	movs	r3, #23
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2107      	movs	r1, #7
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fe90 	bl	8007a20 <PolicySend>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d157      	bne.n	8006db6 <PolicySinkGetSourceCap+0xea>
                       1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
          TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	338c      	adds	r3, #140	; 0x8c
 8006d0a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f003 fb9e 	bl	800a450 <TimerStart>
        }
        break;
 8006d14:	e04f      	b.n	8006db6 <PolicySinkGetSourceCap+0xea>
      case 1:
        if (port->protocol_msg_rx_) {
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02e      	beq.n	8006d7e <PolicySinkGetSourceCap+0xb2>
          port->protocol_msg_rx_ = FALSE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
          port->pd_tx_status_ = txIdle;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
          if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d019      	beq.n	8006d74 <PolicySinkGetSourceCap+0xa8>
              (port->policy_rx_header_.MessageType == DMTSourceCapabilities)) {
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	b2db      	uxtb	r3, r3
          if ((port->policy_rx_header_.NumDataObjects > 0) &&
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d111      	bne.n	8006d74 <PolicySinkGetSourceCap+0xa8>
            UpdateCapabilitiesRx(port, FALSE);
 8006d50:	2100      	movs	r1, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fccf 	bl	80076f6 <UpdateCapabilitiesRx>
            TimerDisable(&port->policy_state_timer_);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	338c      	adds	r3, #140	; 0x8c
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f003 fb95 	bl	800a48c <TimerDisable>
            port->partner_caps_available_ = TRUE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
            set_policy_state(port, PE_SNK_Evaluate_Capability);
 8006d6a:	2110      	movs	r1, #16
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 fc5f 	bl	8009630 <set_policy_state>
          set_policy_state(port, PE_SNK_Ready);
        }
        else {
          port->idle_ = TRUE;
        }
        break;
 8006d72:	e021      	b.n	8006db8 <PolicySinkGetSourceCap+0xec>
              set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8006d74:	211a      	movs	r1, #26
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f002 fc5a 	bl	8009630 <set_policy_state>
        break;
 8006d7c:	e01c      	b.n	8006db8 <PolicySinkGetSourceCap+0xec>
        else if (TimerExpired(&port->policy_state_timer_)) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	338c      	adds	r3, #140	; 0x8c
 8006d82:	4618      	mov	r0, r3
 8006d84:	f003 fbae 	bl	800a4e4 <TimerExpired>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <PolicySinkGetSourceCap+0xd6>
          TimerDisable(&port->policy_state_timer_);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	338c      	adds	r3, #140	; 0x8c
 8006d92:	4618      	mov	r0, r3
 8006d94:	f003 fb7a 	bl	800a48c <TimerDisable>
          set_policy_state(port, PE_SNK_Ready);
 8006d98:	2113      	movs	r1, #19
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f002 fc48 	bl	8009630 <set_policy_state>
        break;
 8006da0:	e00a      	b.n	8006db8 <PolicySinkGetSourceCap+0xec>
          port->idle_ = TRUE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 8006daa:	e005      	b.n	8006db8 <PolicySinkGetSourceCap+0xec>
      default:
        set_policy_state(port, PE_ErrorRecovery);
 8006dac:	21a6      	movs	r1, #166	; 0xa6
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f002 fc3e 	bl	8009630 <set_policy_state>
        break;
 8006db4:	e000      	b.n	8006db8 <PolicySinkGetSourceCap+0xec>
        break;
 8006db6:	bf00      	nop
    }
}
 8006db8:	bf00      	nop
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <PolicySinkGiveSourceCap>:

void PolicySinkGiveSourceCap(struct Port *port)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
               port->caps_header_source_.NumDataObjects * 4,
               (FSC_U8 *)port->caps_source_,
               PE_SNK_Ready, 0, SOP_TYPE_SOP, FALSE);
  else
#endif /* FSC_HAVE_DRP */
    PolicySendNotSupported(port);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fb5a 	bl	8007482 <PolicySendNotSupported>
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <PolicySinkSendDRSwap>:

void PolicySinkSendDRSwap(struct Port *port)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b086      	sub	sp, #24
 8006dda:	af04      	add	r7, sp, #16
 8006ddc:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <PolicySinkSendDRSwap+0x18>
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d01a      	beq.n	8006e22 <PolicySinkSendDRSwap+0x4c>
 8006dec:	e09a      	b.n	8006f24 <PolicySinkSendDRSwap+0x14e>
    case 0:
      if (PolicySend(port, CMTDR_Swap, 0, 0, PE_DRS_UFP_DFP_Send_Swap,
 8006dee:	2300      	movs	r3, #0
 8006df0:	9303      	str	r3, [sp, #12]
 8006df2:	2300      	movs	r3, #0
 8006df4:	9302      	str	r3, [sp, #8]
 8006df6:	2301      	movs	r3, #1
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	2347      	movs	r3, #71	; 0x47
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2200      	movs	r2, #0
 8006e02:	2109      	movs	r1, #9
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fe0b 	bl	8007a20 <PolicySend>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	f040 808e 	bne.w	8006f2e <PolicySinkSendDRSwap+0x158>
                          1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	338c      	adds	r3, #140	; 0x8c
 8006e16:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f003 fb18 	bl	800a450 <TimerStart>
      }
      break;
 8006e20:	e085      	b.n	8006f2e <PolicySinkSendDRSwap+0x158>
    case 1:
      if (port->protocol_msg_rx_) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d060      	beq.n	8006eee <PolicySinkSendDRSwap+0x118>
        port->protocol_msg_rx_ = FALSE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d14b      	bne.n	8006edc <PolicySinkSendDRSwap+0x106>
          switch (port->policy_rx_header_.MessageType) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006e4a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d002      	beq.n	8006e5a <PolicySinkSendDRSwap+0x84>
 8006e54:	2b0d      	cmp	r3, #13
 8006e56:	d036      	beq.n	8006ec6 <PolicySinkSendDRSwap+0xf0>
 8006e58:	e03a      	b.n	8006ed0 <PolicySinkSendDRSwap+0xfa>
            case CMTAccept:
              port->policy_is_dfp_ =
                  (port->policy_is_dfp_ == TRUE) ? FALSE : TRUE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	bf14      	ite	ne
 8006e64:	2301      	movne	r3, #1
 8006e66:	2300      	moveq	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	461a      	mov	r2, r3
              port->policy_is_dfp_ =
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
              port->registers_.MsgHeadr.DATA_ROLE = port->policy_is_dfp_;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	b2d9      	uxtb	r1, r3
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8006e84:	f361 03c3 	bfi	r3, r1, #3, #1
 8006e88:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
              WriteRegister(port, regMSGHEADR);
 8006e8c:	212e      	movs	r1, #46	; 0x2e
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fd34 	bl	80088fc <WriteRegister>
              DPM_ReConfigureRxDetect(port);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7fe fab0 	bl	80053fa <DPM_ReConfigureRxDetect>
              notify_observers(port->policy_is_dfp_ == TRUE
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d102      	bne.n	8006eaa <PolicySinkSendDRSwap+0xd4>
 8006ea4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006ea8:	e001      	b.n	8006eae <PolicySinkSendDRSwap+0xd8>
 8006eaa:	f44f 7000 	mov.w	r0, #512	; 0x200
                               ? EVENT_DATA_ROLE_DFP : EVENT_DATA_ROLE_UFP,
                               port->port_id_, 0);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
              notify_observers(port->policy_is_dfp_ == TRUE
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	f7fe faba 	bl	8005430 <notify_observers>
              set_policy_state(port, PE_SNK_Ready);
 8006ebc:	2113      	movs	r1, #19
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f002 fbb6 	bl	8009630 <set_policy_state>
              break;
 8006ec4:	e00e      	b.n	8006ee4 <PolicySinkSendDRSwap+0x10e>
            case CMTSoftReset:
              set_policy_state(port, PE_SNK_Soft_Reset);
 8006ec6:	211b      	movs	r1, #27
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f002 fbb1 	bl	8009630 <set_policy_state>
              break;
 8006ece:	e009      	b.n	8006ee4 <PolicySinkSendDRSwap+0x10e>
            default:
              set_policy_state(port, PE_SNK_Ready);
 8006ed0:	2113      	movs	r1, #19
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f002 fbac 	bl	8009630 <set_policy_state>
              break;
 8006ed8:	bf00      	nop
 8006eda:	e003      	b.n	8006ee4 <PolicySinkSendDRSwap+0x10e>
          }
        }
        else {
          set_policy_state(port, PE_SNK_Ready);
 8006edc:	2113      	movs	r1, #19
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f002 fba6 	bl	8009630 <set_policy_state>
        }
        port->pd_tx_status_ = txIdle;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        port->pd_tx_status_ = txIdle;
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8006eec:	e020      	b.n	8006f30 <PolicySinkSendDRSwap+0x15a>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	338c      	adds	r3, #140	; 0x8c
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f003 faf6 	bl	800a4e4 <TimerExpired>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <PolicySinkSendDRSwap+0x144>
        TimerDisable(&port->policy_state_timer_);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	338c      	adds	r3, #140	; 0x8c
 8006f02:	4618      	mov	r0, r3
 8006f04:	f003 fac2 	bl	800a48c <TimerDisable>
        set_policy_state(port, PE_SNK_Ready);
 8006f08:	2113      	movs	r1, #19
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f002 fb90 	bl	8009630 <set_policy_state>
        port->pd_tx_status_ = txIdle;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      break;
 8006f18:	e00a      	b.n	8006f30 <PolicySinkSendDRSwap+0x15a>
        port->idle_ = TRUE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8006f22:	e005      	b.n	8006f30 <PolicySinkSendDRSwap+0x15a>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8006f24:	21a6      	movs	r1, #166	; 0xa6
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f002 fb82 	bl	8009630 <set_policy_state>
      break;
 8006f2c:	e000      	b.n	8006f30 <PolicySinkSendDRSwap+0x15a>
      break;
 8006f2e:	bf00      	nop
  }
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <PolicySinkEvaluateDRSwap>:

void PolicySinkEvaluateDRSwap(struct Port *port)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af04      	add	r7, sp, #16
 8006f3e:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_VDM
  if (port->mode_entered_ == TRUE) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d103      	bne.n	8006f52 <PolicySinkEvaluateDRSwap+0x1a>
    PolicySinkSendHardReset(port);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fe fd6f 	bl	8005a2e <PolicySinkSendHardReset>
    return;
 8006f50:	e054      	b.n	8006ffc <PolicySinkEvaluateDRSwap+0xc4>
  }
#endif /* FSC_HAVE_VDM */
  if ((port->protocol_msg_rx_sop_ != SOP_TYPE_SOP) ||
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <PolicySinkEvaluateDRSwap+0x38>
      (port->policy_is_dfp_ && !DR_Swap_To_UFP_Supported) ||
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
  if ((port->protocol_msg_rx_sop_ != SOP_TYPE_SOP) ||
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <PolicySinkEvaluateDRSwap+0x38>
      (!port->policy_is_dfp_ && !DR_Swap_To_DFP_Supported)) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
      (port->policy_is_dfp_ && !DR_Swap_To_UFP_Supported) ||
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <PolicySinkEvaluateDRSwap+0x40>
    PolicySendNotSupported(port);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fa86 	bl	8007482 <PolicySendNotSupported>
 8006f76:	e041      	b.n	8006ffc <PolicySinkEvaluateDRSwap+0xc4>
  }
  else
  {
    if (PolicySend(port, CMTAccept, 0, 0, PE_SNK_Ready,
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9303      	str	r3, [sp, #12]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9302      	str	r3, [sp, #8]
 8006f80:	2300      	movs	r3, #0
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	2313      	movs	r3, #19
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2103      	movs	r1, #3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fd46 	bl	8007a20 <PolicySend>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d130      	bne.n	8006ffc <PolicySinkEvaluateDRSwap+0xc4>
            0, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
      port->policy_is_dfp_ = (port->policy_is_dfp_ == TRUE) ? FALSE : TRUE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      port->registers_.MsgHeadr.DATA_ROLE = port->policy_is_dfp_;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	b2d9      	uxtb	r1, r3
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8006fc4:	f361 03c3 	bfi	r3, r1, #3, #1
 8006fc8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
      WriteRegister(port, regMSGHEADR);
 8006fcc:	212e      	movs	r1, #46	; 0x2e
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 fc94 	bl	80088fc <WriteRegister>
      DPM_ReConfigureRxDetect(port);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7fe fa10 	bl	80053fa <DPM_ReConfigureRxDetect>
      notify_observers(port->policy_is_dfp_ == TRUE
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d102      	bne.n	8006fea <PolicySinkEvaluateDRSwap+0xb2>
 8006fe4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006fe8:	e001      	b.n	8006fee <PolicySinkEvaluateDRSwap+0xb6>
 8006fea:	f44f 7000 	mov.w	r0, #512	; 0x200
                       ? EVENT_DATA_ROLE_DFP : EVENT_DATA_ROLE_UFP,
                       port->port_id_, 0);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
      notify_observers(port->policy_is_dfp_ == TRUE
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f7fe fa1a 	bl	8005430 <notify_observers>
    }
  }
}
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <PolicySinkSendVCONNSwap>:

void PolicySinkSendVCONNSwap(struct Port *port)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af04      	add	r7, sp, #16
 800700a:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007012:	2b04      	cmp	r3, #4
 8007014:	f200 812a 	bhi.w	800726c <PolicySinkSendVCONNSwap+0x268>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <PolicySinkSendVCONNSwap+0x1c>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007035 	.word	0x08007035
 8007024:	08007069 	.word	0x08007069
 8007028:	08007163 	.word	0x08007163
 800702c:	080071a5 	.word	0x080071a5
 8007030:	0800722b 	.word	0x0800722b
    case 0:
      if (PolicySend(port, CMTVCONN_Swap, 0, 0, PE_VCS_Send_Swap,
 8007034:	2300      	movs	r3, #0
 8007036:	9303      	str	r3, [sp, #12]
 8007038:	2300      	movs	r3, #0
 800703a:	9302      	str	r3, [sp, #8]
 800703c:	2301      	movs	r3, #1
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	2369      	movs	r3, #105	; 0x69
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	2300      	movs	r3, #0
 8007046:	2200      	movs	r2, #0
 8007048:	210b      	movs	r1, #11
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fce8 	bl	8007a20 <PolicySend>
 8007050:	4603      	mov	r3, r0
 8007052:	2b01      	cmp	r3, #1
 8007054:	f040 810f 	bne.w	8007276 <PolicySinkSendVCONNSwap+0x272>
                     1, SOP_TYPE_SOP, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	338c      	adds	r3, #140	; 0x8c
 800705c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8007060:	4618      	mov	r0, r3
 8007062:	f003 f9f5 	bl	800a450 <TimerStart>
      }
      break;
 8007066:	e106      	b.n	8007276 <PolicySinkSendVCONNSwap+0x272>
    case 1:
      if (port->protocol_msg_rx_) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d058      	beq.n	8007124 <PolicySinkSendVCONNSwap+0x120>
        port->protocol_msg_rx_ = FALSE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8007080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d167      	bne.n	800715a <PolicySinkSendVCONNSwap+0x156>
          switch (port->policy_rx_header_.MessageType) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007090:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007094:	b2db      	uxtb	r3, r3
 8007096:	3b03      	subs	r3, #3
 8007098:	2b0d      	cmp	r3, #13
 800709a:	d860      	bhi.n	800715e <PolicySinkSendVCONNSwap+0x15a>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <PolicySinkSendVCONNSwap+0xa0>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070dd 	.word	0x080070dd
 80070a8:	080070f9 	.word	0x080070f9
 80070ac:	0800715f 	.word	0x0800715f
 80070b0:	0800715f 	.word	0x0800715f
 80070b4:	0800715f 	.word	0x0800715f
 80070b8:	0800715f 	.word	0x0800715f
 80070bc:	0800715f 	.word	0x0800715f
 80070c0:	0800715f 	.word	0x0800715f
 80070c4:	0800715f 	.word	0x0800715f
 80070c8:	08007113 	.word	0x08007113
 80070cc:	0800715f 	.word	0x0800715f
 80070d0:	0800715f 	.word	0x0800715f
 80070d4:	0800715f 	.word	0x0800715f
 80070d8:	080070f9 	.word	0x080070f9
            case CMTAccept:
              port->policy_subindex_++;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80070e2:	3301      	adds	r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
              TimerDisable(&port->policy_state_timer_);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	338c      	adds	r3, #140	; 0x8c
 80070f0:	4618      	mov	r0, r3
 80070f2:	f003 f9cb 	bl	800a48c <TimerDisable>
              break;
 80070f6:	e033      	b.n	8007160 <PolicySinkSendVCONNSwap+0x15c>
            case CMTReject:
            case CMTNotSupported:
              /* If needed, can force becoming the VConn Source */
              if (port->is_vconn_source_ == FALSE) {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d107      	bne.n	8007112 <PolicySinkSendVCONNSwap+0x10e>
                port->is_vconn_source_ = TRUE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
                SetVConn(port, TRUE);
 800710a:	2101      	movs	r1, #1
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 fef7 	bl	8008f00 <SetVConn>
              }
              /* Fall through */
            case CMTWait:
              set_policy_state(port, PE_SNK_Ready);
 8007112:	2113      	movs	r1, #19
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f002 fa8b 	bl	8009630 <set_policy_state>
              port->pd_tx_status_ = txIdle;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
              break;
 8007122:	e01d      	b.n	8007160 <PolicySinkSendVCONNSwap+0x15c>
              /* Ignore all other commands */
              break;
          }
        }
      }
      else if (TimerExpired(&port->policy_state_timer_)) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	338c      	adds	r3, #140	; 0x8c
 8007128:	4618      	mov	r0, r3
 800712a:	f003 f9db 	bl	800a4e4 <TimerExpired>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00d      	beq.n	8007150 <PolicySinkSendVCONNSwap+0x14c>
        TimerDisable(&port->policy_state_timer_);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	338c      	adds	r3, #140	; 0x8c
 8007138:	4618      	mov	r0, r3
 800713a:	f003 f9a7 	bl	800a48c <TimerDisable>
        set_policy_state(port, PE_SNK_Ready);
 800713e:	2113      	movs	r1, #19
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f002 fa75 	bl	8009630 <set_policy_state>
        port->pd_tx_status_ = txIdle;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 800714e:	e093      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
        port->idle_ = TRUE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8007158:	e08e      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
        }
 800715a:	bf00      	nop
 800715c:	e08c      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
              break;
 800715e:	bf00      	nop
      break;
 8007160:	e08a      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
    case 2:
      if (port->is_vconn_source_) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <PolicySinkSendVCONNSwap+0x186>
        TimerStart(&port->policy_state_timer_, ktVCONNSourceOn);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	338c      	adds	r3, #140	; 0x8c
 8007170:	4943      	ldr	r1, [pc, #268]	; (8007280 <PolicySinkSendVCONNSwap+0x27c>)
 8007172:	4618      	mov	r0, r3
 8007174:	f003 f96c 	bl	800a450 <TimerStart>
        port->policy_subindex_++;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800717e:	3301      	adds	r3, #1
 8007180:	b2da      	uxtb	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        SetVConn(port, TRUE);

        /* Skip next state and send the PS_RDY msg */
        port->policy_subindex_ = 4;
      }
      break;
 8007188:	e076      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
        port->is_vconn_source_ = TRUE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        SetVConn(port, TRUE);
 8007192:	2101      	movs	r1, #1
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 feb3 	bl	8008f00 <SetVConn>
        port->policy_subindex_ = 4;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2204      	movs	r2, #4
 800719e:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 80071a2:	e069      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
    case 3:
      if (port->protocol_msg_rx_) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d025      	beq.n	80071fa <PolicySinkSendVCONNSwap+0x1f6>
        port->protocol_msg_rx_ = FALSE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80071bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d12f      	bne.n	8007226 <PolicySinkSendVCONNSwap+0x222>
          switch (port->policy_rx_header_.MessageType) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80071cc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b06      	cmp	r3, #6
 80071d4:	d000      	beq.n	80071d8 <PolicySinkSendVCONNSwap+0x1d4>
              set_policy_state(port, PE_SNK_Ready);
              port->pd_tx_status_ = txIdle;
              break;
            default:
              /* Ignore all other commands received */
              break;
 80071d6:	e027      	b.n	8007228 <PolicySinkSendVCONNSwap+0x224>
              port->is_vconn_source_ = FALSE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
              SetVConn(port, FALSE);
 80071e0:	2100      	movs	r1, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fe8c 	bl	8008f00 <SetVConn>
              set_policy_state(port, PE_SNK_Ready);
 80071e8:	2113      	movs	r1, #19
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f002 fa20 	bl	8009630 <set_policy_state>
              port->pd_tx_status_ = txIdle;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
              break;
 80071f8:	e016      	b.n	8007228 <PolicySinkSendVCONNSwap+0x224>
          }
        }
      }
      else if (TimerExpired(&port->policy_state_timer_)) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	338c      	adds	r3, #140	; 0x8c
 80071fe:	4618      	mov	r0, r3
 8007200:	f003 f970 	bl	800a4e4 <TimerExpired>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d008      	beq.n	800721c <PolicySinkSendVCONNSwap+0x218>
        TimerDisable(&port->policy_state_timer_);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	338c      	adds	r3, #140	; 0x8c
 800720e:	4618      	mov	r0, r3
 8007210:	f003 f93c 	bl	800a48c <TimerDisable>
        PolicySinkSendHardReset(port);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7fe fc0a 	bl	8005a2e <PolicySinkSendHardReset>
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 800721a:	e02d      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
        port->idle_ = TRUE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8007224:	e028      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
        }
 8007226:	bf00      	nop
      break;
 8007228:	e026      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
    case 4:
      PolicySend(port, CMTPS_RDY, 0, 0, PE_SNK_Ready, 0, SOP_TYPE_SOP, FALSE);
 800722a:	2300      	movs	r3, #0
 800722c:	9303      	str	r3, [sp, #12]
 800722e:	2300      	movs	r3, #0
 8007230:	9302      	str	r3, [sp, #8]
 8007232:	2300      	movs	r3, #0
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	2313      	movs	r3, #19
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	2300      	movs	r3, #0
 800723c:	2200      	movs	r2, #0
 800723e:	2106      	movs	r1, #6
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fbed 	bl	8007a20 <PolicySend>
#ifdef FSC_HAVE_VDM
      port->vdm_check_cbl_ = (port->vdm_cbl_present_ == FALSE &&
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
                              DPM_IsSOPPAllowed(port)) ? TRUE : FALSE;
 800724c:	2b00      	cmp	r3, #0
 800724e:	d107      	bne.n	8007260 <PolicySinkSendVCONNSwap+0x25c>
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7fe f8c7 	bl	80053e4 <DPM_IsSOPPAllowed>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <PolicySinkSendVCONNSwap+0x25c>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <PolicySinkSendVCONNSwap+0x25e>
 8007260:	2300      	movs	r3, #0
 8007262:	b2da      	uxtb	r2, r3
      port->vdm_check_cbl_ = (port->vdm_cbl_present_ == FALSE &&
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
#endif /* FSC_HAVE_VDM */
      break;
 800726a:	e005      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 800726c:	21a6      	movs	r1, #166	; 0xa6
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f002 f9de 	bl	8009630 <set_policy_state>
      break;
 8007274:	e000      	b.n	8007278 <PolicySinkSendVCONNSwap+0x274>
      break;
 8007276:	bf00      	nop
  }
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	00015f90 	.word	0x00015f90

08007284 <PolicySinkEvaluateVCONNSwap>:

void PolicySinkEvaluateVCONNSwap(struct Port *port)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af04      	add	r7, sp, #16
 800728a:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007292:	2b03      	cmp	r3, #3
 8007294:	f200 80d3 	bhi.w	800743e <PolicySinkEvaluateVCONNSwap+0x1ba>
 8007298:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <PolicySinkEvaluateVCONNSwap+0x1c>)
 800729a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729e:	bf00      	nop
 80072a0:	080072b1 	.word	0x080072b1
 80072a4:	08007341 	.word	0x08007341
 80072a8:	080073c7 	.word	0x080073c7
 80072ac:	080073fd 	.word	0x080073fd
    case 0:
      if ((port->protocol_msg_rx_sop_ != SOP_TYPE_SOP) ||
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <PolicySinkEvaluateVCONNSwap+0x4a>
          (port->is_vconn_source_ && !VCONN_Swap_To_Off_Supported) ||
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
      if ((port->protocol_msg_rx_sop_ != SOP_TYPE_SOP) ||
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <PolicySinkEvaluateVCONNSwap+0x4a>
          (!port->is_vconn_source_ && !VCONN_Swap_To_On_Supported)) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
          (port->is_vconn_source_ && !VCONN_Swap_To_Off_Supported) ||
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <PolicySinkEvaluateVCONNSwap+0x52>
        PolicySendNotSupported(port);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8d7 	bl	8007482 <PolicySendNotSupported>

          TimerStart(&port->policy_state_timer_, port->vbus_transition_time_);
          port->policy_subindex_ = 2;
        }
      }
      break;
 80072d4:	e0b8      	b.n	8007448 <PolicySinkEvaluateVCONNSwap+0x1c4>
      else if (PolicySend(port, CMTAccept, 0, 0, PE_VCS_Evaluate_Swap,
 80072d6:	2300      	movs	r3, #0
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	2300      	movs	r3, #0
 80072dc:	9302      	str	r3, [sp, #8]
 80072de:	2301      	movs	r3, #1
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	236a      	movs	r3, #106	; 0x6a
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	2300      	movs	r3, #0
 80072e8:	2200      	movs	r2, #0
 80072ea:	2103      	movs	r1, #3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fb97 	bl	8007a20 <PolicySend>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	f040 80a7 	bne.w	8007448 <PolicySinkEvaluateVCONNSwap+0x1c4>
        if (port->is_vconn_source_) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <PolicySinkEvaluateVCONNSwap+0x8e>
          TimerStart(&port->policy_state_timer_, ktVCONNSourceOn);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	338c      	adds	r3, #140	; 0x8c
 8007308:	4952      	ldr	r1, [pc, #328]	; (8007454 <PolicySinkEvaluateVCONNSwap+0x1d0>)
 800730a:	4618      	mov	r0, r3
 800730c:	f003 f8a0 	bl	800a450 <TimerStart>
      break;
 8007310:	e09a      	b.n	8007448 <PolicySinkEvaluateVCONNSwap+0x1c4>
          port->is_vconn_source_ = TRUE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
          SetVConn(port, TRUE);
 800731a:	2101      	movs	r1, #1
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fdef 	bl	8008f00 <SetVConn>
          TimerStart(&port->policy_state_timer_, port->vbus_transition_time_);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f003 f88d 	bl	800a450 <TimerStart>
          port->policy_subindex_ = 2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 800733e:	e083      	b.n	8007448 <PolicySinkEvaluateVCONNSwap+0x1c4>
    case 1:
      if (port->protocol_msg_rx_) {
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d025      	beq.n	8007396 <PolicySinkEvaluateVCONNSwap+0x112>
       port->protocol_msg_rx_ = FALSE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        if (port->policy_rx_header_.NumDataObjects == 0) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8007358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d12f      	bne.n	80073c2 <PolicySinkEvaluateVCONNSwap+0x13e>
          switch (port->policy_rx_header_.MessageType) {
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007368:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b06      	cmp	r3, #6
 8007370:	d000      	beq.n	8007374 <PolicySinkEvaluateVCONNSwap+0xf0>

              set_policy_state(port, PE_SNK_Ready);
              port->pd_tx_status_ = txIdle;
              break;
            default:
              break;
 8007372:	e027      	b.n	80073c4 <PolicySinkEvaluateVCONNSwap+0x140>
              port->is_vconn_source_ = FALSE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
              SetVConn(port, FALSE);
 800737c:	2100      	movs	r1, #0
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fdbe 	bl	8008f00 <SetVConn>
              set_policy_state(port, PE_SNK_Ready);
 8007384:	2113      	movs	r1, #19
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 f952 	bl	8009630 <set_policy_state>
              port->pd_tx_status_ = txIdle;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
              break;
 8007394:	e016      	b.n	80073c4 <PolicySinkEvaluateVCONNSwap+0x140>
          }
        }
      }
      else if (TimerExpired(&port->policy_state_timer_)) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	338c      	adds	r3, #140	; 0x8c
 800739a:	4618      	mov	r0, r3
 800739c:	f003 f8a2 	bl	800a4e4 <TimerExpired>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <PolicySinkEvaluateVCONNSwap+0x134>
        TimerDisable(&port->policy_state_timer_);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	338c      	adds	r3, #140	; 0x8c
 80073aa:	4618      	mov	r0, r3
 80073ac:	f003 f86e 	bl	800a48c <TimerDisable>
        PolicySinkSendHardReset(port);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fe fb3c 	bl	8005a2e <PolicySinkSendHardReset>
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 80073b6:	e048      	b.n	800744a <PolicySinkEvaluateVCONNSwap+0x1c6>
        port->idle_ = TRUE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 80073c0:	e043      	b.n	800744a <PolicySinkEvaluateVCONNSwap+0x1c6>
        }
 80073c2:	bf00      	nop
      break;
 80073c4:	e041      	b.n	800744a <PolicySinkEvaluateVCONNSwap+0x1c6>
    case 2:
      if (TimerExpired(&port->policy_state_timer_)) {
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	338c      	adds	r3, #140	; 0x8c
 80073ca:	4618      	mov	r0, r3
 80073cc:	f003 f88a 	bl	800a4e4 <TimerExpired>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <PolicySinkEvaluateVCONNSwap+0x16e>
        TimerDisable(&port->policy_state_timer_);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	338c      	adds	r3, #140	; 0x8c
 80073da:	4618      	mov	r0, r3
 80073dc:	f003 f856 	bl	800a48c <TimerDisable>
        port->policy_subindex_++;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80073e6:	3301      	adds	r3, #1
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 80073f0:	e02b      	b.n	800744a <PolicySinkEvaluateVCONNSwap+0x1c6>
        port->idle_ = TRUE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 80073fa:	e026      	b.n	800744a <PolicySinkEvaluateVCONNSwap+0x1c6>
    case 3:
      PolicySend(port, CMTPS_RDY, 0, 0, PE_SNK_Ready, 0, SOP_TYPE_SOP, FALSE);
 80073fc:	2300      	movs	r3, #0
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	2300      	movs	r3, #0
 8007402:	9302      	str	r3, [sp, #8]
 8007404:	2300      	movs	r3, #0
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	2313      	movs	r3, #19
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	2300      	movs	r3, #0
 800740e:	2200      	movs	r2, #0
 8007410:	2106      	movs	r1, #6
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fb04 	bl	8007a20 <PolicySend>
#ifdef FSC_HAVE_VDM
      port->vdm_check_cbl_ = (port->vdm_cbl_present_ == FALSE &&
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
                              DPM_IsSOPPAllowed(port)) ? TRUE : FALSE;
 800741e:	2b00      	cmp	r3, #0
 8007420:	d107      	bne.n	8007432 <PolicySinkEvaluateVCONNSwap+0x1ae>
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fd ffde 	bl	80053e4 <DPM_IsSOPPAllowed>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <PolicySinkEvaluateVCONNSwap+0x1ae>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <PolicySinkEvaluateVCONNSwap+0x1b0>
 8007432:	2300      	movs	r3, #0
 8007434:	b2da      	uxtb	r2, r3
      port->vdm_check_cbl_ = (port->vdm_cbl_present_ == FALSE &&
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
#endif /* FSC_HAVE_VDM */
      break;
 800743c:	e005      	b.n	800744a <PolicySinkEvaluateVCONNSwap+0x1c6>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 800743e:	21a6      	movs	r1, #166	; 0xa6
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 f8f5 	bl	8009630 <set_policy_state>
      break;
 8007446:	e000      	b.n	800744a <PolicySinkEvaluateVCONNSwap+0x1c6>
      break;
 8007448:	bf00      	nop
  }
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	00015f90 	.word	0x00015f90

08007458 <PolicySinkSendPRSwap>:

void PolicySinkSendPRSwap(struct Port *port)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
    default:
      set_policy_state(port, PE_ErrorRecovery);
      break;
  }
#endif /* FSC_HAVE_DRP */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <PolicySinkEvaluatePRSwap>:

void PolicySinkEvaluatePRSwap(struct Port *port)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
    default:
      set_policy_state(port, PE_ErrorRecovery);
      break;
  }
#else
  PolicySendNotSupported(port);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f804 	bl	8007482 <PolicySendNotSupported>
#endif /* FSC_HAVE_DRP */
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <PolicySendNotSupported>:
}
#endif /* FSC_HAVE_FRSWAP */
#endif /* FSC_HAVE_SNK */

void PolicySendNotSupported(struct Port *port)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b086      	sub	sp, #24
 8007486:	af04      	add	r7, sp, #16
 8007488:	6078      	str	r0, [r7, #4]
  set_policy_state(port, port->policy_is_source_ ?
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <PolicySendNotSupported+0x16>
 8007494:	231c      	movs	r3, #28
 8007496:	e000      	b.n	800749a <PolicySendNotSupported+0x18>
 8007498:	231f      	movs	r3, #31
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f002 f8c7 	bl	8009630 <set_policy_state>
          PE_SRC_Send_Not_Supported : PE_SNK_Send_Not_Supported);

  if (((port->protocol_msg_rx_sop_ == SOP_TYPE_SOP) && !port->dpm_pd_30_) ||
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <PolicySendNotSupported+0x34>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <PolicySendNotSupported+0x48>
      ((port->protocol_msg_rx_sop_ == SOP_TYPE_SOP1) &&
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
  if (((port->protocol_msg_rx_sop_ == SOP_TYPE_SOP) && !port->dpm_pd_30_) ||
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d11c      	bne.n	80074fa <PolicySendNotSupported+0x78>
       !port->dpm_pd_30_srccab_)) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
      ((port->protocol_msg_rx_sop_ == SOP_TYPE_SOP1) &&
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d117      	bne.n	80074fa <PolicySendNotSupported+0x78>
    PolicySend(port, CMTReject, 0, 0,
               port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready, 0,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
    PolicySend(port, CMTReject, 0, 0,
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <PolicySendNotSupported+0x56>
 80074d4:	2305      	movs	r3, #5
 80074d6:	e000      	b.n	80074da <PolicySendNotSupported+0x58>
 80074d8:	2313      	movs	r3, #19
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
 80074e0:	2100      	movs	r1, #0
 80074e2:	9103      	str	r1, [sp, #12]
 80074e4:	9202      	str	r2, [sp, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	9201      	str	r2, [sp, #4]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	2104      	movs	r1, #4
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa94 	bl	8007a20 <PolicySend>
 80074f8:	e053      	b.n	80075a2 <PolicySendNotSupported+0x120>
               port->protocol_msg_rx_sop_, FALSE);
  }
  else {
    switch(port->policy_subindex_) {
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <PolicySendNotSupported+0x88>
 8007504:	2b01      	cmp	r3, #1
 8007506:	d01e      	beq.n	8007546 <PolicySendNotSupported+0xc4>
 8007508:	e032      	b.n	8007570 <PolicySendNotSupported+0xee>
#ifndef FSC_HAVE_EXTENDED
    /* When chunking is not supported wait for timer tChunkingNotSupported
     * timer timeout */
    case 0:
      if (port->wait_for_not_supported_) {
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007510:	2b00      	cmp	r3, #0
 8007512:	d013      	beq.n	800753c <PolicySendNotSupported+0xba>
        TimerStart(&port->policy_state_timer_, ktChunkingNotSupported);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	338c      	adds	r3, #140	; 0x8c
 8007518:	f649 4140 	movw	r1, #40000	; 0x9c40
 800751c:	4618      	mov	r0, r3
 800751e:	f002 ff97 	bl	800a450 <TimerStart>
        port->policy_subindex_++;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007528:	3301      	adds	r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        port->wait_for_not_supported_ = FALSE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
      }
      else {
        port->policy_subindex_ = 2;
      }
      break;
 800753a:	e032      	b.n	80075a2 <PolicySendNotSupported+0x120>
        port->policy_subindex_ = 2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 8007544:	e02d      	b.n	80075a2 <PolicySendNotSupported+0x120>
    case 1:
      if (TimerExpired(&port->policy_state_timer_)) {
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	338c      	adds	r3, #140	; 0x8c
 800754a:	4618      	mov	r0, r3
 800754c:	f002 ffca 	bl	800a4e4 <TimerExpired>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d024      	beq.n	80075a0 <PolicySendNotSupported+0x11e>
        TimerDisable(&port->policy_state_timer_);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	338c      	adds	r3, #140	; 0x8c
 800755a:	4618      	mov	r0, r3
 800755c:	f002 ff96 	bl	800a48c <TimerDisable>
        port->policy_subindex_++;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007566:	3301      	adds	r3, #1
 8007568:	b2da      	uxtb	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      }
    case 2:
#endif /* FSC_HAVE_EXTENDED */
    default:
      PolicySend(port, CMTNotSupported, 0, 0,
                 port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready, 0,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
      PolicySend(port, CMTNotSupported, 0, 0,
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <PolicySendNotSupported+0xfc>
 800757a:	2305      	movs	r3, #5
 800757c:	e000      	b.n	8007580 <PolicySendNotSupported+0xfe>
 800757e:	2313      	movs	r3, #19
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
 8007586:	2100      	movs	r1, #0
 8007588:	9103      	str	r1, [sp, #12]
 800758a:	9202      	str	r2, [sp, #8]
 800758c:	2200      	movs	r2, #0
 800758e:	9201      	str	r2, [sp, #4]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	2300      	movs	r3, #0
 8007594:	2200      	movs	r2, #0
 8007596:	2110      	movs	r1, #16
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fa41 	bl	8007a20 <PolicySend>
                 port->protocol_msg_rx_sop_, FALSE);
      break;
 800759e:	e000      	b.n	80075a2 <PolicySendNotSupported+0x120>
        break;
 80075a0:	bf00      	nop
    }
  }
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <PolicyNotSupported>:

void PolicyNotSupported(struct Port *port)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* TODO Inform DPM if needed. */
  set_policy_state(port, port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <PolicyNotSupported+0x16>
 80075bc:	2305      	movs	r3, #5
 80075be:	e000      	b.n	80075c2 <PolicyNotSupported+0x18>
 80075c0:	2313      	movs	r3, #19
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f002 f833 	bl	8009630 <set_policy_state>
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <PolicyDFPCBLSendSoftReset>:

void PolicyDFPCBLSendSoftReset(struct Port *port)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b086      	sub	sp, #24
 80075d6:	af04      	add	r7, sp, #16
 80075d8:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <PolicyDFPCBLSendSoftReset+0x18>
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d019      	beq.n	800761c <PolicyDFPCBLSendSoftReset+0x4a>
 80075e8:	e062      	b.n	80076b0 <PolicyDFPCBLSendSoftReset+0xde>
    case 0:
      if (PolicySend(port, CMTSoftReset, 0, 0, PE_DFP_CBL_Send_Soft_Reset,
 80075ea:	2300      	movs	r3, #0
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	2301      	movs	r3, #1
 80075f0:	9302      	str	r3, [sp, #8]
 80075f2:	2301      	movs	r3, #1
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	23a2      	movs	r3, #162	; 0xa2
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	2300      	movs	r3, #0
 80075fc:	2200      	movs	r2, #0
 80075fe:	210d      	movs	r1, #13
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fa0d 	bl	8007a20 <PolicySend>
 8007606:	4603      	mov	r3, r0
 8007608:	2b01      	cmp	r3, #1
 800760a:	d156      	bne.n	80076ba <PolicyDFPCBLSendSoftReset+0xe8>
                     1, SOP_TYPE_SOP1, FALSE) == STAT_SUCCESS) {
        TimerStart(&port->policy_state_timer_, ktSenderResponse);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	338c      	adds	r3, #140	; 0x8c
 8007610:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8007614:	4618      	mov	r0, r3
 8007616:	f002 ff1b 	bl	800a450 <TimerStart>
      }
      break;
 800761a:	e04e      	b.n	80076ba <PolicyDFPCBLSendSoftReset+0xe8>
    case 1:
      if (port->protocol_msg_rx_) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d02d      	beq.n	8007682 <PolicyDFPCBLSendSoftReset+0xb0>
        port->protocol_msg_rx_ = FALSE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        port->pd_tx_status_ = txIdle;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800763c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d118      	bne.n	8007678 <PolicyDFPCBLSendSoftReset+0xa6>
            (port->policy_rx_header_.MessageType == CMTAccept)) {
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	b2db      	uxtb	r3, r3
        if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8007652:	2b03      	cmp	r3, #3
 8007654:	d110      	bne.n	8007678 <PolicyDFPCBLSendSoftReset+0xa6>
          set_policy_state(port, port->policy_is_source_ ?
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <PolicyDFPCBLSendSoftReset+0x92>
 8007660:	2305      	movs	r3, #5
 8007662:	e000      	b.n	8007666 <PolicyDFPCBLSendSoftReset+0x94>
 8007664:	2313      	movs	r3, #19
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 ffe1 	bl	8009630 <set_policy_state>
              PE_SRC_Ready : PE_SNK_Ready);
          ResetProtocolLayer(port, SOP_TYPE_SOP1);
 800766e:	2101      	movs	r1, #1
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fe2e 	bl	80092d2 <ResetProtocolLayer>
        set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8007676:	e021      	b.n	80076bc <PolicyDFPCBLSendSoftReset+0xea>
          set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
 8007678:	21a3      	movs	r1, #163	; 0xa3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 ffd8 	bl	8009630 <set_policy_state>
      break;
 8007680:	e01c      	b.n	80076bc <PolicyDFPCBLSendSoftReset+0xea>
      else if (TimerExpired(&port->policy_state_timer_)) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	338c      	adds	r3, #140	; 0x8c
 8007686:	4618      	mov	r0, r3
 8007688:	f002 ff2c 	bl	800a4e4 <TimerExpired>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <PolicyDFPCBLSendSoftReset+0xd4>
        TimerDisable(&port->policy_state_timer_);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	338c      	adds	r3, #140	; 0x8c
 8007696:	4618      	mov	r0, r3
 8007698:	f002 fef8 	bl	800a48c <TimerDisable>
        set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
 800769c:	21a3      	movs	r1, #163	; 0xa3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 ffc6 	bl	8009630 <set_policy_state>
      break;
 80076a4:	e00a      	b.n	80076bc <PolicyDFPCBLSendSoftReset+0xea>
        port->idle_ = TRUE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 80076ae:	e005      	b.n	80076bc <PolicyDFPCBLSendSoftReset+0xea>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 80076b0:	21a6      	movs	r1, #166	; 0xa6
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 ffbc 	bl	8009630 <set_policy_state>
      break;
 80076b8:	e000      	b.n	80076bc <PolicyDFPCBLSendSoftReset+0xea>
      break;
 80076ba:	bf00      	nop
  }
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <PolicyDFPCBLSendReset>:

void PolicyDFPCBLSendReset(struct Port *port)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  port->cbl_rst_state_ = CBL_RST_DISABLED;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
  PolicySendHardReset(port,
      port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready, TRUE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
  PolicySendHardReset(port,
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <PolicyDFPCBLSendReset+0x1e>
 80076de:	2305      	movs	r3, #5
 80076e0:	e000      	b.n	80076e4 <PolicyDFPCBLSendReset+0x20>
 80076e2:	2313      	movs	r3, #19
 80076e4:	2201      	movs	r2, #1
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f854 	bl	8007796 <PolicySendHardReset>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <UpdateCapabilitiesRx>:
}

#endif /* FSC_HAVE_EXTENDED */

void UpdateCapabilitiesRx(struct Port *port, FSC_BOOL is_source_cap_update)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  FSC_U8 i = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
#ifdef FSC_HAVE_USBHID
  /* Set the source caps updated flag to trigger an update of the GUI */
  port->source_caps_updated_ = is_source_cap_update;
#endif /* FSC_HAVE_USBHID */

  port->caps_header_received_.word = port->policy_rx_header_.word;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 2158 	ldrh.w	r2, [r3, #344]	; 0x158
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
  for (i = 0; i < port->caps_header_received_.NumDataObjects; i++) {
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
 8007716:	e00d      	b.n	8007734 <UpdateCapabilitiesRx+0x3e>
    port->caps_received_[i].object =
        port->policy_rx_data_obj_[i].object;
 8007718:	7bf9      	ldrb	r1, [r7, #15]
    port->caps_received_[i].object =
 800771a:	7bfb      	ldrb	r3, [r7, #15]
        port->policy_rx_data_obj_[i].object;
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	3158      	adds	r1, #88	; 0x58
 8007720:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    port->caps_received_[i].object =
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	337e      	adds	r3, #126	; 0x7e
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	605a      	str	r2, [r3, #4]
  for (i = 0; i < port->caps_header_received_.NumDataObjects; i++) {
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	3301      	adds	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 800773a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800773e:	b2db      	uxtb	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	4293      	cmp	r3, r2
 8007746:	d3e7      	bcc.n	8007718 <UpdateCapabilitiesRx+0x22>
  }

  for (i = port->caps_header_received_.NumDataObjects; i < 7; i++) {
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 800774e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007752:	b2db      	uxtb	r3, r3
 8007754:	73fb      	strb	r3, [r7, #15]
 8007756:	e009      	b.n	800776c <UpdateCapabilitiesRx+0x76>
    port->caps_received_[i].object = 0;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	337e      	adds	r3, #126	; 0x7e
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	2200      	movs	r2, #0
 8007764:	605a      	str	r2, [r3, #4]
  for (i = port->caps_header_received_.NumDataObjects; i < 7; i++) {
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	3301      	adds	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	2b06      	cmp	r3, #6
 8007770:	d9f2      	bls.n	8007758 <UpdateCapabilitiesRx+0x62>
  }
  port->partner_caps_.object = port->caps_received_[0].object;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
  notify_observers(EVENT_SRC_CAPS_UPDATED, port->port_id_, 0);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	2200      	movs	r2, #0
 8007786:	4619      	mov	r1, r3
 8007788:	2080      	movs	r0, #128	; 0x80
 800778a:	f7fd fe51 	bl	8005430 <notify_observers>
}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <PolicySendHardReset>:

FSC_BOOL PolicySendHardReset(struct Port *port, PolicyState_t next_state,
                             FSC_BOOL cable)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
 80077a2:	4613      	mov	r3, r2
 80077a4:	70bb      	strb	r3, [r7, #2]
  FSC_BOOL Success = FALSE;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  switch (port->pd_tx_status_) {
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d035      	beq.n	8007820 <PolicySendHardReset+0x8a>
 80077b4:	2b05      	cmp	r3, #5
 80077b6:	d002      	beq.n	80077be <PolicySendHardReset+0x28>
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d031      	beq.n	8007820 <PolicySendHardReset+0x8a>
 80077bc:	e02a      	b.n	8007814 <PolicySendHardReset+0x7e>
    case txWait:
      /* Do nothing until the protocol layer finishes generating the hard */
      /* reset setting the next state as either txCollision or txSuccess */
      break;
    case txSuccess:
      TimerStart(&port->policy_state_timer_,
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	338c      	adds	r3, #140	; 0x8c
 80077c2:	f646 1178 	movw	r1, #27000	; 0x6978
 80077c6:	4618      	mov	r0, r3
 80077c8:	f002 fe42 	bl	800a450 <TimerStart>
                 ktPSHardReset - ktPSHardResetOverhead);
      port->idle_ = TRUE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      port->hard_reset_counter_++;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 80077da:	3301      	adds	r3, #1
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      set_policy_state(port, next_state);
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 ff21 	bl	8009630 <set_policy_state>
      port->pd_tx_status_ = txIdle;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      TimerDisable(&port->no_response_timer_);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	33bc      	adds	r3, #188	; 0xbc
 80077fa:	4618      	mov	r0, r3
 80077fc:	f002 fe46 	bl	800a48c <TimerDisable>
      Success = TRUE;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
      if (cable) {
 8007804:	78bb      	ldrb	r3, [r7, #2]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <PolicySendHardReset+0x8e>
        /* Reset the cable protocol variables here before returning to SRC or
         * SNK Ready */
        ResetProtocolLayer(port, SOP_TYPE_SOP1);
 800780a:	2101      	movs	r1, #1
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 fd60 	bl	80092d2 <ResetProtocolLayer>
      }
      break;
 8007812:	e007      	b.n	8007824 <PolicySendHardReset+0x8e>
    case txIdle:
    default:
      ProtocolSendHardReset(port, cable);
 8007814:	78bb      	ldrb	r3, [r7, #2]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f002 fb17 	bl	8009e4c <ProtocolSendHardReset>
      break;
 800781e:	e002      	b.n	8007826 <PolicySendHardReset+0x90>
      break;
 8007820:	bf00      	nop
 8007822:	e000      	b.n	8007826 <PolicySendHardReset+0x90>
      break;
 8007824:	bf00      	nop
  }
  return Success;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <PolicySendGenericCommand>:

void PolicySendGenericCommand(struct Port *port)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af04      	add	r7, sp, #16
 8007836:	6078      	str	r0, [r7, #4]
    FSC_U8 status;
    switch (port->policy_subindex_)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800783e:	2b00      	cmp	r3, #0
 8007840:	d136      	bne.n	80078b0 <PolicySendGenericCommand+0x80>
    {
    case 0:
        port->policy_is_ams_ = FALSE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
        status = PolicySend(port, port->pd_transmit_header_.MessageType, 0, 0,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8007850:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007854:	b2db      	uxtb	r3, r3
 8007856:	4619      	mov	r1, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800785e:	2200      	movs	r2, #0
 8007860:	9203      	str	r2, [sp, #12]
 8007862:	9302      	str	r3, [sp, #8]
 8007864:	2301      	movs	r3, #1
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	23a9      	movs	r3, #169	; 0xa9
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	2300      	movs	r3, #0
 800786e:	2200      	movs	r2, #0
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8d5 	bl	8007a20 <PolicySend>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
                   PE_Send_Generic_Cmd, 1, port->policy_msg_tx_sop_, FALSE);

        if (status == STAT_SUCCESS)
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <PolicySendGenericCommand+0x60>
        {
            TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	338c      	adds	r3, #140	; 0x8c
 8007884:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8007888:	4618      	mov	r0, r3
 800788a:	f002 fde1 	bl	800a450 <TimerStart>
        else if (status == STAT_ERROR)
        {
            set_policy_state(port, port->policy_is_source_ ?
                    PE_SRC_Ready : PE_SNK_Ready);
        }
        break;
 800788e:	e03f      	b.n	8007910 <PolicySendGenericCommand+0xe0>
        else if (status == STAT_ERROR)
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d13c      	bne.n	8007910 <PolicySendGenericCommand+0xe0>
            set_policy_state(port, port->policy_is_source_ ?
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <PolicySendGenericCommand+0x74>
 80078a0:	2305      	movs	r3, #5
 80078a2:	e000      	b.n	80078a6 <PolicySendGenericCommand+0x76>
 80078a4:	2313      	movs	r3, #19
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fec1 	bl	8009630 <set_policy_state>
        break;
 80078ae:	e02f      	b.n	8007910 <PolicySendGenericCommand+0xe0>
    default:
        if (port->protocol_msg_rx_)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d010      	beq.n	80078dc <PolicySendGenericCommand+0xac>
        {
            port->protocol_msg_rx_ = FALSE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

            /* Check and handle message response */

            set_policy_state(port, port->policy_is_source_ ?
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <PolicySendGenericCommand+0xa0>
 80078cc:	2305      	movs	r3, #5
 80078ce:	e000      	b.n	80078d2 <PolicySendGenericCommand+0xa2>
 80078d0:	2313      	movs	r3, #19
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 feab 	bl	8009630 <set_policy_state>
        }
        else
        {
            port->idle_ = TRUE;
        }
        break;
 80078da:	e01a      	b.n	8007912 <PolicySendGenericCommand+0xe2>
        else if (TimerExpired(&port->policy_state_timer_))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	338c      	adds	r3, #140	; 0x8c
 80078e0:	4618      	mov	r0, r3
 80078e2:	f002 fdff 	bl	800a4e4 <TimerExpired>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00c      	beq.n	8007906 <PolicySendGenericCommand+0xd6>
            set_policy_state(port, port->policy_is_source_ ?
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <PolicySendGenericCommand+0xca>
 80078f6:	2305      	movs	r3, #5
 80078f8:	e000      	b.n	80078fc <PolicySendGenericCommand+0xcc>
 80078fa:	2313      	movs	r3, #19
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 fe96 	bl	8009630 <set_policy_state>
        break;
 8007904:	e005      	b.n	8007912 <PolicySendGenericCommand+0xe2>
            port->idle_ = TRUE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 800790e:	e000      	b.n	8007912 <PolicySendGenericCommand+0xe2>
        break;
 8007910:	bf00      	nop
    }
}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <PolicySendGenericData>:

void PolicySendGenericData(struct Port *port)
{
 800791a:	b590      	push	{r4, r7, lr}
 800791c:	b089      	sub	sp, #36	; 0x24
 800791e:	af04      	add	r7, sp, #16
 8007920:	6078      	str	r0, [r7, #4]
    FSC_U8 status;
    switch (port->policy_subindex_)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007928:	2b00      	cmp	r3, #0
 800792a:	d143      	bne.n	80079b4 <PolicySendGenericData+0x9a>
    {
    case 0:
        port->policy_is_ams_ = FALSE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
        status = PolicySend(port, port->pd_transmit_header_.MessageType,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 800793a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800793e:	b2db      	uxtb	r3, r3
 8007940:	461c      	mov	r4, r3
                   port->pd_transmit_header_.NumDataObjects * 4,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8007948:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800794c:	b2db      	uxtb	r3, r3
        status = PolicySend(port, port->pd_transmit_header_.MessageType,
 800794e:	b29b      	uxth	r3, r3
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	b299      	uxth	r1, r3
                   (FSC_U8*)port->pd_transmit_objects_, PE_Send_Generic_Data,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
        status = PolicySend(port, port->pd_transmit_header_.MessageType,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8007960:	2200      	movs	r2, #0
 8007962:	9203      	str	r2, [sp, #12]
 8007964:	9302      	str	r3, [sp, #8]
 8007966:	2301      	movs	r3, #1
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	23aa      	movs	r3, #170	; 0xaa
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	4603      	mov	r3, r0
 8007970:	460a      	mov	r2, r1
 8007972:	4621      	mov	r1, r4
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f853 	bl	8007a20 <PolicySend>
 800797a:	4603      	mov	r3, r0
 800797c:	73fb      	strb	r3, [r7, #15]
                   1, port->policy_msg_tx_sop_, FALSE);

        if (status == STAT_SUCCESS)
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d107      	bne.n	8007994 <PolicySendGenericData+0x7a>
        {
            TimerStart(&port->policy_state_timer_, ktSenderResponse);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	338c      	adds	r3, #140	; 0x8c
 8007988:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800798c:	4618      	mov	r0, r3
 800798e:	f002 fd5f 	bl	800a450 <TimerStart>
        else if (status == STAT_ERROR)
        {
            set_policy_state(port, port->policy_is_source_ ?
                    PE_SRC_Ready : PE_SNK_Ready);
        }
        break;
 8007992:	e03f      	b.n	8007a14 <PolicySendGenericData+0xfa>
        else if (status == STAT_ERROR)
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d13c      	bne.n	8007a14 <PolicySendGenericData+0xfa>
            set_policy_state(port, port->policy_is_source_ ?
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <PolicySendGenericData+0x8e>
 80079a4:	2305      	movs	r3, #5
 80079a6:	e000      	b.n	80079aa <PolicySendGenericData+0x90>
 80079a8:	2313      	movs	r3, #19
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fe3f 	bl	8009630 <set_policy_state>
        break;
 80079b2:	e02f      	b.n	8007a14 <PolicySendGenericData+0xfa>
    default:
        if (port->protocol_msg_rx_)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d010      	beq.n	80079e0 <PolicySendGenericData+0xc6>
        {
            port->protocol_msg_rx_ = FALSE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

            /* Check and handle message response */

            set_policy_state(port, port->policy_is_source_ ?
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <PolicySendGenericData+0xba>
 80079d0:	2305      	movs	r3, #5
 80079d2:	e000      	b.n	80079d6 <PolicySendGenericData+0xbc>
 80079d4:	2313      	movs	r3, #19
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fe29 	bl	8009630 <set_policy_state>
        }
        else
        {
            port->idle_ = TRUE;
        }
        break;
 80079de:	e01a      	b.n	8007a16 <PolicySendGenericData+0xfc>
        else if (TimerExpired(&port->policy_state_timer_))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	338c      	adds	r3, #140	; 0x8c
 80079e4:	4618      	mov	r0, r3
 80079e6:	f002 fd7d 	bl	800a4e4 <TimerExpired>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00c      	beq.n	8007a0a <PolicySendGenericData+0xf0>
            set_policy_state(port, port->policy_is_source_ ?
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <PolicySendGenericData+0xe4>
 80079fa:	2305      	movs	r3, #5
 80079fc:	e000      	b.n	8007a00 <PolicySendGenericData+0xe6>
 80079fe:	2313      	movs	r3, #19
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 fe14 	bl	8009630 <set_policy_state>
        break;
 8007a08:	e005      	b.n	8007a16 <PolicySendGenericData+0xfc>
            port->idle_ = TRUE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 8007a12:	e000      	b.n	8007a16 <PolicySendGenericData+0xfc>
        break;
 8007a14:	bf00      	nop
    }
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd90      	pop	{r4, r7, pc}
	...

08007a20 <PolicySend>:

FSC_U8 PolicySend(struct Port *port, FSC_U8 message_type,
                  FSC_U16 num_bytes, FSC_U8 *data,
                  PolicyState_t next_state,
                  FSC_U8 subindex, SopType sop, FSC_BOOL extended)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	607b      	str	r3, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	72fb      	strb	r3, [r7, #11]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	813b      	strh	r3, [r7, #8]
  FSC_U16 i = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	82fb      	strh	r3, [r7, #22]
  FSC_U8 status = STAT_BUSY;
 8007a36:	2300      	movs	r3, #0
 8007a38:	757b      	strb	r3, [r7, #21]

  switch (port->pd_tx_status_) {
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8007a40:	2b09      	cmp	r3, #9
 8007a42:	f200 81b9 	bhi.w	8007db8 <PolicySend+0x398>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <PolicySend+0x2c>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a75 	.word	0x08007a75
 8007a50:	08007db9 	.word	0x08007db9
 8007a54:	08007c85 	.word	0x08007c85
 8007a58:	08007c85 	.word	0x08007c85
 8007a5c:	08007c85 	.word	0x08007c85
 8007a60:	08007cd3 	.word	0x08007cd3
 8007a64:	08007cf7 	.word	0x08007cf7
 8007a68:	08007ccd 	.word	0x08007ccd
 8007a6c:	08007ac7 	.word	0x08007ac7
 8007a70:	08007d93 	.word	0x08007d93
    case txIdle:
      if (port->policy_is_source_ && port->dpm_pd_30_ && port->policy_is_ams_ &&
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d01e      	beq.n	8007abc <PolicySend+0x9c>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d019      	beq.n	8007abc <PolicySend+0x9c>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d014      	beq.n	8007abc <PolicySend+0x9c>
          (port->policy_sinktx_state_ == SinkTxOK)) {
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
      if (port->policy_is_source_ && port->dpm_pd_30_ && port->policy_is_ams_ &&
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10f      	bne.n	8007abc <PolicySend+0x9c>
        /* If PD 3.0, set CC SinkTxNG and wait out SinkTx timer */
        SetSinkTx(port, SinkTxNG);
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f001 fe10 	bl	80096c4 <SetSinkTx>
        TimerStart(&port->policy_sinktx_timer_, ktSinkTx);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3398      	adds	r3, #152	; 0x98
 8007aa8:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 fccf 	bl	800a450 <TimerStart>
        port->pd_tx_status_ = txPending;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        break;
 8007aba:	e192      	b.n	8007de2 <PolicySend+0x3c2>
      }
      else {
        TimerDisable(&port->policy_sinktx_timer_);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3398      	adds	r3, #152	; 0x98
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f002 fce3 	bl	800a48c <TimerDisable>
      }
      /* Else fall through */
    case txPending:
      if (!TimerExpired(&port->policy_sinktx_timer_) &&
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3398      	adds	r3, #152	; 0x98
 8007aca:	4618      	mov	r0, r3
 8007acc:	f002 fd0a 	bl	800a4e4 <TimerExpired>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10c      	bne.n	8007af0 <PolicySend+0xd0>
          !TimerDisabled(&port->policy_sinktx_timer_)) {
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3398      	adds	r3, #152	; 0x98
 8007ada:	4618      	mov	r0, r3
 8007adc:	f002 fcf1 	bl	800a4c2 <TimerDisabled>
 8007ae0:	4603      	mov	r3, r0
      if (!TimerExpired(&port->policy_sinktx_timer_) &&
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <PolicySend+0xd0>
        /* If we need to wait on the sinkTx timer */
        port->idle_ = TRUE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        break;
 8007aee:	e178      	b.n	8007de2 <PolicySend+0x3c2>
      }

      /* Continue on with transmission */
      TimerDisable(&port->policy_sinktx_timer_);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3398      	adds	r3, #152	; 0x98
 8007af4:	4618      	mov	r0, r3
 8007af6:	f002 fcc9 	bl	800a48c <TimerDisable>

      port->policy_tx_header_.word = 0x0000;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
      port->policy_tx_header_.MessageType = message_type & PDMsgTypeMask;
 8007b02:	7afb      	ldrb	r3, [r7, #11]
 8007b04:	f003 031f 	and.w	r3, r3, #31
 8007b08:	b2d9      	uxtb	r1, r3
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	f892 315c 	ldrb.w	r3, [r2, #348]	; 0x15c
 8007b10:	f361 0304 	bfi	r3, r1, #0, #5
 8007b14:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
      if (sop == SOP_TYPE_SOP)
 8007b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d119      	bne.n	8007b54 <PolicySend+0x134>
      {
        port->policy_tx_header_.PortDataRole = port->policy_is_dfp_;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	b2d9      	uxtb	r1, r3
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	f892 315c 	ldrb.w	r3, [r2, #348]	; 0x15c
 8007b32:	f361 1345 	bfi	r3, r1, #5, #1
 8007b36:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
        port->policy_tx_header_.PortPowerRole = port->policy_is_source_;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	b2d9      	uxtb	r1, r3
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 8007b4c:	f361 0300 	bfi	r3, r1, #0, #1
 8007b50:	f882 315d 	strb.w	r3, [r2, #349]	; 0x15d
      }

      port->policy_tx_header_.SpecRevision = DPM_CurrentSpecRev(port, sop);
 8007b54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b58:	4619      	mov	r1, r3
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7fd fc1a 	bl	8005394 <DPM_CurrentSpecRev>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	b2d9      	uxtb	r1, r3
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f892 315c 	ldrb.w	r3, [r2, #348]	; 0x15c
 8007b6e:	f361 1387 	bfi	r3, r1, #6, #2
 8007b72:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
      port->protocol_retries_ =
          (port->policy_tx_header_.SpecRevision == PDSpecRev3p0) ?
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b80:	b2db      	uxtb	r3, r3
      port->protocol_retries_ =
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d101      	bne.n	8007b8a <PolicySend+0x16a>
 8007b86:	2202      	movs	r2, #2
 8007b88:	e000      	b.n	8007b8c <PolicySend+0x16c>
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
        port->protocol_ext_send_chunk_ = TRUE;
        port->protocol_ext_state_active_ = TRUE;
      }
      else
#endif /* FSC_HAVE_EXTENDED */
        if (num_bytes > 0) {
 8007b92:	893b      	ldrh	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d062      	beq.n	8007c5e <PolicySend+0x23e>
        /* Standard Data Message */
        if (num_bytes > MAX_MSG_LEGACY_LEN) {
 8007b98:	893b      	ldrh	r3, [r7, #8]
 8007b9a:	2b1c      	cmp	r3, #28
 8007b9c:	d901      	bls.n	8007ba2 <PolicySend+0x182>
          num_bytes = MAX_MSG_LEGACY_LEN;
 8007b9e:	231c      	movs	r3, #28
 8007ba0:	813b      	strh	r3, [r7, #8]
        }

        port->policy_tx_header_.NumDataObjects = num_bytes / 4;
 8007ba2:	893b      	ldrh	r3, [r7, #8]
 8007ba4:	089b      	lsrs	r3, r3, #2
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	b2d9      	uxtb	r1, r3
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f892 315d 	ldrb.w	r3, [r2, #349]	; 0x15d
 8007bb4:	f361 1306 	bfi	r3, r1, #4, #3
 8007bb8:	f882 315d 	strb.w	r3, [r2, #349]	; 0x15d
        for (i = 0; i < port->policy_tx_header_.NumDataObjects; i++) {
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	82fb      	strh	r3, [r7, #22]
 8007bc0:	e036      	b.n	8007c30 <PolicySend+0x210>
          port->policy_tx_data_obj_[i].byte[0] = data[i * 4 + 0];
 8007bc2:	8afb      	ldrh	r3, [r7, #22]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	441a      	add	r2, r3
 8007bcc:	8afb      	ldrh	r3, [r7, #22]
 8007bce:	7811      	ldrb	r1, [r2, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	335e      	adds	r3, #94	; 0x5e
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	460a      	mov	r2, r1
 8007bda:	711a      	strb	r2, [r3, #4]
          port->policy_tx_data_obj_[i].byte[1] = data[i * 4 + 1];
 8007bdc:	8afb      	ldrh	r3, [r7, #22]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	3301      	adds	r3, #1
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	441a      	add	r2, r3
 8007be6:	8afb      	ldrh	r3, [r7, #22]
 8007be8:	7811      	ldrb	r1, [r2, #0]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	460a      	mov	r2, r1
 8007bf2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
          port->policy_tx_data_obj_[i].byte[2] = data[i * 4 + 2];
 8007bf6:	8afb      	ldrh	r3, [r7, #22]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	3302      	adds	r3, #2
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	441a      	add	r2, r3
 8007c00:	8afb      	ldrh	r3, [r7, #22]
 8007c02:	7811      	ldrb	r1, [r2, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	460a      	mov	r2, r1
 8007c0c:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
          port->policy_tx_data_obj_[i].byte[3] = data[i * 4 + 3];
 8007c10:	8afb      	ldrh	r3, [r7, #22]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	3303      	adds	r3, #3
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	441a      	add	r2, r3
 8007c1a:	8afb      	ldrh	r3, [r7, #22]
 8007c1c:	7811      	ldrb	r1, [r2, #0]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	460a      	mov	r2, r1
 8007c26:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        for (i = 0; i < port->policy_tx_header_.NumDataObjects; i++) {
 8007c2a:	8afb      	ldrh	r3, [r7, #22]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	82fb      	strh	r3, [r7, #22]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8007c36:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	8afa      	ldrh	r2, [r7, #22]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d3be      	bcc.n	8007bc2 <PolicySend+0x1a2>
        }

        if (port->policy_state_ == PE_SRC_Send_Capabilities) {
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d107      	bne.n	8007c5e <PolicySend+0x23e>
          port->caps_counter_++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8007c54:	3301      	adds	r3, #1
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
      }
      else {
        /* Control Message */
      }

      port->protocol_msg_tx_sop_ = sop;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007c64:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
      port->pd_tx_status_ = txSend;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      if (port->protocol_state_ == PRLIdle)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	f040 80ae 	bne.w	8007dd8 <PolicySend+0x3b8>
      {
        ProtocolIdle(port);
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f001 fdab 	bl	80097d8 <ProtocolIdle>
      }
      break;
 8007c82:	e0a9      	b.n	8007dd8 <PolicySend+0x3b8>
    case txSend:
    case txBusy:
    case txWait:
      /* Waiting for GoodCRC or timeout of the protocol */
      if (TimerExpired(&port->protocol_timer_)){
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	33ec      	adds	r3, #236	; 0xec
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f002 fc2b 	bl	800a4e4 <TimerExpired>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80a3 	beq.w	8007ddc <PolicySend+0x3bc>
        TimerDisable(&port->protocol_timer_);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	33ec      	adds	r3, #236	; 0xec
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f002 fbf6 	bl	800a48c <TimerDisable>
        port->protocol_state_ = PRLIdle;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
        port->pd_tx_status_ = txIdle;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
        set_policy_state(port, next_state);
 8007cb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f001 fcba 	bl	8009630 <set_policy_state>
        port->policy_subindex_ = subindex;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007cc2:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
        status = STAT_ERROR;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	757b      	strb	r3, [r7, #21]
      }
      break;
 8007cca:	e087      	b.n	8007ddc <PolicySend+0x3bc>
    case txCollision:
      status = STAT_ERROR;
 8007ccc:	2302      	movs	r3, #2
 8007cce:	757b      	strb	r3, [r7, #21]
      break;
 8007cd0:	e087      	b.n	8007de2 <PolicySend+0x3c2>
    } else {
      /* Completed transferring extended message */
      port->protocol_ext_state_active_ = FALSE;
    }
#endif /* FSC_HAVE_EXTENDED */
      set_policy_state(port, next_state);
 8007cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f001 fca9 	bl	8009630 <set_policy_state>
      port->policy_subindex_ = subindex;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007ce4:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      port->pd_tx_status_ = txIdle;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      status = STAT_SUCCESS;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	757b      	strb	r3, [r7, #21]
      break;
 8007cf4:	e075      	b.n	8007de2 <PolicySend+0x3c2>
    case txError: /* No good CRC */
      if (sop == SOP_TYPE_SOP) {
 8007cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d12b      	bne.n	8007d56 <PolicySend+0x336>
        if ((port->policy_state_ == PE_SRC_Send_Capabilities) &&
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d109      	bne.n	8007d1c <PolicySend+0x2fc>
            !port->policy_has_contract_) {
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
        if ((port->policy_state_ == PE_SRC_Send_Capabilities) &&
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d104      	bne.n	8007d1c <PolicySend+0x2fc>
          set_policy_state(port, PE_SRC_Discovery);
 8007d12:	2101      	movs	r1, #1
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f001 fc8b 	bl	8009630 <set_policy_state>
 8007d1a:	e033      	b.n	8007d84 <PolicySend+0x364>
        }
        else if (port->policy_state_ == PE_SRC_Send_Soft_Reset) {
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007d22:	2b18      	cmp	r3, #24
 8007d24:	d02e      	beq.n	8007d84 <PolicySend+0x364>
  #ifdef FSC_HAVE_SRC
          PolicySourceSendHardReset(port);
  #endif /* FSC_HAVE_SRC */
        }
        else if (port->policy_state_ == PE_SNK_Send_Soft_Reset) {
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007d2c:	2b1a      	cmp	r3, #26
 8007d2e:	d103      	bne.n	8007d38 <PolicySend+0x318>
  #ifdef FSC_HAVE_SNK
          PolicySinkSendHardReset(port);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7fd fe7c 	bl	8005a2e <PolicySinkSendHardReset>
 8007d36:	e025      	b.n	8007d84 <PolicySend+0x364>
  #endif /* FSC_HAVE_SRC */
        }
        else if (port->policy_is_source_) {
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <PolicySend+0x32c>
          set_policy_state(port, PE_SRC_Send_Soft_Reset);
 8007d42:	2118      	movs	r1, #24
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f001 fc73 	bl	8009630 <set_policy_state>
 8007d4a:	e01b      	b.n	8007d84 <PolicySend+0x364>
        }
        else {
          set_policy_state(port, PE_SNK_Send_Soft_Reset);
 8007d4c:	211a      	movs	r1, #26
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f001 fc6e 	bl	8009630 <set_policy_state>
 8007d54:	e016      	b.n	8007d84 <PolicySend+0x364>
        }
      }
      else if (sop == SOP_TYPE_SOP1) {
 8007d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d112      	bne.n	8007d84 <PolicySend+0x364>
#ifdef FSC_HAVE_VDM
        if (port->vdm_cbl_present_ == FALSE) {
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00d      	beq.n	8007d84 <PolicySend+0x364>
          /* Skip cable resets for initial discover ID */
        }
        else
#endif /*FSC_HAVE_VDM  */
        if (port->policy_state_ == PE_DFP_CBL_Send_Soft_Reset) {
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007d6e:	2ba2      	cmp	r3, #162	; 0xa2
 8007d70:	d104      	bne.n	8007d7c <PolicySend+0x35c>
          set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
 8007d72:	21a3      	movs	r1, #163	; 0xa3
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f001 fc5b 	bl	8009630 <set_policy_state>
 8007d7a:	e003      	b.n	8007d84 <PolicySend+0x364>
        }
        else {
          set_policy_state(port, PE_DFP_CBL_Send_Soft_Reset);
 8007d7c:	21a2      	movs	r1, #162	; 0xa2
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f001 fc56 	bl	8009630 <set_policy_state>
        }
        /* TODO - UFP CBL Resets? */
      }
      port->pd_tx_status_ = txIdle;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      status = STAT_ERROR;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	757b      	strb	r3, [r7, #21]
      break;
 8007d90:	e027      	b.n	8007de2 <PolicySend+0x3c2>
    case txAbort:
      set_policy_state(port,
                       port->policy_is_source_ ? PE_SRC_Ready : PE_SNK_Ready);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
      set_policy_state(port,
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <PolicySend+0x380>
 8007d9c:	2305      	movs	r3, #5
 8007d9e:	e000      	b.n	8007da2 <PolicySend+0x382>
 8007da0:	2313      	movs	r3, #19
 8007da2:	4619      	mov	r1, r3
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f001 fc43 	bl	8009630 <set_policy_state>

      status = STAT_ABORT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	757b      	strb	r3, [r7, #21]
      port->pd_tx_status_ = txIdle;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      break;
 8007db6:	e014      	b.n	8007de2 <PolicySend+0x3c2>
    default:
      /* Reset everything */
      port->pd_tx_status_ = txReset;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      status = STAT_ERROR;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	757b      	strb	r3, [r7, #21]

      if (port->policy_is_source_) {
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d108      	bne.n	8007de0 <PolicySend+0x3c0>
        PolicySourceSendHardReset(port);
#endif /* FSC_HAVE_SRC */
      }
      else {
#ifdef FSC_HAVE_SNK
        PolicySinkSendHardReset(port);
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f7fd fe2d 	bl	8005a2e <PolicySinkSendHardReset>
#endif /* FSC_HAVE_SNK */
      }
      break;
 8007dd4:	bf00      	nop
 8007dd6:	e003      	b.n	8007de0 <PolicySend+0x3c0>
      break;
 8007dd8:	bf00      	nop
 8007dda:	e002      	b.n	8007de2 <PolicySend+0x3c2>
      break;
 8007ddc:	bf00      	nop
 8007dde:	e000      	b.n	8007de2 <PolicySend+0x3c2>
      break;
 8007de0:	bf00      	nop
  if (status == STAT_ERROR) {
#ifdef FSC_HAVE_EXTENDED
    port->protocol_ext_state_active_ = FALSE;
#endif /* FSC_HAVE_EXTENDED */
  }
  return status;
 8007de2:	7d7b      	ldrb	r3, [r7, #21]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <ProcessDmtBist>:

/* ---------------- BIST Functionality ---------------- */
void ProcessDmtBist(struct Port *port)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  FSC_U8 bdo = port->policy_rx_data_obj_[0].byte[3] >> 4;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8007dfa:	091b      	lsrs	r3, r3, #4
 8007dfc:	73fb      	strb	r3, [r7, #15]
  switch (bdo) {
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b05      	cmp	r3, #5
 8007e02:	d121      	bne.n	8007e48 <ProcessDmtBist+0x5c>
    case BDO_BIST_Carrier_Mode_2:
      if (port->caps_source_[port->usb_pd_contract_.FVRDO.ObjectPosition - 1]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8007e0a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	1e5a      	subs	r2, r3, #1
          .FPDOSupply.Voltage == PD_05_V) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3278      	adds	r2, #120	; 0x78
 8007e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1a:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8007e1e:	b29b      	uxth	r3, r3
      if (port->caps_source_[port->usb_pd_contract_.FVRDO.ObjectPosition - 1]
 8007e20:	2b64      	cmp	r3, #100	; 0x64
 8007e22:	d13c      	bne.n	8007e9e <ProcessDmtBist+0xb2>
        set_policy_state(port, PE_BIST_Carrier_Mode);
 8007e24:	21a5      	movs	r1, #165	; 0xa5
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fc02 	bl	8009630 <set_policy_state>
        port->protocol_state_ = PRLIdle;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
        notify_observers(EVENT_BIST_ENABLED, port->port_id_, 0);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e42:	f7fd faf5 	bl	8005430 <notify_observers>
      }
      break;
 8007e46:	e02a      	b.n	8007e9e <ProcessDmtBist+0xb2>
    case BDO_BIST_Test_Data: /* Fall through */
    default:
      /* Mask everything but HARDRST and VBUSOK */
      if (port->caps_source_[port->usb_pd_contract_.FVRDO.ObjectPosition - 1]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8007e4e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	1e5a      	subs	r2, r3, #1
          .FPDOSupply.Voltage == PD_05_V) {
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3278      	adds	r2, #120	; 0x78
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8007e62:	b29b      	uxth	r3, r3
      if (port->caps_source_[port->usb_pd_contract_.FVRDO.ObjectPosition - 1]
 8007e64:	2b64      	cmp	r3, #100	; 0x64
 8007e66:	d11c      	bne.n	8007ea2 <ProcessDmtBist+0xb6>
        port->registers_.TcpcCtrl.BIST_TMODE = 1;
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	7d53      	ldrb	r3, [r2, #21]
 8007e6c:	f043 0302 	orr.w	r3, r3, #2
 8007e70:	7553      	strb	r3, [r2, #21]
        WriteRegister(port, regTCPC_CTRL);
 8007e72:	2119      	movs	r1, #25
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fd41 	bl	80088fc <WriteRegister>

        set_policy_state(port, PE_BIST_Test_Data);
 8007e7a:	21a7      	movs	r1, #167	; 0xa7
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fbd7 	bl	8009630 <set_policy_state>
        port->protocol_state_ = PRLDisabled;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
        notify_observers(EVENT_BIST_ENABLED, port->port_id_, 0);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2200      	movs	r2, #0
 8007e92:	4619      	mov	r1, r3
 8007e94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e98:	f7fd faca 	bl	8005430 <notify_observers>
      }
      break;
 8007e9c:	e001      	b.n	8007ea2 <ProcessDmtBist+0xb6>
      break;
 8007e9e:	bf00      	nop
 8007ea0:	e000      	b.n	8007ea4 <ProcessDmtBist+0xb8>
      break;
 8007ea2:	bf00      	nop
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <PolicyBISTCarrierMode2>:

void PolicyBISTCarrierMode2(struct Port *port)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  switch (port->policy_subindex_) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d01e      	beq.n	8007efc <PolicyBISTCarrierMode2+0x50>
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d03e      	beq.n	8007f40 <PolicyBISTCarrierMode2+0x94>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d161      	bne.n	8007f8a <PolicyBISTCarrierMode2+0xde>
    case 0:
      port->registers_.Transmit.TX_SOP = TRANSMIT_BIST_CM2;
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8007ecc:	f043 0307 	orr.w	r3, r3, #7
 8007ed0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
      WriteRegister(port, regTRANSMIT);
 8007ed4:	2150      	movs	r1, #80	; 0x50
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fd10 	bl	80088fc <WriteRegister>
      TimerStart(&port->policy_state_timer_, ktBISTContMode);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	338c      	adds	r3, #140	; 0x8c
 8007ee0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f002 fab3 	bl	800a450 <TimerStart>
      port->policy_subindex_++;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
 8007efa:	e054      	b.n	8007fa6 <PolicyBISTCarrierMode2+0xfa>
    case 1:
      if (TimerExpired(&port->policy_state_timer_)) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	338c      	adds	r3, #140	; 0x8c
 8007f00:	4618      	mov	r0, r3
 8007f02:	f002 faef 	bl	800a4e4 <TimerExpired>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d014      	beq.n	8007f36 <PolicyBISTCarrierMode2+0x8a>
        /* Delay for >200us to allow preamble to finish */
        TimerDisable(&port->policy_state_timer_);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	338c      	adds	r3, #140	; 0x8c
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 fabb 	bl	800a48c <TimerDisable>
        TimerStart(&port->policy_state_timer_, ktGoodCRCDelay);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	338c      	adds	r3, #140	; 0x8c
 8007f1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f002 fa96 	bl	800a450 <TimerStart>
        port->policy_subindex_++;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8007f34:	e037      	b.n	8007fa6 <PolicyBISTCarrierMode2+0xfa>
        port->idle_ = TRUE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8007f3e:	e032      	b.n	8007fa6 <PolicyBISTCarrierMode2+0xfa>
    case 2:
      if (TimerExpired(&port->policy_state_timer_)) {
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	338c      	adds	r3, #140	; 0x8c
 8007f44:	4618      	mov	r0, r3
 8007f46:	f002 facd 	bl	800a4e4 <TimerExpired>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d017      	beq.n	8007f80 <PolicyBISTCarrierMode2+0xd4>
        TimerDisable(&port->policy_state_timer_);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	338c      	adds	r3, #140	; 0x8c
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 fa99 	bl	800a48c <TimerDisable>
        if (port->policy_is_source_) {
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d103      	bne.n	8007f6c <PolicyBISTCarrierMode2+0xc0>
          set_policy_state(port, PE_SRC_Ready);
#endif /* FSC_HAVE_SRC */
        }
        else {
#ifdef FSC_HAVE_SNK
          set_policy_state(port, PE_SNK_Ready);
 8007f64:	2113      	movs	r1, #19
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fb62 	bl	8009630 <set_policy_state>
#endif /* FSC_HAVE_SNK */
        }
        notify_observers(EVENT_BIST_DISABLED, port->port_id_, 0);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2200      	movs	r2, #0
 8007f74:	4619      	mov	r1, r3
 8007f76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f7a:	f7fd fa59 	bl	8005430 <notify_observers>
      }
      else {
        port->idle_ = TRUE;
      }
      break;
 8007f7e:	e012      	b.n	8007fa6 <PolicyBISTCarrierMode2+0xfa>
        port->idle_ = TRUE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8007f88:	e00d      	b.n	8007fa6 <PolicyBISTCarrierMode2+0xfa>
    default:
      set_policy_state(port, PE_ErrorRecovery);
 8007f8a:	21a6      	movs	r1, #166	; 0xa6
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fb4f 	bl	8009630 <set_policy_state>
      notify_observers(EVENT_BIST_DISABLED, port->port_id_, 0);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007fa0:	f7fd fa46 	bl	8005430 <notify_observers>
      break;
 8007fa4:	bf00      	nop
  }
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <PolicyBISTTestData>:

void PolicyBISTTestData(struct Port *port)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Nothing needed here.  Wait for detach or reset to end this mode. */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <PolicyInvalidState>:

void PolicyInvalidState(struct Port *port)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  /* reset if we get to an invalid state */
  if (port->policy_is_source_) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <PolicyInvalidState+0x18>
    PolicySourceSendHardReset(port);
#endif /* FSC_HAVE_SRC */
  }
  else {
#ifdef FSC_HAVE_SNK
    PolicySinkSendHardReset(port);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7fd fd2a 	bl	8005a2e <PolicySinkSendHardReset>
#endif /* FSC_HAVE_SNK */
  }
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <ProcessCableResetState>:

void ProcessCableResetState(struct Port *port)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  switch (port->cbl_rst_state_)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d87e      	bhi.n	80080f6 <ProcessCableResetState+0x112>
 8007ff8:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <ProcessCableResetState+0x1c>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	08008011 	.word	0x08008011
 8008004:	0800804b 	.word	0x0800804b
 8008008:	08008095 	.word	0x08008095
 800800c:	080080cf 	.word	0x080080cf
  {
  case CBL_RST_START:
    if (port->is_vconn_source_) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <ProcessCableResetState+0x40>
      port->cbl_rst_state_ = CBL_RST_VCONN_SOURCE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    } else {
      /* Must be dfp and vconn source. Start with VCONN Swap */
      set_policy_state(port, PE_VCS_Send_Swap);
      port->cbl_rst_state_ = CBL_RST_VCONN_SOURCE;
    }
    break;
 8008022:	e069      	b.n	80080f8 <ProcessCableResetState+0x114>
    } else if (port->policy_is_dfp_) {
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <ProcessCableResetState+0x54>
      port->cbl_rst_state_ = CBL_RST_DR_DFP;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2203      	movs	r2, #3
 8008032:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8008036:	e05f      	b.n	80080f8 <ProcessCableResetState+0x114>
      set_policy_state(port, PE_VCS_Send_Swap);
 8008038:	2169      	movs	r1, #105	; 0x69
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f001 faf8 	bl	8009630 <set_policy_state>
      port->cbl_rst_state_ = CBL_RST_VCONN_SOURCE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8008048:	e056      	b.n	80080f8 <ProcessCableResetState+0x114>
  case CBL_RST_VCONN_SOURCE:
    if (port->is_vconn_source_) {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01a      	beq.n	800808a <ProcessCableResetState+0xa6>
      if (port->policy_is_dfp_) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800805a:	2b00      	cmp	r3, #0
 800805c:	d004      	beq.n	8008068 <ProcessCableResetState+0x84>
        port->cbl_rst_state_ = CBL_RST_SEND;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2204      	movs	r2, #4
 8008062:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
      }
    } else {
      /* VCONN Swap might have failed */
      port->cbl_rst_state_ = CBL_RST_DISABLED;
    }
    break;
 8008066:	e047      	b.n	80080f8 <ProcessCableResetState+0x114>
        set_policy_state(port, port->policy_is_source_ ?
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <ProcessCableResetState+0x92>
 8008072:	2342      	movs	r3, #66	; 0x42
 8008074:	e000      	b.n	8008078 <ProcessCableResetState+0x94>
 8008076:	2347      	movs	r3, #71	; 0x47
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fad8 	bl	8009630 <set_policy_state>
        port->cbl_rst_state_ = CBL_RST_DR_DFP;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2203      	movs	r2, #3
 8008084:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8008088:	e036      	b.n	80080f8 <ProcessCableResetState+0x114>
      port->cbl_rst_state_ = CBL_RST_DISABLED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 8008092:	e031      	b.n	80080f8 <ProcessCableResetState+0x114>
  case CBL_RST_DR_DFP:
    if (port->policy_is_dfp_) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800809a:	2b00      	cmp	r3, #0
 800809c:	d012      	beq.n	80080c4 <ProcessCableResetState+0xe0>
      if (port->is_vconn_source_) {
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d004      	beq.n	80080b2 <ProcessCableResetState+0xce>
        port->cbl_rst_state_ = CBL_RST_SEND;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2204      	movs	r2, #4
 80080ac:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
      }
    } else {
      /* DR Swap might have failed */
      port->cbl_rst_state_ = CBL_RST_DISABLED;
    }
    break;
 80080b0:	e022      	b.n	80080f8 <ProcessCableResetState+0x114>
        set_policy_state(port, PE_VCS_Send_Swap);
 80080b2:	2169      	movs	r1, #105	; 0x69
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 fabb 	bl	8009630 <set_policy_state>
        port->cbl_rst_state_ = CBL_RST_VCONN_SOURCE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 80080c2:	e019      	b.n	80080f8 <ProcessCableResetState+0x114>
      port->cbl_rst_state_ = CBL_RST_DISABLED;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 80080cc:	e014      	b.n	80080f8 <ProcessCableResetState+0x114>
  case CBL_RST_SEND:
    if (port->policy_is_dfp_ &&
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d009      	beq.n	80080ec <ProcessCableResetState+0x108>
        port->is_vconn_source_) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
    if (port->policy_is_dfp_ &&
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d004      	beq.n	80080ec <ProcessCableResetState+0x108>
      set_policy_state(port, PE_DFP_CBL_Send_Cable_Reset);
 80080e2:	21a3      	movs	r1, #163	; 0xa3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 faa3 	bl	8009630 <set_policy_state>
    } else {
      port->cbl_rst_state_ = CBL_RST_DISABLED;
    }
    break;
 80080ea:	e005      	b.n	80080f8 <ProcessCableResetState+0x114>
      port->cbl_rst_state_ = CBL_RST_DISABLED;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
    break;
 80080f4:	e000      	b.n	80080f8 <ProcessCableResetState+0x114>
  case CBL_RST_DISABLED:
  default:
    break;
 80080f6:	bf00      	nop
  }
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <InitializeVars>:
 * I2C read data from the device, configures capability objects, and writes
 * initial configuration values to the device.
 */

void InitializeVars(struct Port *port, FSC_U8 id, FSC_U8 i2c_addr)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
 800810c:	4613      	mov	r3, r2
 800810e:	70bb      	strb	r3, [r7, #2]
  FSC_U32 i = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]

  port->port_id_ = id;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	701a      	strb	r2, [r3, #0]
  port->i2c_addr_ = i2c_addr;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	78ba      	ldrb	r2, [r7, #2]
 800811e:	705a      	strb	r2, [r3, #1]
  port->idle_ = FALSE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  port->initialized_ = FALSE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  port->port_type_ = USBTypeC_UNDEFINED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2203      	movs	r2, #3
 8008134:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  port->source_or_sink_ = Source;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  port->tc_enabled_ = TRUE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  port->tc_state_ = Disabled;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  port->tc_substate_ = 0;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  port->src_preferred_ = Type_C_Implements_Try_SRC;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
  port->snk_preferred_ = Type_C_Implements_Try_SNK;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
  port->acc_support_ = (Type_C_Supports_VCONN_Powered_Accessory ||
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                        Type_C_Supports_Audio_Accessory) ? TRUE : FALSE;
  port->snk_current_ = utccOpen;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  port->src_current_ = Rp_Value + 1;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2203      	movs	r2, #3
 800817c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  if (port->src_current_ < utccDefault || port->src_current_ > utcc3p0A)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008186:	2b00      	cmp	r3, #0
 8008188:	d004      	beq.n	8008194 <InitializeVars+0x94>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008190:	2b03      	cmp	r3, #3
 8008192:	d903      	bls.n	800819c <InitializeVars+0x9c>
  {
    port->src_current_ = utccDefault;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  }

  port->cc_pin_ = NONE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  port->cc_term_ = CCTypeUndefined;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2205      	movs	r2, #5
 80081a8:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
  ResetDebounceVariables(port);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fe25 	bl	8008dfc <ResetDebounceVariables>
  port->is_hard_reset_ = FALSE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
#ifdef FSC_HAVE_FRSWAP
  port->is_fr_swap_ = FALSE;
#endif /* FSC_HAVE_FRSWAP */
  port->is_pr_swap_ = FALSE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  port->is_vconn_swap_ = FALSE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
  port->unattach_loop_counter_ = 0;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
  port->vbus_transition_time_ = 20 * kMSTimeFactor;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80081d8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  port->is_dead_battery_ = FALSE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  port->have_sink_path_ = FALSE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  port->have_HV_path_ = FALSE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
  port->pd_active_ = FALSE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
  port->pd_enabled_ = USB_PD_Support;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  port->protocol_state_ = PRLDisabled;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  port->pd_tx_status_ = txIdle;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  port->pd_tx_flag_ = FALSE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  port->policy_msg_tx_sop_ = SOP_TYPE_SOP;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  port->protocol_msg_rx_ = FALSE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  port->protocol_msg_rx_sop_ = SOP_TYPE_SOP;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  port->protocol_msg_tx_sop_ = SOP_TYPE_SOP;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
  port->protocol_retries_ = RETRIES_PD30;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
  port->protocol_use_sinktx_ = FALSE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  port->waiting_on_hr_ = FALSE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  port->policy_src_cap_ext_.VID = Manufacturer_Info_VID_Port;
  port->policy_src_cap_ext_.PID = Manufacturer_Info_PID_Port;
  port->policy_src_cap_ext_.SrcPDP = PD_Power_as_Source / 1000;
#endif /* FSC_HAVE_SRC */
#endif /* FSC_HAVE_EXTENDED */
  port->policy_state_ = PE_SRC_Disabled;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2206      	movs	r2, #6
 8008258:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  port->policy_subindex_ = 0;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
  port->policy_is_ams_ = FALSE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
  port->policy_sinktx_state_ = SinkTxNG;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

  port->policy_is_source_ = TRUE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
  port->policy_is_dfp_ = TRUE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
  port->is_contract_valid_ = FALSE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
  port->is_vconn_source_ = FALSE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
  port->collision_counter_ = 0;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  port->hard_reset_counter_ = 0;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  port->caps_counter_ = 0;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  port->policy_has_contract_ = FALSE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
  port->needs_goto_min_ = FALSE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
  port->renegotiate_ = FALSE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
  port->policy_wait_on_sink_caps_ = FALSE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
  port->sink_selected_voltage_ = FSC_VBUS_05_V;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  port->sink_transition_up_ = FALSE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
  port->sink_request_max_voltage_ = 5000;  /* 12V */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
  port->sink_request_max_power_ = 1000;      /* 0.1A */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082ee:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  port->sink_request_op_power_ = 100;       /* 0.1A */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2264      	movs	r2, #100	; 0x64
 80082f6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  port->sink_partner_max_power_ = 0;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  port->sink_request_low_power_ = FALSE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  port->sink_goto_min_compatible_ = FALSE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
  port->sink_usb_suspend_compatible_ = FALSE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
  port->sink_usb_comm_capable_ = FALSE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
  port->partner_caps_.object = 0;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
  port->partner_caps_available_ = FALSE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
  port->pd_HV_option_ = FSC_VBUS_09_V;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f242 3228 	movw	r2, #9000	; 0x2328
 8008338:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
  port->source_is_apdo_ = FALSE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
  port->pd_preferred_rev_ = PD_Specification_Revision;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248

#if defined(FSC_DEBUG) || defined(FSC_HAVE_USBHID)
  port->source_caps_updated_ = FALSE;
#endif /* FSC_DEBUG || FSC_HAVE_USBHID */

  TimerDisable(&port->tc_state_timer_);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3380      	adds	r3, #128	; 0x80
 8008350:	4618      	mov	r0, r3
 8008352:	f002 f89b 	bl	800a48c <TimerDisable>
  TimerDisable(&port->policy_state_timer_);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	338c      	adds	r3, #140	; 0x8c
 800835a:	4618      	mov	r0, r3
 800835c:	f002 f896 	bl	800a48c <TimerDisable>
  TimerDisable(&port->policy_sinktx_timer_);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3398      	adds	r3, #152	; 0x98
 8008364:	4618      	mov	r0, r3
 8008366:	f002 f891 	bl	800a48c <TimerDisable>
  TimerDisable(&port->cc_debounce_timer_);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	33a4      	adds	r3, #164	; 0xa4
 800836e:	4618      	mov	r0, r3
 8008370:	f002 f88c 	bl	800a48c <TimerDisable>
  TimerDisable(&port->pd_debounce_timer_);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	33b0      	adds	r3, #176	; 0xb0
 8008378:	4618      	mov	r0, r3
 800837a:	f002 f887 	bl	800a48c <TimerDisable>
  TimerDisable(&port->no_response_timer_);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	33bc      	adds	r3, #188	; 0xbc
 8008382:	4618      	mov	r0, r3
 8008384:	f002 f882 	bl	800a48c <TimerDisable>
  TimerDisable(&port->swap_source_start_timer_);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	33c8      	adds	r3, #200	; 0xc8
 800838c:	4618      	mov	r0, r3
 800838e:	f002 f87d 	bl	800a48c <TimerDisable>
  TimerDisable(&port->pps_timer_);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	33e0      	adds	r3, #224	; 0xe0
 8008396:	4618      	mov	r0, r3
 8008398:	f002 f878 	bl	800a48c <TimerDisable>
  TimerDisable(&port->dpm_timer_);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	33d4      	adds	r3, #212	; 0xd4
 80083a0:	4618      	mov	r0, r3
 80083a2:	f002 f873 	bl	800a48c <TimerDisable>
  TimerDisable(&port->protocol_timer_);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	33ec      	adds	r3, #236	; 0xec
 80083aa:	4618      	mov	r0, r3
 80083ac:	f002 f86e 	bl	800a48c <TimerDisable>

  /*
   * Initialize SOP-related arrays.
   * NOTE: Update this loop condition if supporting additional SOP types!
   */
  for (i = 0; i < NUM_SOP_SUPPORTED; ++i) {
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e00f      	b.n	80083d6 <InitializeVars+0x2d6>
    port->message_id_counter_[i] = 0;
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3348      	adds	r3, #72	; 0x48
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	2200      	movs	r2, #0
 80083c2:	605a      	str	r2, [r3, #4]
    port->message_id_[i] = 0xFF;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	324c      	adds	r2, #76	; 0x4c
 80083ca:	21ff      	movs	r1, #255	; 0xff
 80083cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NUM_SOP_SUPPORTED; ++i) {
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3301      	adds	r3, #1
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d9ec      	bls.n	80083b6 <InitializeVars+0x2b6>
  }

  for (i = 0; i < 7; ++i) {
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	e029      	b.n	8008436 <InitializeVars+0x336>
    port->policy_rx_data_obj_[i].object = 0;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	3258      	adds	r2, #88	; 0x58
 80083e8:	2100      	movs	r1, #0
 80083ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->policy_tx_data_obj_[i].object = 0;
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	335e      	adds	r3, #94	; 0x5e
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	2200      	movs	r2, #0
 80083fa:	605a      	str	r2, [r3, #4]
    port->pd_transmit_objects_[i].object = 0;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	326a      	adds	r2, #106	; 0x6a
 8008402:	2100      	movs	r1, #0
 8008404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->caps_sink_[i].object = 0;
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3370      	adds	r3, #112	; 0x70
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	2200      	movs	r2, #0
 8008414:	605a      	str	r2, [r3, #4]
    port->caps_source_[i].object = 0;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	3278      	adds	r2, #120	; 0x78
 800841c:	2100      	movs	r1, #0
 800841e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->caps_received_[i].object = 0;
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	337e      	adds	r3, #126	; 0x7e
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	2200      	movs	r2, #0
 800842e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < 7; ++i) {
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3301      	adds	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b06      	cmp	r3, #6
 800843a:	d9d2      	bls.n	80083e2 <InitializeVars+0x2e2>
  {
  case 0:
      port->port_type_ = USBTypeC_Source;
      break;
  case 1:
      port->port_type_ = USBTypeC_Sink;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
      break;
 8008444:	bf00      	nop
      break;
  }

  /* Set up the capabilities objects */
#ifdef FSC_HAVE_SNK
  port->caps_header_sink_.NumDataObjects = Num_Snk_PDOs;
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	f892 319d 	ldrb.w	r3, [r2, #413]	; 0x19d
 800844c:	2101      	movs	r1, #1
 800844e:	f361 1306 	bfi	r3, r1, #4, #3
 8008452:	f882 319d 	strb.w	r3, [r2, #413]	; 0x19d
  port->caps_header_sink_.PortDataRole = 0;                                /* UFP */
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	f892 319c 	ldrb.w	r3, [r2, #412]	; 0x19c
 800845c:	f36f 1345 	bfc	r3, #5, #1
 8008460:	f882 319c 	strb.w	r3, [r2, #412]	; 0x19c
  port->caps_header_sink_.PortPowerRole = 0;                               /* Sink */
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	f892 319d 	ldrb.w	r3, [r2, #413]	; 0x19d
 800846a:	f36f 0300 	bfc	r3, #0, #1
 800846e:	f882 319d 	strb.w	r3, [r2, #413]	; 0x19d
  port->caps_header_sink_.SpecRevision = port->pd_preferred_rev_;        /* Spec rev */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	b2d9      	uxtb	r1, r3
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	f892 319c 	ldrb.w	r3, [r2, #412]	; 0x19c
 8008484:	f361 1387 	bfi	r3, r1, #6, #2
 8008488:	f882 319c 	strb.w	r3, [r2, #412]	; 0x19c
  VIF_InitializeSnkCaps(port->caps_sink_);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8008492:	4618      	mov	r0, r3
 8008494:	f005 fb6b 	bl	800db6e <VIF_InitializeSnkCaps>
  port->caps_header_source_.SpecRevision = port->pd_preferred_rev_;               /* Spec rev */
  VIF_InitializeSrcCaps(port->caps_source_);
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_VDM
  TimerDisable(&port->vdm_timer_);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 fff4 	bl	800a48c <TimerDisable>

  port->vdm_next_ps_ = PE_SRC_Disabled;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2206      	movs	r2, #6
 80084a8:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
  port->original_policy_state_ = PE_SRC_Disabled;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2206      	movs	r2, #6
 80084b0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  port->vdm_expecting_response_ = FALSE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
  port->vdm_sending_data_ = FALSE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
  port->vdm_auto_state_ = AUTO_VDM_INIT;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  port->vdm_msg_length_ = 0;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
  port->vdm_msg_tx_sop_ = SOP_TYPE_SOP;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
  port->svid_discv_idx_ = -1;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084e2:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
  port->svid_discvry_done_ = FALSE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  port->svid_enable_ = (Num_SVIDs_min_SOP > 0 &&
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
                       Modal_Operation_Supported_SOP) ? TRUE : FALSE;
  port->mode_enable_ = Modal_Operation_Supported_SOP;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
  port->my_svid_ = SVID_DEFAULT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f64f 7201 	movw	r2, #65281	; 0xff01
 8008504:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
  port->my_mode_ = MODE_DEFAULT;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  port->mode_entered_ = FALSE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  port->discover_id_counter_ = 0;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c

  for (i = 0; i < 7; ++i) {
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e009      	b.n	800853a <InitializeVars+0x43a>
    port->vdm_msg_obj_[i].object = 0;
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	339e      	adds	r3, #158	; 0x9e
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	2200      	movs	r2, #0
 8008532:	605a      	str	r2, [r3, #4]
  for (i = 0; i < 7; ++i) {
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b06      	cmp	r3, #6
 800853e:	d9f2      	bls.n	8008526 <InitializeVars+0x426>
  }
  port->auto_mode_entry_pos_ = -1;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	22ff      	movs	r2, #255	; 0xff
 8008544:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
  port->auto_mode_entry_enabled_ = TRUE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd

#ifdef FSC_HAVE_DP
  DP_Initialize(port);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7fc f9b5 	bl	80048c0 <DP_Initialize>
  port->display_port_data_.DpAutoModeEntryEnabled = DisplayPort_Auto_Mode_Entry;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
  port->display_port_data_.DpEnabled = DisplayPort_Enabled;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
#endif /* FSC_HAVE_DP */
#endif /* FSC_HAVE_VDM */

  /* Initialize DPM before returning */
  DPM_Initialize(port);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7fc fe68 	bl	800523c <DPM_Initialize>
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <InitializePort>:

void InitializePort(struct Port *port)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Read all of the register values to update our cache */
  ReadAllRegisters(port);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f8aa 	bl	80086d6 <ReadAllRegisters>

  /* Clear VD Masks */
  /* NOTE - This is a chip bug - AlertMskH.M_VD_ALERT doesn't work */
  port->registers_.AlertVDMsk.byte = 0;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  WriteRegister(port, regALERT_VD_MSK);
 800858a:	21b4      	movs	r1, #180	; 0xb4
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f9b5 	bl	80088fc <WriteRegister>

  /* Clear reset flag */
  ClearInterrupt(port, regFAULTSTAT, MSK_ALL_REGS_RESET);
 8008592:	2280      	movs	r2, #128	; 0x80
 8008594:	211f      	movs	r1, #31
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9fb 	bl	8008992 <ClearInterrupt>

  /* Set our snk/src path options */
  port->have_sink_path_ = TRUE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  port->have_HV_path_ = TRUE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

  /* Set SDAC hysteresis to 85mv */
  port->registers_.Slice.SDAC_HYS = SDAC_HYS_DEFAULT;
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 80085b2:	2101      	movs	r1, #1
 80085b4:	f361 1387 	bfi	r3, r1, #6, #2
 80085b8:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
  port->registers_.Slice.SDAC = SDAC_DEFAULT;
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 80085c2:	2120      	movs	r1, #32
 80085c4:	f361 0305 	bfi	r3, r1, #0, #6
 80085c8:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
  WriteRegister(port, regSLICE);
 80085cc:	21a1      	movs	r1, #161	; 0xa1
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f994 	bl	80088fc <WriteRegister>

  /* Disable automatic debug accessory while firmware is running */
  port->registers_.TcpcCtrl.DEBUG_ACC_CTRL = 1;
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	7d53      	ldrb	r3, [r2, #21]
 80085d8:	f043 0310 	orr.w	r3, r3, #16
 80085dc:	7553      	strb	r3, [r2, #21]
  WriteRegister(port, regTCPC_CTRL);
 80085de:	2119      	movs	r1, #25
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f98b 	bl	80088fc <WriteRegister>

  /* Set GPIO1 (3695 Control) Enabled and High (active low) at startup */
  port->registers_.Gpio1Cfg.GPO1_EN = 1;
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 80085ec:	f043 0301 	orr.w	r3, r3, #1
 80085f0:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
  port->registers_.Gpio1Cfg.GPO1_VAL = 1;
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 80085fa:	f043 0304 	orr.w	r3, r3, #4
 80085fe:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
  WriteRegister(port, regGPIO1_CFG);
 8008602:	21a4      	movs	r1, #164	; 0xa4
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f979 	bl	80088fc <WriteRegister>

  /* Initially mask all interrupts - unmask/remask as needed */
  port->registers_.AlertMskL.byte = 0;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	741a      	strb	r2, [r3, #16]
  WriteRegister(port, regALERTMSKL);
 8008610:	2112      	movs	r1, #18
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f972 	bl	80088fc <WriteRegister>
  port->registers_.AlertMskH.byte = 0;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	745a      	strb	r2, [r3, #17]
  WriteRegister(port, regALERTMSKH);
 800861e:	2113      	movs	r1, #19
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f96b 	bl	80088fc <WriteRegister>
    port->source_or_sink_ = Sink;
    port->is_dead_battery_ = TRUE;
  }
#endif /* 0 */

  port->initialized_ = TRUE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
}
 800862e:	bf00      	nop
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <ReadRegister>:

/* Register Update Functions */
FSC_BOOL ReadRegister(struct Port *port, enum RegAddress regaddress)
{
 8008636:	b590      	push	{r4, r7, lr}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]
  return platform_i2c_read(port->i2c_addr_, (FSC_U8)regaddress, 1,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	785c      	ldrb	r4, [r3, #1]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3302      	adds	r3, #2
 800864a:	78fa      	ldrb	r2, [r7, #3]
 800864c:	4611      	mov	r1, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fc4a 	bl	8009ee8 <AddressToRegister>
 8008654:	4603      	mov	r3, r0
 8008656:	78f9      	ldrb	r1, [r7, #3]
 8008658:	2201      	movs	r2, #1
 800865a:	4620      	mov	r0, r4
 800865c:	f7f8 f96a 	bl	8000934 <platform_i2c_read>
 8008660:	4603      	mov	r3, r0
                           AddressToRegister(&port->registers_, regaddress));
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	bd90      	pop	{r4, r7, pc}

0800866a <ReadRegisters>:

FSC_BOOL ReadRegisters(struct Port *port, enum RegAddress regaddr, FSC_U8 cnt)
{
 800866a:	b590      	push	{r4, r7, lr}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
 8008676:	4613      	mov	r3, r2
 8008678:	70bb      	strb	r3, [r7, #2]
  return platform_i2c_read(port->i2c_addr_, (FSC_U8)regaddr, cnt,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	785c      	ldrb	r4, [r3, #1]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3302      	adds	r3, #2
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f001 fc2e 	bl	8009ee8 <AddressToRegister>
 800868c:	4603      	mov	r3, r0
 800868e:	78ba      	ldrb	r2, [r7, #2]
 8008690:	78f9      	ldrb	r1, [r7, #3]
 8008692:	4620      	mov	r0, r4
 8008694:	f7f8 f94e 	bl	8000934 <platform_i2c_read>
 8008698:	4603      	mov	r3, r0
                           AddressToRegister(&port->registers_, regaddr));
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd90      	pop	{r4, r7, pc}

080086a2 <ReadStatusRegisters>:
 * ReadStatusRegisters
 *
 * Updates register map with the device's interrupt and status register data.
 */
void ReadStatusRegisters(struct Port *port)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* Read interrupts */
  ReadRegisters(port, regALERTL, 2);
 80086aa:	2202      	movs	r2, #2
 80086ac:	2110      	movs	r1, #16
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff ffdb 	bl	800866a <ReadRegisters>
  ReadRegister(port, regALERT_VD);
 80086b4:	21b3      	movs	r1, #179	; 0xb3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff ffbd 	bl	8008636 <ReadRegister>

  /* Read statuses */
  ReadRegisters(port, regCCSTAT, 3);
 80086bc:	2203      	movs	r2, #3
 80086be:	211d      	movs	r1, #29
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ffd2 	bl	800866a <ReadRegisters>
  ReadRegister(port, regVD_STAT);
 80086c6:	21a3      	movs	r1, #163	; 0xa3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ffb4 	bl	8008636 <ReadRegister>
}
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <ReadAllRegisters>:

void ReadAllRegisters(struct Port *port)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  ReadRegister(port, regVENDIDL);
 80086de:	2100      	movs	r1, #0
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff ffa8 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVENDIDH);
 80086e6:	2101      	movs	r1, #1
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff ffa4 	bl	8008636 <ReadRegister>
  ReadRegister(port, regPRODIDL);
 80086ee:	2102      	movs	r1, #2
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff ffa0 	bl	8008636 <ReadRegister>
  ReadRegister(port, regPRODIDH);
 80086f6:	2103      	movs	r1, #3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff ff9c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regDEVIDL);
 80086fe:	2104      	movs	r1, #4
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff ff98 	bl	8008636 <ReadRegister>
  ReadRegister(port, regDEVIDH);
 8008706:	2105      	movs	r1, #5
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff ff94 	bl	8008636 <ReadRegister>
  ReadRegister(port, regTYPECREVL);
 800870e:	2106      	movs	r1, #6
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff ff90 	bl	8008636 <ReadRegister>
  ReadRegister(port, regTYPECREVH);
 8008716:	2107      	movs	r1, #7
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff ff8c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regUSBPDVER);
 800871e:	2108      	movs	r1, #8
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff ff88 	bl	8008636 <ReadRegister>
  ReadRegister(port, regUSBPDREV);
 8008726:	2109      	movs	r1, #9
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff ff84 	bl	8008636 <ReadRegister>
  ReadRegister(port, regPDIFREVL);
 800872e:	210a      	movs	r1, #10
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff ff80 	bl	8008636 <ReadRegister>
  ReadRegister(port, regPDIFREVH);
 8008736:	210b      	movs	r1, #11
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff ff7c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regALERTL);
 800873e:	2110      	movs	r1, #16
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ff78 	bl	8008636 <ReadRegister>
  ReadRegister(port, regALERTH);
 8008746:	2111      	movs	r1, #17
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff ff74 	bl	8008636 <ReadRegister>
  ReadRegister(port, regALERTMSKL);
 800874e:	2112      	movs	r1, #18
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff ff70 	bl	8008636 <ReadRegister>
  ReadRegister(port, regALERTMSKH);
 8008756:	2113      	movs	r1, #19
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff ff6c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regPWRSTATMSK);
 800875e:	2114      	movs	r1, #20
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff ff68 	bl	8008636 <ReadRegister>
  ReadRegister(port, regFAULTSTATMSK);
 8008766:	2115      	movs	r1, #21
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff ff64 	bl	8008636 <ReadRegister>
  ReadRegister(port, regSTD_OUT_CFG);
 800876e:	2118      	movs	r1, #24
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff ff60 	bl	8008636 <ReadRegister>
  ReadRegister(port, regTCPC_CTRL);
 8008776:	2119      	movs	r1, #25
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff5c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regROLECTRL);
 800877e:	211a      	movs	r1, #26
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff ff58 	bl	8008636 <ReadRegister>
  ReadRegister(port, regFAULTCTRL);
 8008786:	211b      	movs	r1, #27
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff ff54 	bl	8008636 <ReadRegister>
  ReadRegister(port, regPWRCTRL);
 800878e:	211c      	movs	r1, #28
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff ff50 	bl	8008636 <ReadRegister>
  ReadRegister(port, regCCSTAT);
 8008796:	211d      	movs	r1, #29
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ff4c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regPWRSTAT);
 800879e:	211e      	movs	r1, #30
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff ff48 	bl	8008636 <ReadRegister>
  ReadRegister(port, regFAULTSTAT);
 80087a6:	211f      	movs	r1, #31
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff ff44 	bl	8008636 <ReadRegister>
  ReadRegister(port, regCOMMAND);
 80087ae:	2123      	movs	r1, #35	; 0x23
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff ff40 	bl	8008636 <ReadRegister>
  ReadRegister(port, regDEVCAP1L);
 80087b6:	2124      	movs	r1, #36	; 0x24
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff ff3c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regDEVCAP1H);
 80087be:	2125      	movs	r1, #37	; 0x25
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff ff38 	bl	8008636 <ReadRegister>
  ReadRegister(port, regDEVCAP2L);
 80087c6:	2126      	movs	r1, #38	; 0x26
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ff34 	bl	8008636 <ReadRegister>
  ReadRegister(port, regSTD_OUT_CAP);
 80087ce:	2129      	movs	r1, #41	; 0x29
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff ff30 	bl	8008636 <ReadRegister>
  ReadRegister(port, regMSGHEADR);
 80087d6:	212e      	movs	r1, #46	; 0x2e
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff2c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regRXDETECT);
 80087de:	212f      	movs	r1, #47	; 0x2f
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff ff28 	bl	8008636 <ReadRegister>
  ReadRegister(port, regRXBYTECNT);
 80087e6:	2130      	movs	r1, #48	; 0x30
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff ff24 	bl	8008636 <ReadRegister>
  ReadRegister(port, regRXSTAT);
 80087ee:	2131      	movs	r1, #49	; 0x31
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff ff20 	bl	8008636 <ReadRegister>
  ReadRegister(port, regTRANSMIT);
 80087f6:	2150      	movs	r1, #80	; 0x50
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff ff1c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regTXBYTECNT);
 80087fe:	2151      	movs	r1, #81	; 0x51
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff ff18 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVBUS_VOLTAGE_L);
 8008806:	2170      	movs	r1, #112	; 0x70
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff ff14 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVBUS_VOLTAGE_H);
 800880e:	2171      	movs	r1, #113	; 0x71
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ff10 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVBUS_SNK_DISCL);
 8008816:	2172      	movs	r1, #114	; 0x72
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff ff0c 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVBUS_SNK_DISCH);
 800881e:	2173      	movs	r1, #115	; 0x73
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff ff08 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVBUS_STOP_DISCL);
 8008826:	2174      	movs	r1, #116	; 0x74
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ff04 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVBUS_STOP_DISCH);
 800882e:	2175      	movs	r1, #117	; 0x75
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff ff00 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVALARMHCFGL);
 8008836:	2176      	movs	r1, #118	; 0x76
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff fefc 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVALARMHCFGH);
 800883e:	2177      	movs	r1, #119	; 0x77
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fef8 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVALARMLCFGL);
 8008846:	2178      	movs	r1, #120	; 0x78
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff fef4 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVALARMLCFGH);
 800884e:	2179      	movs	r1, #121	; 0x79
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff fef0 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVCONN_OCP);
 8008856:	21a0      	movs	r1, #160	; 0xa0
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff feec 	bl	8008636 <ReadRegister>
  ReadRegister(port, regSLICE);
 800885e:	21a1      	movs	r1, #161	; 0xa1
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff fee8 	bl	8008636 <ReadRegister>
  ReadRegister(port, regRESET);
 8008866:	21a2      	movs	r1, #162	; 0xa2
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff fee4 	bl	8008636 <ReadRegister>
  ReadRegister(port, regVD_STAT);
 800886e:	21a3      	movs	r1, #163	; 0xa3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fee0 	bl	8008636 <ReadRegister>
  ReadRegister(port, regGPIO1_CFG);
 8008876:	21a4      	movs	r1, #164	; 0xa4
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff fedc 	bl	8008636 <ReadRegister>
  ReadRegister(port, regGPIO2_CFG);
 800887e:	21a5      	movs	r1, #165	; 0xa5
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fed8 	bl	8008636 <ReadRegister>
  ReadRegister(port, regGPIO_STAT);
 8008886:	21a6      	movs	r1, #166	; 0xa6
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fed4 	bl	8008636 <ReadRegister>
  ReadRegister(port, regDRPTOGGLE);
 800888e:	21a7      	movs	r1, #167	; 0xa7
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff fed0 	bl	8008636 <ReadRegister>
  ReadRegister(port, regSINK_TRANSMIT);
 8008896:	21b0      	movs	r1, #176	; 0xb0
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff fecc 	bl	8008636 <ReadRegister>
  ReadRegister(port, regSRC_FRSWAP);
 800889e:	21b1      	movs	r1, #177	; 0xb1
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff fec8 	bl	8008636 <ReadRegister>
  ReadRegister(port, regSNK_FRSWAP);
 80088a6:	21b2      	movs	r1, #178	; 0xb2
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff fec4 	bl	8008636 <ReadRegister>
  ReadRegister(port, regALERT_VD);
 80088ae:	21b3      	movs	r1, #179	; 0xb3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff fec0 	bl	8008636 <ReadRegister>
  ReadRegister(port, regALERT_VD_MSK);
 80088b6:	21b4      	movs	r1, #180	; 0xb4
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff febc 	bl	8008636 <ReadRegister>
  ReadRegister(port, regRPVAL_OVERRIDE);
 80088be:	21b5      	movs	r1, #181	; 0xb5
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff feb8 	bl	8008636 <ReadRegister>
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <ReadRxRegisters>:

void ReadRxRegisters(struct Port *port, FSC_U8 numbytes)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  /* Check length limit */
  if (numbytes > COMM_BUFFER_LENGTH) numbytes = COMM_BUFFER_LENGTH;
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	2b1c      	cmp	r3, #28
 80088de:	d901      	bls.n	80088e4 <ReadRxRegisters+0x16>
 80088e0:	231c      	movs	r3, #28
 80088e2:	70fb      	strb	r3, [r7, #3]

  platform_i2c_read(port->i2c_addr_, regRXDATA_00,
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7858      	ldrb	r0, [r3, #1]
                    numbytes, port->registers_.RxData);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3327      	adds	r3, #39	; 0x27
  platform_i2c_read(port->i2c_addr_, regRXDATA_00,
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	2134      	movs	r1, #52	; 0x34
 80088f0:	f7f8 f820 	bl	8000934 <platform_i2c_read>
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <WriteRegister>:

void WriteRegister(struct Port *port, enum RegAddress regaddress)
{
 80088fc:	b590      	push	{r4, r7, lr}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  platform_i2c_write(port->i2c_addr_, (FSC_U8)regaddress, 1,
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	785c      	ldrb	r4, [r3, #1]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3302      	adds	r3, #2
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f001 fae7 	bl	8009ee8 <AddressToRegister>
 800891a:	4603      	mov	r3, r0
 800891c:	78f9      	ldrb	r1, [r7, #3]
 800891e:	2201      	movs	r2, #1
 8008920:	4620      	mov	r0, r4
 8008922:	f7f8 f841 	bl	80009a8 <platform_i2c_write>
                     AddressToRegister(&port->registers_, regaddress));
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	bd90      	pop	{r4, r7, pc}

0800892e <WriteRegisters>:

void WriteRegisters(struct Port *port, enum RegAddress regaddr, FSC_U8 cnt)
{
 800892e:	b590      	push	{r4, r7, lr}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	70fb      	strb	r3, [r7, #3]
 800893a:	4613      	mov	r3, r2
 800893c:	70bb      	strb	r3, [r7, #2]
  platform_i2c_write(port->i2c_addr_, (FSC_U8)regaddr, cnt,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	785c      	ldrb	r4, [r3, #1]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3302      	adds	r3, #2
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f001 facc 	bl	8009ee8 <AddressToRegister>
 8008950:	4603      	mov	r3, r0
 8008952:	78ba      	ldrb	r2, [r7, #2]
 8008954:	78f9      	ldrb	r1, [r7, #3]
 8008956:	4620      	mov	r0, r4
 8008958:	f7f8 f826 	bl	80009a8 <platform_i2c_write>
                     AddressToRegister(&port->registers_, regaddr));
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	bd90      	pop	{r4, r7, pc}

08008964 <WriteTxRegisters>:

void WriteTxRegisters(struct Port *port, FSC_U8 numbytes)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  /* Check length limit */
  if (numbytes > COMM_BUFFER_LENGTH) numbytes = COMM_BUFFER_LENGTH;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	2b1c      	cmp	r3, #28
 8008974:	d901      	bls.n	800897a <WriteTxRegisters+0x16>
 8008976:	231c      	movs	r3, #28
 8008978:	70fb      	strb	r3, [r7, #3]

  platform_i2c_write(port->i2c_addr_, regTXDATA_00,
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7858      	ldrb	r0, [r3, #1]
                     numbytes, port->registers_.TxData);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3347      	adds	r3, #71	; 0x47
  platform_i2c_write(port->i2c_addr_, regTXDATA_00,
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	2154      	movs	r1, #84	; 0x54
 8008986:	f7f8 f80f 	bl	80009a8 <platform_i2c_write>
}
 800898a:	bf00      	nop
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <ClearInterrupt>:
/*
 * Sets bits indicated by mask in interrupt register at address. This has the
 * effect of clearing the specified interrupt(s).
 */
void ClearInterrupt(struct Port *port, enum RegAddress address, FSC_U8 mask)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	70fb      	strb	r3, [r7, #3]
 800899e:	4613      	mov	r3, r2
 80089a0:	70bb      	strb	r3, [r7, #2]
  FSC_U8 data = mask;
 80089a2:	78bb      	ldrb	r3, [r7, #2]
 80089a4:	73fb      	strb	r3, [r7, #15]
  platform_i2c_write(port->i2c_addr_, (FSC_U8)address, 1, &data);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	7858      	ldrb	r0, [r3, #1]
 80089aa:	f107 030f 	add.w	r3, r7, #15
 80089ae:	78f9      	ldrb	r1, [r7, #3]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f7f7 fff9 	bl	80009a8 <platform_i2c_write>
  RegClearBits(&(port->registers_), address, mask);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3302      	adds	r3, #2
 80089ba:	78ba      	ldrb	r2, [r7, #2]
 80089bc:	78f9      	ldrb	r1, [r7, #3]
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 fd1e 	bl	800a400 <RegClearBits>
}
 80089c4:	bf00      	nop
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <SendCommand>:
 * SendCommand
 *
 * Sets the port's command register to cmd and writes it to the device.
 */
void SendCommand(struct Port *port, enum DeviceCommand cmd)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  /* Make sure the command is supported */
  if ((cmd == SinkVbus || cmd == DisableSinkVbus) && !port->have_sink_path_)
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	2b55      	cmp	r3, #85	; 0x55
 80089dc:	d002      	beq.n	80089e4 <SendCommand+0x18>
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	2b44      	cmp	r3, #68	; 0x44
 80089e2:	d104      	bne.n	80089ee <SendCommand+0x22>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d04f      	beq.n	8008a8e <SendCommand+0xc2>
    return;

  if (cmd == SourceVbusHighV) {
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	2b88      	cmp	r3, #136	; 0x88
 80089f2:	d113      	bne.n	8008a1c <SendCommand+0x50>
    if (!port->have_HV_path_) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d049      	beq.n	8008a92 <SendCommand+0xc6>
      return;
    }
    else {
      /* GPIO workaround for HV path */
      platform_setHVSwitch(TRUE);
 80089fe:	2001      	movs	r0, #1
 8008a00:	f7f8 f854 	bl	8000aac <platform_setHVSwitch>

      platform_delay(2000);
 8008a04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008a08:	f7f8 f8c2 	bl	8000b90 <platform_delay>

      port->registers_.Command = DisableSourceVbus;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2266      	movs	r2, #102	; 0x66
 8008a10:	771a      	strb	r2, [r3, #28]
      WriteRegister(port, regCOMMAND);
 8008a12:	2123      	movs	r1, #35	; 0x23
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff ff71 	bl	80088fc <WriteRegister>
 8008a1a:	e006      	b.n	8008a2a <SendCommand+0x5e>
    }
  }
  else {
    port->registers_.Command = cmd;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	78fa      	ldrb	r2, [r7, #3]
 8008a20:	771a      	strb	r2, [r3, #28]
    WriteRegister(port, regCOMMAND);
 8008a22:	2123      	movs	r1, #35	; 0x23
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff ff69 	bl	80088fc <WriteRegister>
  }

  if (cmd == SourceVbusDefaultV) {
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	2b77      	cmp	r3, #119	; 0x77
 8008a2e:	d104      	bne.n	8008a3a <SendCommand+0x6e>
    port->sink_selected_voltage_ = FSC_VBUS_05_V;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a36:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  }

  /* Check the 3695 GPIO enable bit if needed */
  if (cmd == SourceVbusDefaultV || cmd == SinkVbus) {
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	2b77      	cmp	r3, #119	; 0x77
 8008a3e:	d002      	beq.n	8008a46 <SendCommand+0x7a>
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	2b55      	cmp	r3, #85	; 0x55
 8008a44:	d10b      	bne.n	8008a5e <SendCommand+0x92>
    port->registers_.Gpio1Cfg.GPO1_VAL = 0; /* ON - Active Low */
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8008a4c:	f36f 0382 	bfc	r3, #2, #1
 8008a50:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    WriteRegister(port, regGPIO1_CFG);
 8008a54:	21a4      	movs	r1, #164	; 0xa4
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff ff50 	bl	80088fc <WriteRegister>
 8008a5c:	e00a      	b.n	8008a74 <SendCommand+0xa8>
  }
  else {
    port->registers_.Gpio1Cfg.GPO1_VAL = 1; /* OFF - Active Low */
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	f892 3071 	ldrb.w	r3, [r2, #113]	; 0x71
 8008a64:	f043 0304 	orr.w	r3, r3, #4
 8008a68:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
    WriteRegister(port, regGPIO1_CFG);
 8008a6c:	21a4      	movs	r1, #164	; 0xa4
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff ff44 	bl	80088fc <WriteRegister>
  }

  if (cmd != SourceVbusHighV) {
 8008a74:	78fb      	ldrb	r3, [r7, #3]
 8008a76:	2b88      	cmp	r3, #136	; 0x88
 8008a78:	d00c      	beq.n	8008a94 <SendCommand+0xc8>
      platform_setHVSwitch(FALSE);
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f7f8 f816 	bl	8000aac <platform_setHVSwitch>
      platform_setPPSVoltage(port->port_id_, 0);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7f8 f828 	bl	8000adc <platform_setPPSVoltage>
 8008a8c:	e002      	b.n	8008a94 <SendCommand+0xc8>
    return;
 8008a8e:	bf00      	nop
 8008a90:	e000      	b.n	8008a94 <SendCommand+0xc8>
      return;
 8008a92:	bf00      	nop
  }
}
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <SetRpValue>:

void SetRpValue(struct Port *port, USBTypeCCurrent currentVal)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  switch (currentVal) {
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d009      	beq.n	8008ac0 <SetRpValue+0x26>
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d00e      	beq.n	8008ace <SetRpValue+0x34>
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d113      	bne.n	8008adc <SetRpValue+0x42>
    case utccDefault: /* Rp Default */
      port->registers_.RoleCtrl.RP_VAL = 0b00;
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	7d93      	ldrb	r3, [r2, #22]
 8008ab8:	f36f 1305 	bfc	r3, #4, #2
 8008abc:	7593      	strb	r3, [r2, #22]
      break;
 8008abe:	e013      	b.n	8008ae8 <SetRpValue+0x4e>
    case utcc1p5A:  /* Rp 1.5A */
      port->registers_.RoleCtrl.RP_VAL = 0b01;
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	7d93      	ldrb	r3, [r2, #22]
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	f361 1305 	bfi	r3, r1, #4, #2
 8008aca:	7593      	strb	r3, [r2, #22]
      break;
 8008acc:	e00c      	b.n	8008ae8 <SetRpValue+0x4e>
    case utcc3p0A:  /* Rp 3.0A*/
      port->registers_.RoleCtrl.RP_VAL = 0b10;
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	7d93      	ldrb	r3, [r2, #22]
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	f361 1305 	bfi	r3, r1, #4, #2
 8008ad8:	7593      	strb	r3, [r2, #22]
      break;
 8008ada:	e005      	b.n	8008ae8 <SetRpValue+0x4e>
    default:        /* Go to default */
      port->registers_.RoleCtrl.RP_VAL = 0b00;
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7d93      	ldrb	r3, [r2, #22]
 8008ae0:	f36f 1305 	bfc	r3, #4, #2
 8008ae4:	7593      	strb	r3, [r2, #22]
      break;
 8008ae6:	bf00      	nop
    }
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <UpdateSourceCurrent>:

/* Type-C Functionality */
void UpdateSourceCurrent(struct Port *port, USBTypeCCurrent currentVal)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  SetRpValue(port, currentVal);
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff ffc8 	bl	8008a9a <SetRpValue>
  WriteRegister(port, regROLECTRL);
 8008b0a:	211a      	movs	r1, #26
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff fef5 	bl	80088fc <WriteRegister>
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <UpdateSinkCurrent>:

void UpdateSinkCurrent(struct Port *port)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  /* As a sink, one CC pin will be open, and we want to check the other one */
  port->snk_current_ =
    (USBTypeCCurrent)((port->registers_.CCStat.CC2_STAT == CCTermSnkOpen) ?
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	7e5b      	ldrb	r3, [r3, #25]
 8008b26:	f003 030c 	and.w	r3, r3, #12
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <UpdateSinkCurrent+0x24>
                       port->registers_.CCStat.CC1_STAT :
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	7e5b      	ldrb	r3, [r3, #25]
 8008b34:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008b38:	b2db      	uxtb	r3, r3
    (USBTypeCCurrent)((port->registers_.CCStat.CC2_STAT == CCTermSnkOpen) ?
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	e005      	b.n	8008b4a <UpdateSinkCurrent+0x30>
                       port->registers_.CCStat.CC2_STAT);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7e5b      	ldrb	r3, [r3, #25]
 8008b42:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008b46:	b2db      	uxtb	r3, r3
    (USBTypeCCurrent)((port->registers_.CCStat.CC2_STAT == CCTermSnkOpen) ?
 8008b48:	461a      	mov	r2, r3
  port->snk_current_ =
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <GetVBusVoltage>:

/* Returns the VBus voltage, multiplied by VBUS_SCALE */
FSC_U16 GetVBusVoltage(struct Port *port)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Max scaled voltage is 0xFFC, min is 0 */
  FSC_U16 voltage = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	81fb      	strh	r3, [r7, #14]

  /* Read the current register values */
  ReadRegisters(port, regVBUS_VOLTAGE_L, 2);
 8008b68:	2202      	movs	r2, #2
 8008b6a:	2170      	movs	r1, #112	; 0x70
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff fd7c 	bl	800866a <ReadRegisters>

  /* Combine value bytes */
  voltage = ((FSC_U16)port->registers_.VBusVoltageH.VBUS_V_HI) << 8;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008b78:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	81fb      	strh	r3, [r7, #14]
  voltage |= port->registers_.VBusVoltageL.VBUS_V_LO;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	89fb      	ldrh	r3, [r7, #14]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	81fb      	strh	r3, [r7, #14]

  /* Scale value as needed */
  switch (port->registers_.VBusVoltageH.VBUS_SCALE) {
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008b98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d002      	beq.n	8008ba8 <GetVBusVoltage+0x4c>
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d004      	beq.n	8008bb0 <GetVBusVoltage+0x54>
    case 0b10: /* Scaled by 4 */
      voltage *= 4;
      break;
    case 0: /* No scaling, fall through */
    default:
      break;
 8008ba6:	e007      	b.n	8008bb8 <GetVBusVoltage+0x5c>
      voltage *= 2;
 8008ba8:	89fb      	ldrh	r3, [r7, #14]
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	81fb      	strh	r3, [r7, #14]
      break;
 8008bae:	e003      	b.n	8008bb8 <GetVBusVoltage+0x5c>
      voltage *= 4;
 8008bb0:	89fb      	ldrh	r3, [r7, #14]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	81fb      	strh	r3, [r7, #14]
      break;
 8008bb6:	bf00      	nop
  }

  /* Voltage measurement in millivolts */
  return voltage * 25;
 8008bb8:	89fb      	ldrh	r3, [r7, #14]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	0092      	lsls	r2, r2, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	0091      	lsls	r1, r2, #2
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4413      	add	r3, r2
 8008bca:	b29b      	uxth	r3, r3
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <IsVbusVSafe0V>:
  return ((measurement > (mv - mv / 20)) &&
          (measurement < (mv + mv / 20))) ? TRUE : FALSE;
}

FSC_BOOL IsVbusVSafe0V(struct Port *port)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Returns true when voltage is < 0.8V */
  FSC_U16 voltage = GetVBusVoltage(port);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ffbd 	bl	8008b5c <GetVBusVoltage>
 8008be2:	4603      	mov	r3, r0
 8008be4:	81fb      	strh	r3, [r7, #14]
  return (voltage < FSC_VBUS_VSAFE0_V) ? TRUE : FALSE;
 8008be6:	89fb      	ldrh	r3, [r7, #14]
 8008be8:	f240 321f 	movw	r2, #799	; 0x31f
 8008bec:	4293      	cmp	r3, r2
 8008bee:	bf94      	ite	ls
 8008bf0:	2301      	movls	r3, #1
 8008bf2:	2300      	movhi	r3, #0
 8008bf4:	b2db      	uxtb	r3, r3
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <IsVbusVSafe5V>:

FSC_BOOL IsVbusVSafe5V(struct Port *port)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  /* Returns true when voltage is within 4.75V - 5.5V */
  FSC_U16 measurement = GetVBusVoltage(port);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff ffa8 	bl	8008b5c <GetVBusVoltage>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	81fb      	strh	r3, [r7, #14]
  return ((measurement > 4750) && (measurement < 5500)) ? TRUE : FALSE;
 8008c10:	89fb      	ldrh	r3, [r7, #14]
 8008c12:	f241 228e 	movw	r2, #4750	; 0x128e
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d906      	bls.n	8008c28 <IsVbusVSafe5V+0x2a>
 8008c1a:	89fb      	ldrh	r3, [r7, #14]
 8008c1c:	f241 527b 	movw	r2, #5499	; 0x157b
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d801      	bhi.n	8008c28 <IsVbusVSafe5V+0x2a>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e000      	b.n	8008c2a <IsVbusVSafe5V+0x2c>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <SetVBusSnkDisc>:
  FSC_U16 measurement = GetVBusVoltage(port);
  return (measurement > mv) ? TRUE : FALSE;
}

void SetVBusSnkDisc(struct Port *port, FSC_U16 level)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	807b      	strh	r3, [r7, #2]
  port->registers_.VBusSnkDiscL.byte = level & 0x00FF;
 8008c40:	887b      	ldrh	r3, [r7, #2]
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  port->registers_.VBusSnkDiscH.byte = (level & 0x0300) >> 8;
 8008c4a:	887b      	ldrh	r3, [r7, #2]
 8008c4c:	121b      	asrs	r3, r3, #8
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	f003 0303 	and.w	r3, r3, #3
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
  WriteRegisters(port, regVBUS_SNK_DISCL, 2);
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	2172      	movs	r1, #114	; 0x72
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff fe64 	bl	800892e <WriteRegisters>
}
 8008c66:	bf00      	nop
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <SetVBusStopDisc>:

void SetVBusStopDisc(struct Port *port, FSC_U16 level)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	807b      	strh	r3, [r7, #2]
  port->registers_.VBusStopDiscL.byte = level & 0x00FF;
 8008c7a:	887b      	ldrh	r3, [r7, #2]
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
  port->registers_.VBusStopDiscH.byte = (level & 0x0300) >> 8;
 8008c84:	887b      	ldrh	r3, [r7, #2]
 8008c86:	121b      	asrs	r3, r3, #8
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
  WriteRegisters(port, regVBUS_STOP_DISCL, 2);
 8008c96:	2202      	movs	r2, #2
 8008c98:	2174      	movs	r1, #116	; 0x74
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff fe47 	bl	800892e <WriteRegisters>
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <SetVBusAlarm>:

void SetVBusAlarm(struct Port *port, FSC_U16 levelL, FSC_U16 levelH)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	807b      	strh	r3, [r7, #2]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	803b      	strh	r3, [r7, #0]
  port->registers_.VAlarmLCfgL.byte = levelL & 0x00FF;
 8008cb8:	887b      	ldrh	r3, [r7, #2]
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  port->registers_.VAlarmLCfgH.byte = (levelL & 0x0300) >> 8;
 8008cc2:	887b      	ldrh	r3, [r7, #2]
 8008cc4:	121b      	asrs	r3, r3, #8
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  WriteRegisters(port, regVALARMLCFGL, 2);
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	2178      	movs	r1, #120	; 0x78
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff fe28 	bl	800892e <WriteRegisters>

  port->registers_.VAlarmHCfgL.byte = levelH & 0x00FF;
 8008cde:	883b      	ldrh	r3, [r7, #0]
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  port->registers_.VAlarmHCfgH.byte = (levelH & 0x0300) >> 8;
 8008ce8:	883b      	ldrh	r3, [r7, #0]
 8008cea:	121b      	asrs	r3, r3, #8
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  WriteRegisters(port, regVALARMHCFGL, 2);
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	2176      	movs	r1, #118	; 0x76
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fe15 	bl	800892e <WriteRegisters>
}
 8008d04:	bf00      	nop
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <DecodeCCTermination>:
 * Returns the termination seen by the CC line.
 * If the caller sets (port->cc_pin_ == CC1), then this checks the CC1
 * line. Otherwise, this checks the CC2 line.
 */
CCTermType DecodeCCTermination(struct Port *port)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the undefined cases */
  if (port->cc_pin_ == NONE ||
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d025      	beq.n	8008d6a <DecodeCCTermination+0x5e>
      (port->cc_pin_ == CC1 &&
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
  if (port->cc_pin_ == NONE ||
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d10d      	bne.n	8008d44 <DecodeCCTermination+0x38>
       (port->registers_.RoleCtrl.CC1_TERM == CCRoleOpen ||
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	7d9b      	ldrb	r3, [r3, #22]
 8008d2c:	f003 0303 	and.w	r3, r3, #3
 8008d30:	b2db      	uxtb	r3, r3
      (port->cc_pin_ == CC1 &&
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d019      	beq.n	8008d6a <DecodeCCTermination+0x5e>
        port->registers_.RoleCtrl.CC1_TERM == CCRoleRa)) ||
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7d9b      	ldrb	r3, [r3, #22]
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	b2db      	uxtb	r3, r3
       (port->registers_.RoleCtrl.CC1_TERM == CCRoleOpen ||
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d012      	beq.n	8008d6a <DecodeCCTermination+0x5e>
      (port->cc_pin_ == CC2 &&
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
        port->registers_.RoleCtrl.CC1_TERM == CCRoleRa)) ||
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d10f      	bne.n	8008d6e <DecodeCCTermination+0x62>
       (port->registers_.RoleCtrl.CC2_TERM == CCRoleOpen ||
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	7d9b      	ldrb	r3, [r3, #22]
 8008d52:	f003 030c 	and.w	r3, r3, #12
 8008d56:	b2db      	uxtb	r3, r3
      (port->cc_pin_ == CC2 &&
 8008d58:	2b0c      	cmp	r3, #12
 8008d5a:	d006      	beq.n	8008d6a <DecodeCCTermination+0x5e>
        port->registers_.RoleCtrl.CC2_TERM == CCRoleRa))) {
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	7d9b      	ldrb	r3, [r3, #22]
 8008d60:	f003 030c 	and.w	r3, r3, #12
 8008d64:	b2db      	uxtb	r3, r3
       (port->registers_.RoleCtrl.CC2_TERM == CCRoleOpen ||
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <DecodeCCTermination+0x62>
    return CCTypeUndefined;
 8008d6a:	2305      	movs	r3, #5
 8008d6c:	e00a      	b.n	8008d84 <DecodeCCTermination+0x78>
  }

  if (port->source_or_sink_ == Source) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d004      	beq.n	8008d82 <DecodeCCTermination+0x76>
    return DecodeCCTerminationSource(port);
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACC) */
  }
  else {
#ifdef FSC_HAVE_SNK
    return DecodeCCTerminationSink(port);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f807 	bl	8008d8c <DecodeCCTerminationSink>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	e000      	b.n	8008d84 <DecodeCCTermination+0x78>
#endif /* FSC_HAVE_SNK */
  }

  /* Shouldn't get here, but call it undefined */
  return CCTypeUndefined;
 8008d82:	2305      	movs	r3, #5
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <DecodeCCTerminationSink>:
}
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACC) */

#ifdef FSC_HAVE_SNK
CCTermType DecodeCCTerminationSink(struct Port *port)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  CCTermType term = CCTypeUndefined;
 8008d94:	2305      	movs	r3, #5
 8008d96:	73fb      	strb	r3, [r7, #15]
  switch ((port->cc_pin_ == CC1) ?
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
          port->registers_.CCStat.CC1_STAT :
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d105      	bne.n	8008dae <DecodeCCTerminationSink+0x22>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	7e5b      	ldrb	r3, [r3, #25]
 8008da6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	e004      	b.n	8008db8 <DecodeCCTerminationSink+0x2c>
          port->registers_.CCStat.CC2_STAT) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	7e5b      	ldrb	r3, [r3, #25]
 8008db2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008db6:	b2db      	uxtb	r3, r3
  switch ((port->cc_pin_ == CC1) ?
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d817      	bhi.n	8008dec <DecodeCCTerminationSink+0x60>
 8008dbc:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <DecodeCCTerminationSink+0x38>)
 8008dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008dd5 	.word	0x08008dd5
 8008dc8:	08008ddb 	.word	0x08008ddb
 8008dcc:	08008de1 	.word	0x08008de1
 8008dd0:	08008de7 	.word	0x08008de7
  case CCTermSnkOpen:
    term = CCTypeOpen;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd8:	e009      	b.n	8008dee <DecodeCCTerminationSink+0x62>
  case CCTermSnkDefault:
    term = CCTypeRdUSB;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dde:	e006      	b.n	8008dee <DecodeCCTerminationSink+0x62>
  case CCTermSnkRp1p5:
    term = CCTypeRd1p5;
 8008de0:	2303      	movs	r3, #3
 8008de2:	73fb      	strb	r3, [r7, #15]
    break;
 8008de4:	e003      	b.n	8008dee <DecodeCCTerminationSink+0x62>
  case CCTermSnkRp3p0:
    term = CCTypeRd3p0;
 8008de6:	2304      	movs	r3, #4
 8008de8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dea:	e000      	b.n	8008dee <DecodeCCTerminationSink+0x62>
  default:
    break;
 8008dec:	bf00      	nop
  }
  return term;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <ResetDebounceVariables>:
#endif /* FSC_HAVE_SNK */

void ResetDebounceVariables(struct Port *port)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  port->cc_term_previous_ = CCTypeUndefined;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2205      	movs	r2, #5
 8008e08:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
  port->cc_term_cc_debounce_ = CCTypeUndefined;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2205      	movs	r2, #5
 8008e10:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
  port->cc_term_pd_debounce_ = CCTypeUndefined;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2205      	movs	r2, #5
 8008e18:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
  port->cc_term_pd_debounce_prev_ = CCTypeUndefined;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2205      	movs	r2, #5
 8008e20:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <DebounceCC>:

void DebounceCC(struct Port *port)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* PD Debounce (filter out PD traffic that could look like CC changes) */
  CCTermType cctermcurrent = DecodeCCTermination(port);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff ff67 	bl	8008d0c <DecodeCCTermination>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	73fb      	strb	r3, [r7, #15]
  if (port->cc_term_previous_ != cctermcurrent) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8008e48:	7bfa      	ldrb	r2, [r7, #15]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d00f      	beq.n	8008e6e <DebounceCC+0x3e>
    /* If our latest value has changed, update and reset timers */
    port->cc_term_previous_ = cctermcurrent;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7bfa      	ldrb	r2, [r7, #15]
 8008e52:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    /* Might be better to call restart than disable & enable */
    TimerDisable(&port->pd_debounce_timer_);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	33b0      	adds	r3, #176	; 0xb0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f001 fb16 	bl	800a48c <TimerDisable>
    TimerStart(&port->pd_debounce_timer_, ktPDDebounce);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	33b0      	adds	r3, #176	; 0xb0
 8008e64:	f643 2198 	movw	r1, #15000	; 0x3a98
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 faf1 	bl	800a450 <TimerStart>
  }

  /* If our debounce timer has expired, record the latest values */
  if (TimerExpired(&port->pd_debounce_timer_)) {
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	33b0      	adds	r3, #176	; 0xb0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 fb36 	bl	800a4e4 <TimerExpired>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <DebounceCC+0x64>
    port->cc_term_pd_debounce_ = port->cc_term_previous_;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    TimerDisable(&port->pd_debounce_timer_);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	33b0      	adds	r3, #176	; 0xb0
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f001 fafc 	bl	800a48c <TimerDisable>
  }

  /* CC Debounce (debounce the cc lines once PD traffic has been filtered) */
  if (port->cc_term_pd_debounce_prev_ != port->cc_term_pd_debounce_) {
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d014      	beq.n	8008ece <DebounceCC+0x9e>
    /* If our latest value has changed, update and reset timers */
    port->cc_term_pd_debounce_prev_ = port->cc_term_pd_debounce_;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    port->cc_term_cc_debounce_ = CCTypeUndefined;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2205      	movs	r2, #5
 8008eb4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    /* Timer was enabled above */
    TimerDisable(&port->cc_debounce_timer_);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	33a4      	adds	r3, #164	; 0xa4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f001 fae5 	bl	800a48c <TimerDisable>
    TimerStart(&port->cc_debounce_timer_, ktCCDebounce - ktPDDebounce);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	33a4      	adds	r3, #164	; 0xa4
 8008ec6:	490d      	ldr	r1, [pc, #52]	; (8008efc <DebounceCC+0xcc>)
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 fac1 	bl	800a450 <TimerStart>
  }

  /* If our debounce timer has expired, record the latest values */
  if (TimerExpired(&port->cc_debounce_timer_)) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	33a4      	adds	r3, #164	; 0xa4
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f001 fb06 	bl	800a4e4 <TimerExpired>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00a      	beq.n	8008ef4 <DebounceCC+0xc4>
    port->cc_term_cc_debounce_ = port->cc_term_pd_debounce_prev_;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    TimerDisable(&port->cc_debounce_timer_);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	33a4      	adds	r3, #164	; 0xa4
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 facc 	bl	800a48c <TimerDisable>
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	00019a28 	.word	0x00019a28

08008f00 <SetVConn>:
#endif /* FSC_LOGGING */
}
#endif /* FSC_HAVE_SRC || (FSC_HAVE_SNK && FSC_HAVE_ACC) */

void SetVConn(struct Port *port, FSC_BOOL enable)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  port->registers_.PwrCtrl.EN_VCONN = (enable ? 1 : 0);
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bf14      	ite	ne
 8008f12:	2301      	movne	r3, #1
 8008f14:	2300      	moveq	r3, #0
 8008f16:	b2d9      	uxtb	r1, r3
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	7e13      	ldrb	r3, [r2, #24]
 8008f1c:	f361 0300 	bfi	r3, r1, #0, #1
 8008f20:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 8008f22:	211c      	movs	r1, #28
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff fce9 	bl	80088fc <WriteRegister>

  /* PD 3.0 requires to enable sop' and sop'' comm. for vconn source*/
  DPM_ReConfigureRxDetect(port);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fc fa65 	bl	80053fa <DPM_ReConfigureRxDetect>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <GetVConn>:
FSC_BOOL GetVConn(struct Port *port)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  return (port->registers_.PwrCtrl.EN_VCONN == 1) ? TRUE : FALSE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7e1b      	ldrb	r3, [r3, #24]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	b2db      	uxtb	r3, r3
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <SetStateSink>:
 * @brief Sets the Sink variables and enables VBUS monitor and Alarm low.
 * It disables the Alarm Interrupt so all sink states only need
 * to un-mask VBUS Alarm.
 */
void SetStateSink(struct Port *port)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  port->source_or_sink_ = Sink;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  port->tc_substate_ = 0;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  ResetDebounceVariables(port);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff ff44 	bl	8008dfc <ResetDebounceVariables>

  /* Disable the VBUS Alarm until required. All Sink state
   * can just enable the mask to enable VBUS ALARM High */
  port->registers_.AlertMskL.M_PORT_PWR = 0;
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7c13      	ldrb	r3, [r2, #16]
 8008f78:	f36f 0341 	bfc	r3, #1, #1
 8008f7c:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_VBUS_ALRM_HI = 0;
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	7c13      	ldrb	r3, [r2, #16]
 8008f82:	f36f 13c7 	bfc	r3, #7, #1
 8008f86:	7413      	strb	r3, [r2, #16]
  WriteRegister(port, regALERTMSKL);
 8008f88:	2112      	movs	r1, #18
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fcb6 	bl	80088fc <WriteRegister>
  port->registers_.AlertMskH.M_VBUS_ALRM_LO = 0;
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	7c53      	ldrb	r3, [r2, #17]
 8008f94:	f36f 0300 	bfc	r3, #0, #1
 8008f98:	7453      	strb	r3, [r2, #17]
  WriteRegister(port, regALERTMSKH);
 8008f9a:	2113      	movs	r1, #19
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff fcad 	bl	80088fc <WriteRegister>

  /* Enable the device's auto-discharge and VBus measure features */
  port->registers_.PwrCtrl.DIS_VALARM = 0;
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	7e13      	ldrb	r3, [r2, #24]
 8008fa6:	f36f 1345 	bfc	r3, #5, #1
 8008faa:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.DIS_VBUS_MON = 0;
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7e13      	ldrb	r3, [r2, #24]
 8008fb0:	f36f 1386 	bfc	r3, #6, #1
 8008fb4:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 8008fb6:	211c      	movs	r1, #28
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff fc9f 	bl	80088fc <WriteRegister>

#ifdef FSC_LOGGING
  LogTCState(port);
#endif /* FSC_LOGGING */
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <DetectCCPin>:
 * Called to discover which pin is CC.
 * This sets port->cc_pin_ accordingly, and sets port->cc_term_
 * according to the termination found on the CC line.
 */
void DetectCCPin(struct Port *port)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  /* Decode CC1 termination */
  port->cc_pin_ = CC1;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  port->cc_term_ = DecodeCCTermination(port);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff fe98 	bl	8008d0c <DecodeCCTermination>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	461a      	mov	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103

  if ((port->cc_term_ != CCTypeRdUSB) &&
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d036      	beq.n	800905e <DetectCCPin+0x98>
      (port->cc_term_ != CCTypeRd1p5) &&
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
  if ((port->cc_term_ != CCTypeRdUSB) &&
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d031      	beq.n	800905e <DetectCCPin+0x98>
      (port->cc_term_ != CCTypeRd3p0)) {
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
      (port->cc_term_ != CCTypeRd1p5) &&
 8009000:	2b04      	cmp	r3, #4
 8009002:	d02c      	beq.n	800905e <DetectCCPin+0x98>
    /* CC1 is not CC, so decode CC2 termination */
    port->cc_pin_ = CC2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    port->cc_term_ = DecodeCCTermination(port);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fe7d 	bl	8008d0c <DecodeCCTermination>
 8009012:	4603      	mov	r3, r0
 8009014:	461a      	mov	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103

    if ((port->cc_term_ != CCTypeRdUSB) &&
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8009022:	2b02      	cmp	r3, #2
 8009024:	d01b      	beq.n	800905e <DetectCCPin+0x98>
        (port->cc_term_ != CCTypeRd1p5) &&
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
    if ((port->cc_term_ != CCTypeRdUSB) &&
 800902c:	2b03      	cmp	r3, #3
 800902e:	d016      	beq.n	800905e <DetectCCPin+0x98>
        (port->cc_term_ != CCTypeRd3p0)) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
        (port->cc_term_ != CCTypeRd1p5) &&
 8009036:	2b04      	cmp	r3, #4
 8009038:	d011      	beq.n	800905e <DetectCCPin+0x98>

      /* ... Or maybe RaRa? */
      if (port->cc_term_ == CCTypeRa) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8009040:	2b01      	cmp	r3, #1
 8009042:	d104      	bne.n	800904e <DetectCCPin+0x88>
        /* Call it CC1 for now */
        port->cc_pin_ = CC1;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

        port->cc_term_ = CCTypeUndefined;
      }
    }
  }
}
 800904c:	e007      	b.n	800905e <DetectCCPin+0x98>
        port->cc_pin_ = NONE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        port->cc_term_ = CCTypeUndefined;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2205      	movs	r2, #5
 800905a:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <UpdateVConnTermination>:
 *
 * Measures and saves the termination seen on the pin that is not configured as
 * the CC line.
 */
void UpdateVConnTermination(struct Port *port)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  /* Flip our CC indicators so we can measure the VConn line */
  port->cc_pin_ = port->cc_pin_ == CC1 ? CC2 : CC1;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8009074:	2b01      	cmp	r3, #1
 8009076:	d101      	bne.n	800907c <UpdateVConnTermination+0x16>
 8009078:	2202      	movs	r2, #2
 800907a:	e000      	b.n	800907e <UpdateVConnTermination+0x18>
 800907c:	2201      	movs	r2, #1
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

  port->vconn_term_ = DecodeCCTermination(port);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fe41 	bl	8008d0c <DecodeCCTermination>
 800908a:	4603      	mov	r3, r0
 800908c:	461a      	mov	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

  /* Restore our CC indicators */
  port->cc_pin_ = port->cc_pin_ == CC1 ? CC2 : CC1;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800909a:	2b01      	cmp	r3, #1
 800909c:	d101      	bne.n	80090a2 <UpdateVConnTermination+0x3c>
 800909e:	2202      	movs	r2, #2
 80090a0:	e000      	b.n	80090a4 <UpdateVConnTermination+0x3e>
 80090a2:	2201      	movs	r2, #1
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <UpdateOrientation>:
 * configured as the CC pin.
 *
 * This function does nothing if neither or both pins are configured as CC.
 */
void UpdateOrientation(struct Port *port)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  if (port->cc_pin_ == CC1) {
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d126      	bne.n	8009112 <UpdateOrientation+0x60>
    port->registers_.TcpcCtrl.ORIENT = 0;
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	7d53      	ldrb	r3, [r2, #21]
 80090c8:	f36f 0300 	bfc	r3, #0, #1
 80090cc:	7553      	strb	r3, [r2, #21]
    port->registers_.StdOutCfg.ORIENT = 0;
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	7d13      	ldrb	r3, [r2, #20]
 80090d2:	f36f 0300 	bfc	r3, #0, #1
 80090d6:	7513      	strb	r3, [r2, #20]

    if (port->source_or_sink_ == Source) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10b      	bne.n	80090fa <UpdateOrientation+0x48>
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRp;
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	7d93      	ldrb	r3, [r2, #22]
 80090e6:	2101      	movs	r1, #1
 80090e8:	f361 0301 	bfi	r3, r1, #0, #2
 80090ec:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleOpen;
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	7d93      	ldrb	r3, [r2, #22]
 80090f2:	f043 030c 	orr.w	r3, r3, #12
 80090f6:	7593      	strb	r3, [r2, #22]
 80090f8:	e05f      	b.n	80091ba <UpdateOrientation+0x108>
    }
    else {
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	7d93      	ldrb	r3, [r2, #22]
 80090fe:	2102      	movs	r1, #2
 8009100:	f361 0301 	bfi	r3, r1, #0, #2
 8009104:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleOpen;
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	7d93      	ldrb	r3, [r2, #22]
 800910a:	f043 030c 	orr.w	r3, r3, #12
 800910e:	7593      	strb	r3, [r2, #22]
 8009110:	e053      	b.n	80091ba <UpdateOrientation+0x108>
    }
  }
  else if (port->cc_pin_ == CC2) {
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8009118:	2b02      	cmp	r3, #2
 800911a:	d126      	bne.n	800916a <UpdateOrientation+0xb8>
    port->registers_.TcpcCtrl.ORIENT = 1;
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	7d53      	ldrb	r3, [r2, #21]
 8009120:	f043 0301 	orr.w	r3, r3, #1
 8009124:	7553      	strb	r3, [r2, #21]
    port->registers_.StdOutCfg.ORIENT = 1;
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	7d13      	ldrb	r3, [r2, #20]
 800912a:	f043 0301 	orr.w	r3, r3, #1
 800912e:	7513      	strb	r3, [r2, #20]

    if (port->source_or_sink_ == Source) {
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10b      	bne.n	8009152 <UpdateOrientation+0xa0>
      port->registers_.RoleCtrl.CC1_TERM = CCRoleOpen;
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	7d93      	ldrb	r3, [r2, #22]
 800913e:	f043 0303 	orr.w	r3, r3, #3
 8009142:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRp;
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	7d93      	ldrb	r3, [r2, #22]
 8009148:	2101      	movs	r1, #1
 800914a:	f361 0383 	bfi	r3, r1, #2, #2
 800914e:	7593      	strb	r3, [r2, #22]
 8009150:	e033      	b.n	80091ba <UpdateOrientation+0x108>
    }
    else {
      port->registers_.RoleCtrl.CC1_TERM = CCRoleOpen;
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	7d93      	ldrb	r3, [r2, #22]
 8009156:	f043 0303 	orr.w	r3, r3, #3
 800915a:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	7d93      	ldrb	r3, [r2, #22]
 8009160:	2102      	movs	r1, #2
 8009162:	f361 0383 	bfi	r3, r1, #2, #2
 8009166:	7593      	strb	r3, [r2, #22]
 8009168:	e027      	b.n	80091ba <UpdateOrientation+0x108>
    }
  }
  else {
    /* Set both Rp or Rd - used for handling Try.* states */
    port->registers_.TcpcCtrl.ORIENT = 0;
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	7d53      	ldrb	r3, [r2, #21]
 800916e:	f36f 0300 	bfc	r3, #0, #1
 8009172:	7553      	strb	r3, [r2, #21]
    port->registers_.StdOutCfg.ORIENT = 0;
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	7d13      	ldrb	r3, [r2, #20]
 8009178:	f36f 0300 	bfc	r3, #0, #1
 800917c:	7513      	strb	r3, [r2, #20]

    if (port->source_or_sink_ == Source) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10c      	bne.n	80091a2 <UpdateOrientation+0xf0>
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRp;
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	7d93      	ldrb	r3, [r2, #22]
 800918c:	2101      	movs	r1, #1
 800918e:	f361 0301 	bfi	r3, r1, #0, #2
 8009192:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRp;
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	7d93      	ldrb	r3, [r2, #22]
 8009198:	2101      	movs	r1, #1
 800919a:	f361 0383 	bfi	r3, r1, #2, #2
 800919e:	7593      	strb	r3, [r2, #22]
 80091a0:	e00b      	b.n	80091ba <UpdateOrientation+0x108>
    }
    else {
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	7d93      	ldrb	r3, [r2, #22]
 80091a6:	2102      	movs	r1, #2
 80091a8:	f361 0301 	bfi	r3, r1, #0, #2
 80091ac:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	7d93      	ldrb	r3, [r2, #22]
 80091b2:	2102      	movs	r1, #2
 80091b4:	f361 0383 	bfi	r3, r1, #2, #2
 80091b8:	7593      	strb	r3, [r2, #22]
    }
  }

  port->registers_.RoleCtrl.DRP = 0;
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	7d93      	ldrb	r3, [r2, #22]
 80091be:	f36f 1386 	bfc	r3, #6, #1
 80091c2:	7593      	strb	r3, [r2, #22]

  WriteRegister(port, regTCPC_CTRL);
 80091c4:	2119      	movs	r1, #25
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff fb98 	bl	80088fc <WriteRegister>
  WriteRegister(port, regSTD_OUT_CFG);
 80091cc:	2118      	movs	r1, #24
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff fb94 	bl	80088fc <WriteRegister>
  WriteRegister(port, regROLECTRL);
 80091d4:	211a      	movs	r1, #26
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff fb90 	bl	80088fc <WriteRegister>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <ClearState>:

void ClearState(struct Port *port)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  PDDisable(port);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f978 	bl	80094e2 <PDDisable>

  /* Disable VBus and VBus detection */
  SendCommand(port, DisableSourceVbus);
 80091f2:	2166      	movs	r1, #102	; 0x66
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff fbe9 	bl	80089cc <SendCommand>
  SendCommand(port, DisableSinkVbus);
 80091fa:	2144      	movs	r1, #68	; 0x44
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff fbe5 	bl	80089cc <SendCommand>

  /* Disable VConn, etc. */
  port->registers_.PwrCtrl.EN_VCONN = 0;
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	7e13      	ldrb	r3, [r2, #24]
 8009206:	f36f 0300 	bfc	r3, #0, #1
 800920a:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.DIS_VBUS_MON = 1;
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	7e13      	ldrb	r3, [r2, #24]
 8009210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009214:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.DIS_VALARM = 1;
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	7e13      	ldrb	r3, [r2, #24]
 800921a:	f043 0320 	orr.w	r3, r3, #32
 800921e:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.AUTO_DISCH = 0;
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7e13      	ldrb	r3, [r2, #24]
 8009224:	f36f 1304 	bfc	r3, #4, #1
 8009228:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.EN_BLEED_DISCH = 1;
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	7e13      	ldrb	r3, [r2, #24]
 800922e:	f043 0308 	orr.w	r3, r3, #8
 8009232:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.FORCE_DISCH = 0;
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	7e13      	ldrb	r3, [r2, #24]
 8009238:	f36f 0382 	bfc	r3, #2, #1
 800923c:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 800923e:	211c      	movs	r1, #28
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff fb5b 	bl	80088fc <WriteRegister>

  port->is_vconn_source_ = FALSE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f

  ResetDebounceVariables(port);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff fdd4 	bl	8008dfc <ResetDebounceVariables>
  port->cc_pin_ = NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

  port->cc_term_ = CCTypeUndefined;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2205      	movs	r2, #5
 8009260:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
  port->vconn_term_ = CCTypeUndefined;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2205      	movs	r2, #5
 8009268:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

  port->tc_substate_ = 0;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

  TimerDisable(&port->pd_debounce_timer_);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	33b0      	adds	r3, #176	; 0xb0
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f907 	bl	800a48c <TimerDisable>

#ifdef FSC_LOGGING
  LogTCState(port);
#endif /* FSC_LOGGING */
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <ResetMessageIDs>:
  if ((sop == SOP_TYPE_SOP) || (sop == SOP_TYPE_SOP1))
    port->message_id_[sop] = id;
}

static void ResetMessageIDs(struct Port *port, SopType sop)
{
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  port->message_id_counter_[sop] = 0;
 8009292:	78fb      	ldrb	r3, [r7, #3]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	3348      	adds	r3, #72	; 0x48
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	2200      	movs	r2, #0
 800929e:	605a      	str	r2, [r3, #4]
  port->message_id_[sop] = 0xFF;
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	324c      	adds	r2, #76	; 0x4c
 80092a6:	21ff      	movs	r1, #255	; 0xff
 80092a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->message_id_counter_[sop] = 0;
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	3348      	adds	r3, #72	; 0x48
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	605a      	str	r2, [r3, #4]
  port->message_id_[sop] = 0xFF;
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	324c      	adds	r2, #76	; 0x4c
 80092c0:	21ff      	movs	r1, #255	; 0xff
 80092c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <ResetProtocolLayer>:

void ResetProtocolLayer(struct Port *port, SopType sop)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  FSC_U8 i = 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  port->protocol_state_ = PRLIdle;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  port->pd_tx_status_ = txIdle;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

  ResetMessageIDs(port, sop);
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff ffc5 	bl	8009286 <ResetMessageIDs>

  if (sop == SOP_TYPE_SOP)
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d135      	bne.n	800936e <ResetProtocolLayer+0x9c>
  {
#ifdef FSC_HAVE_VDM
  TimerDisable(&port->vdm_timer_);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8009308:	4618      	mov	r0, r3
 800930a:	f001 f8bf 	bl	800a48c <TimerDisable>
#endif /* FSC_HAVE_VDM */

    port->protocol_msg_rx_ = FALSE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    port->protocol_msg_rx_sop_ = SOP_TYPE_SOP;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
    port->protocol_msg_tx_sop_ = SOP_TYPE_SOP;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    port->pd_tx_flag_ = FALSE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    port->policy_has_contract_ = FALSE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

    port->waiting_on_hr_ = FALSE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
#ifdef FSC_HAVE_USBHID
    /* Set the source caps updated flag to trigger an update of the GUI */
    port->source_caps_updated_ = TRUE;
#endif /* FSC_HAVE_USBHID */

    port->usb_pd_contract_.object = 0;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    port->caps_header_received_.word = 0;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

    for (i = 0; i < 7; i++) {
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]
 8009352:	e009      	b.n	8009368 <ResetProtocolLayer+0x96>
      port->caps_received_[i].object = 0;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	337e      	adds	r3, #126	; 0x7e
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	2200      	movs	r2, #0
 8009360:	605a      	str	r2, [r3, #4]
    for (i = 0; i < 7; i++) {
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	3301      	adds	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	2b06      	cmp	r3, #6
 800936c:	d9f2      	bls.n	8009354 <ResetProtocolLayer+0x82>
    }
  }

  DPM_ReConfigureRxDetect(port);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7fc f843 	bl	80053fa <DPM_ReConfigureRxDetect>
}
 8009374:	bf00      	nop
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <PDEnable>:

void PDEnable(struct Port *port, FSC_BOOL is_source)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  FSC_U8 i;
  port->is_hard_reset_ = FALSE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  port->is_pr_swap_ = FALSE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
  port->hard_reset_counter_ = 0;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  port->renegotiate_ = FALSE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
  port->needs_goto_min_ = FALSE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
  port->policy_is_ams_ = FALSE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
  port->req_dr_swap_to_dfp_as_sink_ = Attempt_DR_Swap_to_Dfp_As_Sink;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
  port->req_dr_swap_To_ufp_as_src_ = Attempt_DR_Swap_to_Ufp_As_Src;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
  port->req_vconn_swap_to_on_as_sink_ = Attempt_Vconn_Swap_to_On_As_Sink;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
  port->req_vconn_swap_to_off_as_src_ = Attempt_Vconn_Swap_to_Off_As_Src;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  port->req_pr_swap_as_src_ = Requests_PR_Swap_As_Src;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  port->req_pr_swap_as_snk_ = Requests_PR_Swap_As_Snk;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef FSC_HAVE_EXTENDED
  port->protocol_ext_request_chunk_ = FALSE;
  port->protocol_ext_send_chunk_ = FALSE;
  port->protocol_ext_state_active_ = FALSE;
#endif /* FSC_HAVE_EXTENDED */
  if (port->pd_enabled_ == TRUE) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d173      	bne.n	80094da <PDEnable+0x15e>
    if (port->cc_pin_ != NONE) {
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d06b      	beq.n	80094d4 <PDEnable+0x158>
      /* If we know what pin the CC signal is... */
      port->pd_active_ = TRUE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

      TimerDisable(&port->no_response_timer_);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	33bc      	adds	r3, #188	; 0xbc
 8009408:	4618      	mov	r0, r3
 800940a:	f001 f83f 	bl	800a48c <TimerDisable>
      TimerDisable(&port->policy_state_timer_);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	338c      	adds	r3, #140	; 0x8c
 8009412:	4618      	mov	r0, r3
 8009414:	f001 f83a 	bl	800a48c <TimerDisable>
      TimerDisable(&port->policy_sinktx_timer_);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3398      	adds	r3, #152	; 0x98
 800941c:	4618      	mov	r0, r3
 800941e:	f001 f835 	bl	800a48c <TimerDisable>
      TimerDisable(&port->swap_source_start_timer_);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	33c8      	adds	r3, #200	; 0xc8
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f830 	bl	800a48c <TimerDisable>

      port->idle_ = FALSE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      port->policy_is_source_ = is_source;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
      port->policy_is_dfp_ = is_source;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	78fa      	ldrb	r2, [r7, #3]
 8009440:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      port->policy_subindex_ = 0;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149

      DPM_Initialize(port);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7fb fef5 	bl	800523c <DPM_Initialize>
      /* Reset the protocol layer */
      for (i = SOP_TYPE_SOP; i < NUM_SOP_SUPPORTED; i++) {
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]
 8009456:	e007      	b.n	8009468 <PDEnable+0xec>
        ResetProtocolLayer(port, i);
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ff38 	bl	80092d2 <ResetProtocolLayer>
      for (i = SOP_TYPE_SOP; i < NUM_SOP_SUPPORTED; i++) {
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	3301      	adds	r3, #1
 8009466:	73fb      	strb	r3, [r7, #15]
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	2b02      	cmp	r3, #2
 800946c:	d9f4      	bls.n	8009458 <PDEnable+0xdc>
      }

      ClearInterrupt(port, regALERTL, MSK_I_TXSUCC | MSK_I_TXDISC |
 800946e:	227c      	movs	r2, #124	; 0x7c
 8009470:	2110      	movs	r1, #16
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7ff fa8d 	bl	8008992 <ClearInterrupt>
          MSK_I_TXFAIL | MSK_I_RXHRDRST | MSK_I_RXSTAT);

      /* Set the initial data port direction */
      if (port->policy_is_source_) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d012      	beq.n	80094a8 <PDEnable+0x12c>
        set_policy_state(port, PE_SRC_Startup);
 8009482:	2100      	movs	r1, #0
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f8d3 	bl	8009630 <set_policy_state>

        /* Initialize as a source-DFP */
        port->registers_.MsgHeadr.POWER_ROLE = 1;
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8009490:	f043 0301 	orr.w	r3, r3, #1
 8009494:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
        port->registers_.MsgHeadr.DATA_ROLE = 1;
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800949e:	f043 0308 	orr.w	r3, r3, #8
 80094a2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80094a6:	e011      	b.n	80094cc <PDEnable+0x150>
      }
      else {
        /* Policy is sink */
        set_policy_state(port, PE_SNK_Startup);
 80094a8:	210d      	movs	r1, #13
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f8c0 	bl	8009630 <set_policy_state>

        /* Initialize as a sink-UFP */
        port->registers_.MsgHeadr.POWER_ROLE = 0;
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80094b6:	f36f 0300 	bfc	r3, #0, #1
 80094ba:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
        port->registers_.MsgHeadr.DATA_ROLE = 0;
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80094c4:	f36f 03c3 	bfc	r3, #3, #1
 80094c8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
      }

      WriteRegister(port, regMSGHEADR);
 80094cc:	212e      	movs	r1, #46	; 0x2e
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff fa14 	bl	80088fc <WriteRegister>
#ifdef FSC_LOGGING
      WritePDToken(&port->log_, TRUE, pdtAttach);
#endif /* FSC_LOGGING */
    }
#ifdef FSC_HAVE_DP
    DP_Initialize(port);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7fb f9f3 	bl	80048c0 <DP_Initialize>
#endif /* FSC_HAVE_DP */
  }
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <PDDisable>:

void PDDisable(struct Port *port)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_USBHID
  /* Set the source caps updated flag to trigger an update of the GUI */
  port->source_caps_updated_ = TRUE;
#endif /* FSC_HAVE_USBHID */

  port->is_hard_reset_ = FALSE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
  port->pd_active_ = FALSE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
  port->protocol_state_ = PRLDisabled;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
  set_policy_state(port, PE_SRC_Disabled);
 8009502:	2106      	movs	r1, #6
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f893 	bl	8009630 <set_policy_state>
  port->pd_tx_status_ = txIdle;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  port->policy_is_source_ = TRUE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
  port->policy_is_dfp_ = TRUE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
  port->policy_has_contract_ = FALSE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
  port->is_contract_valid_ = FALSE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e

  TimerDisable(&port->policy_state_timer_);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	338c      	adds	r3, #140	; 0x8c
 8009536:	4618      	mov	r0, r3
 8009538:	f000 ffa8 	bl	800a48c <TimerDisable>
  TimerDisable(&port->policy_sinktx_timer_);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3398      	adds	r3, #152	; 0x98
 8009540:	4618      	mov	r0, r3
 8009542:	f000 ffa3 	bl	800a48c <TimerDisable>
  TimerDisable(&port->no_response_timer_);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	33bc      	adds	r3, #188	; 0xbc
 800954a:	4618      	mov	r0, r3
 800954c:	f000 ff9e 	bl	800a48c <TimerDisable>

  /* Disable PD in the device */
  port->registers_.RxDetect.byte = 0;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  WriteRegister(port, regRXDETECT);
 8009558:	212f      	movs	r1, #47	; 0x2f
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff f9ce 	bl	80088fc <WriteRegister>
#ifdef FSC_HAVE_DP
  platform_dp_enable_pins(FALSE, 0);
 8009560:	2100      	movs	r1, #0
 8009562:	2000      	movs	r0, #0
 8009564:	f7f7 fb9f 	bl	8000ca6 <platform_dp_enable_pins>
#endif /* FSC_HAVE_DP */
}
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <set_sop_p_detect>:

void set_sop_p_detect(struct Port *port, FSC_BOOL enable)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  /* Clear before write is needed for cable reset */
  port->registers_.RxDetect.byte = 0;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  WriteRegister(port, regRXDETECT);
 8009584:	212f      	movs	r1, #47	; 0x2f
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff f9b8 	bl	80088fc <WriteRegister>

  /* Enable PD messaging */
  port->registers_.RxDetect.EN_SOP = SOP_Capable;
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8009592:	f043 0301 	orr.w	r3, r3, #1
 8009596:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  port->registers_.RxDetect.EN_HRD_RST = 1;
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80095a0:	f043 0320 	orr.w	r3, r3, #32
 80095a4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  if (enable == FALSE)
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d11c      	bne.n	80095e8 <set_sop_p_detect+0x78>
  {
    port->registers_.RxDetect.EN_SOP1 = 0;
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80095b4:	f36f 0341 	bfc	r3, #1, #1
 80095b8:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP2 = 0;
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80095c2:	f36f 0382 	bfc	r3, #2, #1
 80095c6:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP1_DBG = 0;
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80095d0:	f36f 03c3 	bfc	r3, #3, #1
 80095d4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP2_DBG = 0;
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80095de:	f36f 1304 	bfc	r3, #4, #1
 80095e2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 80095e6:	e01b      	b.n	8009620 <set_sop_p_detect+0xb0>
  }
  else
  {
    port->registers_.RxDetect.EN_SOP1 = (SOP_P_Capable) ? 1 : 0;
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80095ee:	f36f 0341 	bfc	r3, #1, #1
 80095f2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP2 = (SOP_PP_Capable) ? 1 : 0;
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80095fc:	f36f 0382 	bfc	r3, #2, #1
 8009600:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP1_DBG = (SOP_P_Debug_Capable) ? 1 : 0;
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800960a:	f36f 03c3 	bfc	r3, #3, #1
 800960e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    port->registers_.RxDetect.EN_SOP2_DBG = (SOP_PP_Debug_Capable) ? 1 : 0;
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8009618:	f36f 1304 	bfc	r3, #4, #1
 800961c:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  }

  WriteRegister(port, regRXDETECT);
 8009620:	212f      	movs	r1, #47	; 0x2f
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff f96a 	bl	80088fc <WriteRegister>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <set_policy_state>:

void set_policy_state(struct Port *port, PolicyState_t state)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  if (port->policy_state_ == state) return;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	429a      	cmp	r2, r3
 8009646:	d036      	beq.n	80096b6 <set_policy_state+0x86>

  if (port->dpm_pd_30_ && port->policy_is_ams_ &&
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800964e:	2b00      	cmp	r3, #0
 8009650:	d012      	beq.n	8009678 <set_policy_state+0x48>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00d      	beq.n	8009678 <set_policy_state+0x48>
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	2b05      	cmp	r3, #5
 8009660:	d002      	beq.n	8009668 <set_policy_state+0x38>
      (state == PE_SRC_Ready || state == PE_SNK_Ready)) {
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	2b13      	cmp	r3, #19
 8009666:	d107      	bne.n	8009678 <set_policy_state+0x48>
    /* Should indicate that we are done with an AMS */
    port->policy_is_ams_ = FALSE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    SetSinkTx(port, SinkTxOK);
 8009670:	2100      	movs	r1, #0
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f826 	bl	80096c4 <SetSinkTx>
  }

  port->policy_state_ = state;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	78fa      	ldrb	r2, [r7, #3]
 800967c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
  port->policy_subindex_ = 0;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149

  port->waiting_on_hr_ = FALSE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  port->policy_wait_on_sink_caps_ = FALSE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155

  platform_printf(port->port_id_, "PE SS ", state);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	4908      	ldr	r1, [pc, #32]	; (80096c0 <set_policy_state+0x90>)
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7f7 faf3 	bl	8000c8c <platform_printf>

  if (state == PE_ErrorRecovery) port->idle_ = FALSE;
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	2ba6      	cmp	r3, #166	; 0xa6
 80096aa:	d105      	bne.n	80096b8 <set_policy_state+0x88>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80096b4:	e000      	b.n	80096b8 <set_policy_state+0x88>
  if (port->policy_state_ == state) return;
 80096b6:	bf00      	nop

#ifdef FSC_LOGGING
  LogPEState(port);
#endif /* FSC_LOGGING */
}
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	0800dd04 	.word	0x0800dd04

080096c4 <SetSinkTx>:

void SetSinkTx(struct Port *port, SinkTxState_t state)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  port->policy_sinktx_state_ = state;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	78fa      	ldrb	r2, [r7, #3]
 80096d4:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

  UpdateSourceCurrent(port, (state == SinkTxOK) ? utcc3p0A : utcc1p5A);
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <SetSinkTx+0x1e>
 80096de:	2303      	movs	r3, #3
 80096e0:	e000      	b.n	80096e4 <SetSinkTx+0x20>
 80096e2:	2302      	movs	r3, #2
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7ff fa04 	bl	8008af4 <UpdateSourceCurrent>
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBPDProtocol>:
#include "timer.h"
#include "dpm.h"
#include "observer.h"

void USBPDProtocol(struct Port *port)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Received hard reset? */
  if (port->registers_.AlertL.I_RXHRDRST) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7b9b      	ldrb	r3, [r3, #14]
 8009700:	f003 0308 	and.w	r3, r3, #8
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d030      	beq.n	800976c <USBPDProtocol+0x78>
    ClearInterrupt(port, regALERTL, MSK_I_RXHRDRST);
 800970a:	2208      	movs	r2, #8
 800970c:	2110      	movs	r1, #16
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff f93f 	bl	8008992 <ClearInterrupt>
    /* We are forcing the state machine to new state so disable
     * timers if it was being used. */
    TimerDisable(&port->policy_state_timer_);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	338c      	adds	r3, #140	; 0x8c
 8009718:	4618      	mov	r0, r3
 800971a:	f000 feb7 	bl	800a48c <TimerDisable>
    if (port->policy_is_source_) {
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <USBPDProtocol+0x4c>
      TimerStart(&port->policy_state_timer_, ktPSHardReset);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	338c      	adds	r3, #140	; 0x8c
 800972c:	f247 5130 	movw	r1, #30000	; 0x7530
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fe8d 	bl	800a450 <TimerStart>
      set_policy_state(port, PE_SRC_Transition_To_Default);
 8009736:	210a      	movs	r1, #10
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff ff79 	bl	8009630 <set_policy_state>
 800973e:	e003      	b.n	8009748 <USBPDProtocol+0x54>
    }
    else {
      set_policy_state(port, PE_SNK_Transition_To_Default);
 8009740:	2115      	movs	r1, #21
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff ff74 	bl	8009630 <set_policy_state>
    }

    /* TODO check if we need to exit from any entered mode. */

    /* notify that TCPC has undergone hard reset. */
    notify_observers(EVENT_HARD_RESET, port->port_id_, 0);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	b29b      	uxth	r3, r3
 800974e:	2200      	movs	r2, #0
 8009750:	4619      	mov	r1, r3
 8009752:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009756:	f7fb fe6b 	bl	8005430 <notify_observers>
    port->is_hard_reset_ = TRUE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    port->policy_subindex_ = 0;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
      break;
    default:
      break;
    }
  }
}
 800976a:	e030      	b.n	80097ce <USBPDProtocol+0xda>
    switch (port->protocol_state_) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8009772:	2b05      	cmp	r3, #5
 8009774:	d82a      	bhi.n	80097cc <USBPDProtocol+0xd8>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <USBPDProtocol+0x88>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	080097cd 	.word	0x080097cd
 8009780:	080097bd 	.word	0x080097bd
 8009784:	08009795 	.word	0x08009795
 8009788:	080097b5 	.word	0x080097b5
 800978c:	080097cd 	.word	0x080097cd
 8009790:	080097c5 	.word	0x080097c5
      port->pd_tx_status_ = txWait;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2204      	movs	r2, #4
 8009798:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      port->protocol_state_ = PRLResetWait;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2203      	movs	r2, #3
 80097a0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
      TimerStart(&port->no_response_timer_, ktHardResetComplete);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	33bc      	adds	r3, #188	; 0xbc
 80097a8:	f241 3188 	movw	r1, #5000	; 0x1388
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fe4f 	bl	800a450 <TimerStart>
      break;
 80097b2:	e00c      	b.n	80097ce <USBPDProtocol+0xda>
      ProtocolResetWait(port);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f85f 	bl	8009878 <ProtocolResetWait>
      break;
 80097ba:	e008      	b.n	80097ce <USBPDProtocol+0xda>
      ProtocolIdle(port);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f80b 	bl	80097d8 <ProtocolIdle>
      break;
 80097c2:	e004      	b.n	80097ce <USBPDProtocol+0xda>
      ProtocolSendingMessage(port);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fa6f 	bl	8009ca8 <ProtocolSendingMessage>
      break;
 80097ca:	e000      	b.n	80097ce <USBPDProtocol+0xda>
      break;
 80097cc:	bf00      	nop
}
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop

080097d8 <ProtocolIdle>:

void ProtocolIdle(struct Port *port)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  if (port->pd_tx_status_ == txReset) {
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d104      	bne.n	80097f4 <ProtocolIdle+0x1c>
    /* If we need to send a hard reset */
    port->protocol_state_ = PRLReset;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2202      	movs	r2, #2
 80097ee:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    }
    else {
      ProtocolTransmitMessage(port);
    }
  }
}
 80097f2:	e03d      	b.n	8009870 <ProtocolIdle+0x98>
  else if (port->registers_.AlertL.I_RXSTAT) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	7b9b      	ldrb	r3, [r3, #14]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d024      	beq.n	800984c <ProtocolIdle+0x74>
    ProtocolGetRxPacket(port);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f871 	bl	80098ea <ProtocolGetRxPacket>
    if (port->registers_.SinkTransmit.DIS_SNK_TX == 0) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800980e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <ProtocolIdle+0x56>
      port->registers_.SinkTransmit.DIS_SNK_TX = 1;
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 800981e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009822:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
      WriteRegister(port, regSINK_TRANSMIT);
 8009826:	21b0      	movs	r1, #176	; 0xb0
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff f867 	bl	80088fc <WriteRegister>
    if (port->pd_tx_status_ == txSend) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8009834:	2b02      	cmp	r3, #2
 8009836:	d104      	bne.n	8009842 <ProtocolIdle+0x6a>
        port->pd_tx_status_ = txAbort;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2209      	movs	r2, #9
 800983c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 8009840:	e016      	b.n	8009870 <ProtocolIdle+0x98>
        port->pd_tx_status_ = txIdle;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 800984a:	e011      	b.n	8009870 <ProtocolIdle+0x98>
  else if (port->pd_tx_status_ == txSend) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8009852:	2b02      	cmp	r3, #2
 8009854:	d10c      	bne.n	8009870 <ProtocolIdle+0x98>
    if (port->protocol_msg_rx_) {
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <ProtocolIdle+0x92>
      port->pd_tx_status_ = txAbort;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2209      	movs	r2, #9
 8009864:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 8009868:	e002      	b.n	8009870 <ProtocolIdle+0x98>
      ProtocolTransmitMessage(port);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f91f 	bl	8009aae <ProtocolTransmitMessage>
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <ProtocolResetWait>:

void ProtocolResetWait(struct Port *port)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Hard reset sent interrupt signaled by I_TXSUCC && I_TXFAIL */
  if ((port->registers_.AlertL.I_TXSUCC && port->registers_.AlertL.I_TXFAIL) ||
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	7b9b      	ldrb	r3, [r3, #14]
 8009884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d006      	beq.n	800989c <ProtocolResetWait+0x24>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	7b9b      	ldrb	r3, [r3, #14]
 8009892:	f003 0310 	and.w	r3, r3, #16
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d107      	bne.n	80098ac <ProtocolResetWait+0x34>
      TimerExpired(&port->no_response_timer_)) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	33bc      	adds	r3, #188	; 0xbc
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fe1f 	bl	800a4e4 <TimerExpired>
 80098a6:	4603      	mov	r3, r0
  if ((port->registers_.AlertL.I_TXSUCC && port->registers_.AlertL.I_TXFAIL) ||
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01a      	beq.n	80098e2 <ProtocolResetWait+0x6a>
    /* Wait for the reset sequence to complete */
    ClearInterrupt(port, regALERTL, MSK_I_TXSUCC | MSK_I_TXFAIL);
 80098ac:	2250      	movs	r2, #80	; 0x50
 80098ae:	2110      	movs	r1, #16
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff f86e 	bl	8008992 <ClearInterrupt>

    port->protocol_state_ = PRLIdle;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    port->pd_tx_status_ = txSuccess;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2205      	movs	r2, #5
 80098c2:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

    notify_observers(EVENT_HARD_RESET, port->port_id_, 0);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	2200      	movs	r2, #0
 80098ce:	4619      	mov	r1, r3
 80098d0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80098d4:	f7fb fdac 	bl	8005430 <notify_observers>
    TimerDisable(&port->no_response_timer_);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	33bc      	adds	r3, #188	; 0xbc
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fdd5 	bl	800a48c <TimerDisable>
  }
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <ProtocolGetRxPacket>:

void ProtocolGetRxPacket(struct Port *port)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  FSC_U8 i = 0, j = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
 80098f6:	2300      	movs	r3, #0
 80098f8:	73bb      	strb	r3, [r7, #14]
#ifdef FSC_HAVE_EXTENDED
  sopExtendedHeader_t temp_ExtHeader = {0};
#endif /* FSC_HAVE_EXTENDED */

  /* Read the Rx token, two header bytes, and the byte count */
  ReadRegisters(port, regRXBYTECNT, 4);
 80098fa:	2204      	movs	r2, #4
 80098fc:	2130      	movs	r1, #48	; 0x30
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7fe feb3 	bl	800866a <ReadRegisters>

  port->policy_rx_header_.byte[0] = port->registers_.RxHeadL;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  port->policy_rx_header_.byte[1] = port->registers_.RxHeadH;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
  temp_GCRCHeader.SpecRevision = USBPDSPECREV;
  temp_GCRCHeader.MessageID = port->policy_rx_header_.MessageID;
#endif /* FSC_LOGGING */

  /* Figure out what SOP* the data came in on and record the sender */
  port->protocol_msg_rx_sop_ = TokenToSopType(port->registers_.RxStat.RX_SOP);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009922:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009926:	b2db      	uxtb	r3, r3
 8009928:	4618      	mov	r0, r3
 800992a:	f000 faba 	bl	8009ea2 <TokenToSopType>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

  if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800993e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d11a      	bne.n	800997e <ProtocolGetRxPacket+0x94>
      (port->policy_rx_header_.MessageType == CMTSoftReset)) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800994e:	f003 031f 	and.w	r3, r3, #31
 8009952:	b2db      	uxtb	r3, r3
  if ((port->policy_rx_header_.NumDataObjects == 0) &&
 8009954:	2b0d      	cmp	r3, #13
 8009956:	d112      	bne.n	800997e <ProtocolGetRxPacket+0x94>
    /* Clear the message ID counter for tx */
    port->message_id_counter_[port->protocol_msg_rx_sop_] = 0;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	3348      	adds	r3, #72	; 0x48
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	2200      	movs	r2, #0
 8009968:	605a      	str	r2, [r3, #4]

    /* Reset the message ID (always alert policy engine of soft reset) */
    port->message_id_[port->protocol_msg_rx_sop_] = 0xFF;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8009970:	461a      	mov	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	324c      	adds	r2, #76	; 0x4c
 8009976:	21ff      	movs	r1, #255	; 0xff
 8009978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800997c:	e025      	b.n	80099ca <ProtocolGetRxPacket+0xe0>
#ifdef FSC_HAVE_USBHID
    /* Set the source caps updated flag to trigger a GUI update */
    port->source_caps_updated_ = TRUE;
#endif /* FSC_HAVE_USBHID */
  }
  else if (port->policy_rx_header_.MessageID !=
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009984:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8009988:	b2db      	uxtb	r3, r3
 800998a:	4619      	mov	r1, r3
           port->message_id_[port->protocol_msg_rx_sop_]) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	324c      	adds	r2, #76	; 0x4c
 8009998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  else if (port->policy_rx_header_.MessageID !=
 800999c:	4299      	cmp	r1, r3
 800999e:	d00e      	beq.n	80099be <ProtocolGetRxPacket+0xd4>
    /* A received message should have an incremented (+1) message ID,
     * so we'll update our value here */
    port->message_id_[port->protocol_msg_rx_sop_] =
      port->policy_rx_header_.MessageID;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80099a6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80099aa:	b2d9      	uxtb	r1, r3
    port->message_id_[port->protocol_msg_rx_sop_] =
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80099b2:	461a      	mov	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	324c      	adds	r2, #76	; 0x4c
 80099b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80099bc:	e005      	b.n	80099ca <ProtocolGetRxPacket+0xe0>
  }
  else {
    /* Drop anything else - possible retried message with same ID */
    ClearInterrupt(port, regALERTL, MSK_I_RXSTAT);
 80099be:	2204      	movs	r2, #4
 80099c0:	2110      	movs	r1, #16
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7fe ffe5 	bl	8008992 <ClearInterrupt>
    return;
 80099c8:	e06e      	b.n	8009aa8 <ProtocolGetRxPacket+0x1be>
  }

  /* Did we receive a data message? If so, we want to retrieve the data */
  if (port->policy_rx_header_.NumDataObjects > 0) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80099d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d03b      	beq.n	8009a52 <ProtocolGetRxPacket+0x168>
    ReadRxRegisters(port, port->policy_rx_header_.NumDataObjects * 4);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80099e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7fe ff6e 	bl	80088ce <ReadRxRegisters>
    else
#endif /* FSC_HAVE_EXTENDED */
    {
      /* Standard data message */
      /* Load the FIFO data into the data objects (loop through each object) */
      for (i = 0; i < port->policy_rx_header_.NumDataObjects; i++) {
 80099f2:	2300      	movs	r3, #0
 80099f4:	73fb      	strb	r3, [r7, #15]
 80099f6:	e01d      	b.n	8009a34 <ProtocolGetRxPacket+0x14a>
        /* Loop through each byte in the object */
        for (j = 0; j < 4; j++) {
 80099f8:	2300      	movs	r3, #0
 80099fa:	73bb      	strb	r3, [r7, #14]
 80099fc:	e014      	b.n	8009a28 <ProtocolGetRxPacket+0x13e>
          /* Store the actual bytes */
          port->policy_rx_data_obj_[i].byte[j] =
            port->registers_.RxData[(i * 4) + j];
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	009a      	lsls	r2, r3, #2
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	18d1      	adds	r1, r2, r3
          port->policy_rx_data_obj_[i].byte[j] =
 8009a06:	7bfa      	ldrb	r2, [r7, #15]
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
            port->registers_.RxData[(i * 4) + j];
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	4401      	add	r1, r0
 8009a0e:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
          port->policy_rx_data_obj_[i].byte[j] =
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	0092      	lsls	r2, r2, #2
 8009a16:	440a      	add	r2, r1
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009a1e:	4602      	mov	r2, r0
 8009a20:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 4; j++) {
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
 8009a24:	3301      	adds	r3, #1
 8009a26:	73bb      	strb	r3, [r7, #14]
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d9e7      	bls.n	80099fe <ProtocolGetRxPacket+0x114>
      for (i = 0; i < port->policy_rx_header_.NumDataObjects; i++) {
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	3301      	adds	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009a3a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	461a      	mov	r2, r3
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d3d7      	bcc.n	80099f8 <ProtocolGetRxPacket+0x10e>
        }
      }
      /* Set the flag to pass the message to the policy engine */
      port->protocol_msg_rx_ = TRUE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8009a50:	e003      	b.n	8009a5a <ProtocolGetRxPacket+0x170>
    }
  }
  else {
    /* Command message received */
    /* Set the flag to pass the message to the policy engine */
    port->protocol_msg_rx_ = TRUE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  }

  /* Clear the interrupt here, as it also clears the RX data registers */
  ClearInterrupt(port, regALERTL, MSK_I_RXSTAT);
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	2110      	movs	r1, #16
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7fe ff97 	bl	8008992 <ClearInterrupt>

  /* Delay to allow for a fast, possibly interrupting next message */
  /* Fixes compliance issue VDM interrupt VDM command. Ellisys VDMU.E17 */
  if(port->policy_rx_header_.NumDataObjects != 0 &&
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009a6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d019      	beq.n	8009aa8 <ProtocolGetRxPacket+0x1be>
     port->policy_rx_header_.MessageType == DMTVendorDefined) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8009a7a:	f003 031f 	and.w	r3, r3, #31
 8009a7e:	b2db      	uxtb	r3, r3
  if(port->policy_rx_header_.NumDataObjects != 0 &&
 8009a80:	2b0f      	cmp	r3, #15
 8009a82:	d111      	bne.n	8009aa8 <ProtocolGetRxPacket+0x1be>

    /* Delay may need to be reduced or removed for slower response
     * implementations - e.g. kernel driver.
     */
    platform_delay(3 * 1000);
 8009a84:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009a88:	f7f7 f882 	bl	8000b90 <platform_delay>

    ReadRegister(port, regALERTL);
 8009a8c:	2110      	movs	r1, #16
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fe fdd1 	bl	8008636 <ReadRegister>

    if (port->registers_.AlertL.I_RXSTAT) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	7b9b      	ldrb	r3, [r3, #14]
 8009a98:	f003 0304 	and.w	r3, r3, #4
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <ProtocolGetRxPacket+0x1be>
      ProtocolGetRxPacket(port);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff ff21 	bl	80098ea <ProtocolGetRxPacket>
#endif /* FSC_HAVE_EXTENDED */

  /* Store the (recreated) GoodCRC message that we have sent */
  WritePDMsg(&port->log_, temp_GCRCHeader, 0, TRUE, port->protocol_msg_rx_sop_);
#endif /* FSC_LOGGING */
}
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <ProtocolTransmitMessage>:

void ProtocolTransmitMessage(struct Port *port)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  FSC_U8 i = 0, j = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]
 8009aba:	2300      	movs	r3, #0
 8009abc:	73bb      	strb	r3, [r7, #14]
  sopMainHeader_t temp_TxHeader = {0};
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60bb      	str	r3, [r7, #8]
#ifdef FSC_HAVE_EXTENDED
  sopExtendedHeader_t temp_ExtHeader = {0};
#endif /* FSC_HAVE_EXTENDED */
  FSC_U8 bytestosend = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	737b      	strb	r3, [r7, #13]

  temp_TxHeader.word = port->policy_tx_header_.word;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8009acc:	813b      	strh	r3, [r7, #8]

  /* Handle soft reset case - clearing message counters */
  if ((temp_TxHeader.NumDataObjects == 0) &&
 8009ace:	7a7b      	ldrb	r3, [r7, #9]
 8009ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d117      	bne.n	8009b0a <ProtocolTransmitMessage+0x5c>
      (temp_TxHeader.MessageType == CMTSoftReset)) {
 8009ada:	7a3b      	ldrb	r3, [r7, #8]
 8009adc:	f003 031f 	and.w	r3, r3, #31
 8009ae0:	b2db      	uxtb	r3, r3
  if ((temp_TxHeader.NumDataObjects == 0) &&
 8009ae2:	2b0d      	cmp	r3, #13
 8009ae4:	d111      	bne.n	8009b0a <ProtocolTransmitMessage+0x5c>
      port->message_id_counter_[port->protocol_msg_tx_sop_] = 0;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	3348      	adds	r3, #72	; 0x48
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	2200      	movs	r2, #0
 8009af6:	605a      	str	r2, [r3, #4]
      port->message_id_[port->protocol_msg_tx_sop_] = 0xFF;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8009afe:	461a      	mov	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	324c      	adds	r2, #76	; 0x4c
 8009b04:	21ff      	movs	r1, #255	; 0xff
 8009b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  else
#endif /* FSC_HAVE_EXTENDED */
  {
    /* Not extended messaging */
    bytestosend = temp_TxHeader.NumDataObjects * 4;
 8009b0a:	7a7b      	ldrb	r3, [r7, #9]
 8009b0c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	737b      	strb	r3, [r7, #13]

    if (temp_TxHeader.NumDataObjects > 0) {
 8009b16:	7a7b      	ldrb	r3, [r7, #9]
 8009b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d028      	beq.n	8009b74 <ProtocolTransmitMessage+0xc6>
      /* If this is a data object... */
      for (i = 0; i < temp_TxHeader.NumDataObjects; i++) {
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
 8009b26:	e01d      	b.n	8009b64 <ProtocolTransmitMessage+0xb6>
        /* Load the data objects */
        for (j = 0; j < 4; ++j) {
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73bb      	strb	r3, [r7, #14]
 8009b2c:	e014      	b.n	8009b58 <ProtocolTransmitMessage+0xaa>
          /* Loop through each byte in the object */
          port->registers_.TxData[(i * 4) + j] =
            port->policy_tx_data_obj_[i].byte[j];
 8009b2e:	7bf9      	ldrb	r1, [r7, #15]
 8009b30:	7bba      	ldrb	r2, [r7, #14]
          port->registers_.TxData[(i * 4) + j] =
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	0098      	lsls	r0, r3, #2
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	4403      	add	r3, r0
            port->policy_tx_data_obj_[i].byte[j];
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	0089      	lsls	r1, r1, #2
 8009b3e:	4401      	add	r1, r0
 8009b40:	440a      	add	r2, r1
 8009b42:	f502 72be 	add.w	r2, r2, #380	; 0x17c
 8009b46:	7811      	ldrb	r1, [r2, #0]
          port->registers_.TxData[(i * 4) + j] =
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	460a      	mov	r2, r1
 8009b4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        for (j = 0; j < 4; ++j) {
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	3301      	adds	r3, #1
 8009b56:	73bb      	strb	r3, [r7, #14]
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d9e7      	bls.n	8009b2e <ProtocolTransmitMessage+0x80>
      for (i = 0; i < temp_TxHeader.NumDataObjects; i++) {
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	3301      	adds	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]
 8009b64:	7a7b      	ldrb	r3, [r7, #9]
 8009b66:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d3d9      	bcc.n	8009b28 <ProtocolTransmitMessage+0x7a>
    }
  }

  /* Update the tx message id to send */
  temp_TxHeader.MessageID =
    port->message_id_counter_[port->protocol_msg_tx_sop_];
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	3348      	adds	r3, #72	; 0x48
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f003 0307 	and.w	r3, r3, #7
 8009b88:	b2da      	uxtb	r2, r3
  temp_TxHeader.MessageID =
 8009b8a:	7a7b      	ldrb	r3, [r7, #9]
 8009b8c:	f362 0343 	bfi	r3, r2, #1, #3
 8009b90:	727b      	strb	r3, [r7, #9]

  /* TXBYTECNT = number of bytes in the packet plus the 2-byte main header */
  port->registers_.TxByteCnt = 2 + bytestosend;
 8009b92:	7b7b      	ldrb	r3, [r7, #13]
 8009b94:	3302      	adds	r3, #2
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Load in the header */
  port->registers_.TxHeadL = temp_TxHeader.byte[0];
 8009b9e:	7a3a      	ldrb	r2, [r7, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  port->registers_.TxHeadH = temp_TxHeader.byte[1];
 8009ba6:	7a7a      	ldrb	r2, [r7, #9]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Commit to device */
  WriteRegisters(port, regTXBYTECNT, 3);
 8009bae:	2203      	movs	r2, #3
 8009bb0:	2151      	movs	r1, #81	; 0x51
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7fe febb 	bl	800892e <WriteRegisters>

  /* Commit the TxData array to the device */
  WriteTxRegisters(port, bytestosend);
 8009bb8:	7b7b      	ldrb	r3, [r7, #13]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7fe fed1 	bl	8008964 <WriteTxRegisters>

  /* Send the SOP indicator to enable the transmitter */
  if (port->protocol_use_sinktx_ == FALSE) {
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d131      	bne.n	8009c30 <ProtocolTransmitMessage+0x182>
    port->registers_.Transmit.TX_SOP = port->protocol_msg_tx_sop_;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	b2d9      	uxtb	r1, r3
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8009bde:	f361 0302 	bfi	r3, r1, #0, #3
 8009be2:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
    port->registers_.Transmit.RETRY_CNT = port->protocol_retries_;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	b2d9      	uxtb	r1, r3
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8009bf8:	f361 1305 	bfi	r3, r1, #4, #2
 8009bfc:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
    WriteRegister(port, regTRANSMIT);
 8009c00:	2150      	movs	r1, #80	; 0x50
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7fe fe7a 	bl	80088fc <WriteRegister>

    /* Disable SinkTX for normal transmits */
    if (port->registers_.SinkTransmit.DIS_SNK_TX == 0) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8009c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d134      	bne.n	8009c82 <ProtocolTransmitMessage+0x1d4>
      port->registers_.SinkTransmit.DIS_SNK_TX = 1;
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8009c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c22:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
      WriteRegister(port, regSINK_TRANSMIT);
 8009c26:	21b0      	movs	r1, #176	; 0xb0
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7fe fe67 	bl	80088fc <WriteRegister>
 8009c2e:	e028      	b.n	8009c82 <ProtocolTransmitMessage+0x1d4>
    }
  }
  else
  {
    port->registers_.SinkTransmit.DIS_SNK_TX = 0;
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8009c36:	f36f 1386 	bfc	r3, #6, #1
 8009c3a:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
    port->registers_.SinkTransmit.TX_SOP = port->protocol_msg_tx_sop_;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8009c44:	f003 0307 	and.w	r3, r3, #7
 8009c48:	b2d9      	uxtb	r1, r3
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8009c50:	f361 0302 	bfi	r3, r1, #0, #3
 8009c54:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
    port->registers_.SinkTransmit.RETRY_CNT = port->protocol_retries_;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	b2d9      	uxtb	r1, r3
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8009c6a:	f361 1305 	bfi	r3, r1, #4, #2
 8009c6e:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
    WriteRegister(port, regSINK_TRANSMIT);
 8009c72:	21b0      	movs	r1, #176	; 0xb0
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7fe fe41 	bl	80088fc <WriteRegister>

    // Clear for next time...
    port->protocol_use_sinktx_ = FALSE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  }

  /* Move on to waiting for a success or fail */
  port->pd_tx_status_ = txBusy;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2203      	movs	r2, #3
 8009c86:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  port->protocol_state_ = PRLTxSendingMessage;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2205      	movs	r2, #5
 8009c8e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

  /* Timeout specifically for chunked messages, but used with each transmit
   * to prevent a theoretical protocol hang.
   */
  TimerStart(&port->protocol_timer_, ktChunkSenderRequest);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	33ec      	adds	r3, #236	; 0xec
 8009c96:	f247 5130 	movw	r1, #30000	; 0x7530
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fbd8 	bl	800a450 <TimerStart>
  /* Store all messages that we attempt to send for debugging */
  WritePDMsg(&port->log_, temp_TxHeader,
             (FSC_U8 *)port->policy_tx_data_obj_,
             TRUE, port->protocol_msg_tx_sop_);
#endif /* FSC_LOGGING */
}
 8009ca0:	bf00      	nop
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <ProtocolSendingMessage>:

void ProtocolSendingMessage(struct Port *port)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  SopType rx_sop = port->protocol_msg_tx_sop_;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8009cb6:	73fb      	strb	r3, [r7, #15]
#ifdef FSC_LOGGING
  sopMainHeader_t header;
#endif /* FSC_LOGGING */

  if (port->registers_.AlertL.I_TXSUCC) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	7b9b      	ldrb	r3, [r3, #14]
 8009cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d01c      	beq.n	8009d00 <ProtocolSendingMessage+0x58>
    ClearInterrupt(port, regALERTL, MSK_I_TXSUCC);
 8009cc6:	2240      	movs	r2, #64	; 0x40
 8009cc8:	2110      	movs	r1, #16
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7fe fe61 	bl	8008992 <ClearInterrupt>
    WritePDMsg(&port->log_, header, 0, FALSE, rx_sop);
#endif /* FSC_LOGGING */

    /* Transmission successful */
    port->message_id_counter_[rx_sop] =
      (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	3348      	adds	r3, #72	; 0x48
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	1c5a      	adds	r2, r3, #1
    port->message_id_counter_[rx_sop] =
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
      (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8009ce0:	f002 0207 	and.w	r2, r2, #7
    port->message_id_counter_[rx_sop] =
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	3348      	adds	r3, #72	; 0x48
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	605a      	str	r2, [r3, #4]
    port->protocol_state_ = PRLIdle;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    port->pd_tx_status_ = txSuccess;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2205      	movs	r2, #5
 8009cfa:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      set_policy_state(port, PE_SNK_Ready);
    }
    port->protocol_state_ = PRLIdle;
    port->pd_tx_status_ = txSuccess;
  }
}
 8009cfe:	e0a1      	b.n	8009e44 <ProtocolSendingMessage+0x19c>
  else if (port->registers_.AlertL.I_TXDISC) {
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	7b9b      	ldrb	r3, [r3, #14]
 8009d04:	f003 0320 	and.w	r3, r3, #32
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01c      	beq.n	8009d48 <ProtocolSendingMessage+0xa0>
    ClearInterrupt(port, regALERTL, MSK_I_TXDISC);
 8009d0e:	2220      	movs	r2, #32
 8009d10:	2110      	movs	r1, #16
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7fe fe3d 	bl	8008992 <ClearInterrupt>
         (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	3348      	adds	r3, #72	; 0x48
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	1c5a      	adds	r2, r3, #1
    port->message_id_counter_[rx_sop] =
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
         (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8009d28:	f002 0207 	and.w	r2, r2, #7
    port->message_id_counter_[rx_sop] =
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	3348      	adds	r3, #72	; 0x48
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	440b      	add	r3, r1
 8009d34:	605a      	str	r2, [r3, #4]
    port->pd_tx_status_ = txCollision;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2207      	movs	r2, #7
 8009d3a:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    port->protocol_state_ = PRLIdle;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
}
 8009d46:	e07d      	b.n	8009e44 <ProtocolSendingMessage+0x19c>
  else if (port->registers_.AlertL.I_TXFAIL) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7b9b      	ldrb	r3, [r3, #14]
 8009d4c:	f003 0310 	and.w	r3, r3, #16
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d01c      	beq.n	8009d90 <ProtocolSendingMessage+0xe8>
    ClearInterrupt(port, regALERTL, MSK_I_TXFAIL);
 8009d56:	2210      	movs	r2, #16
 8009d58:	2110      	movs	r1, #16
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fe fe19 	bl	8008992 <ClearInterrupt>
    port->protocol_state_ = PRLIdle;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    port->pd_tx_status_ = txError;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2206      	movs	r2, #6
 8009d6c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
      (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	3348      	adds	r3, #72	; 0x48
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	1c5a      	adds	r2, r3, #1
    port->message_id_counter_[rx_sop] =
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
      (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8009d80:	f002 0207 	and.w	r2, r2, #7
    port->message_id_counter_[rx_sop] =
 8009d84:	6879      	ldr	r1, [r7, #4]
 8009d86:	3348      	adds	r3, #72	; 0x48
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	440b      	add	r3, r1
 8009d8c:	605a      	str	r2, [r3, #4]
}
 8009d8e:	e059      	b.n	8009e44 <ProtocolSendingMessage+0x19c>
  else if (port->registers_.AlertL.I_RXSTAT) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	7b9b      	ldrb	r3, [r3, #14]
 8009d94:	f003 0304 	and.w	r3, r3, #4
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d052      	beq.n	8009e44 <ProtocolSendingMessage+0x19c>
    ProtocolGetRxPacket(port);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff fda3 	bl	80098ea <ProtocolGetRxPacket>
    if (port->policy_rx_header_.Extended == 0 &&
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009daa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d13b      	bne.n	8009e2c <ProtocolSendingMessage+0x184>
        port->policy_rx_header_.NumDataObjects == 0 &&
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8009dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dbe:	b2db      	uxtb	r3, r3
    if (port->policy_rx_header_.Extended == 0 &&
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d133      	bne.n	8009e2c <ProtocolSendingMessage+0x184>
        port->policy_rx_header_.MessageType == CMTGoodCRC &&
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8009dca:	f003 031f 	and.w	r3, r3, #31
 8009dce:	b2db      	uxtb	r3, r3
        port->policy_rx_header_.NumDataObjects == 0 &&
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d12b      	bne.n	8009e2c <ProtocolSendingMessage+0x184>
        port->policy_tx_header_.Extended == 0 &&
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8009dda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dde:	b2db      	uxtb	r3, r3
        port->policy_rx_header_.MessageType == CMTGoodCRC &&
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d123      	bne.n	8009e2c <ProtocolSendingMessage+0x184>
        port->policy_tx_header_.NumDataObjects == 0 &&
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8009dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dee:	b2db      	uxtb	r3, r3
        port->policy_tx_header_.Extended == 0 &&
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d11b      	bne.n	8009e2c <ProtocolSendingMessage+0x184>
        port->policy_tx_header_.MessageType == CMTGetSourceCapExt)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009dfa:	f003 031f 	and.w	r3, r3, #31
 8009dfe:	b2db      	uxtb	r3, r3
        port->policy_tx_header_.NumDataObjects == 0 &&
 8009e00:	2b11      	cmp	r3, #17
 8009e02:	d113      	bne.n	8009e2c <ProtocolSendingMessage+0x184>
      port->protocol_msg_rx_ = FALSE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	3348      	adds	r3, #72	; 0x48
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	1c5a      	adds	r2, r3, #1
      port->message_id_counter_[rx_sop] =
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
        (port->message_id_counter_[rx_sop] + 1) & 0x07;
 8009e1c:	f002 0207 	and.w	r2, r2, #7
      port->message_id_counter_[rx_sop] =
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	3348      	adds	r3, #72	; 0x48
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	440b      	add	r3, r1
 8009e28:	605a      	str	r2, [r3, #4]
 8009e2a:	e003      	b.n	8009e34 <ProtocolSendingMessage+0x18c>
      set_policy_state(port, PE_SNK_Ready);
 8009e2c:	2113      	movs	r1, #19
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff fbfe 	bl	8009630 <set_policy_state>
    port->protocol_state_ = PRLIdle;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    port->pd_tx_status_ = txSuccess;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2205      	movs	r2, #5
 8009e40:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
}
 8009e44:	bf00      	nop
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <ProtocolSendHardReset>:

void ProtocolSendHardReset(struct Port *port, FSC_BOOL cable)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  /* Set the send hard reset TRANSMIT register code */
  FSC_U8 data = cable ? TRANSMIT_CABLERESET : TRANSMIT_HARDRESET;
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <ProtocolSendHardReset+0x16>
 8009e5e:	2306      	movs	r3, #6
 8009e60:	e000      	b.n	8009e64 <ProtocolSendHardReset+0x18>
 8009e62:	2305      	movs	r3, #5
 8009e64:	73fb      	strb	r3, [r7, #15]

  /* If this flag is set, we've already sent the hard reset command */
  if (port->waiting_on_hr_) {
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d004      	beq.n	8009e7a <ProtocolSendHardReset+0x2e>
    port->waiting_on_hr_ = FALSE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8009e78:	e007      	b.n	8009e8a <ProtocolSendHardReset+0x3e>
  }
  else {
    /* Send the hard reset */
    platform_i2c_write(port->i2c_addr_, regTRANSMIT, 1, &data);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	7858      	ldrb	r0, [r3, #1]
 8009e7e:	f107 030f 	add.w	r3, r7, #15
 8009e82:	2201      	movs	r2, #1
 8009e84:	2150      	movs	r1, #80	; 0x50
 8009e86:	f7f6 fd8f 	bl	80009a8 <platform_i2c_write>
  }

  port->pd_tx_status_ = txReset;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  port->protocol_state_ = PRLReset;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2202      	movs	r2, #2
 8009e96:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

#ifdef FSC_LOGGING
  /* Store the hard reset */
  WritePDToken(&port->log_, TRUE, cable ? pdtCableReset : pdtHardResetTxd);
#endif /* FSC_LOGGING */
}
 8009e9a:	bf00      	nop
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <TokenToSopType>:

SopType TokenToSopType(FSC_U8 data)
{
 8009ea2:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	71fb      	strb	r3, [r7, #7]
  SopType ret = SOP_TYPE_ERROR;
 8009eae:	23ff      	movs	r3, #255	; 0xff
 8009eb0:	73fb      	strb	r3, [r7, #15]

  /* Figure out what SOP* the data came in on */
  /* The register value from the FUSB307 maps directly to our SOP_TYPE_ enum */
  if ((data & 0x0b00000111) <= SOP_TYPE_LAST_VALUE) {
 8009eb2:	f897 b007 	ldrb.w	fp, [r7, #7]
 8009eb6:	f04f 0c00 	mov.w	ip, #0
 8009eba:	f240 1111 	movw	r1, #273	; 0x111
 8009ebe:	f04f 020b 	mov.w	r2, #11
 8009ec2:	ea0b 0301 	and.w	r3, fp, r1
 8009ec6:	ea0c 0402 	and.w	r4, ip, r2
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	f174 0300 	sbcs.w	r3, r4, #0
 8009ed0:	da03      	bge.n	8009eda <TokenToSopType+0x38>
    ret = (SopType)(data & 0x0b00000111);
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
 8009ed4:	f003 0311 	and.w	r3, r3, #17
 8009ed8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8009ee6:	4770      	bx	lr

08009ee8 <AddressToRegister>:
/*
 * Returns a ptr to the cached value of the specified register in registers.
 * Note that this does not include reserved registers.
 */
FSC_U8 *AddressToRegister(DeviceReg_t *registers, enum RegAddress address)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  FSC_U8 *reg = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]

  switch (address) {
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	2bb5      	cmp	r3, #181	; 0xb5
 8009efc:	f200 8277 	bhi.w	800a3ee <AddressToRegister+0x506>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <AddressToRegister+0x20>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	0800a1e1 	.word	0x0800a1e1
 8009f0c:	0800a1e7 	.word	0x0800a1e7
 8009f10:	0800a1ef 	.word	0x0800a1ef
 8009f14:	0800a1f7 	.word	0x0800a1f7
 8009f18:	0800a1ff 	.word	0x0800a1ff
 8009f1c:	0800a207 	.word	0x0800a207
 8009f20:	0800a20f 	.word	0x0800a20f
 8009f24:	0800a217 	.word	0x0800a217
 8009f28:	0800a21f 	.word	0x0800a21f
 8009f2c:	0800a227 	.word	0x0800a227
 8009f30:	0800a22f 	.word	0x0800a22f
 8009f34:	0800a237 	.word	0x0800a237
 8009f38:	0800a3ef 	.word	0x0800a3ef
 8009f3c:	0800a3ef 	.word	0x0800a3ef
 8009f40:	0800a3ef 	.word	0x0800a3ef
 8009f44:	0800a3ef 	.word	0x0800a3ef
 8009f48:	0800a23f 	.word	0x0800a23f
 8009f4c:	0800a247 	.word	0x0800a247
 8009f50:	0800a24f 	.word	0x0800a24f
 8009f54:	0800a257 	.word	0x0800a257
 8009f58:	0800a25f 	.word	0x0800a25f
 8009f5c:	0800a267 	.word	0x0800a267
 8009f60:	0800a3ef 	.word	0x0800a3ef
 8009f64:	0800a3ef 	.word	0x0800a3ef
 8009f68:	0800a26f 	.word	0x0800a26f
 8009f6c:	0800a277 	.word	0x0800a277
 8009f70:	0800a27f 	.word	0x0800a27f
 8009f74:	0800a287 	.word	0x0800a287
 8009f78:	0800a28f 	.word	0x0800a28f
 8009f7c:	0800a297 	.word	0x0800a297
 8009f80:	0800a29f 	.word	0x0800a29f
 8009f84:	0800a2a7 	.word	0x0800a2a7
 8009f88:	0800a3ef 	.word	0x0800a3ef
 8009f8c:	0800a3ef 	.word	0x0800a3ef
 8009f90:	0800a3ef 	.word	0x0800a3ef
 8009f94:	0800a2af 	.word	0x0800a2af
 8009f98:	0800a2b7 	.word	0x0800a2b7
 8009f9c:	0800a2bf 	.word	0x0800a2bf
 8009fa0:	0800a2c7 	.word	0x0800a2c7
 8009fa4:	0800a3ef 	.word	0x0800a3ef
 8009fa8:	0800a3ef 	.word	0x0800a3ef
 8009fac:	0800a2cf 	.word	0x0800a2cf
 8009fb0:	0800a3ef 	.word	0x0800a3ef
 8009fb4:	0800a3ef 	.word	0x0800a3ef
 8009fb8:	0800a3ef 	.word	0x0800a3ef
 8009fbc:	0800a3ef 	.word	0x0800a3ef
 8009fc0:	0800a2d7 	.word	0x0800a2d7
 8009fc4:	0800a2df 	.word	0x0800a2df
 8009fc8:	0800a2e7 	.word	0x0800a2e7
 8009fcc:	0800a2ef 	.word	0x0800a2ef
 8009fd0:	0800a2f7 	.word	0x0800a2f7
 8009fd4:	0800a2ff 	.word	0x0800a2ff
 8009fd8:	0800a3ef 	.word	0x0800a3ef
 8009fdc:	0800a3ef 	.word	0x0800a3ef
 8009fe0:	0800a3ef 	.word	0x0800a3ef
 8009fe4:	0800a3ef 	.word	0x0800a3ef
 8009fe8:	0800a3ef 	.word	0x0800a3ef
 8009fec:	0800a3ef 	.word	0x0800a3ef
 8009ff0:	0800a3ef 	.word	0x0800a3ef
 8009ff4:	0800a3ef 	.word	0x0800a3ef
 8009ff8:	0800a3ef 	.word	0x0800a3ef
 8009ffc:	0800a3ef 	.word	0x0800a3ef
 800a000:	0800a3ef 	.word	0x0800a3ef
 800a004:	0800a3ef 	.word	0x0800a3ef
 800a008:	0800a3ef 	.word	0x0800a3ef
 800a00c:	0800a3ef 	.word	0x0800a3ef
 800a010:	0800a3ef 	.word	0x0800a3ef
 800a014:	0800a3ef 	.word	0x0800a3ef
 800a018:	0800a3ef 	.word	0x0800a3ef
 800a01c:	0800a3ef 	.word	0x0800a3ef
 800a020:	0800a3ef 	.word	0x0800a3ef
 800a024:	0800a3ef 	.word	0x0800a3ef
 800a028:	0800a3ef 	.word	0x0800a3ef
 800a02c:	0800a3ef 	.word	0x0800a3ef
 800a030:	0800a3ef 	.word	0x0800a3ef
 800a034:	0800a3ef 	.word	0x0800a3ef
 800a038:	0800a3ef 	.word	0x0800a3ef
 800a03c:	0800a3ef 	.word	0x0800a3ef
 800a040:	0800a3ef 	.word	0x0800a3ef
 800a044:	0800a3ef 	.word	0x0800a3ef
 800a048:	0800a307 	.word	0x0800a307
 800a04c:	0800a30f 	.word	0x0800a30f
 800a050:	0800a317 	.word	0x0800a317
 800a054:	0800a31f 	.word	0x0800a31f
 800a058:	0800a3ef 	.word	0x0800a3ef
 800a05c:	0800a3ef 	.word	0x0800a3ef
 800a060:	0800a3ef 	.word	0x0800a3ef
 800a064:	0800a3ef 	.word	0x0800a3ef
 800a068:	0800a3ef 	.word	0x0800a3ef
 800a06c:	0800a3ef 	.word	0x0800a3ef
 800a070:	0800a3ef 	.word	0x0800a3ef
 800a074:	0800a3ef 	.word	0x0800a3ef
 800a078:	0800a3ef 	.word	0x0800a3ef
 800a07c:	0800a3ef 	.word	0x0800a3ef
 800a080:	0800a3ef 	.word	0x0800a3ef
 800a084:	0800a3ef 	.word	0x0800a3ef
 800a088:	0800a3ef 	.word	0x0800a3ef
 800a08c:	0800a3ef 	.word	0x0800a3ef
 800a090:	0800a3ef 	.word	0x0800a3ef
 800a094:	0800a3ef 	.word	0x0800a3ef
 800a098:	0800a3ef 	.word	0x0800a3ef
 800a09c:	0800a3ef 	.word	0x0800a3ef
 800a0a0:	0800a3ef 	.word	0x0800a3ef
 800a0a4:	0800a3ef 	.word	0x0800a3ef
 800a0a8:	0800a3ef 	.word	0x0800a3ef
 800a0ac:	0800a3ef 	.word	0x0800a3ef
 800a0b0:	0800a3ef 	.word	0x0800a3ef
 800a0b4:	0800a3ef 	.word	0x0800a3ef
 800a0b8:	0800a3ef 	.word	0x0800a3ef
 800a0bc:	0800a3ef 	.word	0x0800a3ef
 800a0c0:	0800a3ef 	.word	0x0800a3ef
 800a0c4:	0800a3ef 	.word	0x0800a3ef
 800a0c8:	0800a327 	.word	0x0800a327
 800a0cc:	0800a32f 	.word	0x0800a32f
 800a0d0:	0800a337 	.word	0x0800a337
 800a0d4:	0800a33f 	.word	0x0800a33f
 800a0d8:	0800a347 	.word	0x0800a347
 800a0dc:	0800a34f 	.word	0x0800a34f
 800a0e0:	0800a357 	.word	0x0800a357
 800a0e4:	0800a35f 	.word	0x0800a35f
 800a0e8:	0800a367 	.word	0x0800a367
 800a0ec:	0800a36f 	.word	0x0800a36f
 800a0f0:	0800a3ef 	.word	0x0800a3ef
 800a0f4:	0800a3ef 	.word	0x0800a3ef
 800a0f8:	0800a3ef 	.word	0x0800a3ef
 800a0fc:	0800a3ef 	.word	0x0800a3ef
 800a100:	0800a3ef 	.word	0x0800a3ef
 800a104:	0800a3ef 	.word	0x0800a3ef
 800a108:	0800a3ef 	.word	0x0800a3ef
 800a10c:	0800a3ef 	.word	0x0800a3ef
 800a110:	0800a3ef 	.word	0x0800a3ef
 800a114:	0800a3ef 	.word	0x0800a3ef
 800a118:	0800a3ef 	.word	0x0800a3ef
 800a11c:	0800a3ef 	.word	0x0800a3ef
 800a120:	0800a3ef 	.word	0x0800a3ef
 800a124:	0800a3ef 	.word	0x0800a3ef
 800a128:	0800a3ef 	.word	0x0800a3ef
 800a12c:	0800a3ef 	.word	0x0800a3ef
 800a130:	0800a3ef 	.word	0x0800a3ef
 800a134:	0800a3ef 	.word	0x0800a3ef
 800a138:	0800a3ef 	.word	0x0800a3ef
 800a13c:	0800a3ef 	.word	0x0800a3ef
 800a140:	0800a3ef 	.word	0x0800a3ef
 800a144:	0800a3ef 	.word	0x0800a3ef
 800a148:	0800a3ef 	.word	0x0800a3ef
 800a14c:	0800a3ef 	.word	0x0800a3ef
 800a150:	0800a3ef 	.word	0x0800a3ef
 800a154:	0800a3ef 	.word	0x0800a3ef
 800a158:	0800a3ef 	.word	0x0800a3ef
 800a15c:	0800a3ef 	.word	0x0800a3ef
 800a160:	0800a3ef 	.word	0x0800a3ef
 800a164:	0800a3ef 	.word	0x0800a3ef
 800a168:	0800a3ef 	.word	0x0800a3ef
 800a16c:	0800a3ef 	.word	0x0800a3ef
 800a170:	0800a3ef 	.word	0x0800a3ef
 800a174:	0800a3ef 	.word	0x0800a3ef
 800a178:	0800a3ef 	.word	0x0800a3ef
 800a17c:	0800a3ef 	.word	0x0800a3ef
 800a180:	0800a3ef 	.word	0x0800a3ef
 800a184:	0800a3ef 	.word	0x0800a3ef
 800a188:	0800a377 	.word	0x0800a377
 800a18c:	0800a37f 	.word	0x0800a37f
 800a190:	0800a387 	.word	0x0800a387
 800a194:	0800a38f 	.word	0x0800a38f
 800a198:	0800a397 	.word	0x0800a397
 800a19c:	0800a39f 	.word	0x0800a39f
 800a1a0:	0800a3a7 	.word	0x0800a3a7
 800a1a4:	0800a3af 	.word	0x0800a3af
 800a1a8:	0800a3b7 	.word	0x0800a3b7
 800a1ac:	0800a3ef 	.word	0x0800a3ef
 800a1b0:	0800a3ef 	.word	0x0800a3ef
 800a1b4:	0800a3ef 	.word	0x0800a3ef
 800a1b8:	0800a3ef 	.word	0x0800a3ef
 800a1bc:	0800a3ef 	.word	0x0800a3ef
 800a1c0:	0800a3ef 	.word	0x0800a3ef
 800a1c4:	0800a3ef 	.word	0x0800a3ef
 800a1c8:	0800a3bf 	.word	0x0800a3bf
 800a1cc:	0800a3c7 	.word	0x0800a3c7
 800a1d0:	0800a3cf 	.word	0x0800a3cf
 800a1d4:	0800a3d7 	.word	0x0800a3d7
 800a1d8:	0800a3df 	.word	0x0800a3df
 800a1dc:	0800a3e7 	.word	0x0800a3e7
  case regVENDIDL:
    reg = &registers->VendIDL;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60fb      	str	r3, [r7, #12]
    break;
 800a1e4:	e104      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVENDIDH:
    reg = &registers->VendIDH;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	60fb      	str	r3, [r7, #12]
    break;
 800a1ec:	e100      	b.n	800a3f0 <AddressToRegister+0x508>
  case regPRODIDL:
    reg = &registers->ProdIDL;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3302      	adds	r3, #2
 800a1f2:	60fb      	str	r3, [r7, #12]
    break;
 800a1f4:	e0fc      	b.n	800a3f0 <AddressToRegister+0x508>
  case regPRODIDH:
    reg = &registers->ProdIDH;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3303      	adds	r3, #3
 800a1fa:	60fb      	str	r3, [r7, #12]
    break;
 800a1fc:	e0f8      	b.n	800a3f0 <AddressToRegister+0x508>
  case regDEVIDL:
    reg = &registers->DevIDL;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	3304      	adds	r3, #4
 800a202:	60fb      	str	r3, [r7, #12]
    break;
 800a204:	e0f4      	b.n	800a3f0 <AddressToRegister+0x508>
  case regDEVIDH:
    reg = &registers->DevIDH;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3305      	adds	r3, #5
 800a20a:	60fb      	str	r3, [r7, #12]
    break;
 800a20c:	e0f0      	b.n	800a3f0 <AddressToRegister+0x508>
  case regTYPECREVL:
    reg = &registers->TypeCRevL;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3306      	adds	r3, #6
 800a212:	60fb      	str	r3, [r7, #12]
    break;
 800a214:	e0ec      	b.n	800a3f0 <AddressToRegister+0x508>
  case regTYPECREVH:
    reg = &registers->TypeCRevH;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	3307      	adds	r3, #7
 800a21a:	60fb      	str	r3, [r7, #12]
    break;
 800a21c:	e0e8      	b.n	800a3f0 <AddressToRegister+0x508>
  case regUSBPDVER:
    reg = &registers->USBPDVer;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3308      	adds	r3, #8
 800a222:	60fb      	str	r3, [r7, #12]
    break;
 800a224:	e0e4      	b.n	800a3f0 <AddressToRegister+0x508>
  case regUSBPDREV:
    reg = &registers->USBPDRev;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3309      	adds	r3, #9
 800a22a:	60fb      	str	r3, [r7, #12]
    break;
 800a22c:	e0e0      	b.n	800a3f0 <AddressToRegister+0x508>
  case regPDIFREVL:
    reg = &registers->PDIFRevL;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	330a      	adds	r3, #10
 800a232:	60fb      	str	r3, [r7, #12]
    break;
 800a234:	e0dc      	b.n	800a3f0 <AddressToRegister+0x508>
  case regPDIFREVH:
    reg = &registers->PDIFRevH;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	330b      	adds	r3, #11
 800a23a:	60fb      	str	r3, [r7, #12]
    break;
 800a23c:	e0d8      	b.n	800a3f0 <AddressToRegister+0x508>
  case regALERTL:
    reg = &registers->AlertL.byte;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	330c      	adds	r3, #12
 800a242:	60fb      	str	r3, [r7, #12]
    break;
 800a244:	e0d4      	b.n	800a3f0 <AddressToRegister+0x508>
  case regALERTH:
    reg = &registers->AlertH.byte;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	330d      	adds	r3, #13
 800a24a:	60fb      	str	r3, [r7, #12]
    break;
 800a24c:	e0d0      	b.n	800a3f0 <AddressToRegister+0x508>
  case regALERTMSKL:
    reg = &registers->AlertMskL.byte;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	330e      	adds	r3, #14
 800a252:	60fb      	str	r3, [r7, #12]
    break;
 800a254:	e0cc      	b.n	800a3f0 <AddressToRegister+0x508>
  case regALERTMSKH:
    reg = &registers->AlertMskH.byte;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	330f      	adds	r3, #15
 800a25a:	60fb      	str	r3, [r7, #12]
    break;
 800a25c:	e0c8      	b.n	800a3f0 <AddressToRegister+0x508>
  case regPWRSTATMSK:
    reg = &registers->PwrStatMsk.byte;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3310      	adds	r3, #16
 800a262:	60fb      	str	r3, [r7, #12]
    break;
 800a264:	e0c4      	b.n	800a3f0 <AddressToRegister+0x508>
  case regFAULTSTATMSK:
    reg = &registers->FaultStatMsk.byte;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3311      	adds	r3, #17
 800a26a:	60fb      	str	r3, [r7, #12]
    break;
 800a26c:	e0c0      	b.n	800a3f0 <AddressToRegister+0x508>
  case regSTD_OUT_CFG:
    reg = &registers->StdOutCfg.byte;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3312      	adds	r3, #18
 800a272:	60fb      	str	r3, [r7, #12]
    break;
 800a274:	e0bc      	b.n	800a3f0 <AddressToRegister+0x508>
  case regTCPC_CTRL:
    reg = &registers->TcpcCtrl.byte;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3313      	adds	r3, #19
 800a27a:	60fb      	str	r3, [r7, #12]
    break;
 800a27c:	e0b8      	b.n	800a3f0 <AddressToRegister+0x508>
  case regROLECTRL:
    reg = &registers->RoleCtrl.byte;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3314      	adds	r3, #20
 800a282:	60fb      	str	r3, [r7, #12]
    break;
 800a284:	e0b4      	b.n	800a3f0 <AddressToRegister+0x508>
  case regFAULTCTRL:
    reg = &registers->FaultCtrl.byte;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3315      	adds	r3, #21
 800a28a:	60fb      	str	r3, [r7, #12]
    break;
 800a28c:	e0b0      	b.n	800a3f0 <AddressToRegister+0x508>
  case regPWRCTRL:
    reg = &registers->PwrCtrl.byte;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3316      	adds	r3, #22
 800a292:	60fb      	str	r3, [r7, #12]
    break;
 800a294:	e0ac      	b.n	800a3f0 <AddressToRegister+0x508>
  case regCCSTAT:
    reg = &registers->CCStat.byte;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3317      	adds	r3, #23
 800a29a:	60fb      	str	r3, [r7, #12]
    break;
 800a29c:	e0a8      	b.n	800a3f0 <AddressToRegister+0x508>
  case regPWRSTAT:
    reg = &registers->PwrStat.byte;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3318      	adds	r3, #24
 800a2a2:	60fb      	str	r3, [r7, #12]
    break;
 800a2a4:	e0a4      	b.n	800a3f0 <AddressToRegister+0x508>
  case regFAULTSTAT:
    reg = &registers->FaultStat.byte;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3319      	adds	r3, #25
 800a2aa:	60fb      	str	r3, [r7, #12]
    break;
 800a2ac:	e0a0      	b.n	800a3f0 <AddressToRegister+0x508>
  case regCOMMAND:
    reg = &registers->Command;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	331a      	adds	r3, #26
 800a2b2:	60fb      	str	r3, [r7, #12]
    break;
 800a2b4:	e09c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regDEVCAP1L:
    reg = &registers->DevCap1L.byte;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	331b      	adds	r3, #27
 800a2ba:	60fb      	str	r3, [r7, #12]
    break;
 800a2bc:	e098      	b.n	800a3f0 <AddressToRegister+0x508>
  case regDEVCAP1H:
    reg = &registers->DevCap1H.byte;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	331c      	adds	r3, #28
 800a2c2:	60fb      	str	r3, [r7, #12]
    break;
 800a2c4:	e094      	b.n	800a3f0 <AddressToRegister+0x508>
  case regDEVCAP2L:
    reg = &registers->DevCap2L.byte;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	331d      	adds	r3, #29
 800a2ca:	60fb      	str	r3, [r7, #12]
    break;
 800a2cc:	e090      	b.n	800a3f0 <AddressToRegister+0x508>
  case regSTD_OUT_CAP:
    reg = &registers->StdOutCap.byte;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	331e      	adds	r3, #30
 800a2d2:	60fb      	str	r3, [r7, #12]
    break;
 800a2d4:	e08c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regMSGHEADR:
    reg = &registers->MsgHeadr.byte;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	331f      	adds	r3, #31
 800a2da:	60fb      	str	r3, [r7, #12]
    break;
 800a2dc:	e088      	b.n	800a3f0 <AddressToRegister+0x508>
  case regRXDETECT:
    reg = &registers->RxDetect.byte;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3320      	adds	r3, #32
 800a2e2:	60fb      	str	r3, [r7, #12]
    break;
 800a2e4:	e084      	b.n	800a3f0 <AddressToRegister+0x508>
  case regRXBYTECNT:
    reg = &registers->RxByteCnt;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3321      	adds	r3, #33	; 0x21
 800a2ea:	60fb      	str	r3, [r7, #12]
    break;
 800a2ec:	e080      	b.n	800a3f0 <AddressToRegister+0x508>
  case regRXSTAT:
    reg = &registers->RxStat.byte;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3322      	adds	r3, #34	; 0x22
 800a2f2:	60fb      	str	r3, [r7, #12]
    break;
 800a2f4:	e07c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regRXHEADL:
    reg = &registers->RxHeadL;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3323      	adds	r3, #35	; 0x23
 800a2fa:	60fb      	str	r3, [r7, #12]
    break;
 800a2fc:	e078      	b.n	800a3f0 <AddressToRegister+0x508>
  case regRXHEADH:
    reg = &registers->RxHeadH;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3324      	adds	r3, #36	; 0x24
 800a302:	60fb      	str	r3, [r7, #12]
    break;
 800a304:	e074      	b.n	800a3f0 <AddressToRegister+0x508>
  case regTRANSMIT:
    reg = &registers->Transmit.byte;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3341      	adds	r3, #65	; 0x41
 800a30a:	60fb      	str	r3, [r7, #12]
    break;
 800a30c:	e070      	b.n	800a3f0 <AddressToRegister+0x508>
  case regTXBYTECNT:
    reg = &registers->TxByteCnt;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3342      	adds	r3, #66	; 0x42
 800a312:	60fb      	str	r3, [r7, #12]
    break;
 800a314:	e06c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regTXHEADL:
    reg = &registers->TxHeadL;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	3343      	adds	r3, #67	; 0x43
 800a31a:	60fb      	str	r3, [r7, #12]
    break;
 800a31c:	e068      	b.n	800a3f0 <AddressToRegister+0x508>
  case regTXHEADH:
    reg = &registers->TxHeadH;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	3344      	adds	r3, #68	; 0x44
 800a322:	60fb      	str	r3, [r7, #12]
    break;
 800a324:	e064      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVBUS_VOLTAGE_L:
    reg = &registers->VBusVoltageL.byte;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3361      	adds	r3, #97	; 0x61
 800a32a:	60fb      	str	r3, [r7, #12]
    break;
 800a32c:	e060      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVBUS_VOLTAGE_H:
    reg = &registers->VBusVoltageH.byte;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3362      	adds	r3, #98	; 0x62
 800a332:	60fb      	str	r3, [r7, #12]
    break;
 800a334:	e05c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVBUS_SNK_DISCL:
    reg = &registers->VBusSnkDiscL.byte;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3363      	adds	r3, #99	; 0x63
 800a33a:	60fb      	str	r3, [r7, #12]
    break;
 800a33c:	e058      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVBUS_SNK_DISCH:
    reg = &registers->VBusSnkDiscH.byte;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	3364      	adds	r3, #100	; 0x64
 800a342:	60fb      	str	r3, [r7, #12]
    break;
 800a344:	e054      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVBUS_STOP_DISCL:
    reg = &registers->VBusStopDiscL.byte;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	3365      	adds	r3, #101	; 0x65
 800a34a:	60fb      	str	r3, [r7, #12]
    break;
 800a34c:	e050      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVBUS_STOP_DISCH:
    reg = &registers->VBusStopDiscH.byte;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3366      	adds	r3, #102	; 0x66
 800a352:	60fb      	str	r3, [r7, #12]
    break;
 800a354:	e04c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVALARMHCFGL:
    reg = &registers->VAlarmHCfgL.byte;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3367      	adds	r3, #103	; 0x67
 800a35a:	60fb      	str	r3, [r7, #12]
    break;
 800a35c:	e048      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVALARMHCFGH:
    reg = &registers->VAlarmHCfgH.byte;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	3368      	adds	r3, #104	; 0x68
 800a362:	60fb      	str	r3, [r7, #12]
    break;
 800a364:	e044      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVALARMLCFGL:
    reg = &registers->VAlarmLCfgL.byte;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	3369      	adds	r3, #105	; 0x69
 800a36a:	60fb      	str	r3, [r7, #12]
    break;
 800a36c:	e040      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVALARMLCFGH:
    reg = &registers->VAlarmLCfgH.byte;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	336a      	adds	r3, #106	; 0x6a
 800a372:	60fb      	str	r3, [r7, #12]
    break;
 800a374:	e03c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVCONN_OCP:
    reg = &registers->VConnOCP.byte;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	336b      	adds	r3, #107	; 0x6b
 800a37a:	60fb      	str	r3, [r7, #12]
    break;
 800a37c:	e038      	b.n	800a3f0 <AddressToRegister+0x508>
  case regSLICE:
    reg = &registers->Slice.byte;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	336c      	adds	r3, #108	; 0x6c
 800a382:	60fb      	str	r3, [r7, #12]
    break;
 800a384:	e034      	b.n	800a3f0 <AddressToRegister+0x508>
  case regRESET:
    reg = &registers->Reset.byte;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	336d      	adds	r3, #109	; 0x6d
 800a38a:	60fb      	str	r3, [r7, #12]
    break;
 800a38c:	e030      	b.n	800a3f0 <AddressToRegister+0x508>
  case regVD_STAT:
    reg = &registers->VDStat.byte;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	336e      	adds	r3, #110	; 0x6e
 800a392:	60fb      	str	r3, [r7, #12]
    break;
 800a394:	e02c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regGPIO1_CFG:
    reg = &registers->Gpio1Cfg.byte;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	336f      	adds	r3, #111	; 0x6f
 800a39a:	60fb      	str	r3, [r7, #12]
    break;
 800a39c:	e028      	b.n	800a3f0 <AddressToRegister+0x508>
  case regGPIO2_CFG:
    reg = &registers->Gpio2Cfg.byte;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3370      	adds	r3, #112	; 0x70
 800a3a2:	60fb      	str	r3, [r7, #12]
    break;
 800a3a4:	e024      	b.n	800a3f0 <AddressToRegister+0x508>
  case regGPIO_STAT:
    reg = &registers->GpioStat.byte;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	3371      	adds	r3, #113	; 0x71
 800a3aa:	60fb      	str	r3, [r7, #12]
    break;
 800a3ac:	e020      	b.n	800a3f0 <AddressToRegister+0x508>
  case regDRPTOGGLE:
    reg = &registers->DrpToggle.byte;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3372      	adds	r3, #114	; 0x72
 800a3b2:	60fb      	str	r3, [r7, #12]
    break;
 800a3b4:	e01c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regTOGGLE_SM:
    reg = &registers->ToggleSM.byte;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3373      	adds	r3, #115	; 0x73
 800a3ba:	60fb      	str	r3, [r7, #12]
    break;
 800a3bc:	e018      	b.n	800a3f0 <AddressToRegister+0x508>
  case regSINK_TRANSMIT:
    reg = &registers->SinkTransmit.byte;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3374      	adds	r3, #116	; 0x74
 800a3c2:	60fb      	str	r3, [r7, #12]
    break;
 800a3c4:	e014      	b.n	800a3f0 <AddressToRegister+0x508>
  case regSRC_FRSWAP:
    reg = &registers->SrcFRSwap.byte;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3375      	adds	r3, #117	; 0x75
 800a3ca:	60fb      	str	r3, [r7, #12]
    break;
 800a3cc:	e010      	b.n	800a3f0 <AddressToRegister+0x508>
  case regSNK_FRSWAP:
    reg = &registers->SnkFRSwap.byte;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3376      	adds	r3, #118	; 0x76
 800a3d2:	60fb      	str	r3, [r7, #12]
    break;
 800a3d4:	e00c      	b.n	800a3f0 <AddressToRegister+0x508>
  case regALERT_VD:
    reg = &registers->AlertVD.byte;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3377      	adds	r3, #119	; 0x77
 800a3da:	60fb      	str	r3, [r7, #12]
    break;
 800a3dc:	e008      	b.n	800a3f0 <AddressToRegister+0x508>
  case regALERT_VD_MSK:
    reg = &registers->AlertVDMsk.byte;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3378      	adds	r3, #120	; 0x78
 800a3e2:	60fb      	str	r3, [r7, #12]
    break;
 800a3e4:	e004      	b.n	800a3f0 <AddressToRegister+0x508>
  case regRPVAL_OVERRIDE:
    reg = &registers->RpValOverride.byte;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3379      	adds	r3, #121	; 0x79
 800a3ea:	60fb      	str	r3, [r7, #12]
    break;
 800a3ec:	e000      	b.n	800a3f0 <AddressToRegister+0x508>
  default:
    break;
 800a3ee:	bf00      	nop
  }
  return reg;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop

0800a400 <RegClearBits>:
  FSC_U8 *reg = AddressToRegister(registers, address);
  *reg |= mask;
}

void RegClearBits(DeviceReg_t *registers, enum RegAddress address, FSC_U8 mask)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
 800a40c:	4613      	mov	r3, r2
 800a40e:	70bb      	strb	r3, [r7, #2]
  FSC_U8 *reg = AddressToRegister(registers, address);
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff fd67 	bl	8009ee8 <AddressToRegister>
 800a41a:	60f8      	str	r0, [r7, #12]
  *reg &= ~mask;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	b25a      	sxtb	r2, r3
 800a422:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a426:	43db      	mvns	r3, r3
 800a428:	b25b      	sxtb	r3, r3
 800a42a:	4013      	ands	r3, r2
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	701a      	strb	r2, [r3, #0]
}
 800a434:	bf00      	nop
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <SystemPolicyProcess>:
FSC_U8 UARTRecBuffer[64];
FSC_U8 UARTRecIndex = 0;
FSC_BOOL UARTRecHaveMsg = FALSE;
#endif /* FSC_HAVE_UART */

void SystemPolicyProcess(struct Port *ports) {
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
    for (i = 0; i < 64; ++i) UARTRecBuffer[i] = 0;
    UARTRecHaveMsg = FALSE;
    UARTRecIndex = 0;
  }
#endif /* FSC_HAVE_UART */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <TimerStart>:
 */

#include "timer.h"
#include "platform.h"

void TimerStart(struct TimerObj *obj, FSC_U32 time) {
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  if (obj->count_ > 0)
  {
    platform_printf(-1, "Timer already in use???\n", time);
  }
#endif /* FSC_HAVE_UART */
  obj->starttime_ = platform_current_time();
 800a45a:	f7f6 fb8f 	bl	8000b7c <platform_current_time>
 800a45e:	4602      	mov	r2, r0
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	601a      	str	r2, [r3, #0]
  obj->period_ = time;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	605a      	str	r2, [r3, #4]
  obj->count_ += 1;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7a1b      	ldrb	r3, [r3, #8]
 800a46e:	3301      	adds	r3, #1
 800a470:	b2da      	uxtb	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	721a      	strb	r2, [r3, #8]
  if (obj->period_ == 0) obj->period_ = 1;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <TimerStart+0x34>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	605a      	str	r2, [r3, #4]
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <TimerDisable>:
void TimerRestart(struct TimerObj *obj) {
  /* Grab the current time stamp for the next period. */
  obj->starttime_ = platform_current_time();;
}

void TimerDisable(struct TimerObj *obj) {
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Zero means disabled */
  obj->starttime_ = obj->period_ = 0;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	605a      	str	r2, [r3, #4]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	601a      	str	r2, [r3, #0]
  if (obj->count_ > 0)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	7a1b      	ldrb	r3, [r3, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d005      	beq.n	800a4b6 <TimerDisable+0x2a>
  {
     obj->count_--;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	7a1b      	ldrb	r3, [r3, #8]
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	721a      	strb	r2, [r3, #8]
  }
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <TimerDisabled>:

FSC_BOOL TimerDisabled(struct TimerObj *obj) {
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  /* Zero means disabled */
  return (obj->period_ == 0) ? TRUE : FALSE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bf0c      	ite	eq
 800a4d2:	2301      	moveq	r3, #1
 800a4d4:	2300      	movne	r3, #0
 800a4d6:	b2db      	uxtb	r3, r3
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <TimerExpired>:

FSC_BOOL TimerExpired(struct TimerObj *obj) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  if (TimerDisabled(obj)) {
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ffe8 	bl	800a4c2 <TimerDisabled>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <TimerExpired+0x18>
    /* Disabled */
    return FALSE;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	e00c      	b.n	800a516 <TimerExpired+0x32>
  }
  else{
    /* Elapsed time >= period? */
    return ((FSC_U32)(platform_current_time() - obj->starttime_) >=
 800a4fc:	f7f6 fb3e 	bl	8000b7c <platform_current_time>
 800a500:	4602      	mov	r2, r0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	1ad2      	subs	r2, r2, r3
            obj->period_) ? TRUE : FALSE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	bf2c      	ite	cs
 800a510:	2301      	movcs	r3, #1
 800a512:	2300      	movcc	r3, #0
 800a514:	b2db      	uxtb	r3, r3
  }
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <TimerRemaining>:

FSC_U32 TimerRemaining(struct TimerObj *obj)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  FSC_U32 currenttime = platform_current_time();
 800a526:	f7f6 fb29 	bl	8000b7c <platform_current_time>
 800a52a:	60f8      	str	r0, [r7, #12]

  if (TimerDisabled(obj)) {
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff ffc8 	bl	800a4c2 <TimerDisabled>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <TimerRemaining+0x1e>
    return 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	e01d      	b.n	800a578 <TimerRemaining+0x5a>
  }

  if (TimerExpired(obj))
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff ffd1 	bl	800a4e4 <TimerExpired>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d010      	beq.n	800a56a <TimerRemaining+0x4c>
  {
    if (obj->count_ > 0)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	7a1b      	ldrb	r3, [r3, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d007      	beq.n	800a560 <TimerRemaining+0x42>
    {
      /* Timer has expired and in use so do not let
       * the FSM go to sleep. Decrement the counter */
      obj->count_--;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	7a1b      	ldrb	r3, [r3, #8]
 800a554:	3b01      	subs	r3, #1
 800a556:	b2da      	uxtb	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	721a      	strb	r2, [r3, #8]
      return 1;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e00b      	b.n	800a578 <TimerRemaining+0x5a>
      /* Counter reached zero by repeatedly calling TimerRemaining()
       * on timer that might not have been disabled once enabled.
       * Disable the timer to allow idling. Set breakpoint in TimerStart
       * logging to see which code enabled the timer and did not stop
       *  it after expiration. */
      TimerDisable(obj);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff ff93 	bl	800a48c <TimerDisable>
      return 0;
 800a566:	2300      	movs	r3, #0
 800a568:	e006      	b.n	800a578 <TimerRemaining+0x5a>
    }
  }

  /* Timer hasn't expired, return time left */
  return (FSC_U32)(obj->starttime_ + obj->period_ - currenttime);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	441a      	add	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	1ad3      	subs	r3, r2, r3
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <StateMachineTypeC>:
/* This is a value for checking illegal cable issues. */
#define MAX_CABLE_LOOP  20

/* Entry point to the Type-C state machine */
void StateMachineTypeC(struct Port *port)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  if (port->tc_enabled_ == TRUE) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800a58e:	2b01      	cmp	r3, #1
 800a590:	f040 80bc 	bne.w	800a70c <StateMachineTypeC+0x18c>
    /* Read/clear masked ints to avoid confusion in the state machines */
    if (~port->registers_.AlertMskL.byte & port->registers_.AlertL.byte)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	7c1b      	ldrb	r3, [r3, #16]
 800a598:	43db      	mvns	r3, r3
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	7b92      	ldrb	r2, [r2, #14]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00f      	beq.n	800a5c4 <StateMachineTypeC+0x44>
      ClearInterrupt(port, regALERTL,
        (~port->registers_.AlertMskL.byte & port->registers_.AlertL.byte));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7c1b      	ldrb	r3, [r3, #16]
 800a5a8:	b25b      	sxtb	r3, r3
 800a5aa:	43db      	mvns	r3, r3
 800a5ac:	b25a      	sxtb	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	7b9b      	ldrb	r3, [r3, #14]
 800a5b2:	b25b      	sxtb	r3, r3
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	b25b      	sxtb	r3, r3
      ClearInterrupt(port, regALERTL,
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	2110      	movs	r1, #16
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7fe f9e7 	bl	8008992 <ClearInterrupt>

    if (~port->registers_.AlertMskH.byte & port->registers_.AlertH.byte)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	7c5b      	ldrb	r3, [r3, #17]
 800a5c8:	43db      	mvns	r3, r3
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	7bd2      	ldrb	r2, [r2, #15]
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00f      	beq.n	800a5f4 <StateMachineTypeC+0x74>
      ClearInterrupt(port, regALERTH,
        (~port->registers_.AlertMskH.byte & port->registers_.AlertH.byte));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	7c5b      	ldrb	r3, [r3, #17]
 800a5d8:	b25b      	sxtb	r3, r3
 800a5da:	43db      	mvns	r3, r3
 800a5dc:	b25a      	sxtb	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	7bdb      	ldrb	r3, [r3, #15]
 800a5e2:	b25b      	sxtb	r3, r3
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	b25b      	sxtb	r3, r3
      ClearInterrupt(port, regALERTH,
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	2111      	movs	r1, #17
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7fe f9cf 	bl	8008992 <ClearInterrupt>

    /* Handle I2C_ERR, if needed */
    if (port->registers_.FaultStat.I2C_ERR) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7edb      	ldrb	r3, [r3, #27]
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d009      	beq.n	800a616 <StateMachineTypeC+0x96>
      ClearInterrupt(port, regFAULTSTAT, MSK_I2C_ERROR);
 800a602:	2201      	movs	r2, #1
 800a604:	211f      	movs	r1, #31
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7fe f9c3 	bl	8008992 <ClearInterrupt>
      ClearInterrupt(port, regALERTH, MSK_I_FAULT);
 800a60c:	2202      	movs	r2, #2
 800a60e:	2111      	movs	r1, #17
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7fe f9be 	bl	8008992 <ClearInterrupt>
    }

    port->idle_ = FALSE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* PD State Machines */
    if (port->pd_active_) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00d      	beq.n	800a644 <StateMachineTypeC+0xc4>
      USBPDProtocol(port);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7ff f863 	bl	80096f4 <USBPDProtocol>
      USBPDPolicyEngine(port);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7fa ff3a 	bl	80054a8 <USBPDPolicyEngine>

      /* Shortcut to transmit, if needed */
      if (port->pd_tx_status_ == txSend) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d102      	bne.n	800a644 <StateMachineTypeC+0xc4>
        USBPDProtocol(port);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff f858 	bl	80096f4 <USBPDProtocol>
      }
    }

    /* Clear the interrupt here but leave the bit set for use in SM functions */
    if (port->registers_.AlertL.I_CCSTAT) {
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	7b9b      	ldrb	r3, [r3, #14]
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d009      	beq.n	800a666 <StateMachineTypeC+0xe6>
      ClearInterrupt(port, regALERTL, MSK_I_CCSTAT);
 800a652:	2201      	movs	r2, #1
 800a654:	2110      	movs	r1, #16
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7fe f99b 	bl	8008992 <ClearInterrupt>
      port->registers_.AlertL.I_CCSTAT = 1;
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	7b93      	ldrb	r3, [r2, #14]
 800a660:	f043 0301 	orr.w	r3, r3, #1
 800a664:	7393      	strb	r3, [r2, #14]
    }

    /* Type-C State Machine */
    switch (port->tc_state_) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800a66c:	2b14      	cmp	r3, #20
 800a66e:	d849      	bhi.n	800a704 <StateMachineTypeC+0x184>
 800a670:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <StateMachineTypeC+0xf8>)
 800a672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a676:	bf00      	nop
 800a678:	0800a6cd 	.word	0x0800a6cd
 800a67c:	0800a6d5 	.word	0x0800a6d5
 800a680:	0800a6dd 	.word	0x0800a6dd
 800a684:	0800a6e5 	.word	0x0800a6e5
 800a688:	0800a6ed 	.word	0x0800a6ed
 800a68c:	0800a705 	.word	0x0800a705
 800a690:	0800a705 	.word	0x0800a705
 800a694:	0800a705 	.word	0x0800a705
 800a698:	0800a705 	.word	0x0800a705
 800a69c:	0800a705 	.word	0x0800a705
 800a6a0:	0800a705 	.word	0x0800a705
 800a6a4:	0800a705 	.word	0x0800a705
 800a6a8:	0800a705 	.word	0x0800a705
 800a6ac:	0800a705 	.word	0x0800a705
 800a6b0:	0800a705 	.word	0x0800a705
 800a6b4:	0800a6f5 	.word	0x0800a6f5
 800a6b8:	0800a705 	.word	0x0800a705
 800a6bc:	0800a705 	.word	0x0800a705
 800a6c0:	0800a705 	.word	0x0800a705
 800a6c4:	0800a705 	.word	0x0800a705
 800a6c8:	0800a6fd 	.word	0x0800a6fd
    case Disabled:
      StateMachineDisabled(port);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f823 	bl	800a718 <StateMachineDisabled>
      break;
 800a6d2:	e01c      	b.n	800a70e <StateMachineTypeC+0x18e>
    case ErrorRecovery:
      StateMachineErrorRecovery(port);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f836 	bl	800a746 <StateMachineErrorRecovery>
      break;
 800a6da:	e018      	b.n	800a70e <StateMachineTypeC+0x18e>
    case Unattached:
      StateMachineUnattached(port);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f84f 	bl	800a780 <StateMachineUnattached>
      break;
 800a6e2:	e014      	b.n	800a70e <StateMachineTypeC+0x18e>
#ifdef FSC_HAVE_SNK
    case AttachWaitSink:
      StateMachineAttachWaitSink(port);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f8cd 	bl	800a884 <StateMachineAttachWaitSink>
      break;
 800a6ea:	e010      	b.n	800a70e <StateMachineTypeC+0x18e>
    case AttachedSink:
      StateMachineAttachedSink(port);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f933 	bl	800a958 <StateMachineAttachedSink>
      break;
 800a6f2:	e00c      	b.n	800a70e <StateMachineTypeC+0x18e>
    case DebugAccessorySink:
      StateMachineDebugAccessorySink(port);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f996 	bl	800aa26 <StateMachineDebugAccessorySink>
      break;
 800a6fa:	e008      	b.n	800a70e <StateMachineTypeC+0x18e>
    case UnsupportedAccessory:
      StateMachineUnsupportedAccessory(port);
      break;
#endif /* FSC_HAVE_ACC */
    case IllegalCable:
      StateMachineIllegalCable(port);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f9e9 	bl	800aad4 <StateMachineIllegalCable>
      break;
 800a702:	e004      	b.n	800a70e <StateMachineTypeC+0x18e>
    default:
      /* We shouldn't get here, so go to the unattached state just in case */
      SetStateUnattached(port);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fa3d 	bl	800ab84 <SetStateUnattached>
      break;
 800a70a:	e000      	b.n	800a70e <StateMachineTypeC+0x18e>
    }
  } /* TC Enabled */
 800a70c:	bf00      	nop
}
 800a70e:	bf00      	nop
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop

0800a718 <StateMachineDisabled>:

void StateMachineDisabled(struct Port *port)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
#ifdef FSC_HAVE_SNK
  if (port->is_dead_battery_) {
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800a726:	2b00      	cmp	r3, #0
 800a728:	d006      	beq.n	800a738 <StateMachineDisabled+0x20>
    DetectCCPin(port);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7fe fc4b 	bl	8008fc6 <DetectCCPin>

    SetStateAttachedSink(port);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fb45 	bl	800adc0 <SetStateAttachedSink>
  else
#endif /* FSC_HAVE_SNK */
  {
    SetStateUnattached(port);
  }
}
 800a736:	e002      	b.n	800a73e <StateMachineDisabled+0x26>
    SetStateUnattached(port);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fa23 	bl	800ab84 <SetStateUnattached>
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <StateMachineErrorRecovery>:

void StateMachineErrorRecovery(struct Port *port)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  if (TimerExpired(&port->tc_state_timer_)) {
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3380      	adds	r3, #128	; 0x80
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff fec6 	bl	800a4e4 <TimerExpired>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d008      	beq.n	800a770 <StateMachineErrorRecovery+0x2a>
    TimerDisable(&port->tc_state_timer_);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3380      	adds	r3, #128	; 0x80
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fe92 	bl	800a48c <TimerDisable>
    SetStateUnattached(port);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fa0b 	bl	800ab84 <SetStateUnattached>
  }
  else {
    port->idle_ = TRUE;
  }
}
 800a76e:	e003      	b.n	800a778 <StateMachineErrorRecovery+0x32>
    port->idle_ = TRUE;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800a778:	bf00      	nop
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <StateMachineUnattached>:

void StateMachineUnattached(struct Port *port)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /*
   * If we got an interrupt for a CCStat change and if LOOK4CON is clear,
   * then the device is done looking for a connection.
   */
  if (port->registers_.AlertL.I_CCSTAT == 1 ) {
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7b9b      	ldrb	r3, [r3, #14]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	d06f      	beq.n	800a876 <StateMachineUnattached+0xf6>
    if (port->registers_.CCStat.LOOK4CON == 1) {
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	7e5b      	ldrb	r3, [r3, #25]
 800a79a:	f003 0320 	and.w	r3, r3, #32
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d004      	beq.n	800a7ae <StateMachineUnattached+0x2e>
      /* Still looking for a connection... */
      port->idle_ = TRUE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return;
 800a7ac:	e067      	b.n	800a87e <StateMachineUnattached+0xfe>
    }

    /* Set Source or Sink before using in pin detection */
    if (port->port_type_ == USBTypeC_Source ||
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d01e      	beq.n	800a7f6 <StateMachineUnattached+0x76>
        (port->port_type_ == USBTypeC_DRP &&
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    if (port->port_type_ == USBTypeC_Source ||
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d106      	bne.n	800a7d0 <StateMachineUnattached+0x50>
         port->registers_.CCStat.CON_RES == 0) ||
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	7e5b      	ldrb	r3, [r3, #25]
 800a7c6:	f003 0310 	and.w	r3, r3, #16
 800a7ca:	b2db      	uxtb	r3, r3
        (port->port_type_ == USBTypeC_DRP &&
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d012      	beq.n	800a7f6 <StateMachineUnattached+0x76>
        (port->port_type_ == USBTypeC_Sink &&
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
         port->registers_.CCStat.CON_RES == 0) ||
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d112      	bne.n	800a800 <StateMachineUnattached+0x80>
         port->registers_.RoleCtrl.DRP == 1 &&
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	7d9b      	ldrb	r3, [r3, #22]
 800a7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e2:	b2db      	uxtb	r3, r3
        (port->port_type_ == USBTypeC_Sink &&
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00b      	beq.n	800a800 <StateMachineUnattached+0x80>
         port->registers_.CCStat.CON_RES == 0)) {
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7e5b      	ldrb	r3, [r3, #25]
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	b2db      	uxtb	r3, r3
         port->registers_.RoleCtrl.DRP == 1 &&
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d104      	bne.n	800a800 <StateMachineUnattached+0x80>
      port->source_or_sink_ = Source;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 800a7fe:	e003      	b.n	800a808 <StateMachineUnattached+0x88>
    }
    else {
      port->source_or_sink_ = Sink;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    }

    /* Get both CC line terminations */
    DetectCCPin(port);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7fe fbdc 	bl	8008fc6 <DetectCCPin>
    UpdateVConnTermination(port);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7fe fc29 	bl	8009066 <UpdateVConnTermination>
      SetStateAttachWaitSource(port);
    }
    else
#endif /* FSC_HAVE_SRC */
#ifdef FSC_HAVE_SNK
    if (port->port_type_ == USBTypeC_Sink ||
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00b      	beq.n	800a836 <StateMachineUnattached+0xb6>
        (port->port_type_ == USBTypeC_DRP &&
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    if (port->port_type_ == USBTypeC_Sink ||
 800a824:	2b02      	cmp	r3, #2
 800a826:	d11d      	bne.n	800a864 <StateMachineUnattached+0xe4>
         port->registers_.CCStat.CON_RES == 1)) {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	7e5b      	ldrb	r3, [r3, #25]
 800a82c:	f003 0310 	and.w	r3, r3, #16
 800a830:	b2db      	uxtb	r3, r3
        (port->port_type_ == USBTypeC_DRP &&
 800a832:	2b00      	cmp	r3, #0
 800a834:	d016      	beq.n	800a864 <StateMachineUnattached+0xe4>
      }
      else
#endif /* FSC_HAVE_ACC */
      /* Operating as a Snk or DRP-Snk */
      /* Else-if to prevent attaching to Rd-Open while in Snk+Acc mode */
      if ((port->cc_term_ == CCTypeRdUSB ||
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d009      	beq.n	800a854 <StateMachineUnattached+0xd4>
           port->cc_term_ == CCTypeRd1p5 ||
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
      if ((port->cc_term_ == CCTypeRdUSB ||
 800a846:	2b03      	cmp	r3, #3
 800a848:	d004      	beq.n	800a854 <StateMachineUnattached+0xd4>
           port->cc_term_ == CCTypeRd3p0) &&
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
           port->cc_term_ == CCTypeRd1p5 ||
 800a850:	2b04      	cmp	r3, #4
 800a852:	d107      	bne.n	800a864 <StateMachineUnattached+0xe4>
          port->vconn_term_ == CCTypeOpen) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
           port->cc_term_ == CCTypeRd3p0) &&
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d102      	bne.n	800a864 <StateMachineUnattached+0xe4>
        SetStateAttachWaitSink(port);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fa48 	bl	800acf4 <SetStateAttachWaitSink>
      }
    }
#endif /* FSC_HAVE_SNK */

    if (port->tc_state_ == Unattached)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d107      	bne.n	800a87e <StateMachineUnattached+0xfe>
    {
      /* Reset our CC detection variables for next time through */
      SetStateUnattached(port);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f988 	bl	800ab84 <SetStateUnattached>
 800a874:	e003      	b.n	800a87e <StateMachineUnattached+0xfe>
    }
  }
  else {
    port->idle_ = TRUE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }
}
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <StateMachineAttachWaitSink>:

#ifdef FSC_HAVE_SNK
void StateMachineAttachWaitSink(struct Port *port)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* If VConn is not Open, keep checking for the right CC/VConn termination */
  if (port->vconn_term_ != CCTypeOpen) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a892:	2b00      	cmp	r3, #0
 800a894:	d006      	beq.n	800a8a4 <StateMachineAttachWaitSink+0x20>
    port->cc_pin_ = NONE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    DetectCCPin(port);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7fe fb91 	bl	8008fc6 <DetectCCPin>
  }

  UpdateVConnTermination(port);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7fe fbde 	bl	8009066 <UpdateVConnTermination>
  DebounceCC(port);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7fe fac0 	bl	8008e30 <DebounceCC>

  if (port->registers_.AlertL.I_VBUS_ALRM_HI == 1) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7b9b      	ldrb	r3, [r3, #14]
 800a8b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <StateMachineAttachWaitSink+0x44>
    /* Interrupt caused by VBUS crossing VSafe5V */
    ClearInterrupt(port, regALERTL, MSK_I_VBUS_ALRM_HI);
 800a8be:	2280      	movs	r2, #128	; 0x80
 800a8c0:	2110      	movs	r1, #16
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7fe f865 	bl	8008992 <ClearInterrupt>
  }

  if (port->cc_term_pd_debounce_ == CCTypeOpen &&
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d108      	bne.n	800a8e4 <StateMachineAttachWaitSink+0x60>
      port->vconn_term_ == CCTypeOpen) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  if (port->cc_term_pd_debounce_ == CCTypeOpen &&
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d103      	bne.n	800a8e4 <StateMachineAttachWaitSink+0x60>
      /* Open detected? */
      SetStateUnattached(port);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f951 	bl	800ab84 <SetStateUnattached>
 800a8e2:	e035      	b.n	800a950 <StateMachineAttachWaitSink+0xcc>
  } else if (IsVbusVSafe5V(port)) {
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7fe f98a 	bl	8008bfe <IsVbusVSafe5V>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d02a      	beq.n	800a946 <StateMachineAttachWaitSink+0xc2>
    if (port->cc_term_cc_debounce_ >= CCTypeRdUSB &&
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d912      	bls.n	800a920 <StateMachineAttachWaitSink+0x9c>
        port->cc_term_cc_debounce_ < CCTypeUndefined &&
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
    if (port->cc_term_cc_debounce_ >= CCTypeRdUSB &&
 800a900:	2b04      	cmp	r3, #4
 800a902:	d80d      	bhi.n	800a920 <StateMachineAttachWaitSink+0x9c>
        port->vconn_term_ >= CCTypeRdUSB &&
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
        port->cc_term_cc_debounce_ < CCTypeUndefined &&
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d908      	bls.n	800a920 <StateMachineAttachWaitSink+0x9c>
        port->vconn_term_ < CCTypeUndefined) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
        port->vconn_term_ >= CCTypeRdUSB &&
 800a914:	2b04      	cmp	r3, #4
 800a916:	d803      	bhi.n	800a920 <StateMachineAttachWaitSink+0x9c>
        /* If both pins are Rp, it's a debug accessory */
        SetStateDebugAccessorySink(port);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fad3 	bl	800aec4 <SetStateDebugAccessorySink>
 800a91e:	e017      	b.n	800a950 <StateMachineAttachWaitSink+0xcc>
    } else if (port->cc_term_cc_debounce_ > CCTypeOpen &&
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800a926:	2b00      	cmp	r3, #0
 800a928:	d012      	beq.n	800a950 <StateMachineAttachWaitSink+0xcc>
              port->cc_term_cc_debounce_ < CCTypeUndefined &&
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
    } else if (port->cc_term_cc_debounce_ > CCTypeOpen &&
 800a930:	2b04      	cmp	r3, #4
 800a932:	d80d      	bhi.n	800a950 <StateMachineAttachWaitSink+0xcc>
              port->vconn_term_ == CCTypeOpen) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
              port->cc_term_cc_debounce_ < CCTypeUndefined &&
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d108      	bne.n	800a950 <StateMachineAttachWaitSink+0xcc>
        WriteRegister(port, regALERTMSKL);
        SetStateTrySource(port);
      } else
#endif /* FSC_HAVE_DRP */
      {
        SetStateAttachedSink(port);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fa3e 	bl	800adc0 <SetStateAttachedSink>
    }
  }
  else {
      port->idle_ = TRUE;
  }
}
 800a944:	e004      	b.n	800a950 <StateMachineAttachWaitSink+0xcc>
      port->idle_ = TRUE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800a94e:	e7ff      	b.n	800a950 <StateMachineAttachWaitSink+0xcc>
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <StateMachineAttachedSink>:
}
#endif /* FSC_HAVE_ACC */

#ifdef FSC_HAVE_SNK
void StateMachineAttachedSink(struct Port *port)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
    /* Sink -> Source path switch happens automatically */
  }
#endif /* FSC_HAVE_FRSWAP */

  /* A VBus disconnect should generate an interrupt to wake us up */
  if (port->registers_.AlertH.I_VBUS_SNK_DISC || IsVbusVSafe0V(port)) {
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	7bdb      	ldrb	r3, [r3, #15]
 800a964:	f003 0308 	and.w	r3, r3, #8
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d105      	bne.n	800a97a <StateMachineAttachedSink+0x22>
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7fe f930 	bl	8008bd4 <IsVbusVSafe0V>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d017      	beq.n	800a9aa <StateMachineAttachedSink+0x52>
    ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 800a97a:	2202      	movs	r2, #2
 800a97c:	2110      	movs	r1, #16
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7fe f807 	bl	8008992 <ClearInterrupt>
    ClearInterrupt(port, regALERTH, MSK_I_VBUS_SNK_DISC);
 800a984:	2208      	movs	r2, #8
 800a986:	2111      	movs	r1, #17
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7fe f802 	bl	8008992 <ClearInterrupt>

    if (port->is_pr_swap_ == FALSE &&
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800a994:	2b00      	cmp	r3, #0
 800a996:	d108      	bne.n	800a9aa <StateMachineAttachedSink+0x52>
#ifdef FSC_HAVE_FRSWAP
        port->is_fr_swap_ == FALSE &&
#endif /* FSC_HAVE_FRSWAP */
        port->is_hard_reset_ == FALSE) {
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
    if (port->is_pr_swap_ == FALSE &&
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d103      	bne.n	800a9aa <StateMachineAttachedSink+0x52>
        /* Start the disconnect process */
      SetStateUnattached(port);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f8ee 	bl	800ab84 <SetStateUnattached>
      return;
 800a9a8:	e03a      	b.n	800aa20 <StateMachineAttachedSink+0xc8>
    }
  }

  if (!port->is_pr_swap_) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <StateMachineAttachedSink+0x62>
    DebounceCC(port);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7fe fa3b 	bl	8008e30 <DebounceCC>
  }

  /* If using PD, sink can monitor CC as well as VBUS to allow detach during a
   * hard rest */
  if (port->pd_active_ == TRUE && !port->is_pr_swap_ &&
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d10d      	bne.n	800a9e0 <StateMachineAttachedSink+0x88>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d108      	bne.n	800a9e0 <StateMachineAttachedSink+0x88>
      port->cc_term_pd_debounce_ == CCTypeOpen) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
  if (port->pd_active_ == TRUE && !port->is_pr_swap_ &&
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d103      	bne.n	800a9e0 <StateMachineAttachedSink+0x88>
      SetStateUnattached(port);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f8d3 	bl	800ab84 <SetStateUnattached>
    return;
 800a9de:	e01f      	b.n	800aa20 <StateMachineAttachedSink+0xc8>
  }

  if (TimerExpired(&port->tc_state_timer_)) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3380      	adds	r3, #128	; 0x80
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff fd7d 	bl	800a4e4 <TimerExpired>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d008      	beq.n	800aa02 <StateMachineAttachedSink+0xaa>
    TimerDisable(&port->tc_state_timer_);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3380      	adds	r3, #128	; 0x80
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff fd49 	bl	800a48c <TimerDisable>
    port->unattach_loop_counter_ = 0;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
  }

  if (port->registers_.AlertL.I_PORT_PWR) {
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	7b9b      	ldrb	r3, [r3, #14]
 800aa06:	f003 0302 	and.w	r3, r3, #2
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d004      	beq.n	800aa1a <StateMachineAttachedSink+0xc2>
    ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 800aa10:	2202      	movs	r2, #2
 800aa12:	2110      	movs	r1, #16
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7fd ffbc 	bl	8008992 <ClearInterrupt>
  }

  /* Update sink current from CC level */
  UpdateSinkCurrent(port);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7fe f87d 	bl	8008b1a <UpdateSinkCurrent>
}
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <StateMachineDebugAccessorySink>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void StateMachineDebugAccessorySink(struct Port *port)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  UpdateVConnTermination(port);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7fe fb19 	bl	8009066 <UpdateVConnTermination>
  DebounceCC(port);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7fe f9fb 	bl	8008e30 <DebounceCC>

  port->idle_ = TRUE;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  if (!port->registers_.PwrStat.VBUS_VAL) {
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	7e9b      	ldrb	r3, [r3, #26]
 800aa46:	f003 0304 	and.w	r3, r3, #4
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d103      	bne.n	800aa58 <StateMachineDebugAccessorySink+0x32>
      SetStateUnattached(port);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f897 	bl	800ab84 <SetStateUnattached>
    else if (port->vconn_term_ > port->cc_term_pd_debounce_) {
      port->cc_pin_ = CC2;
      PDEnable(port, FALSE);
    }
  }
}
 800aa56:	e039      	b.n	800aacc <StateMachineDebugAccessorySink+0xa6>
  else if (port->cc_term_pd_debounce_ >= CCTypeRdUSB &&
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d934      	bls.n	800aacc <StateMachineDebugAccessorySink+0xa6>
           port->cc_term_pd_debounce_ < CCTypeUndefined &&
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
  else if (port->cc_term_pd_debounce_ >= CCTypeRdUSB &&
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d82f      	bhi.n	800aacc <StateMachineDebugAccessorySink+0xa6>
           port->vconn_term_ >= CCTypeRdUSB &&
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
           port->cc_term_pd_debounce_ < CCTypeUndefined &&
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d92a      	bls.n	800aacc <StateMachineDebugAccessorySink+0xa6>
           port->vconn_term_ < CCTypeUndefined &&
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
           port->vconn_term_ >= CCTypeRdUSB &&
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	d825      	bhi.n	800aacc <StateMachineDebugAccessorySink+0xa6>
           port->pd_active_ == FALSE) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
           port->vconn_term_ < CCTypeUndefined &&
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d120      	bne.n	800aacc <StateMachineDebugAccessorySink+0xa6>
    if (port->cc_term_pd_debounce_ > port->vconn_term_) {
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d908      	bls.n	800aaac <StateMachineDebugAccessorySink+0x86>
      port->cc_pin_ = CC1;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
      PDEnable(port, FALSE);
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7fe fc69 	bl	800937c <PDEnable>
}
 800aaaa:	e00f      	b.n	800aacc <StateMachineDebugAccessorySink+0xa6>
    else if (port->vconn_term_ > port->cc_term_pd_debounce_) {
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d907      	bls.n	800aacc <StateMachineDebugAccessorySink+0xa6>
      port->cc_pin_ = CC2;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2202      	movs	r2, #2
 800aac0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
      PDEnable(port, FALSE);
 800aac4:	2100      	movs	r1, #0
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7fe fc58 	bl	800937c <PDEnable>
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <StateMachineIllegalCable>:
  }
}
#endif /* FSC_HAVE_SRC */

void StateMachineIllegalCable(struct Port *port)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  DebounceCC(port);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7fe f9a7 	bl	8008e30 <DebounceCC>

  /* Look for detach */
  if (port->cc_term_previous_ == CCTypeOpen) {
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d103      	bne.n	800aaf4 <StateMachineIllegalCable+0x20>
      SetStateUnattached(port);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f849 	bl	800ab84 <SetStateUnattached>
  }
  else {
      port->idle_ = TRUE;
  }
}
 800aaf2:	e003      	b.n	800aafc <StateMachineIllegalCable+0x28>
      port->idle_ = TRUE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800aafc:	bf00      	nop
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <SetStateErrorRecovery>:
  port->registers_.PwrCtrl.AUTO_DISCH = 0;
  WriteRegister(port, regPWRCTRL);
}

void SetStateErrorRecovery(struct Port *port)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  platform_printf(port->port_id_, "SS ER\n", -1);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f04f 32ff 	mov.w	r2, #4294967295
 800ab14:	491a      	ldr	r1, [pc, #104]	; (800ab80 <SetStateErrorRecovery+0x7c>)
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7f6 f8b8 	bl	8000c8c <platform_printf>
  port->idle_ = FALSE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  port->tc_state_ = ErrorRecovery;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  TimerStart(&port->tc_state_timer_, ktErrorRecovery);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3380      	adds	r3, #128	; 0x80
 800ab30:	f247 5130 	movw	r1, #30000	; 0x7530
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff fc8b 	bl	800a450 <TimerStart>
  ClearState(port);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7fe fb52 	bl	80091e4 <ClearState>

  port->registers_.PwrCtrl.AUTO_DISCH = 0;
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	7e13      	ldrb	r3, [r2, #24]
 800ab44:	f36f 1304 	bfc	r3, #4, #1
 800ab48:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 800ab4a:	211c      	movs	r1, #28
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7fd fed5 	bl	80088fc <WriteRegister>

  /* Present Open/Open for tErrorRecovery */
  port->registers_.RoleCtrl.DRP = 0;
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	7d93      	ldrb	r3, [r2, #22]
 800ab56:	f36f 1386 	bfc	r3, #6, #1
 800ab5a:	7593      	strb	r3, [r2, #22]
  port->registers_.RoleCtrl.CC1_TERM = CCRoleOpen;
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	7d93      	ldrb	r3, [r2, #22]
 800ab60:	f043 0303 	orr.w	r3, r3, #3
 800ab64:	7593      	strb	r3, [r2, #22]
  port->registers_.RoleCtrl.CC2_TERM = CCRoleOpen;
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	7d93      	ldrb	r3, [r2, #22]
 800ab6a:	f043 030c 	orr.w	r3, r3, #12
 800ab6e:	7593      	strb	r3, [r2, #22]
  WriteRegister(port, regROLECTRL);
 800ab70:	211a      	movs	r1, #26
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7fd fec2 	bl	80088fc <WriteRegister>
}
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	0800dd0c 	.word	0x0800dd0c

0800ab84 <SetStateUnattached>:
/* SetStateUnattached configures the Toggle state machine in the device to */
/* handle all of the unattached states. */
/* This allows for the MCU to be placed in a low power mode until */
/* the device wakes it up upon detecting something */
void SetStateUnattached(struct Port *port)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  FSC_BOOL wasAWSnk = (port->tc_state_ == AttachWaitSink) ? TRUE : FALSE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	bf0c      	ite	eq
 800ab96:	2301      	moveq	r3, #1
 800ab98:	2300      	movne	r3, #0
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	73fb      	strb	r3, [r7, #15]

  platform_printf(port->port_id_, "SS UN\n", -1);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	f04f 32ff 	mov.w	r2, #4294967295
 800aba6:	4952      	ldr	r1, [pc, #328]	; (800acf0 <SetStateUnattached+0x16c>)
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f6 f86f 	bl	8000c8c <platform_printf>

  port->idle_ = TRUE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  port->tc_state_ = Unattached;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2202      	movs	r2, #2
 800abba:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

  ClearState(port);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7fe fb10 	bl	80091e4 <ClearState>

  /* Clear all alert interrupts */
  ClearInterrupt(port, regALERTL, MSK_I_ALARM_LO_ALL);
 800abc4:	22ff      	movs	r2, #255	; 0xff
 800abc6:	2110      	movs	r1, #16
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7fd fee2 	bl	8008992 <ClearInterrupt>
  ClearInterrupt(port, regALERTH, MSK_I_ALARM_HI_ALL);
 800abce:	228f      	movs	r2, #143	; 0x8f
 800abd0:	2111      	movs	r1, #17
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7fd fedd 	bl	8008992 <ClearInterrupt>
  ClearInterrupt(port, regFAULTSTAT, MSK_FAULTSTAT_ALL);
 800abd8:	2233      	movs	r2, #51	; 0x33
 800abda:	211f      	movs	r1, #31
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7fd fed8 	bl	8008992 <ClearInterrupt>

  /* Disable monitoring except for CCStat */
  port->registers_.AlertMskL.byte = MSK_I_CCSTAT;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	741a      	strb	r2, [r3, #16]
  port->registers_.AlertMskH.byte = 0;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	745a      	strb	r2, [r3, #17]
  WriteRegisters(port, regALERTMSKL, 2);
 800abee:	2202      	movs	r2, #2
 800abf0:	2112      	movs	r1, #18
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7fd fe9b 	bl	800892e <WriteRegisters>

  /* Disable monitoring and reconfigure to look for the next connection */
  if (port->port_type_ == USBTypeC_DRP) {
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d121      	bne.n	800ac46 <SetStateUnattached+0xc2>
    /* Config as DRP */
    port->registers_.RoleCtrl.DRP = 1;
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	7d93      	ldrb	r3, [r2, #22]
 800ac06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac0a:	7593      	strb	r3, [r2, #22]

    if (wasAWSnk) {
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00c      	beq.n	800ac2c <SetStateUnattached+0xa8>
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRp;
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	7d93      	ldrb	r3, [r2, #22]
 800ac16:	2101      	movs	r1, #1
 800ac18:	f361 0301 	bfi	r3, r1, #0, #2
 800ac1c:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRp;
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	7d93      	ldrb	r3, [r2, #22]
 800ac22:	2101      	movs	r1, #1
 800ac24:	f361 0383 	bfi	r3, r1, #2, #2
 800ac28:	7593      	strb	r3, [r2, #22]
 800ac2a:	e03c      	b.n	800aca6 <SetStateUnattached+0x122>
    }
    else {
      port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	7d93      	ldrb	r3, [r2, #22]
 800ac30:	2102      	movs	r1, #2
 800ac32:	f361 0301 	bfi	r3, r1, #0, #2
 800ac36:	7593      	strb	r3, [r2, #22]
      port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	7d93      	ldrb	r3, [r2, #22]
 800ac3c:	2102      	movs	r1, #2
 800ac3e:	f361 0383 	bfi	r3, r1, #2, #2
 800ac42:	7593      	strb	r3, [r2, #22]
 800ac44:	e02f      	b.n	800aca6 <SetStateUnattached+0x122>
    }
  }
  else if (port->port_type_ == USBTypeC_Source) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d111      	bne.n	800ac74 <SetStateUnattached+0xf0>
    /* Config as a source with Rp-Rp */
    port->registers_.RoleCtrl.DRP = 0;
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	7d93      	ldrb	r3, [r2, #22]
 800ac54:	f36f 1386 	bfc	r3, #6, #1
 800ac58:	7593      	strb	r3, [r2, #22]
    port->registers_.RoleCtrl.CC1_TERM = CCRoleRp;
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	7d93      	ldrb	r3, [r2, #22]
 800ac5e:	2101      	movs	r1, #1
 800ac60:	f361 0301 	bfi	r3, r1, #0, #2
 800ac64:	7593      	strb	r3, [r2, #22]
    port->registers_.RoleCtrl.CC2_TERM = CCRoleRp;
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	7d93      	ldrb	r3, [r2, #22]
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	f361 0383 	bfi	r3, r1, #2, #2
 800ac70:	7593      	strb	r3, [r2, #22]
 800ac72:	e018      	b.n	800aca6 <SetStateUnattached+0x122>
  }
  else {
    /* Config as a sink with Rd-Rd - toggle for acc if supported */
    port->registers_.RoleCtrl.DRP = port->acc_support_ ? 1 : 0;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bf14      	ite	ne
 800ac7e:	2301      	movne	r3, #1
 800ac80:	2300      	moveq	r3, #0
 800ac82:	b2d9      	uxtb	r1, r3
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	7d93      	ldrb	r3, [r2, #22]
 800ac88:	f361 1386 	bfi	r3, r1, #6, #1
 800ac8c:	7593      	strb	r3, [r2, #22]
    port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	7d93      	ldrb	r3, [r2, #22]
 800ac92:	2102      	movs	r1, #2
 800ac94:	f361 0301 	bfi	r3, r1, #0, #2
 800ac98:	7593      	strb	r3, [r2, #22]
    port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	7d93      	ldrb	r3, [r2, #22]
 800ac9e:	2102      	movs	r1, #2
 800aca0:	f361 0383 	bfi	r3, r1, #2, #2
 800aca4:	7593      	strb	r3, [r2, #22]
  }
  port->registers_.StdOutCfg.ORIENT = 0;
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	7d13      	ldrb	r3, [r2, #20]
 800acaa:	f36f 0300 	bfc	r3, #0, #1
 800acae:	7513      	strb	r3, [r2, #20]
  WriteRegister(port, regSTD_OUT_CFG);
 800acb0:	2118      	movs	r1, #24
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7fd fe22 	bl	80088fc <WriteRegister>

  UpdateSourceCurrent(port, port->src_current_);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fd ff17 	bl	8008af4 <UpdateSourceCurrent>

  /* Driver will wait until device detects a new connection */
  SendCommand(port, Look4Con);
 800acc6:	2199      	movs	r1, #153	; 0x99
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7fd fe7f 	bl	80089cc <SendCommand>
  TimerDisable(&port->tc_state_timer_);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3380      	adds	r3, #128	; 0x80
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7ff fbda 	bl	800a48c <TimerDisable>
  notify_observers(EVENT_TYPEC_DETACH, port->port_id_, 0);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	b29b      	uxth	r3, r3
 800acde:	2200      	movs	r2, #0
 800ace0:	4619      	mov	r1, r3
 800ace2:	2002      	movs	r0, #2
 800ace4:	f7fa fba4 	bl	8005430 <notify_observers>
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	0800dd14 	.word	0x0800dd14

0800acf4 <SetStateAttachWaitSink>:

#ifdef FSC_HAVE_SNK
void SetStateAttachWaitSink(struct Port *port)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  platform_printf(port->port_id_, "SS AWSnk\n", -1);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	f04f 32ff 	mov.w	r2, #4294967295
 800ad04:	492d      	ldr	r1, [pc, #180]	; (800adbc <SetStateAttachWaitSink+0xc8>)
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f5 ffc0 	bl	8000c8c <platform_printf>

  port->idle_ = FALSE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  port->tc_state_ = AttachWaitSink;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2203      	movs	r2, #3
 800ad18:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  SetStateSink(port);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7fe f91a 	bl	8008f56 <SetStateSink>

   /* Check for cable looping */
  if (port->unattach_loop_counter_ > MAX_CABLE_LOOP) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ad28:	2b14      	cmp	r3, #20
 800ad2a:	d903      	bls.n	800ad34 <SetStateAttachWaitSink+0x40>
    SetStateIllegalCable(port);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f915 	bl	800af5c <SetStateIllegalCable>
    return;
 800ad32:	e03f      	b.n	800adb4 <SetStateAttachWaitSink+0xc0>
  }
  else {
    port->unattach_loop_counter_++;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
  }

  /* Set sink terminations.  This may be a good idea or may just be part
   * of the workaround for AWSink issue.
   */
  port->registers_.RoleCtrl.DRP = 0;
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	7d93      	ldrb	r3, [r2, #22]
 800ad48:	f36f 1386 	bfc	r3, #6, #1
 800ad4c:	7593      	strb	r3, [r2, #22]
  port->registers_.RoleCtrl.CC1_TERM = CCRoleRd;
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	7d93      	ldrb	r3, [r2, #22]
 800ad52:	2102      	movs	r1, #2
 800ad54:	f361 0301 	bfi	r3, r1, #0, #2
 800ad58:	7593      	strb	r3, [r2, #22]
  port->registers_.RoleCtrl.CC2_TERM = CCRoleRd;
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	7d93      	ldrb	r3, [r2, #22]
 800ad5e:	2102      	movs	r1, #2
 800ad60:	f361 0383 	bfi	r3, r1, #2, #2
 800ad64:	7593      	strb	r3, [r2, #22]
  WriteRegister(port, regROLECTRL);
 800ad66:	211a      	movs	r1, #26
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7fd fdc7 	bl	80088fc <WriteRegister>

  UpdateVConnTermination(port);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7fe f979 	bl	8009066 <UpdateVConnTermination>

  TimerDisable(&port->tc_state_timer_);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3380      	adds	r3, #128	; 0x80
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff fb87 	bl	800a48c <TimerDisable>

  SetVBusAlarm(port, 0, FSC_VSAFE5V_L);
 800ad7e:	22be      	movs	r2, #190	; 0xbe
 800ad80:	2100      	movs	r1, #0
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7fd ff90 	bl	8008ca8 <SetVBusAlarm>
  port->registers_.AlertMskL.M_PORT_PWR = 0;
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	7c13      	ldrb	r3, [r2, #16]
 800ad8c:	f36f 0341 	bfc	r3, #1, #1
 800ad90:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskL.M_VBUS_ALRM_HI = 1;
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	7c13      	ldrb	r3, [r2, #16]
 800ad96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad9a:	7413      	strb	r3, [r2, #16]
  WriteRegister(port, regALERTMSKL);
 800ad9c:	2112      	movs	r1, #18
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7fd fdac 	bl	80088fc <WriteRegister>

  notify_observers(EVENT_TYPEC_ATTACH, port->port_id_, 0);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	2200      	movs	r2, #0
 800adac:	4619      	mov	r1, r3
 800adae:	2001      	movs	r0, #1
 800adb0:	f7fa fb3e 	bl	8005430 <notify_observers>
}
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	0800dd1c 	.word	0x0800dd1c

0800adc0 <SetStateAttachedSink>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void SetStateAttachedSink(struct Port *port)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  platform_printf(port->port_id_, "SS ASnk\n", -1);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f04f 32ff 	mov.w	r2, #4294967295
 800add0:	493a      	ldr	r1, [pc, #232]	; (800aebc <SetStateAttachedSink+0xfc>)
 800add2:	4618      	mov	r0, r3
 800add4:	f7f5 ff5a 	bl	8000c8c <platform_printf>

  port->idle_ = TRUE;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  port->tc_state_ = AttachedSink;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2204      	movs	r2, #4
 800ade4:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  SetStateSink(port);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7fe f8b4 	bl	8008f56 <SetStateSink>

  /* Disable VBUS Alarm */
  port->registers_.PwrCtrl.DIS_VALARM = 1;
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	7e13      	ldrb	r3, [r2, #24]
 800adf2:	f043 0320 	orr.w	r3, r3, #32
 800adf6:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 800adf8:	211c      	movs	r1, #28
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7fd fd7e 	bl	80088fc <WriteRegister>

  /* Set up the Sink Disconnect threshold/interrupt */
  SetVBusSnkDisc(port, FSC_VSAFE5V_DISC);
 800ae00:	2192      	movs	r1, #146	; 0x92
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7fd ff16 	bl	8008c34 <SetVBusSnkDisc>
  SetVBusStopDisc(port, FSC_VSAFE0V_DISCH);
 800ae08:	211c      	movs	r1, #28
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7fd ff2f 	bl	8008c6e <SetVBusStopDisc>

  port->registers_.AlertMskL.M_PORT_PWR = 1;
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	7c13      	ldrb	r3, [r2, #16]
 800ae14:	f043 0302 	orr.w	r3, r3, #2
 800ae18:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskH.M_VBUS_SNK_DISC = 1;
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	7c53      	ldrb	r3, [r2, #17]
 800ae1e:	f043 0308 	orr.w	r3, r3, #8
 800ae22:	7453      	strb	r3, [r2, #17]
  WriteRegisters(port, regALERTMSKL, 2);
 800ae24:	2202      	movs	r2, #2
 800ae26:	2112      	movs	r1, #18
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7fd fd80 	bl	800892e <WriteRegisters>

  ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 800ae2e:	2202      	movs	r2, #2
 800ae30:	2110      	movs	r1, #16
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7fd fdad 	bl	8008992 <ClearInterrupt>
  ClearInterrupt(port, regALERTH, MSK_I_VBUS_SNK_DISC);
 800ae38:	2208      	movs	r2, #8
 800ae3a:	2111      	movs	r1, #17
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7fd fda8 	bl	8008992 <ClearInterrupt>

  UpdateVConnTermination(port);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7fe f90f 	bl	8009066 <UpdateVConnTermination>
  UpdateOrientation(port);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7fe f932 	bl	80090b2 <UpdateOrientation>

  /* Call once at the start to set the initial termination value */
  DebounceCC(port);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7fd ffee 	bl	8008e30 <DebounceCC>

  PDEnable(port, FALSE);
 800ae54:	2100      	movs	r1, #0
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7fe fa90 	bl	800937c <PDEnable>

  port->registers_.PwrCtrl.AUTO_DISCH = 1;
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7e13      	ldrb	r3, [r2, #24]
 800ae60:	f043 0310 	orr.w	r3, r3, #16
 800ae64:	7613      	strb	r3, [r2, #24]
  port->registers_.PwrCtrl.EN_BLEED_DISCH = 1;
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	7e13      	ldrb	r3, [r2, #24]
 800ae6a:	f043 0308 	orr.w	r3, r3, #8
 800ae6e:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 800ae70:	211c      	movs	r1, #28
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7fd fd42 	bl	80088fc <WriteRegister>

  SendCommand(port, SinkVbus);
 800ae78:	2155      	movs	r1, #85	; 0x55
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7fd fda6 	bl	80089cc <SendCommand>

  port->is_vconn_source_ = FALSE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f

  notify_observers((port->cc_pin_ == CC1
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <SetStateAttachedSink+0xd6>
 800ae92:	2004      	movs	r0, #4
 800ae94:	e000      	b.n	800ae98 <SetStateAttachedSink+0xd8>
 800ae96:	2008      	movs	r0, #8
                   ? EVENT_CC1_ORIENT : EVENT_CC2_ORIENT),
                   port->port_id_, 0);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
  notify_observers((port->cc_pin_ == CC1
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	2200      	movs	r2, #0
 800aea0:	4619      	mov	r1, r3
 800aea2:	f7fa fac5 	bl	8005430 <notify_observers>

  /* Start dangling illegal cable timeout */
  TimerStart(&port->tc_state_timer_, ktIllegalCable);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	3380      	adds	r3, #128	; 0x80
 800aeaa:	4905      	ldr	r1, [pc, #20]	; (800aec0 <SetStateAttachedSink+0x100>)
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7ff facf 	bl	800a450 <TimerStart>
}
 800aeb2:	bf00      	nop
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	0800dd28 	.word	0x0800dd28
 800aec0:	000249f0 	.word	0x000249f0

0800aec4 <SetStateDebugAccessorySink>:
}
#endif /* FSC_HAVE_SRC */

#ifdef FSC_HAVE_SNK
void SetStateDebugAccessorySink(struct Port *port)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  port->idle_ = TRUE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  port->tc_state_ = DebugAccessorySink;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	220f      	movs	r2, #15
 800aed8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  SetStateSink(port);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7fe f83a 	bl	8008f56 <SetStateSink>

  /* Disable the VBus Value notification */
  port->registers_.PwrCtrl.DIS_VALARM = 1;
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	7e13      	ldrb	r3, [r2, #24]
 800aee6:	f043 0320 	orr.w	r3, r3, #32
 800aeea:	7613      	strb	r3, [r2, #24]
  WriteRegister(port, regPWRCTRL);
 800aeec:	211c      	movs	r1, #28
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7fd fd04 	bl	80088fc <WriteRegister>

  /* Set up the Sink Disconnect threshold/interrupt */
  SetVBusSnkDisc(port, FSC_VSAFE5V_DISC);
 800aef4:	2192      	movs	r1, #146	; 0x92
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7fd fe9c 	bl	8008c34 <SetVBusSnkDisc>
  SetVBusStopDisc(port, FSC_VSAFE0V_DISCH);
 800aefc:	211c      	movs	r1, #28
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7fd feb5 	bl	8008c6e <SetVBusStopDisc>

  port->registers_.AlertMskL.M_PORT_PWR = 1;
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	7c13      	ldrb	r3, [r2, #16]
 800af08:	f043 0302 	orr.w	r3, r3, #2
 800af0c:	7413      	strb	r3, [r2, #16]
  port->registers_.AlertMskH.M_VBUS_SNK_DISC = 1;
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	7c53      	ldrb	r3, [r2, #17]
 800af12:	f043 0308 	orr.w	r3, r3, #8
 800af16:	7453      	strb	r3, [r2, #17]
  WriteRegisters(port, regALERTMSKL, 2);
 800af18:	2202      	movs	r2, #2
 800af1a:	2112      	movs	r1, #18
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7fd fd06 	bl	800892e <WriteRegisters>

  ClearInterrupt(port, regALERTL, MSK_I_PORT_PWR);
 800af22:	2202      	movs	r2, #2
 800af24:	2110      	movs	r1, #16
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7fd fd33 	bl	8008992 <ClearInterrupt>
  ClearInterrupt(port, regALERTH, MSK_I_VBUS_SNK_DISC);
 800af2c:	2208      	movs	r2, #8
 800af2e:	2111      	movs	r1, #17
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7fd fd2e 	bl	8008992 <ClearInterrupt>

  /* TODO - Add events Power role, PD contract etc*/
  notify_observers(EVENT_CC1_ORIENT | EVENT_DEBUG_ACCESSORY,
                   port->port_id_, 0);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	781b      	ldrb	r3, [r3, #0]
  notify_observers(EVENT_CC1_ORIENT | EVENT_DEBUG_ACCESSORY,
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	2200      	movs	r2, #0
 800af3e:	4619      	mov	r1, r3
 800af40:	4805      	ldr	r0, [pc, #20]	; (800af58 <SetStateDebugAccessorySink+0x94>)
 800af42:	f7fa fa75 	bl	8005430 <notify_observers>

  TimerDisable(&port->tc_state_timer_);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3380      	adds	r3, #128	; 0x80
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff fa9e 	bl	800a48c <TimerDisable>
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	00800004 	.word	0x00800004

0800af5c <SetStateIllegalCable>:
  TimerDisable(&port->tc_state_timer_);
}
#endif /* FSC_HAVE_ACC && (FSC_HAVE_SNK || FSC_HAVE_SRC) */

void SetStateIllegalCable(struct Port *port)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  platform_printf(port->port_id_, "SS IllCab\n", -1);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	f04f 32ff 	mov.w	r2, #4294967295
 800af6c:	490d      	ldr	r1, [pc, #52]	; (800afa4 <SetStateIllegalCable+0x48>)
 800af6e:	4618      	mov	r0, r3
 800af70:	f7f5 fe8c 	bl	8000c8c <platform_printf>

  port->tc_state_ = IllegalCable;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2214      	movs	r2, #20
 800af78:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  port->unattach_loop_counter_ = 0;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
  port->registers_.PwrCtrl.AUTO_DISCH = 1;
  WriteRegister(port, regPWRCTRL);
#endif /* FSC_HAVE_SRC ||  FSC_HAVE_SNK && FSC_HAVE_ACC */
  /* No contract could be negotiated. */
  notify_observers(EVENT_CC_NO_ORIENT | EVENT_ILLEGAL_CBL,
                   port->port_id_, 0);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	781b      	ldrb	r3, [r3, #0]
  notify_observers(EVENT_CC_NO_ORIENT | EVENT_ILLEGAL_CBL,
 800af88:	b29b      	uxth	r3, r3
 800af8a:	2200      	movs	r2, #0
 800af8c:	4619      	mov	r1, r3
 800af8e:	4806      	ldr	r0, [pc, #24]	; (800afa8 <SetStateIllegalCable+0x4c>)
 800af90:	f7fa fa4e 	bl	8005430 <notify_observers>

  port->idle_ = TRUE;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	0800dd40 	.word	0x0800dd40
 800afa8:	02000010 	.word	0x02000010

0800afac <CurrentSVDMVersion>:
#include "observer.h"

#define VDM_ARRAY_LEN 1

SvdmVersion CurrentSVDMVersion(struct Port *port, SopType sop)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70fb      	strb	r3, [r7, #3]
  if (DPM_CurrentSpecRev(port, sop) == PDSpecRev2p0)
 800afb8:	78fb      	ldrb	r3, [r7, #3]
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7fa f9e9 	bl	8005394 <DPM_CurrentSpecRev>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d101      	bne.n	800afcc <CurrentSVDMVersion+0x20>
    return V1P0;
 800afc8:	2300      	movs	r3, #0
 800afca:	e000      	b.n	800afce <CurrentSVDMVersion+0x22>
  else
    return V2P0;
 800afcc:	2301      	movs	r3, #1
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <PolicyVdm>:

void PolicyVdm(struct Port *port)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b082      	sub	sp, #8
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  /*  Have we received a message from the source? */
  if (port->protocol_msg_rx_ == TRUE) {
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d15e      	bne.n	800b0a6 <PolicyVdm+0xd0>
    port->protocol_msg_rx_ = FALSE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    if (port->policy_rx_header_.NumDataObjects != 0) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800aff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b00      	cmp	r3, #0
 800affe:	d03e      	beq.n	800b07e <PolicyVdm+0xa8>
      switch (port->policy_rx_header_.MessageType) {
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800b006:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b0f      	cmp	r3, #15
 800b00e:	d129      	bne.n	800b064 <PolicyVdm+0x8e>
      case DMTVendorDefined:
        if (port->policy_tx_data_obj_[0].SVDM.VDMType == STRUCTURED_VDM &&
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800b016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d021      	beq.n	800b064 <PolicyVdm+0x8e>
            port->policy_rx_data_obj_[0].SVDM.VDMType == STRUCTURED_VDM &&
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 3161 	ldrb.w	r3, [r3, #353]	; 0x161
 800b026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b02a:	b2db      	uxtb	r3, r3
        if (port->policy_tx_data_obj_[0].SVDM.VDMType == STRUCTURED_VDM &&
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d019      	beq.n	800b064 <PolicyVdm+0x8e>
            port->policy_rx_data_obj_[0].SVDM.CommandType != INITIATOR &&
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b036:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b03a:	b2db      	uxtb	r3, r3
            port->policy_rx_data_obj_[0].SVDM.VDMType == STRUCTURED_VDM &&
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d011      	beq.n	800b064 <PolicyVdm+0x8e>
            (port->policy_tx_data_obj_[0].SVDM.Command ==
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800b046:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b04a:	b2da      	uxtb	r2, r3
            port->policy_rx_data_obj_[0].SVDM.Command))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b052:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b056:	b2db      	uxtb	r3, r3
            port->policy_rx_data_obj_[0].SVDM.CommandType != INITIATOR &&
 800b058:	429a      	cmp	r2, r3
 800b05a:	d103      	bne.n	800b064 <PolicyVdm+0x8e>
        {
          ConvertAndProcessVdmMessage(port);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f8bb 	bl	800b1d8 <ConvertAndProcessVdmMessage>
          break;
 800b062:	e017      	b.n	800b094 <PolicyVdm+0xbe>
        }
        /* Fall through */
      default:
        /*  If we get something we are not expecting - simply ignore them and */
        /*  kick out of VDM state (interruptible) */
        ResetPolicyState(port, port->vdm_msg_tx_sop_);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 fe2b 	bl	800ccc8 <ResetPolicyState>
        /*  reset flag so other state can see the message and process */
        port->protocol_msg_rx_ = TRUE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        break;
 800b07a:	bf00      	nop
 800b07c:	e00a      	b.n	800b094 <PolicyVdm+0xbe>
      }
    }
    else {
      /*  if not a VDM message, kick out of VDM state (interruptible) */
      ResetPolicyState(port, port->vdm_msg_tx_sop_);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f001 fe1e 	bl	800ccc8 <ResetPolicyState>
      port->protocol_msg_rx_ = TRUE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    }
    port->policy_subindex_ = 0;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    port->pd_tx_status_ = txIdle;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
  else {
    port->idle_ = TRUE;
  }


}
 800b0a4:	e01a      	b.n	800b0dc <PolicyVdm+0x106>
  else if (TimerExpired(&port->vdm_timer_)) {
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7ff fa19 	bl	800a4e4 <TimerExpired>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00d      	beq.n	800b0d4 <PolicyVdm+0xfe>
           TimerDisable(&port->vdm_timer_);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff f9e4 	bl	800a48c <TimerDisable>
     ResetPolicyState(port, port->vdm_msg_tx_sop_);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 fdfb 	bl	800ccc8 <ResetPolicyState>
}
 800b0d2:	e003      	b.n	800b0dc <PolicyVdm+0x106>
    port->idle_ = TRUE;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <PolicyGiveVdm>:

void PolicyGiveVdm(struct Port *port)
{
 800b0e4:	b590      	push	{r4, r7, lr}
 800b0e6:	b089      	sub	sp, #36	; 0x24
 800b0e8:	af04      	add	r7, sp, #16
 800b0ea:	6078      	str	r0, [r7, #4]
  FSC_U8 result = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	73fb      	strb	r3, [r7, #15]

  if (port->protocol_msg_rx_ == TRUE &&
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d11b      	bne.n	800b132 <PolicyGiveVdm+0x4e>
      port->policy_rx_header_.MessageType == DMTVendorDefined) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800b100:	f003 031f 	and.w	r3, r3, #31
 800b104:	b2db      	uxtb	r3, r3
  if (port->protocol_msg_rx_ == TRUE &&
 800b106:	2b0f      	cmp	r3, #15
 800b108:	d113      	bne.n	800b132 <PolicyGiveVdm+0x4e>
    /* A new received message can interrupt and current VDM transmission */
    ResetPolicyState(port, port->vdm_msg_tx_sop_);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 fdd8 	bl	800ccc8 <ResetPolicyState>
    port->policy_subindex_ = 0;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    port->pd_tx_status_ = txIdle;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    port->protocol_state_ = PRLIdle;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    return;
 800b130:	e04f      	b.n	800b1d2 <PolicyGiveVdm+0xee>
  }
  else if (port->vdm_sending_data_ == TRUE) {
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 3273 	ldrb.w	r3, [r3, #627]	; 0x273
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d143      	bne.n	800b1c4 <PolicyGiveVdm+0xe0>
      /* Indicates the need for SinkTx handling */
      /* TODO - not if we are responding to a request. */
      //port->policy_is_ams_ = TRUE;
    }

    result = PolicySend(port, DMTVendorDefined, port->vdm_msg_length_ * 4,
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800b142:	b29b      	uxth	r3, r3
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	b298      	uxth	r0, r3
                        (FSC_U8 *)port->vdm_msg_obj_, port->vdm_next_ps_, 0,
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f503 741f 	add.w	r4, r3, #636	; 0x27c
    result = PolicySend(port, DMTVendorDefined, port->vdm_msg_length_ * 4,
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	f892 2298 	ldrb.w	r2, [r2, #664]	; 0x298
 800b15a:	2100      	movs	r1, #0
 800b15c:	9103      	str	r1, [sp, #12]
 800b15e:	9202      	str	r2, [sp, #8]
 800b160:	2200      	movs	r2, #0
 800b162:	9201      	str	r2, [sp, #4]
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4623      	mov	r3, r4
 800b168:	4602      	mov	r2, r0
 800b16a:	210f      	movs	r1, #15
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7fc fc57 	bl	8007a20 <PolicySend>
 800b172:	4603      	mov	r3, r0
 800b174:	73fb      	strb	r3, [r7, #15]
                        port->vdm_msg_tx_sop_, FALSE);
    if (result == STAT_SUCCESS) {
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d114      	bne.n	800b1a6 <PolicyGiveVdm+0xc2>
      if (port->vdm_expecting_response_ == TRUE) {
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 800b182:	2b01      	cmp	r3, #1
 800b184:	d103      	bne.n	800b18e <PolicyGiveVdm+0xaa>
        StartVdmTimer(port);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f001 fd1c 	bl	800cbc4 <StartVdmTimer>
 800b18c:	e006      	b.n	800b19c <PolicyGiveVdm+0xb8>
      }
      else {
        ResetPolicyState(port, port->vdm_msg_tx_sop_);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800b194:	4619      	mov	r1, r3
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f001 fd96 	bl	800ccc8 <ResetPolicyState>
      }
      port->vdm_sending_data_ = FALSE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 800b1a4:	e015      	b.n	800b1d2 <PolicyGiveVdm+0xee>
    }
    else if (result == STAT_ERROR) {
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d112      	bne.n	800b1d2 <PolicyGiveVdm+0xee>
      ResetPolicyState(port, port->vdm_msg_tx_sop_);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f001 fd87 	bl	800ccc8 <ResetPolicyState>
      port->vdm_sending_data_ = FALSE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 800b1c2:	e006      	b.n	800b1d2 <PolicyGiveVdm+0xee>
    }
  }
  else {
    ResetPolicyState(port, port->vdm_msg_tx_sop_);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f001 fd7b 	bl	800ccc8 <ResetPolicyState>
  }
}
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd90      	pop	{r4, r7, pc}

0800b1d8 <ConvertAndProcessVdmMessage>:

void ConvertAndProcessVdmMessage(struct Port *port)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08a      	sub	sp, #40	; 0x28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  FSC_U32 i;
  /*  form the word arrays that VDM block expects */
  FSC_U32 vdm_arr[7] = {0};
 800b1e0:	f107 0308 	add.w	r3, r7, #8
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]
 800b1e8:	605a      	str	r2, [r3, #4]
 800b1ea:	609a      	str	r2, [r3, #8]
 800b1ec:	60da      	str	r2, [r3, #12]
 800b1ee:	611a      	str	r2, [r3, #16]
 800b1f0:	615a      	str	r2, [r3, #20]
 800b1f2:	619a      	str	r2, [r3, #24]

  for (i = 0; i < port->policy_rx_header_.NumDataObjects; i++) {
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b1f8:	e00e      	b.n	800b218 <ConvertAndProcessVdmMessage+0x40>
    vdm_arr[i] = port->policy_rx_data_obj_[i].object;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1fe:	3258      	adds	r2, #88	; 0x58
 800b200:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b20c:	440b      	add	r3, r1
 800b20e:	f843 2c20 	str.w	r2, [r3, #-32]
  for (i = 0; i < port->policy_rx_header_.NumDataObjects; i++) {
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	3301      	adds	r3, #1
 800b216:	627b      	str	r3, [r7, #36]	; 0x24
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800b21e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b222:	b2db      	uxtb	r3, r3
 800b224:	461a      	mov	r2, r3
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	4293      	cmp	r3, r2
 800b22a:	d3e6      	bcc.n	800b1fa <ConvertAndProcessVdmMessage+0x22>
  }
  ProcessVdmMessage(port, vdm_arr, port->policy_rx_header_.NumDataObjects);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800b232:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b236:	b2db      	uxtb	r3, r3
 800b238:	461a      	mov	r2, r3
 800b23a:	f107 0308 	add.w	r3, r7, #8
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fb3f 	bl	800b8c4 <ProcessVdmMessage>
}
 800b246:	bf00      	nop
 800b248:	3728      	adds	r7, #40	; 0x28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <DoVdmCommand>:

void DoVdmCommand(struct Port *port)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b088      	sub	sp, #32
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
                 port->policy_msg_tx_sop_, FALSE);
      return;
  }
#endif /* FSC_DEBUG */

  command = port->pd_transmit_objects_[0].byte[0] & 0x1F;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800b25c:	f003 031f 	and.w	r3, r3, #31
 800b260:	61fb      	str	r3, [r7, #28]
  svid = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	61bb      	str	r3, [r7, #24]
  svid |= (port->pd_transmit_objects_[0].byte[3] << 8);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	461a      	mov	r2, r3
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	4313      	orrs	r3, r2
 800b274:	61bb      	str	r3, [r7, #24]
  svid |= (port->pd_transmit_objects_[0].byte[2] << 0);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800b27c:	461a      	mov	r2, r3
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	4313      	orrs	r3, r2
 800b282:	61bb      	str	r3, [r7, #24]

  mode_index = port->pd_transmit_objects_[0].byte[1] & 0x7;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 800b28a:	f003 0307 	and.w	r3, r3, #7
 800b28e:	617b      	str	r3, [r7, #20]

  /*  Must be set with correct type when setting port->pd_tx_flag_ */
  sop = port->policy_msg_tx_sop_;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b296:	74fb      	strb	r3, [r7, #19]

#ifdef FSC_HAVE_DP
  if (svid == DP_SID) {
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	f64f 7201 	movw	r2, #65281	; 0xff01
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d111      	bne.n	800b2c6 <DoVdmCommand+0x78>
    if (command == DP_COMMAND_STATUS) {
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	2b10      	cmp	r3, #16
 800b2a6:	d103      	bne.n	800b2b0 <DoVdmCommand+0x62>
      DP_RequestPartnerStatus(port);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7f9 fb82 	bl	80049b2 <DP_RequestPartnerStatus>
 800b2ae:	e00a      	b.n	800b2c6 <DoVdmCommand+0x78>
    }
    else if (command == DP_COMMAND_CONFIG) {
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	2b11      	cmp	r3, #17
 800b2b4:	d107      	bne.n	800b2c6 <DoVdmCommand+0x78>
      DisplayPortConfig_t temp;
      temp.word = port->pd_transmit_objects_[1].object;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b2bc:	60fb      	str	r3, [r7, #12]
      DP_RequestPartnerConfig(port, temp);
 800b2be:	68f9      	ldr	r1, [r7, #12]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7f9 fbc8 	bl	8004a56 <DP_RequestPartnerConfig>
    }
  }
#endif /*  FSC_HAVE_DP */
  if (command == DISCOVER_IDENTITY) {
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d105      	bne.n	800b2d8 <DoVdmCommand+0x8a>
    RequestDiscoverIdentity(port, sop);
 800b2cc:	7cfb      	ldrb	r3, [r7, #19]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f915 	bl	800b500 <RequestDiscoverIdentity>
    RequestEnterMode(port, sop, svid, mode_index);
  }
  else if (command == EXIT_MODE) {
    RequestExitMode(port, sop, svid, mode_index);
  }
}
 800b2d6:	e028      	b.n	800b32a <DoVdmCommand+0xdc>
  else if (command == DISCOVER_SVIDS) {
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d105      	bne.n	800b2ea <DoVdmCommand+0x9c>
    RequestDiscoverSvids(port, sop);
 800b2de:	7cfb      	ldrb	r3, [r7, #19]
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f9a3 	bl	800b62e <RequestDiscoverSvids>
}
 800b2e8:	e01f      	b.n	800b32a <DoVdmCommand+0xdc>
  else if (command == DISCOVER_MODES) {
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d107      	bne.n	800b300 <DoVdmCommand+0xb2>
    RequestDiscoverModes(port, sop, svid);
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	7cfb      	ldrb	r3, [r7, #19]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f9e7 	bl	800b6cc <RequestDiscoverModes>
}
 800b2fe:	e014      	b.n	800b32a <DoVdmCommand+0xdc>
  else if (command == ENTER_MODE) {
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	2b04      	cmp	r3, #4
 800b304:	d107      	bne.n	800b316 <DoVdmCommand+0xc8>
    RequestEnterMode(port, sop, svid, mode_index);
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	b29a      	uxth	r2, r3
 800b30a:	7cf9      	ldrb	r1, [r7, #19]
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa2e 	bl	800b770 <RequestEnterMode>
}
 800b314:	e009      	b.n	800b32a <DoVdmCommand+0xdc>
  else if (command == EXIT_MODE) {
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	2b05      	cmp	r3, #5
 800b31a:	d106      	bne.n	800b32a <DoVdmCommand+0xdc>
    RequestExitMode(port, sop, svid, mode_index);
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	b29a      	uxth	r2, r3
 800b320:	7cf9      	ldrb	r1, [r7, #19]
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fa78 	bl	800b81a <RequestExitMode>
}
 800b32a:	bf00      	nop
 800b32c:	3720      	adds	r7, #32
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <AutoVdmDiscovery>:

void AutoVdmDiscovery(struct Port *port)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  if (port->pd_tx_status_ == txIdle)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800b342:	2b00      	cmp	r3, #0
 800b344:	f040 80d6 	bne.w	800b4f4 <AutoVdmDiscovery+0x1c0>
  {
    switch (port->vdm_auto_state_)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b34e:	2b06      	cmp	r3, #6
 800b350:	f200 80cb 	bhi.w	800b4ea <AutoVdmDiscovery+0x1b6>
 800b354:	a201      	add	r2, pc, #4	; (adr r2, 800b35c <AutoVdmDiscovery+0x28>)
 800b356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35a:	bf00      	nop
 800b35c:	0800b379 	.word	0x0800b379
 800b360:	0800b379 	.word	0x0800b379
 800b364:	0800b38b 	.word	0x0800b38b
 800b368:	0800b3a9 	.word	0x0800b3a9
 800b36c:	0800b3e3 	.word	0x0800b3e3
 800b370:	0800b459 	.word	0x0800b459
 800b374:	0800b47d 	.word	0x0800b47d
    {
      case AUTO_VDM_INIT:
      case AUTO_VDM_DISCOVER_ID_PP:
        RequestDiscoverIdentity(port, SOP_TYPE_SOP);
 800b378:	2100      	movs	r1, #0
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f8c0 	bl	800b500 <RequestDiscoverIdentity>
        port->vdm_auto_state_ = AUTO_VDM_DISCOVER_SVIDS_PP;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 800b388:	e0b5      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
      case AUTO_VDM_DISCOVER_SVIDS_PP:
        if (port->svid_discvry_done_ == FALSE) {
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800b390:	2b00      	cmp	r3, #0
 800b392:	d104      	bne.n	800b39e <AutoVdmDiscovery+0x6a>
          RequestDiscoverSvids(port, SOP_TYPE_SOP);
 800b394:	2100      	movs	r1, #0
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f949 	bl	800b62e <RequestDiscoverSvids>
        }
        else {
          port->vdm_auto_state_ = AUTO_VDM_DISCOVER_MODES_PP;
        }
        break;
 800b39c:	e0ab      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
          port->vdm_auto_state_ = AUTO_VDM_DISCOVER_MODES_PP;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2203      	movs	r2, #3
 800b3a2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 800b3a6:	e0a6      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
      case AUTO_VDM_DISCOVER_MODES_PP:
        if (port->svid_discv_idx_ >= 0) {
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	db12      	blt.n	800b3d8 <AutoVdmDiscovery+0xa4>
          RequestDiscoverModes(port, SOP_TYPE_SOP,
              port->core_svid_info_.svids[port->svid_discv_idx_]);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
          RequestDiscoverModes(port, SOP_TYPE_SOP,
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	4413      	add	r3, r2
 800b3c2:	889b      	ldrh	r3, [r3, #4]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 f97f 	bl	800b6cc <RequestDiscoverModes>
          port->vdm_auto_state_ = AUTO_VDM_ENTER_MODE_PP;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2204      	movs	r2, #4
 800b3d2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        }
        else {
          /* No known SVIDs found */
          port->vdm_auto_state_ = AUTO_VDM_DONE;
        }
        break;
 800b3d6:	e08e      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2207      	movs	r2, #7
 800b3dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 800b3e0:	e089      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
      case AUTO_VDM_ENTER_MODE_PP:
        if (port->auto_mode_entry_pos_ > 0) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f993 32cc 	ldrsb.w	r3, [r3, #716]	; 0x2cc
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	dd30      	ble.n	800b44e <AutoVdmDiscovery+0x11a>
#ifdef FSC_HAVE_DP
          if (port->core_svid_info_.svids[port->svid_discv_idx_] == DP_SID) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	4413      	add	r3, r2
 800b3fc:	889b      	ldrh	r3, [r3, #4]
 800b3fe:	f64f 7201 	movw	r2, #65281	; 0xff01
 800b402:	4293      	cmp	r3, r2
 800b404:	d10e      	bne.n	800b424 <AutoVdmDiscovery+0xf0>
              if (port->display_port_data_.DpConfigured == TRUE) {
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d104      	bne.n	800b41a <AutoVdmDiscovery+0xe6>
                port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2207      	movs	r2, #7
 800b414:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
                break;
 800b418:	e06d      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
              }
              else {
                port->vdm_auto_state_ = AUTO_VDM_DP_GET_STATUS;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2205      	movs	r2, #5
 800b41e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800b422:	e003      	b.n	800b42c <AutoVdmDiscovery+0xf8>
              }
          } else {
            port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2207      	movs	r2, #7
 800b428:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
          }
#endif /* FSC_HAVE_DP */
          RequestEnterMode(port, SOP_TYPE_SOP,
                          port->core_svid_info_.svids[port->svid_discv_idx_],
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
          RequestEnterMode(port, SOP_TYPE_SOP,
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	4413      	add	r3, r2
 800b43c:	889a      	ldrh	r2, [r3, #4]
                          port->auto_mode_entry_pos_);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f993 32cc 	ldrsb.w	r3, [r3, #716]	; 0x2cc
          RequestEnterMode(port, SOP_TYPE_SOP,
 800b444:	2100      	movs	r1, #0
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f992 	bl	800b770 <RequestEnterMode>
        } else {
          port->vdm_auto_state_ = AUTO_VDM_DONE;
        }
        break;
 800b44c:	e053      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2207      	movs	r2, #7
 800b452:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 800b456:	e04e      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
#ifdef FSC_HAVE_DP
      case AUTO_VDM_DP_GET_STATUS:
        if (port->display_port_data_.DpModeEntered > 0) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d007      	beq.n	800b472 <AutoVdmDiscovery+0x13e>
          DP_RequestPartnerStatus(port);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7f9 faa5 	bl	80049b2 <DP_RequestPartnerStatus>
          port->vdm_auto_state_ = AUTO_VDM_DP_SET_CONFIG;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2206      	movs	r2, #6
 800b46c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        }
        else {
          port->vdm_auto_state_ = AUTO_VDM_DONE;
        }
        break;
 800b470:	e041      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2207      	movs	r2, #7
 800b476:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        break;
 800b47a:	e03c      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
      case AUTO_VDM_DP_SET_CONFIG:
        if (port->display_port_data_.DpPpStatus.Connection == DP_MODE_BOTH &&
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b03      	cmp	r3, #3
 800b48a:	d110      	bne.n	800b4ae <AutoVdmDiscovery+0x17a>
            port->display_port_data_.DpStatus.Connection == DP_MODE_BOTH) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 32dc 	ldrb.w	r3, [r3, #732]	; 0x2dc
 800b492:	f003 0303 	and.w	r3, r3, #3
 800b496:	b2db      	uxtb	r3, r3
        if (port->display_port_data_.DpPpStatus.Connection == DP_MODE_BOTH &&
 800b498:	2b03      	cmp	r3, #3
 800b49a:	d108      	bne.n	800b4ae <AutoVdmDiscovery+0x17a>
          /* If reported both connected send status with only one connected */
          DP_SetPortMode(port, (DisplayPort_Preferred_Snk) ?
 800b49c:	2101      	movs	r1, #1
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7f9 fb2a 	bl	8004af8 <DP_SetPortMode>
                                DP_MODE_UFP_D : DP_MODE_DFP_D);
          port->vdm_auto_state_ = AUTO_VDM_DP_GET_STATUS;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2205      	movs	r2, #5
 800b4a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800b4ac:	e01c      	b.n	800b4e8 <AutoVdmDiscovery+0x1b4>
        }
        else if (port->display_port_data_.DpCapMatched &&
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 32d3 	ldrb.w	r3, [r3, #723]	; 0x2d3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d012      	beq.n	800b4de <AutoVdmDiscovery+0x1aa>
            port->display_port_data_.DpPpStatus.Connection > 0) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800b4be:	f003 0303 	and.w	r3, r3, #3
 800b4c2:	b2db      	uxtb	r3, r3
        else if (port->display_port_data_.DpCapMatched &&
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00a      	beq.n	800b4de <AutoVdmDiscovery+0x1aa>
          DP_RequestPartnerConfig(port, port->display_port_data_.DpPpConfig);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7f9 fac1 	bl	8004a56 <DP_RequestPartnerConfig>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2207      	movs	r2, #7
 800b4d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800b4dc:	e004      	b.n	800b4e8 <AutoVdmDiscovery+0x1b4>
        }
        else {
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2207      	movs	r2, #7
 800b4e2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        }
        break;
 800b4e6:	e006      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
 800b4e8:	e005      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
#endif /*  FSC_HAVE_DP */
    default:
      port->vdm_auto_state_ = AUTO_VDM_DONE;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2207      	movs	r2, #7
 800b4ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
      break;
 800b4f2:	e000      	b.n	800b4f6 <AutoVdmDiscovery+0x1c2>
    }
  }
 800b4f4:	bf00      	nop
}
 800b4f6:	bf00      	nop
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop

0800b500 <RequestDiscoverIdentity>:

/*  Sending/requesting end VDM functionality */
FSC_S32 RequestDiscoverIdentity(struct Port *port, SopType sop)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af02      	add	r7, sp, #8
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	70fb      	strb	r3, [r7, #3]
  doDataObject_t vdmh = {0};
 800b50c:	2300      	movs	r3, #0
 800b50e:	60fb      	str	r3, [r7, #12]
  FSC_U32 length = VDM_ARRAY_LEN;
 800b510:	2301      	movs	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[VDM_ARRAY_LEN];
  PolicyState_t n_pe;

  if ((port->policy_state_ == PE_SNK_Ready) ||
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b51a:	2b13      	cmp	r3, #19
 800b51c:	d004      	beq.n	800b528 <RequestDiscoverIdentity+0x28>
      (port->policy_state_ == PE_SRC_Ready)) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ == PE_SNK_Ready) ||
 800b524:	2b05      	cmp	r3, #5
 800b526:	d134      	bne.n	800b592 <RequestDiscoverIdentity+0x92>
    port->original_policy_state_ = port->policy_state_;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_INIT_PORT_VDM_Identity_Request;
 800b534:	2371      	movs	r3, #113	; 0x71
 800b536:	74fb      	strb	r3, [r7, #19]
    /*  TODO: DiscoverIdentityCounter */

    vdmh.SVDM.SVID = PD_SID; /*  PD SID used for Discover Identity command */
 800b538:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800b53c:	81fb      	strh	r3, [r7, #14]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800b53e:	7b7b      	ldrb	r3, [r7, #13]
 800b540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b544:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b546:	78fb      	ldrb	r3, [r7, #3]
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff fd2e 	bl	800afac <CurrentSVDMVersion>
 800b550:	4603      	mov	r3, r0
 800b552:	f003 0303 	and.w	r3, r3, #3
 800b556:	b2da      	uxtb	r2, r3
 800b558:	7b7b      	ldrb	r3, [r7, #13]
 800b55a:	f362 1346 	bfi	r3, r2, #5, #2
 800b55e:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.ObjPos = 0; /*  does not matter for Discover Identity */
 800b560:	7b7b      	ldrb	r3, [r7, #13]
 800b562:	f36f 0302 	bfc	r3, #0, #3
 800b566:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating discovery */
 800b568:	7b3b      	ldrb	r3, [r7, #12]
 800b56a:	f36f 1387 	bfc	r3, #6, #2
 800b56e:	733b      	strb	r3, [r7, #12]
    vdmh.SVDM.Command = DISCOVER_IDENTITY; /*  discover identity command! */
 800b570:	7b3b      	ldrb	r3, [r7, #12]
 800b572:	2201      	movs	r2, #1
 800b574:	f362 0304 	bfi	r3, r2, #0, #5
 800b578:	733b      	strb	r3, [r7, #12]
    arr[0] = vdmh.object;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	60bb      	str	r3, [r7, #8]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800b57e:	f107 0208 	add.w	r2, r7, #8
 800b582:	78f9      	ldrb	r1, [r7, #3]
 800b584:	7cfb      	ldrb	r3, [r7, #19]
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f001 fb01 	bl	800cb92 <SendVdmMessageWithTimeout>
 800b590:	e048      	b.n	800b624 <RequestDiscoverIdentity+0x124>
  }
  /*  Allow cable discovery in special earlier states */
  else if ((sop == SOP_TYPE_SOP1) &&
 800b592:	78fb      	ldrb	r3, [r7, #3]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d143      	bne.n	800b620 <RequestDiscoverIdentity+0x120>
           ((port->policy_state_ == PE_SRC_Startup) ||
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  else if ((sop == SOP_TYPE_SOP1) &&
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d009      	beq.n	800b5b6 <RequestDiscoverIdentity+0xb6>
            (port->policy_state_ == PE_SRC_Discovery) ||
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
           ((port->policy_state_ == PE_SRC_Startup) ||
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d004      	beq.n	800b5b6 <RequestDiscoverIdentity+0xb6>
            (port->policy_state_ == PE_SRC_Send_Capabilities))) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
            (port->policy_state_ == PE_SRC_Discovery) ||
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d134      	bne.n	800b620 <RequestDiscoverIdentity+0x120>
    port->original_policy_state_ = port->policy_state_;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_SRC_VDM_Identity_Request;
 800b5c2:	2396      	movs	r3, #150	; 0x96
 800b5c4:	74fb      	strb	r3, [r7, #19]
    vdmh.SVDM.SVID = PD_SID; /*  PD SID used for Discover Identity command */
 800b5c6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800b5ca:	81fb      	strh	r3, [r7, #14]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800b5cc:	7b7b      	ldrb	r3, [r7, #13]
 800b5ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d2:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b5d4:	78fb      	ldrb	r3, [r7, #3]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff fce7 	bl	800afac <CurrentSVDMVersion>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f003 0303 	and.w	r3, r3, #3
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	7b7b      	ldrb	r3, [r7, #13]
 800b5e8:	f362 1346 	bfi	r3, r2, #5, #2
 800b5ec:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.ObjPos = 0; /*  does not matter for Discover Identity */
 800b5ee:	7b7b      	ldrb	r3, [r7, #13]
 800b5f0:	f36f 0302 	bfc	r3, #0, #3
 800b5f4:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating discovery */
 800b5f6:	7b3b      	ldrb	r3, [r7, #12]
 800b5f8:	f36f 1387 	bfc	r3, #6, #2
 800b5fc:	733b      	strb	r3, [r7, #12]
    vdmh.SVDM.Command = DISCOVER_IDENTITY; /*  discover identity command! */
 800b5fe:	7b3b      	ldrb	r3, [r7, #12]
 800b600:	2201      	movs	r2, #1
 800b602:	f362 0304 	bfi	r3, r2, #0, #5
 800b606:	733b      	strb	r3, [r7, #12]
    arr[0] = vdmh.object;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	60bb      	str	r3, [r7, #8]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800b60c:	f107 0208 	add.w	r2, r7, #8
 800b610:	78f9      	ldrb	r1, [r7, #3]
 800b612:	7cfb      	ldrb	r3, [r7, #19]
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 faba 	bl	800cb92 <SendVdmMessageWithTimeout>
 800b61e:	e001      	b.n	800b624 <RequestDiscoverIdentity+0x124>
  }
  else {
    return 1;
 800b620:	2301      	movs	r3, #1
 800b622:	e000      	b.n	800b626 <RequestDiscoverIdentity+0x126>
  }
  return 0;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <RequestDiscoverSvids>:

FSC_S32 RequestDiscoverSvids(struct Port *port, SopType sop)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b088      	sub	sp, #32
 800b632:	af02      	add	r7, sp, #8
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	70fb      	strb	r3, [r7, #3]
  doDataObject_t vdmh = {0};
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
  FSC_U32 length = VDM_ARRAY_LEN;
 800b63e:	2301      	movs	r3, #1
 800b640:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[VDM_ARRAY_LEN];
  PolicyState_t n_pe;

  if ((port->policy_state_ != PE_SNK_Ready) &&
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b648:	2b13      	cmp	r3, #19
 800b64a:	d006      	beq.n	800b65a <RequestDiscoverSvids+0x2c>
      (port->policy_state_ != PE_SRC_Ready)) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ != PE_SNK_Ready) &&
 800b652:	2b05      	cmp	r3, #5
 800b654:	d001      	beq.n	800b65a <RequestDiscoverSvids+0x2c>
    return 1;
 800b656:	2301      	movs	r3, #1
 800b658:	e034      	b.n	800b6c4 <RequestDiscoverSvids+0x96>
  }
  else {
    port->original_policy_state_ = port->policy_state_;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_INIT_VDM_SVIDs_Request;
 800b666:	2374      	movs	r3, #116	; 0x74
 800b668:	74fb      	strb	r3, [r7, #19]
    vdmh.SVDM.SVID = PD_SID; /*  PD SID to be used for Discover SVIDs command */
 800b66a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800b66e:	81fb      	strh	r3, [r7, #14]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800b670:	7b7b      	ldrb	r3, [r7, #13]
 800b672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b676:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b678:	78fb      	ldrb	r3, [r7, #3]
 800b67a:	4619      	mov	r1, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff fc95 	bl	800afac <CurrentSVDMVersion>
 800b682:	4603      	mov	r3, r0
 800b684:	f003 0303 	and.w	r3, r3, #3
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	7b7b      	ldrb	r3, [r7, #13]
 800b68c:	f362 1346 	bfi	r3, r2, #5, #2
 800b690:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.ObjPos = 0; /*  does not matter for Discover SVIDs */
 800b692:	7b7b      	ldrb	r3, [r7, #13]
 800b694:	f36f 0302 	bfc	r3, #0, #3
 800b698:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating discovery */
 800b69a:	7b3b      	ldrb	r3, [r7, #12]
 800b69c:	f36f 1387 	bfc	r3, #6, #2
 800b6a0:	733b      	strb	r3, [r7, #12]
    vdmh.SVDM.Command = DISCOVER_SVIDS; /*  Discover SVIDs command! */
 800b6a2:	7b3b      	ldrb	r3, [r7, #12]
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	f362 0304 	bfi	r3, r2, #0, #5
 800b6aa:	733b      	strb	r3, [r7, #12]
    arr[0] = vdmh.object;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	60bb      	str	r3, [r7, #8]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800b6b0:	f107 0208 	add.w	r2, r7, #8
 800b6b4:	78f9      	ldrb	r1, [r7, #3]
 800b6b6:	7cfb      	ldrb	r3, [r7, #19]
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 fa68 	bl	800cb92 <SendVdmMessageWithTimeout>
  }
  return 0;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3718      	adds	r7, #24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <RequestDiscoverModes>:

FSC_S32 RequestDiscoverModes(struct Port *port, SopType sop, FSC_U16 svid)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b088      	sub	sp, #32
 800b6d0:	af02      	add	r7, sp, #8
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	803b      	strh	r3, [r7, #0]
  doDataObject_t vdmh = {0};
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60fb      	str	r3, [r7, #12]
  FSC_U32 length = VDM_ARRAY_LEN;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	617b      	str	r3, [r7, #20]
  FSC_U32 arr[VDM_ARRAY_LEN] = {0};
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	60bb      	str	r3, [r7, #8]
  PolicyState_t n_pe;

  if ((port->policy_state_ != PE_SNK_Ready) &&
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b6ee:	2b13      	cmp	r3, #19
 800b6f0:	d006      	beq.n	800b700 <RequestDiscoverModes+0x34>
      (port->policy_state_ != PE_SRC_Ready)) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ != PE_SNK_Ready) &&
 800b6f8:	2b05      	cmp	r3, #5
 800b6fa:	d001      	beq.n	800b700 <RequestDiscoverModes+0x34>
    return 1;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e033      	b.n	800b768 <RequestDiscoverModes+0x9c>
  }
  else {
    port->original_policy_state_ = port->policy_state_;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_INIT_VDM_Modes_Request;
 800b70c:	2377      	movs	r3, #119	; 0x77
 800b70e:	74fb      	strb	r3, [r7, #19]
    vdmh.SVDM.SVID = svid; /*  Use the SVID that was discovered */
 800b710:	883b      	ldrh	r3, [r7, #0]
 800b712:	81fb      	strh	r3, [r7, #14]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800b714:	7b7b      	ldrb	r3, [r7, #13]
 800b716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71a:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b71c:	78fb      	ldrb	r3, [r7, #3]
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7ff fc43 	bl	800afac <CurrentSVDMVersion>
 800b726:	4603      	mov	r3, r0
 800b728:	f003 0303 	and.w	r3, r3, #3
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	7b7b      	ldrb	r3, [r7, #13]
 800b730:	f362 1346 	bfi	r3, r2, #5, #2
 800b734:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.ObjPos = 0; /*  does not matter for Discover Modes */
 800b736:	7b7b      	ldrb	r3, [r7, #13]
 800b738:	f36f 0302 	bfc	r3, #0, #3
 800b73c:	737b      	strb	r3, [r7, #13]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating discovery */
 800b73e:	7b3b      	ldrb	r3, [r7, #12]
 800b740:	f36f 1387 	bfc	r3, #6, #2
 800b744:	733b      	strb	r3, [r7, #12]
    vdmh.SVDM.Command = DISCOVER_MODES; /*  Discover MODES command! */
 800b746:	7b3b      	ldrb	r3, [r7, #12]
 800b748:	2203      	movs	r2, #3
 800b74a:	f362 0304 	bfi	r3, r2, #0, #5
 800b74e:	733b      	strb	r3, [r7, #12]
    arr[0] = vdmh.object;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	60bb      	str	r3, [r7, #8]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800b754:	f107 0208 	add.w	r2, r7, #8
 800b758:	78f9      	ldrb	r1, [r7, #3]
 800b75a:	7cfb      	ldrb	r3, [r7, #19]
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f001 fa16 	bl	800cb92 <SendVdmMessageWithTimeout>
  }
  return 0;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <RequestEnterMode>:
  return 0;
}

FSC_S32 RequestEnterMode(struct Port *port, SopType sop, FSC_U16 svid,
                         FSC_U32 mode_index)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08a      	sub	sp, #40	; 0x28
 800b774:	af02      	add	r7, sp, #8
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	607b      	str	r3, [r7, #4]
 800b77a:	460b      	mov	r3, r1
 800b77c:	72fb      	strb	r3, [r7, #11]
 800b77e:	4613      	mov	r3, r2
 800b780:	813b      	strh	r3, [r7, #8]
  doDataObject_t vdmh = {0};
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]
  FSC_U32 length = VDM_ARRAY_LEN;
 800b786:	2301      	movs	r3, #1
 800b788:	61fb      	str	r3, [r7, #28]
  FSC_U32 arr[VDM_ARRAY_LEN];
  PolicyState_t n_pe;

  if ((port->policy_state_ != PE_SNK_Ready) &&
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b790:	2b13      	cmp	r3, #19
 800b792:	d006      	beq.n	800b7a2 <RequestEnterMode+0x32>
      (port->policy_state_ != PE_SRC_Ready)) {
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ != PE_SNK_Ready) &&
 800b79a:	2b05      	cmp	r3, #5
 800b79c:	d001      	beq.n	800b7a2 <RequestEnterMode+0x32>
    return 1;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e037      	b.n	800b812 <RequestEnterMode+0xa2>
  }
  else {
    port->original_policy_state_ = port->policy_state_;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_DFP_VDM_Mode_Entry_Request;
 800b7ae:	2385      	movs	r3, #133	; 0x85
 800b7b0:	76fb      	strb	r3, [r7, #27]
    vdmh.SVDM.SVID = svid; /*  Use SVID specified upon function call */
 800b7b2:	893b      	ldrh	r3, [r7, #8]
 800b7b4:	82fb      	strh	r3, [r7, #22]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800b7b6:	7d7b      	ldrb	r3, [r7, #21]
 800b7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7bc:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b7be:	7afb      	ldrb	r3, [r7, #11]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff fbf2 	bl	800afac <CurrentSVDMVersion>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	7d7b      	ldrb	r3, [r7, #21]
 800b7d2:	f362 1346 	bfi	r3, r2, #5, #2
 800b7d6:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.ObjPos = mode_index; /*  select mode */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f003 0307 	and.w	r3, r3, #7
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	7d7b      	ldrb	r3, [r7, #21]
 800b7e2:	f362 0302 	bfi	r3, r2, #0, #3
 800b7e6:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating mode entering */
 800b7e8:	7d3b      	ldrb	r3, [r7, #20]
 800b7ea:	f36f 1387 	bfc	r3, #6, #2
 800b7ee:	753b      	strb	r3, [r7, #20]
    vdmh.SVDM.Command = ENTER_MODE; /*  Enter Mode command! */
 800b7f0:	7d3b      	ldrb	r3, [r7, #20]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	f362 0304 	bfi	r3, r2, #0, #5
 800b7f8:	753b      	strb	r3, [r7, #20]
    arr[0] = vdmh.object;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	613b      	str	r3, [r7, #16]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800b7fe:	f107 0210 	add.w	r2, r7, #16
 800b802:	7af9      	ldrb	r1, [r7, #11]
 800b804:	7efb      	ldrb	r3, [r7, #27]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f001 f9c1 	bl	800cb92 <SendVdmMessageWithTimeout>
  }
  return 0;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3720      	adds	r7, #32
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <RequestExitMode>:

FSC_S32 RequestExitMode(struct Port *port, SopType sop, FSC_U16 svid,
                        FSC_U32 mode_index)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b08a      	sub	sp, #40	; 0x28
 800b81e:	af02      	add	r7, sp, #8
 800b820:	60f8      	str	r0, [r7, #12]
 800b822:	607b      	str	r3, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	72fb      	strb	r3, [r7, #11]
 800b828:	4613      	mov	r3, r2
 800b82a:	813b      	strh	r3, [r7, #8]
  doDataObject_t vdmh = {0};
 800b82c:	2300      	movs	r3, #0
 800b82e:	617b      	str	r3, [r7, #20]
  FSC_U32 length = VDM_ARRAY_LEN;
 800b830:	2301      	movs	r3, #1
 800b832:	61fb      	str	r3, [r7, #28]
  FSC_U32 arr[VDM_ARRAY_LEN];
  PolicyState_t n_pe;

  if ((port->policy_state_ != PE_SNK_Ready) &&
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800b83a:	2b13      	cmp	r3, #19
 800b83c:	d006      	beq.n	800b84c <RequestExitMode+0x32>
      (port->policy_state_ != PE_SRC_Ready)) {
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
  if ((port->policy_state_ != PE_SNK_Ready) &&
 800b844:	2b05      	cmp	r3, #5
 800b846:	d001      	beq.n	800b84c <RequestExitMode+0x32>
    return 1;
 800b848:	2301      	movs	r3, #1
 800b84a:	e037      	b.n	800b8bc <RequestExitMode+0xa2>
  }
  else {
    port->original_policy_state_ = port->policy_state_;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    n_pe = PE_DFP_VDM_Mode_Exit_Request;
 800b858:	2388      	movs	r3, #136	; 0x88
 800b85a:	76fb      	strb	r3, [r7, #27]
    vdmh.SVDM.SVID = svid; /*  Use SVID specified upon function call */
 800b85c:	893b      	ldrh	r3, [r7, #8]
 800b85e:	82fb      	strh	r3, [r7, #22]
    vdmh.SVDM.VDMType = STRUCTURED_VDM; /*  structured VDM Header */
 800b860:	7d7b      	ldrb	r3, [r7, #21]
 800b862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b866:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.Version = CurrentSVDMVersion(port, sop);
 800b868:	7afb      	ldrb	r3, [r7, #11]
 800b86a:	4619      	mov	r1, r3
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff fb9d 	bl	800afac <CurrentSVDMVersion>
 800b872:	4603      	mov	r3, r0
 800b874:	f003 0303 	and.w	r3, r3, #3
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	7d7b      	ldrb	r3, [r7, #21]
 800b87c:	f362 1346 	bfi	r3, r2, #5, #2
 800b880:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.ObjPos = mode_index; /*  select mode */
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f003 0307 	and.w	r3, r3, #7
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	7d7b      	ldrb	r3, [r7, #21]
 800b88c:	f362 0302 	bfi	r3, r2, #0, #3
 800b890:	757b      	strb	r3, [r7, #21]
    vdmh.SVDM.CommandType = INITIATOR; /*  we are initiating mode entering */
 800b892:	7d3b      	ldrb	r3, [r7, #20]
 800b894:	f36f 1387 	bfc	r3, #6, #2
 800b898:	753b      	strb	r3, [r7, #20]
    vdmh.SVDM.Command = EXIT_MODE; /*  Exit Mode command! */
 800b89a:	7d3b      	ldrb	r3, [r7, #20]
 800b89c:	2205      	movs	r2, #5
 800b89e:	f362 0304 	bfi	r3, r2, #0, #5
 800b8a2:	753b      	strb	r3, [r7, #20]
    arr[0] = vdmh.object;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	613b      	str	r3, [r7, #16]
    SendVdmMessageWithTimeout(port, sop, arr, length, n_pe);
 800b8a8:	f107 0210 	add.w	r2, r7, #16
 800b8ac:	7af9      	ldrb	r1, [r7, #11]
 800b8ae:	7efb      	ldrb	r3, [r7, #27]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f001 f96c 	bl	800cb92 <SendVdmMessageWithTimeout>
  }
  return 0;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3720      	adds	r7, #32
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <ProcessVdmMessage>:

/*  Receiving end VDM functionality */
FSC_S32 ProcessVdmMessage(struct Port *port, FSC_U32* arr_in, FSC_U32 length_in)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
  doDataObject_t vdmh_in = {0};
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	617b      	str	r3, [r7, #20]

  vdmh_in.object = arr_in[0];
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	617b      	str	r3, [r7, #20]

  if (vdmh_in.SVDM.VDMType == STRUCTURED_VDM) {
 800b8da:	7d7b      	ldrb	r3, [r7, #21]
 800b8dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d05c      	beq.n	800b9a0 <ProcessVdmMessage+0xdc>
      }

      return 0;
    }

    switch (vdmh_in.SVDM.Command) {
 800b8e6:	7d3b      	ldrb	r3, [r7, #20]
 800b8e8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	2b05      	cmp	r3, #5
 800b8f2:	d84b      	bhi.n	800b98c <ProcessVdmMessage+0xc8>
 800b8f4:	a201      	add	r2, pc, #4	; (adr r2, 800b8fc <ProcessVdmMessage+0x38>)
 800b8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fa:	bf00      	nop
 800b8fc:	0800b915 	.word	0x0800b915
 800b900:	0800b929 	.word	0x0800b929
 800b904:	0800b93d 	.word	0x0800b93d
 800b908:	0800b951 	.word	0x0800b951
 800b90c:	0800b965 	.word	0x0800b965
 800b910:	0800b979 	.word	0x0800b979
      case DISCOVER_IDENTITY:
        return ProcessDiscoverIdentity(port, port->protocol_msg_rx_sop_,
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f000 f89a 	bl	800ba58 <ProcessDiscoverIdentity>
 800b924:	4603      	mov	r3, r0
 800b926:	e04f      	b.n	800b9c8 <ProcessVdmMessage+0x104>
                                       arr_in, length_in);
      case DISCOVER_SVIDS:
        return ProcessDiscoverSvids(port, port->protocol_msg_rx_sop_,
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 fb04 	bl	800bf40 <ProcessDiscoverSvids>
 800b938:	4603      	mov	r3, r0
 800b93a:	e045      	b.n	800b9c8 <ProcessVdmMessage+0x104>
                                    arr_in, length_in);
      case DISCOVER_MODES:
        return ProcessDiscoverModes(port, port->protocol_msg_rx_sop_,
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 fccf 	bl	800c2ea <ProcessDiscoverModes>
 800b94c:	4603      	mov	r3, r0
 800b94e:	e03b      	b.n	800b9c8 <ProcessVdmMessage+0x104>
                                    arr_in, length_in);
      case ENTER_MODE:
        return ProcessEnterMode(port, port->protocol_msg_rx_sop_, arr_in,
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f000 fe21 	bl	800c5a2 <ProcessEnterMode>
 800b960:	4603      	mov	r3, r0
 800b962:	e031      	b.n	800b9c8 <ProcessVdmMessage+0x104>
                                length_in);
      case EXIT_MODE:
        return ProcessExitMode(port, port->protocol_msg_rx_sop_, arr_in,
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f000 ff16 	bl	800c7a0 <ProcessExitMode>
 800b974:	4603      	mov	r3, r0
 800b976:	e027      	b.n	800b9c8 <ProcessVdmMessage+0x104>
                               length_in);
      case ATTENTION:
        return ProcessAttention(port, port->protocol_msg_rx_sop_, arr_in,
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f001 f820 	bl	800c9c8 <ProcessAttention>
 800b988:	4603      	mov	r3, r0
 800b98a:	e01d      	b.n	800b9c8 <ProcessVdmMessage+0x104>
                                length_in);
      default:
        /*  SVID-Specific commands go here */
        return ProcessSvidSpecific(port, port->protocol_msg_rx_sop_, arr_in,
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f001 f84c 	bl	800ca34 <ProcessSvidSpecific>
 800b99c:	4603      	mov	r3, r0
 800b99e:	e013      	b.n	800b9c8 <ProcessVdmMessage+0x104>
    }
  }
  else {
      /* TODO: Unstructured messages */
      /* Unstructured VDM's not supported at this time */
      if (DPM_CurrentSpecRev(port, SOP_TYPE_SOP) == PDSpecRev3p0)
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7f9 fcf6 	bl	8005394 <DPM_CurrentSpecRev>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d10b      	bne.n	800b9c6 <ProcessVdmMessage+0x102>
      {
          /* Not supported in PD3.0, ignored in PD2.0 */
          set_policy_state(port, port->policy_is_source_ == TRUE ?
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <ProcessVdmMessage+0xf8>
 800b9b8:	231c      	movs	r3, #28
 800b9ba:	e000      	b.n	800b9be <ProcessVdmMessage+0xfa>
 800b9bc:	231f      	movs	r3, #31
 800b9be:	4619      	mov	r1, r3
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f7fd fe35 	bl	8009630 <set_policy_state>
              PE_SRC_Send_Not_Supported : PE_SNK_Send_Not_Supported);
      }

    return 1;
 800b9c6:	2301      	movs	r3, #1
  }
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <evalResponseToSopVdm>:

/**
 * Determine message applicability or whether to a response is required
 */
FSC_BOOL evalResponseToSopVdm(struct Port *port, doDataObject_t vdm_hdr)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
    FSC_BOOL response = TRUE;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	73fb      	strb	r3, [r7, #15]
    if (port->policy_is_dfp_ == TRUE && !Responds_To_Discov_SOP_DFP) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d102      	bne.n	800b9ee <evalResponseToSopVdm+0x1e>
      response = FALSE;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	73fb      	strb	r3, [r7, #15]
 800b9ec:	e01a      	b.n	800ba24 <evalResponseToSopVdm+0x54>
    }
    else if (port->policy_is_dfp_ == FALSE && !Responds_To_Discov_SOP_UFP) {
      response = FALSE;
    }
    else if (DPM_CurrentSpecRev(port, SOP_TYPE_SOP) < PDSpecRev3p0 &&
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7f9 fccf 	bl	8005394 <DPM_CurrentSpecRev>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d807      	bhi.n	800ba0c <evalResponseToSopVdm+0x3c>
             port->policy_is_dfp_ == TRUE) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
    else if (DPM_CurrentSpecRev(port, SOP_TYPE_SOP) < PDSpecRev3p0 &&
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d102      	bne.n	800ba0c <evalResponseToSopVdm+0x3c>
      /* See message applicability */
      response = FALSE;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73fb      	strb	r3, [r7, #15]
 800ba0a:	e00b      	b.n	800ba24 <evalResponseToSopVdm+0x54>
    }
    else if (!(port->policy_state_ == PE_SRC_Ready ||
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d006      	beq.n	800ba24 <evalResponseToSopVdm+0x54>
               port->policy_state_ == PE_SNK_Ready)) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    else if (!(port->policy_state_ == PE_SRC_Ready ||
 800ba1c:	2b13      	cmp	r3, #19
 800ba1e:	d001      	beq.n	800ba24 <evalResponseToSopVdm+0x54>
        /* Neither sink ready or source ready state */
      response = FALSE;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]
    }
    return response;
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <evalResponseToCblVdm>:

/**
 * Determine message applicability or whether to a response is required
 */
FSC_BOOL evalResponseToCblVdm(struct Port *port, doDataObject_t vdm_hdr)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b085      	sub	sp, #20
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	6039      	str	r1, [r7, #0]
    FSC_BOOL response = TRUE;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	73fb      	strb	r3, [r7, #15]
    if (port->policy_state_ != PE_CBL_Ready) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800ba42:	2b99      	cmp	r3, #153	; 0x99
 800ba44:	d001      	beq.n	800ba4a <evalResponseToCblVdm+0x1c>
        response = FALSE;
 800ba46:	2300      	movs	r3, #0
 800ba48:	73fb      	strb	r3, [r7, #15]
    }
    return response;
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <ProcessDiscoverIdentity>:

FSC_S32 ProcessDiscoverIdentity(struct Port *port, SopType sop, FSC_U32* arr_in,
                                FSC_U32 length_in)
{
 800ba58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba5a:	b0ab      	sub	sp, #172	; 0xac
 800ba5c:	af06      	add	r7, sp, #24
 800ba5e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ba60:	627a      	str	r2, [r7, #36]	; 0x24
 800ba62:	623b      	str	r3, [r7, #32]
 800ba64:	460b      	mov	r3, r1
 800ba66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  doDataObject_t vdmh_in = {0};
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  doDataObject_t vdmh_out = {0};
 800ba70:	2300      	movs	r3, #0
 800ba72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  IdHeader idh;
  CertStatVdo csvdo;
  Identity id;
  ProductVdo pvdo;
  FSC_U32 arr[7] = {0};
 800ba76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	605a      	str	r2, [r3, #4]
 800ba80:	609a      	str	r2, [r3, #8]
 800ba82:	60da      	str	r2, [r3, #12]
 800ba84:	611a      	str	r2, [r3, #16]
 800ba86:	615a      	str	r2, [r3, #20]
 800ba88:	619a      	str	r2, [r3, #24]
  FSC_U32 length;
  FSC_BOOL result;

  vdmh_in.object = arr_in[0];
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /*  Must NAK or not respond to Discover ID with wrong SVID */
  if (vdmh_in.SVDM.SVID != PD_SID) return -1;
 800ba92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba96:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800ba9a:	d002      	beq.n	800baa2 <ProcessDiscoverIdentity+0x4a>
 800ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 800baa0:	e24a      	b.n	800bf38 <ProcessDiscoverIdentity+0x4e0>

  id.nack = TRUE;
 800baa2:	2301      	movs	r3, #1
 800baa4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (vdmh_in.SVDM.CommandType == INITIATOR) {
 800baa8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800baac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f040 811c 	bne.w	800bcf0 <ProcessDiscoverIdentity+0x298>
    port->original_policy_state_ = port->policy_state_;
 800bab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baba:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800bac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d11f      	bne.n	800bb0c <ProcessDiscoverIdentity+0xb4>
      if (evalResponseToSopVdm(port, vdmh_in)) {
 800bacc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800bad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bad2:	f7ff ff7d 	bl	800b9d0 <evalResponseToSopVdm>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d007      	beq.n	800baec <ProcessDiscoverIdentity+0x94>
        id = VdmRequestIdentityInfo(port, sop);
 800badc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800bae0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 fa6e 	bl	800cfc8 <VdmRequestIdentityInfo>
      }
      set_policy_state(port, PE_RESP_VDM_Get_Identity);
 800baec:	217b      	movs	r1, #123	; 0x7b
 800baee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baf0:	f7fd fd9e 	bl	8009630 <set_policy_state>
      set_policy_state(port, id.nack ? PE_RESP_VDM_Get_Identity_NAK :
 800baf4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d001      	beq.n	800bb00 <ProcessDiscoverIdentity+0xa8>
 800bafc:	237d      	movs	r3, #125	; 0x7d
 800bafe:	e000      	b.n	800bb02 <ProcessDiscoverIdentity+0xaa>
 800bb00:	237c      	movs	r3, #124	; 0x7c
 800bb02:	4619      	mov	r1, r3
 800bb04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb06:	f7fd fd93 	bl	8009630 <set_policy_state>
 800bb0a:	e02a      	b.n	800bb62 <ProcessDiscoverIdentity+0x10a>
                                       PE_RESP_VDM_Send_Identity);
    } else if (sop == SOP_TYPE_SOP1) {
 800bb0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d126      	bne.n	800bb62 <ProcessDiscoverIdentity+0x10a>
      if(evalResponseToCblVdm(port, vdmh_in)) {
 800bb14:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800bb18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb1a:	f7ff ff88 	bl	800ba2e <evalResponseToCblVdm>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00f      	beq.n	800bb44 <ProcessDiscoverIdentity+0xec>
        id = VdmRequestIdentityInfo(port, sop);
 800bb24:	463b      	mov	r3, r7
 800bb26:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bb2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f001 fa4b 	bl	800cfc8 <VdmRequestIdentityInfo>
 800bb32:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800bb36:	463d      	mov	r5, r7
 800bb38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bb40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      }
      set_policy_state(port, PE_RESP_VDM_Get_Identity);
 800bb44:	217b      	movs	r1, #123	; 0x7b
 800bb46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb48:	f7fd fd72 	bl	8009630 <set_policy_state>
      set_policy_state(port, id.nack ? PE_RESP_VDM_Get_Identity_NAK :
 800bb4c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <ProcessDiscoverIdentity+0x100>
 800bb54:	237d      	movs	r3, #125	; 0x7d
 800bb56:	e000      	b.n	800bb5a <ProcessDiscoverIdentity+0x102>
 800bb58:	237c      	movs	r3, #124	; 0x7c
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb5e:	f7fd fd67 	bl	8009630 <set_policy_state>
                                       PE_RESP_VDM_Send_Identity);
    }

    vdmh_out.SVDM.SVID = PD_SID; /* Use PS_SID for DiscId, even on response */
 800bb62:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800bb66:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    vdmh_out.SVDM.VDMType = STRUCTURED_VDM; /* DiscId is Structured */
 800bb6a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800bb6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb72:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800bb76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb7e:	f7ff fa15 	bl	800afac <CurrentSVDMVersion>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f003 0303 	and.w	r3, r3, #3
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800bb8e:	f362 1346 	bfi	r3, r2, #5, #2
 800bb92:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    vdmh_out.SVDM.ObjPos = 0; /*  doesn't matter for Discover Identity */
 800bb96:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800bb9a:	f36f 0302 	bfc	r3, #0, #3
 800bb9e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    vdmh_out.SVDM.CommandType = id.nack ? RESPONDER_NAK : RESPONDER_ACK;
 800bba2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <ProcessDiscoverIdentity+0x156>
 800bbaa:	2202      	movs	r2, #2
 800bbac:	e000      	b.n	800bbb0 <ProcessDiscoverIdentity+0x158>
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800bbb4:	f362 1387 	bfi	r3, r2, #6, #2
 800bbb8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
    vdmh_out.SVDM.Command = DISCOVER_IDENTITY; /*  Reply with same command */
 800bbbc:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f362 0304 	bfi	r3, r2, #0, #5
 800bbc6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
    arr[0] = vdmh_out.object;
 800bbca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bbce:	63fb      	str	r3, [r7, #60]	; 0x3c
    length = 1;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* TODO: Optimize the nack and ack from here. */
    if (id.nack == FALSE) {
 800bbd6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d179      	bne.n	800bcd2 <ProcessDiscoverIdentity+0x27a>
      /*  put capabilities into ID Header */
      idh = id.id_header;
 800bbde:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800bbe2:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 800bbe6:	6810      	ldr	r0, [r2, #0]
 800bbe8:	6018      	str	r0, [r3, #0]

      /*  put test ID into Cert Stat VDO Object */
      csvdo = id.cert_stat_vdo;
 800bbea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbec:	67bb      	str	r3, [r7, #120]	; 0x78

      arr[1] = getBitsForIdHeader(idh);
 800bbee:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800bbf0:	f001 fcfe 	bl	800d5f0 <getBitsForIdHeader>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	643b      	str	r3, [r7, #64]	; 0x40
      length++;
 800bbf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      arr[2] = getBitsForCertStatVdo(csvdo);
 800bc02:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bc04:	f001 fe90 	bl	800d928 <getBitsForCertStatVdo>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	647b      	str	r3, [r7, #68]	; 0x44
      length++;
 800bc0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc10:	3301      	adds	r3, #1
 800bc12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

      /*  Product VDO should be sent for all */
      pvdo = id.product_vdo;
 800bc16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bc1a:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 800bc1e:	6810      	ldr	r0, [r2, #0]
 800bc20:	6018      	str	r0, [r3, #0]
      arr[length] = getBitsForProductVdo(pvdo);
 800bc22:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bc24:	f001 fe64 	bl	800d8f0 <getBitsForProductVdo>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800bc34:	440b      	add	r3, r1
 800bc36:	f843 2c54 	str.w	r2, [r3, #-84]
      length++;
 800bc3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc3e:	3301      	adds	r3, #1
 800bc40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

      /* Cable VDO should be sent when we are a Passive Cable or Active Cable */
      if ((idh.product_type_ufp == PASSIVE_CABLE) ||
 800bc44:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800bc48:	f003 031c 	and.w	r3, r3, #28
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b0c      	cmp	r3, #12
 800bc50:	d006      	beq.n	800bc60 <ProcessDiscoverIdentity+0x208>
          (idh.product_type_ufp == ACTIVE_CABLE)) {
 800bc52:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800bc56:	f003 031c 	and.w	r3, r3, #28
 800bc5a:	b2db      	uxtb	r3, r3
      if ((idh.product_type_ufp == PASSIVE_CABLE) ||
 800bc5c:	2b10      	cmp	r3, #16
 800bc5e:	d116      	bne.n	800bc8e <ProcessDiscoverIdentity+0x236>
        CableVdo cvdo_out;
        cvdo_out = id.cable_vdo;
 800bc60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bc64:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 800bc68:	6810      	ldr	r0, [r2, #0]
 800bc6a:	6018      	str	r0, [r3, #0]
        arr[length] = getBitsForCableVdo(cvdo_out);
 800bc6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc6e:	f001 fe72 	bl	800d956 <getBitsForCableVdo>
 800bc72:	4602      	mov	r2, r0
 800bc74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800bc7e:	440b      	add	r3, r1
 800bc80:	f843 2c54 	str.w	r2, [r3, #-84]
        length++;
 800bc84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc88:	3301      	adds	r3, #1
 800bc8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      }

      /*  AMA VDO should be sent when we are an AMA! */
      if (idh.product_type_ufp == AMA) {
 800bc8e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800bc92:	f003 031c 	and.w	r3, r3, #28
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b14      	cmp	r3, #20
 800bc9a:	d11a      	bne.n	800bcd2 <ProcessDiscoverIdentity+0x27a>
        AmaVdo amavdo_out;
        amavdo_out = id.ama_vdo;
 800bc9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bca0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800bca4:	6812      	ldr	r2, [r2, #0]
 800bca6:	4611      	mov	r1, r2
 800bca8:	8019      	strh	r1, [r3, #0]
 800bcaa:	3302      	adds	r3, #2
 800bcac:	0c12      	lsrs	r2, r2, #16
 800bcae:	701a      	strb	r2, [r3, #0]

        arr[length] = getBitsForAmaVdo(amavdo_out);
 800bcb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bcb2:	f001 feea 	bl	800da8a <getBitsForAmaVdo>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800bcc2:	440b      	add	r3, r1
 800bcc4:	f843 2c54 	str.w	r2, [r3, #-84]
        length++;
 800bcc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bccc:	3301      	adds	r3, #1
 800bcce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      }
    }

    SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800bcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800bcd8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bcdc:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bce8:	f000 ff0e 	bl	800cb08 <SendVdmMessage>
    return 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	e123      	b.n	800bf38 <ProcessDiscoverIdentity+0x4e0>
  }
  else {
    if ((port->policy_state_ != PE_INIT_PORT_VDM_Identity_Request) &&
 800bcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800bcf6:	2b71      	cmp	r3, #113	; 0x71
 800bcf8:	d006      	beq.n	800bd08 <ProcessDiscoverIdentity+0x2b0>
        (port->policy_state_ != PE_SRC_VDM_Identity_Request)) {
 800bcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfc:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    if ((port->policy_state_ != PE_INIT_PORT_VDM_Identity_Request) &&
 800bd00:	2b96      	cmp	r3, #150	; 0x96
 800bd02:	d001      	beq.n	800bd08 <ProcessDiscoverIdentity+0x2b0>
      /* Prevent random discover identity ack/nak message through */
      return 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	e117      	b.n	800bf38 <ProcessDiscoverIdentity+0x4e0>
    }

    if (port->policy_state_ == PE_INIT_PORT_VDM_Identity_Request) {
 800bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800bd0e:	2b71      	cmp	r3, #113	; 0x71
 800bd10:	d118      	bne.n	800bd44 <ProcessDiscoverIdentity+0x2ec>
      if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800bd12:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800bd16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	2b40      	cmp	r3, #64	; 0x40
 800bd1e:	d104      	bne.n	800bd2a <ProcessDiscoverIdentity+0x2d2>
        set_policy_state(port, PE_INIT_PORT_VDM_Identity_ACKed);
 800bd20:	2172      	movs	r1, #114	; 0x72
 800bd22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd24:	f7fd fc84 	bl	8009630 <set_policy_state>
 800bd28:	e029      	b.n	800bd7e <ProcessDiscoverIdentity+0x326>
      }
      else {
        set_policy_state(port, PE_INIT_PORT_VDM_Identity_NAKed);
 800bd2a:	2173      	movs	r1, #115	; 0x73
 800bd2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd2e:	f7fd fc7f 	bl	8009630 <set_policy_state>
        /* Discontinue auto vdm discovery if result is NAK */
        if (sop == SOP_TYPE_SOP) {
 800bd32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d121      	bne.n	800bd7e <ProcessDiscoverIdentity+0x326>
          port->vdm_auto_state_ = AUTO_VDM_DONE;
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	2207      	movs	r2, #7
 800bd3e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800bd42:	e01c      	b.n	800bd7e <ProcessDiscoverIdentity+0x326>
        }
      }
    }
    else if ((port->policy_state_ == PE_SRC_VDM_Identity_Request) &&
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800bd4a:	2b96      	cmp	r3, #150	; 0x96
 800bd4c:	d117      	bne.n	800bd7e <ProcessDiscoverIdentity+0x326>
 800bd4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d003      	beq.n	800bd5e <ProcessDiscoverIdentity+0x306>
             ((sop == SOP_TYPE_SOP) || (sop == SOP_TYPE_SOP1))) {
 800bd56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d10f      	bne.n	800bd7e <ProcessDiscoverIdentity+0x326>
      if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800bd5e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800bd62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b40      	cmp	r3, #64	; 0x40
 800bd6a:	d104      	bne.n	800bd76 <ProcessDiscoverIdentity+0x31e>
        set_policy_state(port, PE_SRC_VDM_Identity_ACKed);
 800bd6c:	2197      	movs	r1, #151	; 0x97
 800bd6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd70:	f7fd fc5e 	bl	8009630 <set_policy_state>
 800bd74:	e003      	b.n	800bd7e <ProcessDiscoverIdentity+0x326>
      }
      else {
        set_policy_state(port, PE_SRC_VDM_Identity_NAKed);
 800bd76:	2198      	movs	r1, #152	; 0x98
 800bd78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd7a:	f7fd fc59 	bl	8009630 <set_policy_state>
    }
    else {
      /*  TODO: something weird happened. */
    }

    if (sop == SOP_TYPE_SOP1)
 800bd7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d115      	bne.n	800bdb2 <ProcessDiscoverIdentity+0x35a>
    {
      /* Getting ACK/NAK here means that cable responded */
      port->vdm_cbl_present_ = TRUE;
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	2201      	movs	r2, #1
 800bd8a:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
      port->vdm_check_cbl_ = FALSE;
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
      /* Check the PD Revision for cable */
      port->dpm_pd_30_srccab_ = (vdmh_in.SVDM.Version == V2P0) ? TRUE : FALSE;
 800bd96:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800bd9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b20      	cmp	r3, #32
 800bda2:	bf0c      	ite	eq
 800bda4:	2301      	moveq	r3, #1
 800bda6:	2300      	movne	r3, #0
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdae:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
    }

    /* set to true when valid response received */
    result = FALSE;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    /*
     * Discover Identity responses should have at least VDM Header, ID Header,
     * and Cert Stat VDO
     */
    if (length_in >= MIN_DISC_ID_RESP_SIZE) {
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	f240 80a1 	bls.w	800bf02 <ProcessDiscoverIdentity+0x4aa>
      if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800bdc0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800bdc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	2b40      	cmp	r3, #64	; 0x40
 800bdcc:	f040 8099 	bne.w	800bf02 <ProcessDiscoverIdentity+0x4aa>
        id.id_header = getIdHeader(arr_in[1]);
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f001 fbc7 	bl	800d56a <getIdHeader>
 800bddc:	4603      	mov	r3, r0
 800bdde:	461a      	mov	r2, r3
 800bde0:	f8a7 205e 	strh.w	r2, [r7, #94]	; 0x5e
 800bde4:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800bde8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        id.cert_stat_vdo = getCertStatVdo(arr_in[2]);
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	3308      	adds	r3, #8
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 fc43 	bl	800d67e <getCertStatVdo>
 800bdf8:	6678      	str	r0, [r7, #100]	; 0x64

        if ((id.id_header.product_type_ufp == HUB)
 800bdfa:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800bdfe:	f003 031c 	and.w	r3, r3, #28
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b04      	cmp	r3, #4
 800be06:	d01b      	beq.n	800be40 <ProcessDiscoverIdentity+0x3e8>
            || (id.id_header.product_type_ufp == PERIPHERAL)
 800be08:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800be0c:	f003 031c 	and.w	r3, r3, #28
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b08      	cmp	r3, #8
 800be14:	d014      	beq.n	800be40 <ProcessDiscoverIdentity+0x3e8>
            || (id.id_header.product_type_ufp == PASSIVE_CABLE)
 800be16:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800be1a:	f003 031c 	and.w	r3, r3, #28
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b0c      	cmp	r3, #12
 800be22:	d00d      	beq.n	800be40 <ProcessDiscoverIdentity+0x3e8>
            || (id.id_header.product_type_ufp == ACTIVE_CABLE)
 800be24:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800be28:	f003 031c 	and.w	r3, r3, #28
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b10      	cmp	r3, #16
 800be30:	d006      	beq.n	800be40 <ProcessDiscoverIdentity+0x3e8>
            || (id.id_header.product_type_ufp == AMA)) {
 800be32:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800be36:	f003 031c 	and.w	r3, r3, #28
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b14      	cmp	r3, #20
 800be3e:	d110      	bne.n	800be62 <ProcessDiscoverIdentity+0x40a>
          id.has_product_vdo = TRUE;
 800be40:	2301      	movs	r3, #1
 800be42:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
          /*  !!! assuming it is before AMA VDO */
          id.product_vdo = getProductVdo(arr_in[3]);
 800be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be48:	330c      	adds	r3, #12
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f001 fc28 	bl	800d6a2 <getProductVdo>
 800be52:	4603      	mov	r3, r0
 800be54:	461a      	mov	r2, r3
 800be56:	f8a7 206a 	strh.w	r2, [r7, #106]	; 0x6a
 800be5a:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800be5e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        }

        if ((id.id_header.product_type_ufp == PASSIVE_CABLE)
 800be62:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800be66:	f003 031c 	and.w	r3, r3, #28
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b0c      	cmp	r3, #12
 800be6e:	d006      	beq.n	800be7e <ProcessDiscoverIdentity+0x426>
            || (id.id_header.product_type_ufp == ACTIVE_CABLE)) {
 800be70:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800be74:	f003 031c 	and.w	r3, r3, #28
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b10      	cmp	r3, #16
 800be7c:	d118      	bne.n	800beb0 <ProcessDiscoverIdentity+0x458>
          id.has_cable_vdo = TRUE;
 800be7e:	2301      	movs	r3, #1
 800be80:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
          id.cable_vdo = getCableVdo(arr_in[4]);
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	3310      	adds	r3, #16
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f001 fc23 	bl	800d6d6 <getCableVdo>
 800be90:	4603      	mov	r3, r0
 800be92:	461a      	mov	r2, r3
 800be94:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 800be98:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800be9c:	f887 2070 	strb.w	r2, [r7, #112]	; 0x70
 800bea0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bea4:	f887 2071 	strb.w	r2, [r7, #113]	; 0x71
 800bea8:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800beac:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        }

        if ((id.id_header.product_type_ufp == AMA)) {
 800beb0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800beb4:	f003 031c 	and.w	r3, r3, #28
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b14      	cmp	r3, #20
 800bebc:	d114      	bne.n	800bee8 <ProcessDiscoverIdentity+0x490>
          id.has_ama_vdo = TRUE;
 800bebe:	2301      	movs	r3, #1
 800bec0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
          /*  !!! assuming it is after Product VDO */
          id.ama_vdo = getAmaVdo(arr_in[4]);
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	3310      	adds	r3, #16
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4618      	mov	r0, r3
 800becc:	f001 fc99 	bl	800d802 <getAmaVdo>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	f887 2074 	strb.w	r2, [r7, #116]	; 0x74
 800bed8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bedc:	f887 2075 	strb.w	r2, [r7, #117]	; 0x75
 800bee0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800bee4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        }

        port->vdm_expecting_response_ = FALSE;
 800bee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
        TimerDisable(&port->vdm_timer_);
 800bef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fac8 	bl	800a48c <TimerDisable>
        result = TRUE;
 800befc:	2301      	movs	r3, #1
 800befe:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
      }
    }

    VdmInformIdentity(port, result, sop, id);
 800bf02:	f897 c02b 	ldrb.w	ip, [r7, #43]	; 0x2b
 800bf06:	f897 608b 	ldrb.w	r6, [r7, #139]	; 0x8b
 800bf0a:	466d      	mov	r5, sp
 800bf0c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800bf10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf14:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bf18:	e885 0003 	stmia.w	r5, {r0, r1}
 800bf1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf1e:	4662      	mov	r2, ip
 800bf20:	4631      	mov	r1, r6
 800bf22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf24:	f001 f9f1 	bl	800d30a <VdmInformIdentity>
    set_policy_state(port, port->original_policy_state_);
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf32:	f7fd fb7d 	bl	8009630 <set_policy_state>
    return 0;
 800bf36:	2300      	movs	r3, #0
  }
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3794      	adds	r7, #148	; 0x94
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf40 <ProcessDiscoverSvids>:

FSC_S32 ProcessDiscoverSvids(struct Port *port, SopType sop, FSC_U32* arr_in,
                             FSC_U32 length_in)
{
 800bf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf42:	b0a9      	sub	sp, #164	; 0xa4
 800bf44:	af08      	add	r7, sp, #32
 800bf46:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bf48:	627a      	str	r2, [r7, #36]	; 0x24
 800bf4a:	623b      	str	r3, [r7, #32]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  doDataObject_t vdmh_in = {0};
 800bf52:	2300      	movs	r3, #0
 800bf54:	673b      	str	r3, [r7, #112]	; 0x70
  doDataObject_t vdmh_out = {0};
 800bf56:	2300      	movs	r3, #0
 800bf58:	66fb      	str	r3, [r7, #108]	; 0x6c
  SvidInfo svid_info;
  FSC_U32 i;
  FSC_U16 top16;
  FSC_U16 bottom16;
  FSC_U32 arr[7] = {0};
 800bf5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	605a      	str	r2, [r3, #4]
 800bf64:	609a      	str	r2, [r3, #8]
 800bf66:	60da      	str	r2, [r3, #12]
 800bf68:	611a      	str	r2, [r3, #16]
 800bf6a:	615a      	str	r2, [r3, #20]
 800bf6c:	619a      	str	r2, [r3, #24]
  FSC_U32 length;

  vdmh_in.object = arr_in[0];
 800bf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	673b      	str	r3, [r7, #112]	; 0x70

  /* Must NAK or not respond to Discover SVIDs with wrong SVID */
  if (vdmh_in.SVDM.SVID != PD_SID) return -1;
 800bf74:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800bf78:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800bf7c:	d002      	beq.n	800bf84 <ProcessDiscoverSvids+0x44>
 800bf7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf82:	e1ae      	b.n	800c2e2 <ProcessDiscoverSvids+0x3a2>

  svid_info.nack = TRUE;
 800bf84:	2301      	movs	r3, #1
 800bf86:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  if (vdmh_in.SVDM.CommandType == INITIATOR) {
 800bf8a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800bf8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f040 8117 	bne.w	800c1c8 <ProcessDiscoverSvids+0x288>
    port->original_policy_state_ = port->policy_state_;
 800bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9c:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800bfa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d124      	bne.n	800bff8 <ProcessDiscoverSvids+0xb8>
      if (evalResponseToSopVdm(port, vdmh_in)) {
 800bfae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bfb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfb2:	f7ff fd0d 	bl	800b9d0 <evalResponseToSopVdm>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00d      	beq.n	800bfd8 <ProcessDiscoverSvids+0x98>
        /*  assuming that the splitting of SVID info is done outside this block */
        svid_info = VdmRequestSvidInfo(port);
 800bfbc:	463b      	mov	r3, r7
 800bfbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f001 f854 	bl	800d06e <VdmRequestSvidInfo>
 800bfc6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800bfca:	463d      	mov	r5, r7
 800bfcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bfd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
      set_policy_state(port, PE_RESP_VDM_Get_SVIDs);
 800bfd8:	217e      	movs	r1, #126	; 0x7e
 800bfda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfdc:	f7fd fb28 	bl	8009630 <set_policy_state>
      set_policy_state(port, svid_info.nack ? PE_RESP_VDM_Get_SVIDs_NAK :
 800bfe0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d001      	beq.n	800bfec <ProcessDiscoverSvids+0xac>
 800bfe8:	2380      	movs	r3, #128	; 0x80
 800bfea:	e000      	b.n	800bfee <ProcessDiscoverSvids+0xae>
 800bfec:	237f      	movs	r3, #127	; 0x7f
 800bfee:	4619      	mov	r1, r3
 800bff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bff2:	f7fd fb1d 	bl	8009630 <set_policy_state>
 800bff6:	e027      	b.n	800c048 <ProcessDiscoverSvids+0x108>
                                              PE_RESP_VDM_Send_SVIDs);
    }
    else if (sop == SOP_TYPE_SOP1) {
 800bff8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d123      	bne.n	800c048 <ProcessDiscoverSvids+0x108>
      if (evalResponseToCblVdm(port, vdmh_in)) {
 800c000:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c004:	f7ff fd13 	bl	800ba2e <evalResponseToCblVdm>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00d      	beq.n	800c02a <ProcessDiscoverSvids+0xea>
        svid_info = VdmRequestSvidInfo(port);
 800c00e:	463b      	mov	r3, r7
 800c010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c012:	4618      	mov	r0, r3
 800c014:	f001 f82b 	bl	800d06e <VdmRequestSvidInfo>
 800c018:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800c01c:	463d      	mov	r5, r7
 800c01e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c022:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c026:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
      set_policy_state(port, PE_RESP_VDM_Get_SVIDs);
 800c02a:	217e      	movs	r1, #126	; 0x7e
 800c02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c02e:	f7fd faff 	bl	8009630 <set_policy_state>
      set_policy_state(port, svid_info.nack ? PE_RESP_VDM_Get_SVIDs_NAK :
 800c032:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <ProcessDiscoverSvids+0xfe>
 800c03a:	2380      	movs	r3, #128	; 0x80
 800c03c:	e000      	b.n	800c040 <ProcessDiscoverSvids+0x100>
 800c03e:	237f      	movs	r3, #127	; 0x7f
 800c040:	4619      	mov	r1, r3
 800c042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c044:	f7fd faf4 	bl	8009630 <set_policy_state>
                                              PE_RESP_VDM_Send_SVIDs);
    }

    vdmh_out.SVDM.SVID = PD_SID; /* Use PS_SID for Disc SVIDs */
 800c048:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800c04c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    vdmh_out.SVDM.VDMType = STRUCTURED_VDM; /*  Discovery SVIDs is Structured */
 800c050:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800c054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c058:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800c05c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c060:	4619      	mov	r1, r3
 800c062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c064:	f7fe ffa2 	bl	800afac <CurrentSVDMVersion>
 800c068:	4603      	mov	r3, r0
 800c06a:	f003 0303 	and.w	r3, r3, #3
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800c074:	f362 1346 	bfi	r3, r2, #5, #2
 800c078:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.ObjPos = 0; /*  doesn't matter for Discover SVIDs */
 800c07c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800c080:	f36f 0302 	bfc	r3, #0, #3
 800c084:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.CommandType = svid_info.nack ? RESPONDER_NAK : RESPONDER_ACK;
 800c088:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <ProcessDiscoverSvids+0x154>
 800c090:	2202      	movs	r2, #2
 800c092:	e000      	b.n	800c096 <ProcessDiscoverSvids+0x156>
 800c094:	2201      	movs	r2, #1
 800c096:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800c09a:	f362 1387 	bfi	r3, r2, #6, #2
 800c09e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

    /*  Reply with same command, Discover SVIDs */
    vdmh_out.SVDM.Command = DISCOVER_SVIDS;
 800c0a2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	f362 0304 	bfi	r3, r2, #0, #5
 800c0ac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    length = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	67bb      	str	r3, [r7, #120]	; 0x78
    arr[length] = vdmh_out.object;
 800c0b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c0be:	440b      	add	r3, r1
 800c0c0:	f843 2c50 	str.w	r2, [r3, #-80]
    length++;
 800c0c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (svid_info.nack == FALSE) {
 800c0ca:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d16c      	bne.n	800c1ac <ProcessDiscoverSvids+0x26c>
      /*  prevent segfaults */
      if (svid_info.num_svids > MAX_NUM_SVIDS) {
 800c0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0d4:	2b0c      	cmp	r3, #12
 800c0d6:	d908      	bls.n	800c0ea <ProcessDiscoverSvids+0x1aa>
        set_policy_state(port, port->original_policy_state_);
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c0de:	4619      	mov	r1, r3
 800c0e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0e2:	f7fd faa5 	bl	8009630 <set_policy_state>
        return 1;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e0fb      	b.n	800c2e2 <ProcessDiscoverSvids+0x3a2>
      }
      for (i = 0; i < svid_info.num_svids; i++) {
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0ee:	e059      	b.n	800c1a4 <ProcessDiscoverSvids+0x264>
        /*  check if i is even */
        if (!(i & 0x1)) {
 800c0f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d137      	bne.n	800c16a <ProcessDiscoverSvids+0x22a>
          length++;
 800c0fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	67bb      	str	r3, [r7, #120]	; 0x78
          /*  setup new word to send */
          arr[length - 1] = 0;
 800c100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c102:	3b01      	subs	r3, #1
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c10a:	4413      	add	r3, r2
 800c10c:	2200      	movs	r2, #0
 800c10e:	f843 2c50 	str.w	r2, [r3, #-80]
          /*  if even, shift SVID up to the top 16 bits */
          arr[length - 1] |= svid_info.svids[i];
 800c112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c114:	3b01      	subs	r3, #1
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c11c:	4413      	add	r3, r2
 800c11e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800c122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c124:	3304      	adds	r3, #4
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c12c:	440b      	add	r3, r1
 800c12e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800c132:	4619      	mov	r1, r3
 800c134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c136:	3b01      	subs	r3, #1
 800c138:	430a      	orrs	r2, r1
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c140:	440b      	add	r3, r1
 800c142:	f843 2c50 	str.w	r2, [r3, #-80]
          arr[length - 1] <<= 16;
 800c146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c148:	3b01      	subs	r3, #1
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c150:	4413      	add	r3, r2
 800c152:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800c156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c158:	3b01      	subs	r3, #1
 800c15a:	0412      	lsls	r2, r2, #16
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c162:	440b      	add	r3, r1
 800c164:	f843 2c50 	str.w	r2, [r3, #-80]
 800c168:	e019      	b.n	800c19e <ProcessDiscoverSvids+0x25e>
        }
        else {
          /*  if odd, fill out the bottom 16 bits */
          arr[length - 1] |= svid_info.svids[i];
 800c16a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c16c:	3b01      	subs	r3, #1
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c174:	4413      	add	r3, r2
 800c176:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800c17a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c17c:	3304      	adds	r3, #4
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c184:	440b      	add	r3, r1
 800c186:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800c18a:	4619      	mov	r1, r3
 800c18c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c18e:	3b01      	subs	r3, #1
 800c190:	430a      	orrs	r2, r1
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c198:	440b      	add	r3, r1
 800c19a:	f843 2c50 	str.w	r2, [r3, #-80]
      for (i = 0; i < svid_info.num_svids; i++) {
 800c19e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d3a1      	bcc.n	800c0f0 <ProcessDiscoverSvids+0x1b0>
        }
      }
    }
    SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800c1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ae:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c1b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c1b6:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1c0:	f000 fca2 	bl	800cb08 <SendVdmMessage>
    return 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e08c      	b.n	800c2e2 <ProcessDiscoverSvids+0x3a2>
  }
  else {
    /* Incoming responses, ACKs, NAKs, BUSYs */
    svid_info.num_svids = 0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	653b      	str	r3, [r7, #80]	; 0x50

    if (port->policy_state_ != PE_INIT_VDM_SVIDs_Request) {
 800c1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ce:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800c1d2:	2b74      	cmp	r3, #116	; 0x74
 800c1d4:	d001      	beq.n	800c1da <ProcessDiscoverSvids+0x29a>
      return 1;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e083      	b.n	800c2e2 <ProcessDiscoverSvids+0x3a2>
    }
    else if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800c1da:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800c1de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	2b40      	cmp	r3, #64	; 0x40
 800c1e6:	d14c      	bne.n	800c282 <ProcessDiscoverSvids+0x342>
      for (i = 1; i < length_in; i++) {
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c1ec:	e03c      	b.n	800c268 <ProcessDiscoverSvids+0x328>
        top16 = (arr_in[i] >> 16) & 0xFFFF;
 800c1ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1f4:	4413      	add	r3, r2
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	0c1b      	lsrs	r3, r3, #16
 800c1fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
        bottom16 = (arr_in[i] >> 0) & 0xFFFF;
 800c1fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c204:	4413      	add	r3, r2
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

        /*  if top 16 bits are 0, we're done getting SVIDs */
        if (top16 == 0) {
 800c20c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c210:	2b00      	cmp	r3, #0
 800c212:	d02e      	beq.n	800c272 <ProcessDiscoverSvids+0x332>
          break;
        }
        else {
          svid_info.svids[2 * (i - 1)] = top16;
 800c214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c216:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c21a:	3b01      	subs	r3, #1
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	3304      	adds	r3, #4
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c226:	4413      	add	r3, r2
 800c228:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c22c:	f823 2c34 	strh.w	r2, [r3, #-52]
          svid_info.num_svids += 1;
 800c230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c232:	3301      	adds	r3, #1
 800c234:	653b      	str	r3, [r7, #80]	; 0x50
        }
        /*  if bottom 16 bits are 0 we're done getting SVIDs */
        if (bottom16 == 0) {
 800c236:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d01b      	beq.n	800c276 <ProcessDiscoverSvids+0x336>
          break;
        }
        else {
          svid_info.svids[2 * (i - 1) + 1] = bottom16;
 800c23e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c244:	3b01      	subs	r3, #1
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	3301      	adds	r3, #1
 800c24a:	3304      	adds	r3, #4
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c252:	4413      	add	r3, r2
 800c254:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800c258:	f823 2c34 	strh.w	r2, [r3, #-52]
          svid_info.num_svids += 1;
 800c25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c25e:	3301      	adds	r3, #1
 800c260:	653b      	str	r3, [r7, #80]	; 0x50
      for (i = 1; i < length_in; i++) {
 800c262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c264:	3301      	adds	r3, #1
 800c266:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c268:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d3be      	bcc.n	800c1ee <ProcessDiscoverSvids+0x2ae>
 800c270:	e002      	b.n	800c278 <ProcessDiscoverSvids+0x338>
          break;
 800c272:	bf00      	nop
 800c274:	e000      	b.n	800c278 <ProcessDiscoverSvids+0x338>
          break;
 800c276:	bf00      	nop
        }
      }
      set_policy_state(port, PE_INIT_VDM_SVIDs_ACKed);
 800c278:	2175      	movs	r1, #117	; 0x75
 800c27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c27c:	f7fd f9d8 	bl	8009630 <set_policy_state>
 800c280:	e003      	b.n	800c28a <ProcessDiscoverSvids+0x34a>
    }
    else {
      set_policy_state(port, PE_INIT_VDM_SVIDs_NAKed);
 800c282:	2176      	movs	r1, #118	; 0x76
 800c284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c286:	f7fd f9d3 	bl	8009630 <set_policy_state>
    }
    VdmInformSvids(port,
                   port->policy_state_ == PE_INIT_VDM_SVIDs_ACKed ? TRUE:FALSE,
 800c28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28c:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    VdmInformSvids(port,
 800c290:	2b75      	cmp	r3, #117	; 0x75
 800c292:	bf0c      	ite	eq
 800c294:	2301      	moveq	r3, #1
 800c296:	2300      	movne	r3, #0
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	469c      	mov	ip, r3
 800c29c:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 800c2a0:	466d      	mov	r5, sp
 800c2a2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800c2a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c2ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b4:	4632      	mov	r2, r6
 800c2b6:	4661      	mov	r1, ip
 800c2b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2ba:	f001 f871 	bl	800d3a0 <VdmInformSvids>
                   sop, svid_info);
    port->vdm_expecting_response_ = FALSE;
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
    TimerDisable(&port->vdm_timer_);
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fe f8dd 	bl	800a48c <TimerDisable>
    set_policy_state(port, port->original_policy_state_);
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c2d8:	4619      	mov	r1, r3
 800c2da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2dc:	f7fd f9a8 	bl	8009630 <set_policy_state>
    return 0;
 800c2e0:	2300      	movs	r3, #0
  }
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3784      	adds	r7, #132	; 0x84
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2ea <ProcessDiscoverModes>:

FSC_S32 ProcessDiscoverModes(struct Port *port, SopType sop, FSC_U32 *arr_in,
                             FSC_U32 length_in)
{
 800c2ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ec:	b0a9      	sub	sp, #164	; 0xa4
 800c2ee:	af08      	add	r7, sp, #32
 800c2f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c2f2:	627a      	str	r2, [r7, #36]	; 0x24
 800c2f4:	623b      	str	r3, [r7, #32]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  doDataObject_t vdmh_in = {0};
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	673b      	str	r3, [r7, #112]	; 0x70
  doDataObject_t vdmh_out = {0};
 800c300:	2300      	movs	r3, #0
 800c302:	66fb      	str	r3, [r7, #108]	; 0x6c
  ModesInfo modes_info;
  FSC_U32 i, j;
  FSC_U32 arr[7] = {0};
 800c304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c308:	2200      	movs	r2, #0
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	605a      	str	r2, [r3, #4]
 800c30e:	609a      	str	r2, [r3, #8]
 800c310:	60da      	str	r2, [r3, #12]
 800c312:	611a      	str	r2, [r3, #16]
 800c314:	615a      	str	r2, [r3, #20]
 800c316:	619a      	str	r2, [r3, #24]
  FSC_U32 length;

  vdmh_in.object = arr_in[0];
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	673b      	str	r3, [r7, #112]	; 0x70

  modes_info.nack = TRUE;
 800c31e:	2301      	movs	r3, #1
 800c320:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  if (vdmh_in.SVDM.CommandType == INITIATOR) {
 800c324:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800c328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f040 80cb 	bne.w	800c4ca <ProcessDiscoverModes+0x1e0>
    port->original_policy_state_ = port->policy_state_;
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800c33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800c340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c344:	2b00      	cmp	r3, #0
 800c346:	d126      	bne.n	800c396 <ProcessDiscoverModes+0xac>
      if (evalResponseToSopVdm(port, vdmh_in)) {
 800c348:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c34a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c34c:	f7ff fb40 	bl	800b9d0 <evalResponseToSopVdm>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00f      	beq.n	800c376 <ProcessDiscoverModes+0x8c>
        modes_info = VdmRequestModesInfo(port, vdmh_in.SVDM.SVID);
 800c356:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800c35a:	463b      	mov	r3, r7
 800c35c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 feb3 	bl	800d0ca <VdmRequestModesInfo>
 800c364:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800c368:	463d      	mov	r5, r7
 800c36a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c36c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c36e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
      set_policy_state(port, PE_RESP_VDM_Get_Modes);
 800c376:	2181      	movs	r1, #129	; 0x81
 800c378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c37a:	f7fd f959 	bl	8009630 <set_policy_state>
      set_policy_state(port, modes_info.nack ? PE_RESP_VDM_Get_Modes_NAK :
 800c37e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <ProcessDiscoverModes+0xa0>
 800c386:	2383      	movs	r3, #131	; 0x83
 800c388:	e000      	b.n	800c38c <ProcessDiscoverModes+0xa2>
 800c38a:	2382      	movs	r3, #130	; 0x82
 800c38c:	4619      	mov	r1, r3
 800c38e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c390:	f7fd f94e 	bl	8009630 <set_policy_state>
 800c394:	e029      	b.n	800c3ea <ProcessDiscoverModes+0x100>
                                               PE_RESP_VDM_Send_Modes);
    }

    else if (sop == SOP_TYPE_SOP1) {
 800c396:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d125      	bne.n	800c3ea <ProcessDiscoverModes+0x100>
      if (evalResponseToCblVdm(port, vdmh_in)) {
 800c39e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c3a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3a2:	f7ff fb44 	bl	800ba2e <evalResponseToCblVdm>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00f      	beq.n	800c3cc <ProcessDiscoverModes+0xe2>
        modes_info = VdmRequestModesInfo(port, vdmh_in.SVDM.SVID);
 800c3ac:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800c3b0:	463b      	mov	r3, r7
 800c3b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 fe88 	bl	800d0ca <VdmRequestModesInfo>
 800c3ba:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800c3be:	463d      	mov	r5, r7
 800c3c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c3c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
      set_policy_state(port, PE_RESP_VDM_Get_Modes);
 800c3cc:	2181      	movs	r1, #129	; 0x81
 800c3ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3d0:	f7fd f92e 	bl	8009630 <set_policy_state>
      set_policy_state(port, modes_info.nack ? PE_RESP_VDM_Get_Modes_NAK :
 800c3d4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <ProcessDiscoverModes+0xf6>
 800c3dc:	2383      	movs	r3, #131	; 0x83
 800c3de:	e000      	b.n	800c3e2 <ProcessDiscoverModes+0xf8>
 800c3e0:	2382      	movs	r3, #130	; 0x82
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3e6:	f7fd f923 	bl	8009630 <set_policy_state>
                                               PE_RESP_VDM_Send_Modes);
    }

    vdmh_out.SVDM.SVID = vdmh_in.SVDM.SVID;
 800c3ea:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800c3ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    vdmh_out.SVDM.VDMType = STRUCTURED_VDM;
 800c3f2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800c3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fa:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800c3fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c402:	4619      	mov	r1, r3
 800c404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c406:	f7fe fdd1 	bl	800afac <CurrentSVDMVersion>
 800c40a:	4603      	mov	r3, r0
 800c40c:	f003 0303 	and.w	r3, r3, #3
 800c410:	b2da      	uxtb	r2, r3
 800c412:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800c416:	f362 1346 	bfi	r3, r2, #5, #2
 800c41a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.ObjPos = 0;
 800c41e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800c422:	f36f 0302 	bfc	r3, #0, #3
 800c426:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    vdmh_out.SVDM.CommandType = modes_info.nack ? RESPONDER_NAK : RESPONDER_ACK;
 800c42a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <ProcessDiscoverModes+0x14c>
 800c432:	2202      	movs	r2, #2
 800c434:	e000      	b.n	800c438 <ProcessDiscoverModes+0x14e>
 800c436:	2201      	movs	r2, #1
 800c438:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800c43c:	f362 1387 	bfi	r3, r2, #6, #2
 800c440:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

    /*  Reply with same command, Discover Modes */
    vdmh_out.SVDM.Command = DISCOVER_MODES;
 800c444:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800c448:	2203      	movs	r2, #3
 800c44a:	f362 0304 	bfi	r3, r2, #0, #5
 800c44e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    length = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	677b      	str	r3, [r7, #116]	; 0x74
    arr[length] = vdmh_out.object;
 800c456:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c460:	440b      	add	r3, r1
 800c462:	f843 2c50 	str.w	r2, [r3, #-80]
    length++;
 800c466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c468:	3301      	adds	r3, #1
 800c46a:	677b      	str	r3, [r7, #116]	; 0x74
    if (modes_info.nack == FALSE) {
 800c46c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800c470:	2b00      	cmp	r3, #0
 800c472:	d11c      	bne.n	800c4ae <ProcessDiscoverModes+0x1c4>
      for (j = 0; j < modes_info.num_modes; j++) {
 800c474:	2300      	movs	r3, #0
 800c476:	67bb      	str	r3, [r7, #120]	; 0x78
 800c478:	e015      	b.n	800c4a6 <ProcessDiscoverModes+0x1bc>
        arr[j + 1] = modes_info.modes[j];
 800c47a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c47c:	1c59      	adds	r1, r3, #1
 800c47e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c480:	3302      	adds	r3, #2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c488:	4413      	add	r3, r2
 800c48a:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800c48e:	008b      	lsls	r3, r1, #2
 800c490:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c494:	440b      	add	r3, r1
 800c496:	f843 2c50 	str.w	r2, [r3, #-80]
        length++;
 800c49a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c49c:	3301      	adds	r3, #1
 800c49e:	677b      	str	r3, [r7, #116]	; 0x74
      for (j = 0; j < modes_info.num_modes; j++) {
 800c4a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d3e5      	bcc.n	800c47a <ProcessDiscoverModes+0x190>
      }
    }
    SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800c4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b0:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c4b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c4b8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4c2:	f000 fb21 	bl	800cb08 <SendVdmMessage>
    return 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e067      	b.n	800c59a <ProcessDiscoverModes+0x2b0>
  }
  else {
    /*  Incoming responses, ACKs, NAKs, BUSYs */
    if (port->policy_state_ != PE_INIT_VDM_Modes_Request) {
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800c4d0:	2b77      	cmp	r3, #119	; 0x77
 800c4d2:	d001      	beq.n	800c4d8 <ProcessDiscoverModes+0x1ee>
      return 1;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e060      	b.n	800c59a <ProcessDiscoverModes+0x2b0>
    }
    else {
      if (vdmh_in.SVDM.CommandType == RESPONDER_ACK) {
 800c4d8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800c4dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b40      	cmp	r3, #64	; 0x40
 800c4e4:	d126      	bne.n	800c534 <ProcessDiscoverModes+0x24a>
        modes_info.svid = vdmh_in.SVDM.SVID;
 800c4e6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800c4ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        modes_info.num_modes = length_in - 1;
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	653b      	str	r3, [r7, #80]	; 0x50
        modes_info.nack = FALSE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        for (i = 1; i < length_in; i++) {
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4fe:	e010      	b.n	800c522 <ProcessDiscoverModes+0x238>
          modes_info.modes[i - 1] = arr_in[i];
 800c500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c506:	441a      	add	r2, r3
 800c508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c50a:	3b01      	subs	r3, #1
 800c50c:	6812      	ldr	r2, [r2, #0]
 800c50e:	3302      	adds	r3, #2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800c516:	440b      	add	r3, r1
 800c518:	f843 2c34 	str.w	r2, [r3, #-52]
        for (i = 1; i < length_in; i++) {
 800c51c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c51e:	3301      	adds	r3, #1
 800c520:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c522:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	429a      	cmp	r2, r3
 800c528:	d3ea      	bcc.n	800c500 <ProcessDiscoverModes+0x216>
        }
        set_policy_state(port, PE_INIT_VDM_Modes_ACKed);
 800c52a:	2178      	movs	r1, #120	; 0x78
 800c52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c52e:	f7fd f87f 	bl	8009630 <set_policy_state>
 800c532:	e006      	b.n	800c542 <ProcessDiscoverModes+0x258>
      }
      else {
        modes_info.nack = TRUE;
 800c534:	2301      	movs	r3, #1
 800c536:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        set_policy_state(port, PE_INIT_VDM_Modes_NAKed);
 800c53a:	2179      	movs	r1, #121	; 0x79
 800c53c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c53e:	f7fd f877 	bl	8009630 <set_policy_state>
      }
      VdmInformModes(port,
                 port->policy_state_ == PE_INIT_VDM_Modes_ACKed ? TRUE : FALSE,
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      VdmInformModes(port,
 800c548:	2b78      	cmp	r3, #120	; 0x78
 800c54a:	bf0c      	ite	eq
 800c54c:	2301      	moveq	r3, #1
 800c54e:	2300      	movne	r3, #0
 800c550:	b2db      	uxtb	r3, r3
 800c552:	469c      	mov	ip, r3
 800c554:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 800c558:	466d      	mov	r5, sp
 800c55a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800c55e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c562:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c566:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c56c:	4632      	mov	r2, r6
 800c56e:	4661      	mov	r1, ip
 800c570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c572:	f000 ff7a 	bl	800d46a <VdmInformModes>
                 sop, modes_info);
      port->vdm_expecting_response_ = FALSE;
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
      TimerDisable(&port->vdm_timer_);
 800c57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c580:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800c584:	4618      	mov	r0, r3
 800c586:	f7fd ff81 	bl	800a48c <TimerDisable>
      set_policy_state(port, port->original_policy_state_);
 800c58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58c:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c590:	4619      	mov	r1, r3
 800c592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c594:	f7fd f84c 	bl	8009630 <set_policy_state>
    }
    return 0;
 800c598:	2300      	movs	r3, #0
  }
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3784      	adds	r7, #132	; 0x84
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5a2 <ProcessEnterMode>:

FSC_S32 ProcessEnterMode(struct Port *port, SopType sop, FSC_U32 *arr_in,
                         FSC_U32 length_in)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b092      	sub	sp, #72	; 0x48
 800c5a6:	af02      	add	r7, sp, #8
 800c5a8:	60f8      	str	r0, [r7, #12]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	72fb      	strb	r3, [r7, #11]
  doDataObject_t svdmh_in = {0};
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	637b      	str	r3, [r7, #52]	; 0x34
  doDataObject_t svdmh_out = {0};
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	633b      	str	r3, [r7, #48]	; 0x30
  FSC_BOOL mode_entered = FALSE;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  FSC_U32 arr_out[7] = {0};
 800c5c0:	f107 0314 	add.w	r3, r7, #20
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	601a      	str	r2, [r3, #0]
 800c5c8:	605a      	str	r2, [r3, #4]
 800c5ca:	609a      	str	r2, [r3, #8]
 800c5cc:	60da      	str	r2, [r3, #12]
 800c5ce:	611a      	str	r2, [r3, #16]
 800c5d0:	615a      	str	r2, [r3, #20]
 800c5d2:	619a      	str	r2, [r3, #24]
  FSC_U32 length_out;

  svdmh_in.object = arr_in[0];
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (svdmh_in.SVDM.CommandType == INITIATOR) {
 800c5da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c5de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f040 80a7 	bne.w	800c738 <ProcessEnterMode+0x196>
    port->original_policy_state_ = port->policy_state_;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800c5f6:	7afb      	ldrb	r3, [r7, #11]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d130      	bne.n	800c65e <ProcessEnterMode+0xbc>
      if (evalResponseToSopVdm(port, svdmh_in)) {
 800c5fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7ff f9e6 	bl	800b9d0 <evalResponseToSopVdm>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00c      	beq.n	800c624 <ProcessEnterMode+0x82>
        mode_entered = VdmModeEntryRequest(port, svdmh_in.SVDM.SVID,
 800c60a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                                                 svdmh_in.SVDM.ObjPos);
 800c60c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c610:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c614:	b2db      	uxtb	r3, r3
        mode_entered = VdmModeEntryRequest(port, svdmh_in.SVDM.SVID,
 800c616:	461a      	mov	r2, r3
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f000 fd9f 	bl	800d15c <VdmModeEntryRequest>
 800c61e:	4603      	mov	r3, r0
 800c620:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      set_policy_state(port, PE_UFP_VDM_Evaluate_Mode_Entry);
 800c624:	2190      	movs	r1, #144	; 0x90
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f7fd f802 	bl	8009630 <set_policy_state>
      set_policy_state(port, mode_entered ? PE_UFP_VDM_Mode_Entry_ACK :
 800c62c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <ProcessEnterMode+0x96>
 800c634:	2391      	movs	r3, #145	; 0x91
 800c636:	e000      	b.n	800c63a <ProcessEnterMode+0x98>
 800c638:	2392      	movs	r3, #146	; 0x92
 800c63a:	4619      	mov	r1, r3
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7fc fff7 	bl	8009630 <set_policy_state>
                                            PE_UFP_VDM_Mode_Entry_NAK);
      svdmh_out.SVDM.CommandType = mode_entered ? RESPONDER_ACK :
 800c642:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <ProcessEnterMode+0xac>
 800c64a:	2201      	movs	r2, #1
 800c64c:	e000      	b.n	800c650 <ProcessEnterMode+0xae>
 800c64e:	2202      	movs	r2, #2
 800c650:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c654:	f362 1387 	bfi	r3, r2, #6, #2
 800c658:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800c65c:	e032      	b.n	800c6c4 <ProcessEnterMode+0x122>
                                                  RESPONDER_NAK;
    }
    else if (sop == SOP_TYPE_SOP1) {
 800c65e:	7afb      	ldrb	r3, [r7, #11]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d12f      	bne.n	800c6c4 <ProcessEnterMode+0x122>
      if (evalResponseToCblVdm(port, svdmh_in)) {
 800c664:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f7ff f9e1 	bl	800ba2e <evalResponseToCblVdm>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00c      	beq.n	800c68c <ProcessEnterMode+0xea>
        mode_entered = VdmModeEntryRequest(port, svdmh_in.SVDM.SVID,
 800c672:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                                                 svdmh_in.SVDM.ObjPos);
 800c674:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c678:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c67c:	b2db      	uxtb	r3, r3
        mode_entered = VdmModeEntryRequest(port, svdmh_in.SVDM.SVID,
 800c67e:	461a      	mov	r2, r3
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 fd6b 	bl	800d15c <VdmModeEntryRequest>
 800c686:	4603      	mov	r3, r0
 800c688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      set_policy_state(port, PE_CBL_Evaluate_Mode_Entry);
 800c68c:	219a      	movs	r1, #154	; 0x9a
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f7fc ffce 	bl	8009630 <set_policy_state>
      set_policy_state(port, mode_entered ? PE_CBL_Mode_Entry_ACK :
 800c694:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <ProcessEnterMode+0xfe>
 800c69c:	239b      	movs	r3, #155	; 0x9b
 800c69e:	e000      	b.n	800c6a2 <ProcessEnterMode+0x100>
 800c6a0:	239c      	movs	r3, #156	; 0x9c
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7fc ffc3 	bl	8009630 <set_policy_state>
                                            PE_CBL_Mode_Entry_NAK);
      svdmh_out.SVDM.CommandType = mode_entered ? RESPONDER_ACK :
 800c6aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <ProcessEnterMode+0x114>
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	e000      	b.n	800c6b8 <ProcessEnterMode+0x116>
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c6bc:	f362 1387 	bfi	r3, r2, #6, #2
 800c6c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                                  RESPONDER_NAK;
    }

    /*  most of the message response will be the same whether we entered
     *  the mode or not */
    svdmh_out.SVDM.SVID = svdmh_in.SVDM.SVID;
 800c6c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c6c6:	867b      	strh	r3, [r7, #50]	; 0x32
    svdmh_out.SVDM.VDMType = STRUCTURED_VDM;
 800c6c8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    svdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800c6d4:	7afb      	ldrb	r3, [r7, #11]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f7fe fc67 	bl	800afac <CurrentSVDMVersion>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	f003 0303 	and.w	r3, r3, #3
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c6ea:	f362 1346 	bfi	r3, r2, #5, #2
 800c6ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    svdmh_out.SVDM.ObjPos = svdmh_in.SVDM.ObjPos;
 800c6f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c6f6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c700:	f362 0302 	bfi	r3, r2, #0, #3
 800c704:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    svdmh_out.SVDM.Command = ENTER_MODE;
 800c708:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c70c:	2204      	movs	r2, #4
 800c70e:	f362 0304 	bfi	r3, r2, #0, #5
 800c712:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    arr_out[0] = svdmh_out.object;
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	617b      	str	r3, [r7, #20]
    length_out = 1;
 800c71a:	2301      	movs	r3, #1
 800c71c:	63bb      	str	r3, [r7, #56]	; 0x38
    SendVdmMessage(port, sop, arr_out, length_out,port->original_policy_state_);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c724:	f107 0214 	add.w	r2, r7, #20
 800c728:	7af9      	ldrb	r1, [r7, #11]
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f000 f9ea 	bl	800cb08 <SendVdmMessage>
    return 0;
 800c734:	2300      	movs	r3, #0
 800c736:	e02f      	b.n	800c798 <ProcessEnterMode+0x1f6>
  }
  else { /* Incoming responses, ACKs, NAKs, BUSYs */
    if (svdmh_in.SVDM.CommandType != RESPONDER_ACK) {
 800c738:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c73c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b40      	cmp	r3, #64	; 0x40
 800c744:	d00e      	beq.n	800c764 <ProcessEnterMode+0x1c2>
      set_policy_state(port, PE_DFP_VDM_Mode_Entry_NAKed);
 800c746:	2187      	movs	r1, #135	; 0x87
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f7fc ff71 	bl	8009630 <set_policy_state>
      VdmEnterModeResult(port, FALSE, svdmh_in.SVDM.SVID,
 800c74e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
                         svdmh_in.SVDM.ObjPos);
 800c750:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c754:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c758:	b2db      	uxtb	r3, r3
      VdmEnterModeResult(port, FALSE, svdmh_in.SVDM.SVID,
 800c75a:	2100      	movs	r1, #0
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f000 fd7b 	bl	800d258 <VdmEnterModeResult>
 800c762:	e00d      	b.n	800c780 <ProcessEnterMode+0x1de>
    }
    else {
      set_policy_state(port, PE_DFP_VDM_Mode_Entry_ACKed);
 800c764:	2186      	movs	r1, #134	; 0x86
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7fc ff62 	bl	8009630 <set_policy_state>
      VdmEnterModeResult(port, TRUE, svdmh_in.SVDM.SVID, svdmh_in.SVDM.ObjPos);
 800c76c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c76e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c772:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2101      	movs	r1, #1
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f000 fd6c 	bl	800d258 <VdmEnterModeResult>
    }
    set_policy_state(port, port->original_policy_state_);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c786:	4619      	mov	r1, r3
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7fc ff51 	bl	8009630 <set_policy_state>
    port->vdm_expecting_response_ = FALSE;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
    return 0;
 800c796:	2300      	movs	r3, #0
  }
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3740      	adds	r7, #64	; 0x40
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <ProcessExitMode>:

FSC_S32 ProcessExitMode(struct Port *port, SopType sop, FSC_U32 *arr_in,
                        FSC_U32 length_in)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b092      	sub	sp, #72	; 0x48
 800c7a4:	af02      	add	r7, sp, #8
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	607a      	str	r2, [r7, #4]
 800c7aa:	603b      	str	r3, [r7, #0]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	72fb      	strb	r3, [r7, #11]
  doDataObject_t vdmh_in = {0};
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
  doDataObject_t vdmh_out = {0};
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	633b      	str	r3, [r7, #48]	; 0x30
  FSC_BOOL mode_exited;
  FSC_U32 arr[7] = {0};
 800c7b8:	f107 0314 	add.w	r3, r7, #20
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	605a      	str	r2, [r3, #4]
 800c7c2:	609a      	str	r2, [r3, #8]
 800c7c4:	60da      	str	r2, [r3, #12]
 800c7c6:	611a      	str	r2, [r3, #16]
 800c7c8:	615a      	str	r2, [r3, #20]
 800c7ca:	619a      	str	r2, [r3, #24]
  FSC_U32 length;

  vdmh_in.object = arr_in[0];
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	637b      	str	r3, [r7, #52]	; 0x34

  mode_exited = FALSE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (vdmh_in.SVDM.CommandType == INITIATOR) {
 800c7d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c7dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f040 80a7 	bne.w	800c936 <ProcessExitMode+0x196>
    port->original_policy_state_ = port->policy_state_;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
    if (sop == SOP_TYPE_SOP) {
 800c7f4:	7afb      	ldrb	r3, [r7, #11]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d130      	bne.n	800c85c <ProcessExitMode+0xbc>
      if (evalResponseToSopVdm(port, vdmh_in)) {
 800c7fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f7ff f8e7 	bl	800b9d0 <evalResponseToSopVdm>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00c      	beq.n	800c822 <ProcessExitMode+0x82>
        mode_exited = VdmModeExitRequest(port, vdmh_in.SVDM.SVID,
 800c808:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                                               vdmh_in.SVDM.ObjPos);
 800c80a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c80e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c812:	b2db      	uxtb	r3, r3
        mode_exited = VdmModeExitRequest(port, vdmh_in.SVDM.SVID,
 800c814:	461a      	mov	r2, r3
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 fcd9 	bl	800d1ce <VdmModeExitRequest>
 800c81c:	4603      	mov	r3, r0
 800c81e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      set_policy_state(port, PE_UFP_VDM_Mode_Exit);
 800c822:	2193      	movs	r1, #147	; 0x93
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f7fc ff03 	bl	8009630 <set_policy_state>
      set_policy_state(port, mode_exited ? PE_UFP_VDM_Mode_Exit_ACK :
 800c82a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d001      	beq.n	800c836 <ProcessExitMode+0x96>
 800c832:	2394      	movs	r3, #148	; 0x94
 800c834:	e000      	b.n	800c838 <ProcessExitMode+0x98>
 800c836:	2395      	movs	r3, #149	; 0x95
 800c838:	4619      	mov	r1, r3
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7fc fef8 	bl	8009630 <set_policy_state>
                                           PE_UFP_VDM_Mode_Exit_NAK);
      vdmh_out.SVDM.CommandType = mode_exited ? RESPONDER_ACK :
 800c840:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <ProcessExitMode+0xac>
 800c848:	2201      	movs	r2, #1
 800c84a:	e000      	b.n	800c84e <ProcessExitMode+0xae>
 800c84c:	2202      	movs	r2, #2
 800c84e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c852:	f362 1387 	bfi	r3, r2, #6, #2
 800c856:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800c85a:	e032      	b.n	800c8c2 <ProcessExitMode+0x122>
                                                RESPONDER_NAK ;
    }
    else if (sop == SOP_TYPE_SOP1) {
 800c85c:	7afb      	ldrb	r3, [r7, #11]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d12f      	bne.n	800c8c2 <ProcessExitMode+0x122>
      if (evalResponseToCblVdm(port, vdmh_in)) {
 800c862:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f7ff f8e2 	bl	800ba2e <evalResponseToCblVdm>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00c      	beq.n	800c88a <ProcessExitMode+0xea>
        mode_exited = VdmModeExitRequest(port, vdmh_in.SVDM.SVID,
 800c870:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
                                               vdmh_in.SVDM.ObjPos);
 800c872:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c876:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c87a:	b2db      	uxtb	r3, r3
        mode_exited = VdmModeExitRequest(port, vdmh_in.SVDM.SVID,
 800c87c:	461a      	mov	r2, r3
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f000 fca5 	bl	800d1ce <VdmModeExitRequest>
 800c884:	4603      	mov	r3, r0
 800c886:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      set_policy_state(port, PE_CBL_Mode_Exit);
 800c88a:	219d      	movs	r1, #157	; 0x9d
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f7fc fecf 	bl	8009630 <set_policy_state>
      set_policy_state(port, mode_exited? PE_CBL_Mode_Exit_ACK :
 800c892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <ProcessExitMode+0xfe>
 800c89a:	239e      	movs	r3, #158	; 0x9e
 800c89c:	e000      	b.n	800c8a0 <ProcessExitMode+0x100>
 800c89e:	239f      	movs	r3, #159	; 0x9f
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f7fc fec4 	bl	8009630 <set_policy_state>
                                          PE_CBL_Mode_Exit_NAK);
      vdmh_out.SVDM.CommandType = mode_exited ? RESPONDER_ACK : RESPONDER_NAK;
 800c8a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d001      	beq.n	800c8b4 <ProcessExitMode+0x114>
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	e000      	b.n	800c8b6 <ProcessExitMode+0x116>
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c8ba:	f362 1387 	bfi	r3, r2, #6, #2
 800c8be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    vdmh_out.SVDM.SVID = vdmh_in.SVDM.SVID;
 800c8c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8c4:	867b      	strh	r3, [r7, #50]	; 0x32
    vdmh_out.SVDM.VDMType = STRUCTURED_VDM;
 800c8c6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800c8d2:	7afb      	ldrb	r3, [r7, #11]
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f7fe fb68 	bl	800afac <CurrentSVDMVersion>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	f003 0303 	and.w	r3, r3, #3
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c8e8:	f362 1346 	bfi	r3, r2, #5, #2
 800c8ec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    vdmh_out.SVDM.ObjPos = vdmh_in.SVDM.ObjPos;
 800c8f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c8f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c8fe:	f362 0302 	bfi	r3, r2, #0, #3
 800c902:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    vdmh_out.SVDM.Command = EXIT_MODE;
 800c906:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c90a:	2205      	movs	r2, #5
 800c90c:	f362 0304 	bfi	r3, r2, #0, #5
 800c910:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    arr[0] = vdmh_out.object;
 800c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c916:	617b      	str	r3, [r7, #20]
    length = 1;
 800c918:	2301      	movs	r3, #1
 800c91a:	63bb      	str	r3, [r7, #56]	; 0x38
    SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c922:	f107 0214 	add.w	r2, r7, #20
 800c926:	7af9      	ldrb	r1, [r7, #11]
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 f8eb 	bl	800cb08 <SendVdmMessage>
    return 0;
 800c932:	2300      	movs	r3, #0
 800c934:	e044      	b.n	800c9c0 <ProcessExitMode+0x220>
  }
  else {
    if (vdmh_in.SVDM.CommandType != RESPONDER_ACK) {
 800c936:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c93a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b40      	cmp	r3, #64	; 0x40
 800c942:	d01d      	beq.n	800c980 <ProcessExitMode+0x1e0>
      VdmExitModeResult(port, FALSE, vdmh_in.SVDM.SVID, vdmh_in.SVDM.ObjPos);
 800c944:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c946:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c94a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2100      	movs	r1, #0
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f000 fcb1 	bl	800d2ba <VdmExitModeResult>
      /*  when exit mode not ACKed, go to hard reset state! */
      if (port->original_policy_state_ == PE_SRC_Ready) {
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c95e:	2b05      	cmp	r3, #5
 800c960:	d104      	bne.n	800c96c <ProcessExitMode+0x1cc>
        set_policy_state(port, PE_SRC_Hard_Reset);
 800c962:	2108      	movs	r1, #8
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f7fc fe63 	bl	8009630 <set_policy_state>
 800c96a:	e024      	b.n	800c9b6 <ProcessExitMode+0x216>
      }
      else if (port->original_policy_state_ == PE_SNK_Ready) {
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c972:	2b13      	cmp	r3, #19
 800c974:	d11f      	bne.n	800c9b6 <ProcessExitMode+0x216>
        set_policy_state(port, PE_SNK_Hard_Reset);
 800c976:	2114      	movs	r1, #20
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f7fc fe59 	bl	8009630 <set_policy_state>
 800c97e:	e01a      	b.n	800c9b6 <ProcessExitMode+0x216>
      else {
        /*  TODO: should never reach here, but you never know... */
      }
    }
    else {
      set_policy_state(port, PE_DFP_VDM_Mode_Exit_ACKed);
 800c980:	2189      	movs	r1, #137	; 0x89
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7fc fe54 	bl	8009630 <set_policy_state>
      VdmExitModeResult(port, TRUE, vdmh_in.SVDM.SVID, vdmh_in.SVDM.ObjPos);
 800c988:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c98a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c98e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2101      	movs	r1, #1
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 fc8f 	bl	800d2ba <VdmExitModeResult>
      set_policy_state(port, port->original_policy_state_);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f7fc fe43 	bl	8009630 <set_policy_state>
      TimerDisable(&port->vdm_timer_);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fd fd6b 	bl	800a48c <TimerDisable>
    }
    port->vdm_expecting_response_ = FALSE;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
    return 0;
 800c9be:	2300      	movs	r3, #0
  }
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3740      	adds	r7, #64	; 0x40
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <ProcessAttention>:

FSC_S32 ProcessAttention(struct Port *port, SopType sop, FSC_U32* arr_in,
                         FSC_U32 length_in)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	607a      	str	r2, [r7, #4]
 800c9d2:	603b      	str	r3, [r7, #0]
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	72fb      	strb	r3, [r7, #11]
  doDataObject_t vdmh_in = {0};
 800c9d8:	2300      	movs	r3, #0
 800c9da:	617b      	str	r3, [r7, #20]

  vdmh_in.object = arr_in[0];
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	617b      	str	r3, [r7, #20]
  port->original_policy_state_ = port->policy_state_;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
  set_policy_state(port, PE_RCV_VDM_Attention_Request);
 800c9ee:	2184      	movs	r1, #132	; 0x84
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f7fc fe1d 	bl	8009630 <set_policy_state>
  set_policy_state(port, port->original_policy_state_);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7fc fe16 	bl	8009630 <set_policy_state>

#ifdef FSC_HAVE_DP
  if (vdmh_in.SVDM.SVID == DP_SID)
 800ca04:	8afb      	ldrh	r3, [r7, #22]
 800ca06:	f64f 7201 	movw	r2, #65281	; 0xff01
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d104      	bne.n	800ca18 <ProcessAttention+0x50>
  {
    DP_ProcessCommand(port, arr_in);
 800ca0e:	6879      	ldr	r1, [r7, #4]
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7f8 f9ff 	bl	8004e14 <DP_ProcessCommand>
 800ca16:	e008      	b.n	800ca2a <ProcessAttention+0x62>
  }
  else
#endif /* FSC_HAVE_DP */
  {
    VdmInformAttention(port, vdmh_in.SVDM.SVID, vdmh_in.SVDM.ObjPos);
 800ca18:	8af9      	ldrh	r1, [r7, #22]
 800ca1a:	7d7b      	ldrb	r3, [r7, #21]
 800ca1c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	461a      	mov	r2, r3
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 fd8b 	bl	800d540 <VdmInformAttention>
  }

  return 0;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <ProcessSvidSpecific>:

FSC_S32 ProcessSvidSpecific(struct Port *port, SopType sop, FSC_U32 *arr_in,
                            FSC_U32 length_in)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b090      	sub	sp, #64	; 0x40
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	607a      	str	r2, [r7, #4]
 800ca3e:	603b      	str	r3, [r7, #0]
 800ca40:	460b      	mov	r3, r1
 800ca42:	72fb      	strb	r3, [r7, #11]
  doDataObject_t vdmh_out = {0};
 800ca44:	2300      	movs	r3, #0
 800ca46:	633b      	str	r3, [r7, #48]	; 0x30
  doDataObject_t vdmh_in = {0};
 800ca48:	2300      	movs	r3, #0
 800ca4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  FSC_U32 arr[7] = {0};
 800ca4c:	f107 0310 	add.w	r3, r7, #16
 800ca50:	2200      	movs	r2, #0
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	605a      	str	r2, [r3, #4]
 800ca56:	609a      	str	r2, [r3, #8]
 800ca58:	60da      	str	r2, [r3, #12]
 800ca5a:	611a      	str	r2, [r3, #16]
 800ca5c:	615a      	str	r2, [r3, #20]
 800ca5e:	619a      	str	r2, [r3, #24]
  FSC_U32 length;

  vdmh_in.object = arr_in[0];
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifdef FSC_HAVE_DP
  if (vdmh_in.SVDM.SVID == DP_SID) {
 800ca66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca68:	f64f 7201 	movw	r2, #65281	; 0xff01
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d108      	bne.n	800ca82 <ProcessSvidSpecific+0x4e>
    if (!DP_ProcessCommand(port, arr_in)) {
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f7f8 f9ce 	bl	8004e14 <DP_ProcessCommand>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <ProcessSvidSpecific+0x4e>
      return 0; /* DP code will send response, so return */
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e03e      	b.n	800cb00 <ProcessSvidSpecific+0xcc>
    }
  }
#endif /*  FSC_HAVE_DP */
  /*  in this case the command is unrecognized. Reply with a NAK. */
  vdmh_out.SVDM.SVID = vdmh_in.SVDM.SVID;
 800ca82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca84:	867b      	strh	r3, [r7, #50]	; 0x32
  vdmh_out.SVDM.VDMType = STRUCTURED_VDM;
 800ca86:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ca8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca8e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  vdmh_out.SVDM.Version = CurrentSVDMVersion(port, sop);
 800ca92:	7afb      	ldrb	r3, [r7, #11]
 800ca94:	4619      	mov	r1, r3
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f7fe fa88 	bl	800afac <CurrentSVDMVersion>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	f003 0303 	and.w	r3, r3, #3
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800caa8:	f362 1346 	bfi	r3, r2, #5, #2
 800caac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  vdmh_out.SVDM.ObjPos = 0;
 800cab0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800cab4:	f36f 0302 	bfc	r3, #0, #3
 800cab8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  vdmh_out.SVDM.CommandType = RESPONDER_NAK;
 800cabc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800cac0:	2202      	movs	r2, #2
 800cac2:	f362 1387 	bfi	r3, r2, #6, #2
 800cac6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  vdmh_out.SVDM.Command = vdmh_in.SVDM.Command;
 800caca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cace:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800cad8:	f362 0304 	bfi	r3, r2, #0, #5
 800cadc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  arr[0] = vdmh_out.object;
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	613b      	str	r3, [r7, #16]
  length = 1;
 800cae4:	2301      	movs	r3, #1
 800cae6:	637b      	str	r3, [r7, #52]	; 0x34
  SendVdmMessage(port, sop, arr, length, port->original_policy_state_);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800caee:	f107 0210 	add.w	r2, r7, #16
 800caf2:	7af9      	ldrb	r1, [r7, #11]
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 f805 	bl	800cb08 <SendVdmMessage>
  return 0;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3738      	adds	r7, #56	; 0x38
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <SendVdmMessage>:

/*  Internal utility functions */
void SendVdmMessage(struct Port *port, SopType sop, FSC_U32 *arr,
                    FSC_U32 length, PolicyState_t next_ps) {
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	460b      	mov	r3, r1
 800cb16:	72fb      	strb	r3, [r7, #11]
  FSC_U32 i;

  port->vdm_msg_length_ = length;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
  port->vdm_next_ps_ = next_ps;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f897 2020 	ldrb.w	r2, [r7, #32]
 800cb26:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
  for (i = 0; i < port->vdm_msg_length_; i++) {
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	617b      	str	r3, [r7, #20]
 800cb2e:	e00d      	b.n	800cb4c <SendVdmMessage+0x44>
    port->vdm_msg_obj_[i].object = arr[i];
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	4413      	add	r3, r2
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68f9      	ldr	r1, [r7, #12]
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	339e      	adds	r3, #158	; 0x9e
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	440b      	add	r3, r1
 800cb44:	605a      	str	r2, [r3, #4]
  for (i = 0; i < port->vdm_msg_length_; i++) {
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	617b      	str	r3, [r7, #20]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800cb52:	697a      	ldr	r2, [r7, #20]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d3eb      	bcc.n	800cb30 <SendVdmMessage+0x28>
  }
  port->vdm_msg_tx_sop_  = sop;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	7afa      	ldrb	r2, [r7, #11]
 800cb5c:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
  port->vdm_sending_data_ = TRUE;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
  TimerDisable(&port->vdm_timer_);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fd fc8c 	bl	800a48c <TimerDisable>
  set_policy_state(port, PE_GIVE_VDM);
 800cb74:	21a8      	movs	r1, #168	; 0xa8
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f7fc fd5a 	bl	8009630 <set_policy_state>
  PolicyGiveVdm(port);
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f7fe fab1 	bl	800b0e4 <PolicyGiveVdm>
  port->idle_ = FALSE;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800cb8a:	bf00      	nop
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <SendVdmMessageWithTimeout>:

void SendVdmMessageWithTimeout(struct Port *port, SopType sop, FSC_U32 *arr,
                               FSC_U32 length, PolicyState_t n_pe)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b086      	sub	sp, #24
 800cb96:	af02      	add	r7, sp, #8
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	603b      	str	r3, [r7, #0]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	72fb      	strb	r3, [r7, #11]
  SendVdmMessage(port, sop, arr, length, n_pe);
 800cba2:	7af9      	ldrb	r1, [r7, #11]
 800cba4:	7e3b      	ldrb	r3, [r7, #24]
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f7ff ffab 	bl	800cb08 <SendVdmMessage>
  port->vdm_expecting_response_ = TRUE;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
}
 800cbba:	bf00      	nop
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
	...

0800cbc4 <StartVdmTimer>:

void StartVdmTimer(struct Port *port)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /*  start the appropriate timer */
  switch (port->policy_state_) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800cbd2:	3b71      	subs	r3, #113	; 0x71
 800cbd4:	2b25      	cmp	r3, #37	; 0x25
 800cbd6:	d86a      	bhi.n	800ccae <StartVdmTimer+0xea>
 800cbd8:	a201      	add	r2, pc, #4	; (adr r2, 800cbe0 <StartVdmTimer+0x1c>)
 800cbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbde:	bf00      	nop
 800cbe0:	0800cc79 	.word	0x0800cc79
 800cbe4:	0800ccaf 	.word	0x0800ccaf
 800cbe8:	0800ccaf 	.word	0x0800ccaf
 800cbec:	0800cc79 	.word	0x0800cc79
 800cbf0:	0800ccaf 	.word	0x0800ccaf
 800cbf4:	0800ccaf 	.word	0x0800ccaf
 800cbf8:	0800cc79 	.word	0x0800cc79
 800cbfc:	0800ccaf 	.word	0x0800ccaf
 800cc00:	0800ccaf 	.word	0x0800ccaf
 800cc04:	0800ccaf 	.word	0x0800ccaf
 800cc08:	0800ccaf 	.word	0x0800ccaf
 800cc0c:	0800ccaf 	.word	0x0800ccaf
 800cc10:	0800ccaf 	.word	0x0800ccaf
 800cc14:	0800ccaf 	.word	0x0800ccaf
 800cc18:	0800ccaf 	.word	0x0800ccaf
 800cc1c:	0800ccaf 	.word	0x0800ccaf
 800cc20:	0800ccaf 	.word	0x0800ccaf
 800cc24:	0800ccaf 	.word	0x0800ccaf
 800cc28:	0800ccaf 	.word	0x0800ccaf
 800cc2c:	0800ccaf 	.word	0x0800ccaf
 800cc30:	0800cc8b 	.word	0x0800cc8b
 800cc34:	0800ccaf 	.word	0x0800ccaf
 800cc38:	0800ccaf 	.word	0x0800ccaf
 800cc3c:	0800cc9d 	.word	0x0800cc9d
 800cc40:	0800ccaf 	.word	0x0800ccaf
 800cc44:	0800ccaf 	.word	0x0800ccaf
 800cc48:	0800ccaf 	.word	0x0800ccaf
 800cc4c:	0800ccaf 	.word	0x0800ccaf
 800cc50:	0800ccaf 	.word	0x0800ccaf
 800cc54:	0800ccaf 	.word	0x0800ccaf
 800cc58:	0800ccaf 	.word	0x0800ccaf
 800cc5c:	0800ccaf 	.word	0x0800ccaf
 800cc60:	0800ccaf 	.word	0x0800ccaf
 800cc64:	0800ccaf 	.word	0x0800ccaf
 800cc68:	0800ccaf 	.word	0x0800ccaf
 800cc6c:	0800ccaf 	.word	0x0800ccaf
 800cc70:	0800ccaf 	.word	0x0800ccaf
 800cc74:	0800cc79 	.word	0x0800cc79
    case PE_INIT_PORT_VDM_Identity_Request:
    case PE_SRC_VDM_Identity_Request:
    case PE_INIT_VDM_SVIDs_Request:
    case PE_INIT_VDM_Modes_Request:
      TimerStart(&port->vdm_timer_, ktVDMSenderResponse);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800cc7e:	f646 1178 	movw	r1, #27000	; 0x6978
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fd fbe4 	bl	800a450 <TimerStart>
      break;
 800cc88:	e01a      	b.n	800ccc0 <StartVdmTimer+0xfc>
    case PE_DFP_VDM_Mode_Entry_Request:
      TimerStart(&port->vdm_timer_, ktVDMWaitModeEntry);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800cc90:	f24c 3150 	movw	r1, #50000	; 0xc350
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fd fbdb 	bl	800a450 <TimerStart>
      break;
 800cc9a:	e011      	b.n	800ccc0 <StartVdmTimer+0xfc>
    case PE_DFP_VDM_Mode_Exit_Request:
      TimerStart(&port->vdm_timer_, ktVDMWaitModeExit);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800cca2:	f24c 3150 	movw	r1, #50000	; 0xc350
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7fd fbd2 	bl	800a450 <TimerStart>
      break;
 800ccac:	e008      	b.n	800ccc0 <StartVdmTimer+0xfc>
//    case peDpRequestStatus:
//      TimerStart(&port->vdm_timer_, ktVDMSenderResponse);
//      break;
    default:
      /*  Time out immediately */
      TimerStart(&port->vdm_timer_, ktVDMSenderResponse);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800ccb4:	f646 1178 	movw	r1, #27000	; 0x6978
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fd fbc9 	bl	800a450 <TimerStart>
      return;
 800ccbe:	bf00      	nop
  }
}
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop

0800ccc8 <ResetPolicyState>:

void ResetPolicyState(struct Port *port, SopType sop) {
 800ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccca:	b0a3      	sub	sp, #140	; 0x8c
 800cccc:	af08      	add	r7, sp, #32
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  /*  fake empty id, etc, Discover Identity for NAKs */
  Identity id = {0};
 800ccd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	605a      	str	r2, [r3, #4]
 800ccde:	609a      	str	r2, [r3, #8]
 800cce0:	60da      	str	r2, [r3, #12]
 800cce2:	611a      	str	r2, [r3, #16]
 800cce4:	615a      	str	r2, [r3, #20]
 800cce6:	619a      	str	r2, [r3, #24]
  SvidInfo svid_info = {0};
 800cce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ccec:	2220      	movs	r2, #32
 800ccee:	2100      	movs	r1, #0
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 ffdf 	bl	800dcb4 <memset>
  ModesInfo modes_info = {0};
 800ccf6:	f107 030c 	add.w	r3, r7, #12
 800ccfa:	2220      	movs	r2, #32
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 ffd8 	bl	800dcb4 <memset>

  port->vdm_expecting_response_ = FALSE;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
  TimerDisable(&port->vdm_timer_);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fd fbba 	bl	800a48c <TimerDisable>

  if (port->policy_state_ == PE_GIVE_VDM) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800cd1e:	2ba8      	cmp	r3, #168	; 0xa8
 800cd20:	d107      	bne.n	800cd32 <ResetPolicyState+0x6a>
    set_policy_state(port, port->vdm_next_ps_);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7fc fc80 	bl	8009630 <set_policy_state>
 800cd30:	e01e      	b.n	800cd70 <ResetPolicyState+0xa8>
  }
  /* Reset from PE_GIVE_VDM is when message did not receive GoodCRC.
   * Reset from PE_VDM is when the message received GoodCRC. */
  else if (sop == SOP_TYPE_SOP1 &&
 800cd32:	78fb      	ldrb	r3, [r7, #3]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d11b      	bne.n	800cd70 <ResetPolicyState+0xa8>
      port->vdm_cbl_present_ == FALSE &&
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
  else if (sop == SOP_TYPE_SOP1 &&
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d116      	bne.n	800cd70 <ResetPolicyState+0xa8>
      (port->policy_state_ == PE_INIT_PORT_VDM_Identity_Request ||
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      port->vdm_cbl_present_ == FALSE &&
 800cd48:	2b71      	cmp	r3, #113	; 0x71
 800cd4a:	d004      	beq.n	800cd56 <ResetPolicyState+0x8e>
      port->policy_state_ == PE_SRC_VDM_Identity_Request)) {
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
      (port->policy_state_ == PE_INIT_PORT_VDM_Identity_Request ||
 800cd52:	2b96      	cmp	r3, #150	; 0x96
 800cd54:	d10c      	bne.n	800cd70 <ResetPolicyState+0xa8>
    /* Cable discover id was successfully sent but the cable did not respond
     * with VDM. Try switching to PD 2.0 */
    if (port->dpm_pd_30_srccab_ == TRUE) {
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d107      	bne.n	800cd70 <ResetPolicyState+0xa8>
      /* Set PD 2.0 for cable */
      port->dpm_pd_30_srccab_ = FALSE;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
      /* Reset auto VDM only when it is active. It will prevent GUI from
       * activating AUTO vdm discovery when sending SOP' discovery */
      port->vdm_check_cbl_ = TRUE;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
    }
  }

  if (sop == SOP_TYPE_SOP &&
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d108      	bne.n	800cd88 <ResetPolicyState+0xc0>
      port->vdm_auto_state_ != AUTO_VDM_DONE) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  if (sop == SOP_TYPE_SOP &&
 800cd7c:	2b07      	cmp	r3, #7
 800cd7e:	d003      	beq.n	800cd88 <ResetPolicyState+0xc0>
    port->vdm_auto_state_ = AUTO_VDM_DONE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2207      	movs	r2, #7
 800cd84:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  }

  switch (port->policy_state_) {
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800cd8e:	3b71      	subs	r3, #113	; 0x71
 800cd90:	2b32      	cmp	r3, #50	; 0x32
 800cd92:	f200 810c 	bhi.w	800cfae <ResetPolicyState+0x2e6>
 800cd96:	a201      	add	r2, pc, #4	; (adr r2, 800cd9c <ResetPolicyState+0xd4>)
 800cd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9c:	0800ce69 	.word	0x0800ce69
 800cda0:	0800cfaf 	.word	0x0800cfaf
 800cda4:	0800cfaf 	.word	0x0800cfaf
 800cda8:	0800cea1 	.word	0x0800cea1
 800cdac:	0800cfaf 	.word	0x0800cfaf
 800cdb0:	0800cfaf 	.word	0x0800cfaf
 800cdb4:	0800ced9 	.word	0x0800ced9
 800cdb8:	0800cfaf 	.word	0x0800cfaf
 800cdbc:	0800cfaf 	.word	0x0800cfaf
 800cdc0:	0800cfaf 	.word	0x0800cfaf
 800cdc4:	0800cfaf 	.word	0x0800cfaf
 800cdc8:	0800cfaf 	.word	0x0800cfaf
 800cdcc:	0800cfaf 	.word	0x0800cfaf
 800cdd0:	0800cfaf 	.word	0x0800cfaf
 800cdd4:	0800cfaf 	.word	0x0800cfaf
 800cdd8:	0800cfaf 	.word	0x0800cfaf
 800cddc:	0800cfaf 	.word	0x0800cfaf
 800cde0:	0800cfaf 	.word	0x0800cfaf
 800cde4:	0800cfaf 	.word	0x0800cfaf
 800cde8:	0800cfaf 	.word	0x0800cfaf
 800cdec:	0800cf11 	.word	0x0800cf11
 800cdf0:	0800cfaf 	.word	0x0800cfaf
 800cdf4:	0800cfaf 	.word	0x0800cfaf
 800cdf8:	0800cf35 	.word	0x0800cf35
 800cdfc:	0800cfaf 	.word	0x0800cfaf
 800ce00:	0800cfaf 	.word	0x0800cfaf
 800ce04:	0800cfaf 	.word	0x0800cfaf
 800ce08:	0800cfaf 	.word	0x0800cfaf
 800ce0c:	0800cfaf 	.word	0x0800cfaf
 800ce10:	0800cfaf 	.word	0x0800cfaf
 800ce14:	0800cfaf 	.word	0x0800cfaf
 800ce18:	0800cfaf 	.word	0x0800cfaf
 800ce1c:	0800cfaf 	.word	0x0800cfaf
 800ce20:	0800cfaf 	.word	0x0800cfaf
 800ce24:	0800cfaf 	.word	0x0800cfaf
 800ce28:	0800cfaf 	.word	0x0800cfaf
 800ce2c:	0800cfaf 	.word	0x0800cfaf
 800ce30:	0800cf77 	.word	0x0800cf77
 800ce34:	0800cfaf 	.word	0x0800cfaf
 800ce38:	0800cfaf 	.word	0x0800cfaf
 800ce3c:	0800cfaf 	.word	0x0800cfaf
 800ce40:	0800cfaf 	.word	0x0800cfaf
 800ce44:	0800cfaf 	.word	0x0800cfaf
 800ce48:	0800cfaf 	.word	0x0800cfaf
 800ce4c:	0800cfaf 	.word	0x0800cfaf
 800ce50:	0800cfaf 	.word	0x0800cfaf
 800ce54:	0800cfaf 	.word	0x0800cfaf
 800ce58:	0800cfaf 	.word	0x0800cfaf
 800ce5c:	0800cfaf 	.word	0x0800cfaf
 800ce60:	0800cfc1 	.word	0x0800cfc1
 800ce64:	0800cfc1 	.word	0x0800cfc1
  case PE_INIT_PORT_VDM_Identity_Request:
    /* informing of a NAK */
    set_policy_state(port, PE_INIT_PORT_VDM_Identity_NAKed);
 800ce68:	2173      	movs	r1, #115	; 0x73
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7fc fbe0 	bl	8009630 <set_policy_state>
    VdmInformIdentity(port, FALSE, sop, id);
 800ce70:	78fe      	ldrb	r6, [r7, #3]
 800ce72:	466d      	mov	r5, sp
 800ce74:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800ce78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ce80:	e885 0003 	stmia.w	r5, {r0, r1}
 800ce84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce86:	4632      	mov	r2, r6
 800ce88:	2100      	movs	r1, #0
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fa3d 	bl	800d30a <VdmInformIdentity>
    set_policy_state(port, port->original_policy_state_);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800ce96:	4619      	mov	r1, r3
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7fc fbc9 	bl	8009630 <set_policy_state>
    break;
 800ce9e:	e090      	b.n	800cfc2 <ResetPolicyState+0x2fa>
  case PE_INIT_VDM_SVIDs_Request:
    set_policy_state(port, PE_INIT_VDM_SVIDs_NAKed);
 800cea0:	2176      	movs	r1, #118	; 0x76
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7fc fbc4 	bl	8009630 <set_policy_state>
    VdmInformSvids(port, FALSE, sop, svid_info);
 800cea8:	78fe      	ldrb	r6, [r7, #3]
 800ceaa:	466d      	mov	r5, sp
 800ceac:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ceb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ceb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ceb8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	4632      	mov	r2, r6
 800cec0:	2100      	movs	r1, #0
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fa6c 	bl	800d3a0 <VdmInformSvids>
    set_policy_state(port, port->original_policy_state_);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800cece:	4619      	mov	r1, r3
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f7fc fbad 	bl	8009630 <set_policy_state>
    break;
 800ced6:	e074      	b.n	800cfc2 <ResetPolicyState+0x2fa>
  case PE_INIT_VDM_Modes_Request:
    set_policy_state(port, PE_INIT_VDM_Modes_NAKed);
 800ced8:	2179      	movs	r1, #121	; 0x79
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7fc fba8 	bl	8009630 <set_policy_state>
    VdmInformModes(port, FALSE, sop, modes_info);
 800cee0:	78fe      	ldrb	r6, [r7, #3]
 800cee2:	466d      	mov	r5, sp
 800cee4:	f107 0410 	add.w	r4, r7, #16
 800cee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ceec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cef0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	4632      	mov	r2, r6
 800cef8:	2100      	movs	r1, #0
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fab5 	bl	800d46a <VdmInformModes>
    set_policy_state(port, port->original_policy_state_);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7fc fb91 	bl	8009630 <set_policy_state>
    break;
 800cf0e:	e058      	b.n	800cfc2 <ResetPolicyState+0x2fa>
  case PE_DFP_VDM_Mode_Entry_Request:
    set_policy_state(port, PE_DFP_VDM_Mode_Entry_NAKed);
 800cf10:	2187      	movs	r1, #135	; 0x87
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7fc fb8c 	bl	8009630 <set_policy_state>
    VdmEnterModeResult(port, FALSE, 0, 0);
 800cf18:	2300      	movs	r3, #0
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f99a 	bl	800d258 <VdmEnterModeResult>
    set_policy_state(port, port->original_policy_state_);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7fc fb7f 	bl	8009630 <set_policy_state>
    break;
 800cf32:	e046      	b.n	800cfc2 <ResetPolicyState+0x2fa>
  case PE_DFP_VDM_Mode_Exit_Request:
    VdmExitModeResult(port, FALSE, 0, 0);
 800cf34:	2300      	movs	r3, #0
 800cf36:	2200      	movs	r2, #0
 800cf38:	2100      	movs	r1, #0
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f9bd 	bl	800d2ba <VdmExitModeResult>

    /*  if Mode Exit request is NAKed, go to hard reset state! */
    if (port->original_policy_state_ == PE_SNK_Ready) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800cf46:	2b13      	cmp	r3, #19
 800cf48:	d104      	bne.n	800cf54 <ResetPolicyState+0x28c>
      set_policy_state(port, PE_SNK_Hard_Reset);
 800cf4a:	2114      	movs	r1, #20
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7fc fb6f 	bl	8009630 <set_policy_state>
 800cf52:	e008      	b.n	800cf66 <ResetPolicyState+0x29e>
    }
    else if (port->original_policy_state_ == PE_SRC_Ready) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800cf5a:	2b05      	cmp	r3, #5
 800cf5c:	d103      	bne.n	800cf66 <ResetPolicyState+0x29e>
      set_policy_state(port, PE_SRC_Hard_Reset);
 800cf5e:	2108      	movs	r1, #8
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7fc fb65 	bl	8009630 <set_policy_state>
    }
    else {
      /*  TODO: should never reach here, but... */
    }
    set_policy_state(port, port->original_policy_state_);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7fc fb5e 	bl	8009630 <set_policy_state>
 800cf74:	e025      	b.n	800cfc2 <ResetPolicyState+0x2fa>
    return;
  case PE_SRC_VDM_Identity_Request:
    /*  informing of a NAK from cable */
    set_policy_state(port, PE_SRC_VDM_Identity_NAKed);
 800cf76:	2198      	movs	r1, #152	; 0x98
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7fc fb59 	bl	8009630 <set_policy_state>
    VdmInformIdentity(port, FALSE, sop, id);
 800cf7e:	78fe      	ldrb	r6, [r7, #3]
 800cf80:	466d      	mov	r5, sp
 800cf82:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800cf86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cf8e:	e885 0003 	stmia.w	r5, {r0, r1}
 800cf92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf94:	4632      	mov	r2, r6
 800cf96:	2100      	movs	r1, #0
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f9b6 	bl	800d30a <VdmInformIdentity>
    set_policy_state(port, port->original_policy_state_);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f7fc fb42 	bl	8009630 <set_policy_state>
    break;
 800cfac:	e009      	b.n	800cfc2 <ResetPolicyState+0x2fa>
  case PE_DFP_CBL_Send_Soft_Reset:
  case PE_DFP_CBL_Send_Cable_Reset:
    /* Allow PE to continue to reset states */
    break;
  default:
    set_policy_state(port, port->original_policy_state_);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7fc fb3a 	bl	8009630 <set_policy_state>
    break;
 800cfbc:	bf00      	nop
 800cfbe:	e000      	b.n	800cfc2 <ResetPolicyState+0x2fa>
    break;
 800cfc0:	bf00      	nop
  }
}
 800cfc2:	376c      	adds	r7, #108	; 0x6c
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfc8 <VdmRequestIdentityInfo>:

/*  VDM "Callback" functionality (TODO) */
/*  TODO: These are the "vdm callback" functions from the 30x */
Identity VdmRequestIdentityInfo(struct Port *port, SopType sop)
{
 800cfc8:	b5b0      	push	{r4, r5, r7, lr}
 800cfca:	b08c      	sub	sp, #48	; 0x30
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	71fb      	strb	r3, [r7, #7]
  Identity id = {0};
 800cfd6:	f107 0314 	add.w	r3, r7, #20
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	605a      	str	r2, [r3, #4]
 800cfe0:	609a      	str	r2, [r3, #8]
 800cfe2:	60da      	str	r2, [r3, #12]
 800cfe4:	611a      	str	r2, [r3, #16]
 800cfe6:	615a      	str	r2, [r3, #20]
 800cfe8:	619a      	str	r2, [r3, #24]
  if (port->mode_enable_ == TRUE &&
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	f893 329f 	ldrb.w	r3, [r3, #671]	; 0x29f
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d109      	bne.n	800d008 <VdmRequestIdentityInfo+0x40>
      port->svid_enable_ == TRUE)
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
  if (port->mode_enable_ == TRUE &&
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d104      	bne.n	800d008 <VdmRequestIdentityInfo+0x40>
  {
    id.id_header.modal_op_supported = TRUE;
 800cffe:	7dbb      	ldrb	r3, [r7, #22]
 800d000:	f043 0320 	orr.w	r3, r3, #32
 800d004:	75bb      	strb	r3, [r7, #22]
 800d006:	e003      	b.n	800d010 <VdmRequestIdentityInfo+0x48>
  }
  else
  {
    id.id_header.modal_op_supported = FALSE;
 800d008:	7dbb      	ldrb	r3, [r7, #22]
 800d00a:	f36f 1345 	bfc	r3, #5, #1
 800d00e:	75bb      	strb	r3, [r7, #22]
  }
  id.nack = FALSE;
 800d010:	2300      	movs	r3, #0
 800d012:	753b      	strb	r3, [r7, #20]
  id.id_header.usb_vid = USB_VID_SOP;
 800d014:	f44f 639d 	mov.w	r3, #1256	; 0x4e8
 800d018:	833b      	strh	r3, [r7, #24]
  id.id_header.product_type_ufp = Product_Type_UFP_SOP;
 800d01a:	7dbb      	ldrb	r3, [r7, #22]
 800d01c:	2205      	movs	r2, #5
 800d01e:	f362 0384 	bfi	r3, r2, #2, #3
 800d022:	75bb      	strb	r3, [r7, #22]
  if (DPM_CurrentSpecRev(port, sop) > PDSpecRev2p0)
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	4619      	mov	r1, r3
 800d028:	68b8      	ldr	r0, [r7, #8]
 800d02a:	f7f8 f9b3 	bl	8005394 <DPM_CurrentSpecRev>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b01      	cmp	r3, #1
 800d032:	d903      	bls.n	800d03c <VdmRequestIdentityInfo+0x74>
  {
    id.id_header.product_type_dfp = Product_Type_DFP_SOP;
 800d034:	7dfb      	ldrb	r3, [r7, #23]
 800d036:	f36f 0302 	bfc	r3, #0, #3
 800d03a:	75fb      	strb	r3, [r7, #23]
  }
  id.has_product_vdo = TRUE;
 800d03c:	2301      	movs	r3, #1
 800d03e:	f887 3020 	strb.w	r3, [r7, #32]
  id.cert_stat_vdo.test_id = XID_SOP;
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	f36f 0313 	bfc	r3, #0, #20
 800d048:	61fb      	str	r3, [r7, #28]
  id.product_vdo.usb_product_id = PID_SOP;
 800d04a:	2300      	movs	r3, #0
 800d04c:	847b      	strh	r3, [r7, #34]	; 0x22
  id.product_vdo.bcd_device = bcdDevice_SOP;
 800d04e:	2300      	movs	r3, #0
 800d050:	84bb      	strh	r3, [r7, #36]	; 0x24

  return id;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	461d      	mov	r5, r3
 800d056:	f107 0414 	add.w	r4, r7, #20
 800d05a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d05c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d05e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d062:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	3730      	adds	r7, #48	; 0x30
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bdb0      	pop	{r4, r5, r7, pc}

0800d06e <VdmRequestSvidInfo>:

SvidInfo VdmRequestSvidInfo(struct Port *port)
{
 800d06e:	b5b0      	push	{r4, r5, r7, lr}
 800d070:	b08a      	sub	sp, #40	; 0x28
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
  SvidInfo svid_info = {0};
 800d078:	f107 0308 	add.w	r3, r7, #8
 800d07c:	2220      	movs	r2, #32
 800d07e:	2100      	movs	r1, #0
 800d080:	4618      	mov	r0, r3
 800d082:	f000 fe17 	bl	800dcb4 <memset>
  if (port->svid_enable_ == TRUE)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d108      	bne.n	800d0a2 <VdmRequestSvidInfo+0x34>
  {
    svid_info.nack = FALSE;
 800d090:	2300      	movs	r3, #0
 800d092:	723b      	strb	r3, [r7, #8]
    svid_info.num_svids = 1;
 800d094:	2301      	movs	r3, #1
 800d096:	60fb      	str	r3, [r7, #12]
    svid_info.svids[0] = port->my_svid_;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800d09e:	823b      	strh	r3, [r7, #16]
 800d0a0:	e005      	b.n	800d0ae <VdmRequestSvidInfo+0x40>
  }
  else
  {
    svid_info.nack = TRUE;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	723b      	strb	r3, [r7, #8]
    svid_info.num_svids = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
    svid_info.svids[0] = 0x0000;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	823b      	strh	r3, [r7, #16]
  }
  return svid_info;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	461d      	mov	r5, r3
 800d0b2:	f107 0408 	add.w	r4, r7, #8
 800d0b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d0ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d0be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	3728      	adds	r7, #40	; 0x28
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bdb0      	pop	{r4, r5, r7, pc}

0800d0ca <VdmRequestModesInfo>:

ModesInfo VdmRequestModesInfo(struct Port *port, FSC_U16 svid)
{
 800d0ca:	b5b0      	push	{r4, r5, r7, lr}
 800d0cc:	b08c      	sub	sp, #48	; 0x30
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	60f8      	str	r0, [r7, #12]
 800d0d2:	60b9      	str	r1, [r7, #8]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	80fb      	strh	r3, [r7, #6]
  ModesInfo modes_info = {0};
 800d0d8:	f107 0310 	add.w	r3, r7, #16
 800d0dc:	2220      	movs	r2, #32
 800d0de:	2100      	movs	r1, #0
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fde7 	bl	800dcb4 <memset>
  if (port->svid_enable_ == TRUE &&
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d11f      	bne.n	800d130 <VdmRequestModesInfo+0x66>
      port->mode_enable_ == TRUE &&
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	f893 329f 	ldrb.w	r3, [r3, #671]	; 0x29f
  if (port->svid_enable_ == TRUE &&
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d11a      	bne.n	800d130 <VdmRequestModesInfo+0x66>
      svid == port->my_svid_) {
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
      port->mode_enable_ == TRUE &&
 800d100:	88fa      	ldrh	r2, [r7, #6]
 800d102:	429a      	cmp	r2, r3
 800d104:	d114      	bne.n	800d130 <VdmRequestModesInfo+0x66>
    modes_info.nack = FALSE;
 800d106:	2300      	movs	r3, #0
 800d108:	743b      	strb	r3, [r7, #16]
    modes_info.svid = svid;
 800d10a:	88fb      	ldrh	r3, [r7, #6]
 800d10c:	827b      	strh	r3, [r7, #18]
    modes_info.num_modes = 1;
 800d10e:	2301      	movs	r3, #1
 800d110:	617b      	str	r3, [r7, #20]
#ifdef FSC_HAVE_DP
    if (svid == DP_SID)
 800d112:	88fb      	ldrh	r3, [r7, #6]
 800d114:	f64f 7201 	movw	r2, #65281	; 0xff01
 800d118:	4293      	cmp	r3, r2
 800d11a:	d104      	bne.n	800d126 <VdmRequestModesInfo+0x5c>
    {
      modes_info.modes[0] = port->display_port_data_.DpCap.word;
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d122:	61bb      	str	r3, [r7, #24]
    if (svid == DP_SID)
 800d124:	e00c      	b.n	800d140 <VdmRequestModesInfo+0x76>
    }
    else
#endif
    {
      modes_info.modes[0] = port->my_mode_;
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d12c:	61bb      	str	r3, [r7, #24]
    if (svid == DP_SID)
 800d12e:	e007      	b.n	800d140 <VdmRequestModesInfo+0x76>
    }
  }
  else {
    modes_info.nack = TRUE;
 800d130:	2301      	movs	r3, #1
 800d132:	743b      	strb	r3, [r7, #16]
    modes_info.svid = svid;
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	827b      	strh	r3, [r7, #18]
    modes_info.num_modes = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	617b      	str	r3, [r7, #20]
    modes_info.modes[0] = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	61bb      	str	r3, [r7, #24]
  }
  return modes_info;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	461d      	mov	r5, r3
 800d144:	f107 0410 	add.w	r4, r7, #16
 800d148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d14a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d14c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d150:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	3730      	adds	r7, #48	; 0x30
 800d158:	46bd      	mov	sp, r7
 800d15a:	bdb0      	pop	{r4, r5, r7, pc}

0800d15c <VdmModeEntryRequest>:

FSC_BOOL VdmModeEntryRequest(struct Port *port, FSC_U16 svid,
                             FSC_U32 mode_index)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	460b      	mov	r3, r1
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	817b      	strh	r3, [r7, #10]
  if ((port->svid_enable_ == TRUE) &&
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
 800d170:	2b01      	cmp	r3, #1
 800d172:	d127      	bne.n	800d1c4 <VdmModeEntryRequest+0x68>
      (port->mode_enable_ == TRUE) &&
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f893 329f 	ldrb.w	r3, [r3, #671]	; 0x29f
  if ((port->svid_enable_ == TRUE) &&
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d122      	bne.n	800d1c4 <VdmModeEntryRequest+0x68>
      (svid == port->my_svid_))
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
      (port->mode_enable_ == TRUE) &&
 800d184:	897a      	ldrh	r2, [r7, #10]
 800d186:	429a      	cmp	r2, r3
 800d188:	d11c      	bne.n	800d1c4 <VdmModeEntryRequest+0x68>
  {
    if (SVID1_mode1_enter_SOP && mode_index == 1)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d119      	bne.n	800d1c4 <VdmModeEntryRequest+0x68>
    {
      port->mode_entered_ = TRUE;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
#ifdef FSC_HAVE_DP
      if (port->my_svid_ == DP_SID)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
 800d19e:	f64f 7201 	movw	r2, #65281	; 0xff01
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d103      	bne.n	800d1ae <VdmModeEntryRequest+0x52>
      {
        port->display_port_data_.DpModeEntered = mode_index;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
      }
#endif /*  FSC_HAVE_DP */
      notify_observers(EVENT_MODE_ENTER_SUCCESS, port->port_id_, 0);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d1bc:	f7f8 f938 	bl	8005430 <notify_observers>
      return TRUE;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e000      	b.n	800d1c6 <VdmModeEntryRequest+0x6a>
    }
  }
  return FALSE;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <VdmModeExitRequest>:

FSC_BOOL VdmModeExitRequest(struct Port *port, FSC_U16 svid, FSC_U32 mode_index)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	607a      	str	r2, [r7, #4]
 800d1da:	817b      	strh	r3, [r7, #10]
  if (port->mode_entered_ == TRUE &&
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d133      	bne.n	800d24e <VdmModeExitRequest+0x80>
      svid == port->my_svid_ &&
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	; 0x2a0
  if (port->mode_entered_ == TRUE &&
 800d1ec:	897a      	ldrh	r2, [r7, #10]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d12d      	bne.n	800d24e <VdmModeExitRequest+0x80>
      svid == port->my_svid_ &&
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d12a      	bne.n	800d24e <VdmModeExitRequest+0x80>
      mode_index == 1) {
    port->mode_entered_ = FALSE;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

#ifdef FSC_HAVE_DP
    if (port->display_port_data_.DpModeEntered &&
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d206:	2b00      	cmp	r3, #0
 800d208:	d016      	beq.n	800d238 <VdmModeExitRequest+0x6a>
        (port->display_port_data_.DpModeEntered == mode_index) &&
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
    if (port->display_port_data_.DpModeEntered &&
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	429a      	cmp	r2, r3
 800d214:	d110      	bne.n	800d238 <VdmModeExitRequest+0x6a>
        (port->display_port_data_.DpModeEntered == mode_index) &&
 800d216:	897b      	ldrh	r3, [r7, #10]
 800d218:	f64f 7201 	movw	r2, #65281	; 0xff01
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d10b      	bne.n	800d238 <VdmModeExitRequest+0x6a>
        (svid == DP_SID))
    {
      port->display_port_data_.DpModeEntered = 0;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
      port->display_port_data_.DpConfigured = FALSE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
      platform_dp_enable_pins(FALSE, 0);
 800d230:	2100      	movs	r1, #0
 800d232:	2000      	movs	r0, #0
 800d234:	f7f3 fd37 	bl	8000ca6 <platform_dp_enable_pins>
    }
#endif /*  FSC_HAVE_DP */
    notify_observers(EVENT_MODE_EXIT_SUCCESS, port->port_id_, 0);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	2200      	movs	r2, #0
 800d240:	4619      	mov	r1, r3
 800d242:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d246:	f7f8 f8f3 	bl	8005430 <notify_observers>
    return TRUE;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e000      	b.n	800d250 <VdmModeExitRequest+0x82>
  }
  return FALSE;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <VdmEnterModeResult>:

FSC_BOOL VdmEnterModeResult(struct Port *port, FSC_BOOL success, FSC_U16 svid,
                            FSC_U32 mode_index)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	607b      	str	r3, [r7, #4]
 800d262:	460b      	mov	r3, r1
 800d264:	72fb      	strb	r3, [r7, #11]
 800d266:	4613      	mov	r3, r2
 800d268:	813b      	strh	r3, [r7, #8]
  port->auto_mode_entry_pos_ = -1;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	22ff      	movs	r2, #255	; 0xff
 800d26e:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
  port->mode_entered_ = FALSE;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
//  port->display_port_data_.DpModeEntered = 0;
  if (success == TRUE)
 800d27a:	7afb      	ldrb	r3, [r7, #11]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d117      	bne.n	800d2b0 <VdmEnterModeResult+0x58>
  {
    port->mode_entered_ = TRUE;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
#ifdef FSC_HAVE_DP
    if (svid == DP_SID)
 800d288:	893b      	ldrh	r3, [r7, #8]
 800d28a:	f64f 7201 	movw	r2, #65281	; 0xff01
 800d28e:	4293      	cmp	r3, r2
 800d290:	d103      	bne.n	800d29a <VdmEnterModeResult+0x42>
    {
      port->display_port_data_.DpModeEntered = mode_index;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    }
#endif
    notify_observers(EVENT_MODE_ENTER_SUCCESS, port->port_id_, 0);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d2a8:	f7f8 f8c2 	bl	8005430 <notify_observers>
    return TRUE;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e000      	b.n	800d2b2 <VdmEnterModeResult+0x5a>
  }

  return FALSE;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <VdmExitModeResult>:

void VdmExitModeResult(struct Port *port, FSC_BOOL success, FSC_U16 svid,
                       FSC_U32 mode_index)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b084      	sub	sp, #16
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	60f8      	str	r0, [r7, #12]
 800d2c2:	607b      	str	r3, [r7, #4]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	72fb      	strb	r3, [r7, #11]
 800d2c8:	4613      	mov	r3, r2
 800d2ca:	813b      	strh	r3, [r7, #8]
#ifdef FSC_HAVE_DP
  if (svid == DP_SID &&
 800d2cc:	893b      	ldrh	r3, [r7, #8]
 800d2ce:	f64f 7201 	movw	r2, #65281	; 0xff01
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d109      	bne.n	800d2ea <VdmExitModeResult+0x30>
      port->display_port_data_.DpModeEntered == mode_index)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
  if (svid == DP_SID &&
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d103      	bne.n	800d2ea <VdmExitModeResult+0x30>
  {
    port->display_port_data_.DpModeEntered = 0;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }
#endif /*  FSC_HAVE_DP */
  if (success == TRUE)
 800d2ea:	7afb      	ldrb	r3, [r7, #11]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d108      	bne.n	800d302 <VdmExitModeResult+0x48>
      notify_observers(EVENT_MODE_EXIT_SUCCESS, port->port_id_, 0);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d2fe:	f7f8 f897 	bl	8005430 <notify_observers>
}
 800d302:	bf00      	nop
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <VdmInformIdentity>:

void VdmInformIdentity(struct Port *port, FSC_BOOL success, SopType sop,
                       Identity id)
{
 800d30a:	b082      	sub	sp, #8
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	617b      	str	r3, [r7, #20]
 800d316:	460b      	mov	r3, r1
 800d318:	70fb      	strb	r3, [r7, #3]
 800d31a:	4613      	mov	r3, r2
 800d31c:	70bb      	strb	r3, [r7, #2]
  if (sop == SOP_TYPE_SOP1) {
 800d31e:	78bb      	ldrb	r3, [r7, #2]
 800d320:	2b01      	cmp	r3, #1
 800d322:	d127      	bne.n	800d374 <VdmInformIdentity+0x6a>
    if (success) {
 800d324:	78fb      	ldrb	r3, [r7, #3]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d01e      	beq.n	800d368 <VdmInformIdentity+0x5e>
      DPM_SetSOP1Details(port, success, port->policy_rx_header_.SpecRevision,
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800d330:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d334:	b2db      	uxtb	r3, r3
 800d336:	461a      	mov	r2, r3
                         id.cable_vdo.vbus_current_handling_cap == VBUS_5A);
 800d338:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
      DPM_SetSOP1Details(port, success, port->policy_rx_header_.SpecRevision,
 800d33c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d340:	b2db      	uxtb	r3, r3
 800d342:	2b80      	cmp	r3, #128	; 0x80
 800d344:	bf0c      	ite	eq
 800d346:	2301      	moveq	r3, #1
 800d348:	2300      	movne	r3, #0
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	78f9      	ldrb	r1, [r7, #3]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7f7 fff7 	bl	8005342 <DPM_SetSOP1Details>
      notify_observers(EVENT_CBL_IDENTITY_RECEIVED, port->port_id_, 0);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	b29b      	uxth	r3, r3
 800d35a:	2200      	movs	r2, #0
 800d35c:	4619      	mov	r1, r3
 800d35e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d362:	f7f8 f865 	bl	8005430 <notify_observers>
 800d366:	e005      	b.n	800d374 <VdmInformIdentity+0x6a>
    }
    else {
      DPM_SetSOP1Details(port, success, 0, 0);
 800d368:	78f9      	ldrb	r1, [r7, #3]
 800d36a:	2300      	movs	r3, #0
 800d36c:	2200      	movs	r2, #0
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7f7 ffe7 	bl	8005342 <DPM_SetSOP1Details>
    }
  }
  if (sop == SOP_TYPE_SOP)
 800d374:	78bb      	ldrb	r3, [r7, #2]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <VdmInformIdentity+0x88>
  {
      if (success == TRUE)
 800d37a:	78fb      	ldrb	r3, [r7, #3]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d108      	bne.n	800d392 <VdmInformIdentity+0x88>
          notify_observers(EVENT_IDENTITY_RECEIVED, port->port_id_, 0);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	b29b      	uxth	r3, r3
 800d386:	2200      	movs	r2, #0
 800d388:	4619      	mov	r1, r3
 800d38a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d38e:	f7f8 f84f 	bl	8005430 <notify_observers>
  }
}
 800d392:	bf00      	nop
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d39c:	b002      	add	sp, #8
 800d39e:	4770      	bx	lr

0800d3a0 <VdmInformSvids>:

void VdmInformSvids(struct Port *port, FSC_BOOL success, SopType sop,
                    SvidInfo svid_info)
{
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	61fb      	str	r3, [r7, #28]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	70bb      	strb	r3, [r7, #2]
  FSC_U32 i;
  /* Reset the known index */
  port->svid_discv_idx_ = -1;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3ba:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
  /* Assume we are are going to be done */
  port->svid_discvry_done_ = TRUE;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  if (success == TRUE)
 800d3c6:	78fb      	ldrb	r3, [r7, #3]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d147      	bne.n	800d45c <VdmInformSvids+0xbc>
  {
    port->core_svid_info_.num_svids = svid_info.num_svids;
 800d3cc:	6a3a      	ldr	r2, [r7, #32]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    for (i = 0; (i < svid_info.num_svids) && (i < MAX_NUM_SVIDS); i++)
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	e022      	b.n	800d420 <VdmInformSvids+0x80>
    {
      port->core_svid_info_.svids[i] = svid_info.svids[i];
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	f107 0218 	add.w	r2, r7, #24
 800d3e4:	4413      	add	r3, r2
 800d3e6:	8899      	ldrh	r1, [r3, #4]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d3f0:	005b      	lsls	r3, r3, #1
 800d3f2:	4413      	add	r3, r2
 800d3f4:	460a      	mov	r2, r1
 800d3f6:	809a      	strh	r2, [r3, #4]
      if (port->core_svid_info_.svids[i] == SVID1_SOP)
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d400:	005b      	lsls	r3, r3, #1
 800d402:	4413      	add	r3, r2
 800d404:	889b      	ldrh	r3, [r3, #4]
 800d406:	f64f 7201 	movw	r2, #65281	; 0xff01
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d105      	bne.n	800d41a <VdmInformSvids+0x7a>
      {
        port->svid_discv_idx_ = i;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	b21a      	sxth	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
        break;
 800d418:	e009      	b.n	800d42e <VdmInformSvids+0x8e>
    for (i = 0; (i < svid_info.num_svids) && (i < MAX_NUM_SVIDS); i++)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3301      	adds	r3, #1
 800d41e:	60fb      	str	r3, [r7, #12]
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	429a      	cmp	r2, r3
 800d426:	d202      	bcs.n	800d42e <VdmInformSvids+0x8e>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2b0b      	cmp	r3, #11
 800d42c:	d9d5      	bls.n	800d3da <VdmInformSvids+0x3a>
      }
    }

    if (port->svid_discv_idx_ < 0 &&
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f9b3 32aa 	ldrsh.w	r3, [r3, #682]	; 0x2aa
 800d434:	2b00      	cmp	r3, #0
 800d436:	da08      	bge.n	800d44a <VdmInformSvids+0xaa>
        port->core_svid_info_.num_svids >= MAX_NUM_SVIDS)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
    if (port->svid_discv_idx_ < 0 &&
 800d43e:	2b0b      	cmp	r3, #11
 800d440:	d903      	bls.n	800d44a <VdmInformSvids+0xaa>
    {
      /* Continue discovery as no known svid is found and there are more svids */
      port->svid_discvry_done_ = FALSE;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    }

    notify_observers(EVENT_SVID_RECEIVED, port->port_id_, 0);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	b29b      	uxth	r3, r3
 800d450:	2200      	movs	r2, #0
 800d452:	4619      	mov	r1, r3
 800d454:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d458:	f7f7 ffea 	bl	8005430 <notify_observers>
  }

  /* If multiple request to svids are required then reset the vdm auto
   * discovery state to request svids here. */
}
 800d45c:	bf00      	nop
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d466:	b002      	add	sp, #8
 800d468:	4770      	bx	lr

0800d46a <VdmInformModes>:

void VdmInformModes(struct Port *port, FSC_BOOL success, SopType sop,
                    ModesInfo modes_info)
{
 800d46a:	b082      	sub	sp, #8
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	61fb      	str	r3, [r7, #28]
 800d476:	460b      	mov	r3, r1
 800d478:	70fb      	strb	r3, [r7, #3]
 800d47a:	4613      	mov	r3, r2
 800d47c:	70bb      	strb	r3, [r7, #2]
  FSC_U8 i;
  if (success == TRUE && modes_info.nack == FALSE)
 800d47e:	78fb      	ldrb	r3, [r7, #3]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d156      	bne.n	800d532 <VdmInformModes+0xc8>
 800d484:	7f3b      	ldrb	r3, [r7, #28]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d153      	bne.n	800d532 <VdmInformModes+0xc8>
  {
#ifdef FSC_HAVE_DP
    /* Evaluate DP mode first if defined */
    if (modes_info.svid == DP_SID)
 800d48a:	8bfb      	ldrh	r3, [r7, #30]
 800d48c:	f64f 7201 	movw	r2, #65281	; 0xff01
 800d490:	4293      	cmp	r3, r2
 800d492:	d120      	bne.n	800d4d6 <VdmInformModes+0x6c>
    {
      for (i = 0; i < modes_info.num_modes; i++)
 800d494:	2300      	movs	r3, #0
 800d496:	73fb      	strb	r3, [r7, #15]
 800d498:	e018      	b.n	800d4cc <VdmInformModes+0x62>
      {
        if (DP_EvaluateSinkCapability(port, modes_info.modes[i]))
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	3302      	adds	r3, #2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	f107 0218 	add.w	r2, r7, #24
 800d4a4:	4413      	add	r3, r2
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7f7 fc6e 	bl	8004d8c <DP_EvaluateSinkCapability>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d007      	beq.n	800d4c6 <VdmInformModes+0x5c>
        {
          port->auto_mode_entry_pos_ = i + 1;
 800d4b6:	7bfb      	ldrb	r3, [r7, #15]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	b25a      	sxtb	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
          break;
 800d4c4:	e02c      	b.n	800d520 <VdmInformModes+0xb6>
      for (i = 0; i < modes_info.num_modes; i++)
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	73fb      	strb	r3, [r7, #15]
 800d4cc:	7bfa      	ldrb	r2, [r7, #15]
 800d4ce:	6a3b      	ldr	r3, [r7, #32]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d3e2      	bcc.n	800d49a <VdmInformModes+0x30>
 800d4d4:	e024      	b.n	800d520 <VdmInformModes+0xb6>
        }
      }
    }
    else
#endif /* FSC_HAVE_DP */
    if (modes_info.svid == SVID_AUTO_ENTRY)
 800d4d6:	8bfb      	ldrh	r3, [r7, #30]
 800d4d8:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d11f      	bne.n	800d520 <VdmInformModes+0xb6>
    {
      for (i = 0; i < modes_info.num_modes; i++)
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
 800d4e4:	e018      	b.n	800d518 <VdmInformModes+0xae>
      {
        if (MODE_AUTO_ENTRY == modes_info.modes[i] &&
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
 800d4e8:	3302      	adds	r3, #2
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	f107 0218 	add.w	r2, r7, #24
 800d4f0:	4413      	add	r3, r2
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d10c      	bne.n	800d512 <VdmInformModes+0xa8>
            port->auto_mode_entry_enabled_ == TRUE)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
        if (MODE_AUTO_ENTRY == modes_info.modes[i] &&
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d107      	bne.n	800d512 <VdmInformModes+0xa8>
        {
          port->auto_mode_entry_pos_ = i + 1;
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	3301      	adds	r3, #1
 800d506:	b2db      	uxtb	r3, r3
 800d508:	b25a      	sxtb	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
          break;
 800d510:	e006      	b.n	800d520 <VdmInformModes+0xb6>
      for (i = 0; i < modes_info.num_modes; i++)
 800d512:	7bfb      	ldrb	r3, [r7, #15]
 800d514:	3301      	adds	r3, #1
 800d516:	73fb      	strb	r3, [r7, #15]
 800d518:	7bfa      	ldrb	r2, [r7, #15]
 800d51a:	6a3b      	ldr	r3, [r7, #32]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d3e2      	bcc.n	800d4e6 <VdmInformModes+0x7c>
        }
      }
    }
    notify_observers(EVENT_MODES_RECEIVED, port->port_id_, 0);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	b29b      	uxth	r3, r3
 800d526:	2200      	movs	r2, #0
 800d528:	4619      	mov	r1, r3
 800d52a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d52e:	f7f7 ff7f 	bl	8005430 <notify_observers>
  }
}
 800d532:	bf00      	nop
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d53c:	b002      	add	sp, #8
 800d53e:	4770      	bx	lr

0800d540 <VdmInformAttention>:

void VdmInformAttention(struct Port *port, FSC_U16 svid, FSC_U8 mode_index)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	460b      	mov	r3, r1
 800d54a:	807b      	strh	r3, [r7, #2]
 800d54c:	4613      	mov	r3, r2
 800d54e:	707b      	strb	r3, [r7, #1]
/*  TODO */
    notify_observers(EVENT_MODE_VDM_ATTENTION, port->port_id_, 0);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	b29b      	uxth	r3, r3
 800d556:	2200      	movs	r2, #0
 800d558:	4619      	mov	r1, r3
 800d55a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d55e:	f7f7 ff67 	bl	8005430 <notify_observers>
}
 800d562:	bf00      	nop
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <getIdHeader>:
  ret.command = (Command)((in >> 0) & 0x1F);
  return ret;
}

IdHeader getIdHeader(FSC_U32 in)
{
 800d56a:	b480      	push	{r7}
 800d56c:	b085      	sub	sp, #20
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
  IdHeader ret;
  ret.usb_host_data_capable = (FSC_BOOL)((in >> 31) & 0x1);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	0fdb      	lsrs	r3, r3, #31
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	7a3b      	ldrb	r3, [r7, #8]
 800d57e:	f362 0300 	bfi	r3, r2, #0, #1
 800d582:	723b      	strb	r3, [r7, #8]
  ret.usb_device_data_capable = (FSC_BOOL)((in >> 30) & 0x1);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	0f9b      	lsrs	r3, r3, #30
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	b2da      	uxtb	r2, r3
 800d58e:	7a3b      	ldrb	r3, [r7, #8]
 800d590:	f362 0341 	bfi	r3, r2, #1, #1
 800d594:	723b      	strb	r3, [r7, #8]
  ret.product_type_ufp = (ProductType)((in >> 27) & 0x7);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	0edb      	lsrs	r3, r3, #27
 800d59a:	f003 0307 	and.w	r3, r3, #7
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	7a3b      	ldrb	r3, [r7, #8]
 800d5a2:	f362 0384 	bfi	r3, r2, #2, #3
 800d5a6:	723b      	strb	r3, [r7, #8]
  ret.modal_op_supported = (FSC_BOOL)((in >> 26) & 0x1);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	0e9b      	lsrs	r3, r3, #26
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	7a3b      	ldrb	r3, [r7, #8]
 800d5b4:	f362 1345 	bfi	r3, r2, #5, #1
 800d5b8:	723b      	strb	r3, [r7, #8]
  ret.product_type_dfp = (ProductType)((in >> 23));
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	0ddb      	lsrs	r3, r3, #23
 800d5be:	f003 0307 	and.w	r3, r3, #7
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	7a7b      	ldrb	r3, [r7, #9]
 800d5c6:	f362 0302 	bfi	r3, r2, #0, #3
 800d5ca:	727b      	strb	r3, [r7, #9]
  ret.usb_vid = (FSC_U16)((in >> 0) & 0xFFFF);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	817b      	strh	r3, [r7, #10]
  return ret;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	60fb      	str	r3, [r7, #12]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	89ba      	ldrh	r2, [r7, #12]
 800d5da:	f362 030f 	bfi	r3, r2, #0, #16
 800d5de:	89fa      	ldrh	r2, [r7, #14]
 800d5e0:	f362 431f 	bfi	r3, r2, #16, #16
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <getBitsForIdHeader>:
  ret |= (tmp << 0);
  return ret;
}

FSC_U32 getBitsForIdHeader(IdHeader in)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b085      	sub	sp, #20
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	60bb      	str	r3, [r7, #8]
  tmp = in.usb_host_data_capable;
 800d600:	793b      	ldrb	r3, [r7, #4]
 800d602:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d606:	b2db      	uxtb	r3, r3
 800d608:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 31);
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	07db      	lsls	r3, r3, #31
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	4313      	orrs	r3, r2
 800d612:	60fb      	str	r3, [r7, #12]
  tmp = in.usb_device_data_capable;
 800d614:	793b      	ldrb	r3, [r7, #4]
 800d616:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 30);
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	079b      	lsls	r3, r3, #30
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	4313      	orrs	r3, r2
 800d626:	60fb      	str	r3, [r7, #12]
  tmp = in.product_type_ufp;
 800d628:	793b      	ldrb	r3, [r7, #4]
 800d62a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 27);
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	06db      	lsls	r3, r3, #27
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	4313      	orrs	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
  tmp = in.modal_op_supported;
 800d63c:	793b      	ldrb	r3, [r7, #4]
 800d63e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d642:	b2db      	uxtb	r3, r3
 800d644:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 26);
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	069b      	lsls	r3, r3, #26
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	60fb      	str	r3, [r7, #12]
  tmp = in.product_type_dfp;
 800d650:	797b      	ldrb	r3, [r7, #5]
 800d652:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800d656:	b2db      	uxtb	r3, r3
 800d658:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 23);
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	05db      	lsls	r3, r3, #23
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	4313      	orrs	r3, r2
 800d662:	60fb      	str	r3, [r7, #12]
  tmp = in.usb_vid;
 800d664:	88fb      	ldrh	r3, [r7, #6]
 800d666:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	60fb      	str	r3, [r7, #12]
  return ret;
 800d670:	68fb      	ldr	r3, [r7, #12]
}
 800d672:	4618      	mov	r0, r3
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <getCertStatVdo>:

/*  Functions that convert bits into internal VDO representations... */
CertStatVdo getCertStatVdo(FSC_U32 in)
{
 800d67e:	b480      	push	{r7}
 800d680:	b085      	sub	sp, #20
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  CertStatVdo ret;
  ret.test_id = (in >> 0) & 0xFFFFF;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f362 0313 	bfi	r3, r2, #0, #20
 800d692:	60fb      	str	r3, [r7, #12]
  return ret;
 800d694:	68fb      	ldr	r3, [r7, #12]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3714      	adds	r7, #20
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr

0800d6a2 <getProductVdo>:

ProductVdo getProductVdo(FSC_U32 in)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b085      	sub	sp, #20
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  ProductVdo ret;
  ret.usb_product_id = (in >> 16) & 0xFFFF;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	0c1b      	lsrs	r3, r3, #16
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	813b      	strh	r3, [r7, #8]
  ret.bcd_device = (in >> 0) & 0xFFFF;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	817b      	strh	r3, [r7, #10]
  return ret;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	2300      	movs	r3, #0
 800d6be:	89ba      	ldrh	r2, [r7, #12]
 800d6c0:	f362 030f 	bfi	r3, r2, #0, #16
 800d6c4:	89fa      	ldrh	r2, [r7, #14]
 800d6c6:	f362 431f 	bfi	r3, r2, #16, #16
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <getCableVdo>:

CableVdo getCableVdo(FSC_U32 in)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b085      	sub	sp, #20
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
  CableVdo ret;
  ret.cable_hw_version = (in >> 28) & 0xF;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	0f1b      	lsrs	r3, r3, #28
 800d6e2:	f003 030f 	and.w	r3, r3, #15
 800d6e6:	b2da      	uxtb	r2, r3
 800d6e8:	7a3b      	ldrb	r3, [r7, #8]
 800d6ea:	f362 0303 	bfi	r3, r2, #0, #4
 800d6ee:	723b      	strb	r3, [r7, #8]
  ret.cable_fw_version = (in >> 24) & 0xF;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	0e1b      	lsrs	r3, r3, #24
 800d6f4:	f003 030f 	and.w	r3, r3, #15
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	7a3b      	ldrb	r3, [r7, #8]
 800d6fc:	f362 1307 	bfi	r3, r2, #4, #4
 800d700:	723b      	strb	r3, [r7, #8]
  ret.cable_to_type = (CableToType)((in >> 18) & 0x3);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	0c9b      	lsrs	r3, r3, #18
 800d706:	f003 0303 	and.w	r3, r3, #3
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	7a7b      	ldrb	r3, [r7, #9]
 800d70e:	f362 0301 	bfi	r3, r2, #0, #2
 800d712:	727b      	strb	r3, [r7, #9]
  ret.cable_to_pr = (CableToPr)((in >> 17) & 0x1);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	0c5b      	lsrs	r3, r3, #17
 800d718:	f003 0301 	and.w	r3, r3, #1
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	7a7b      	ldrb	r3, [r7, #9]
 800d720:	f362 0382 	bfi	r3, r2, #2, #1
 800d724:	727b      	strb	r3, [r7, #9]
  ret.cable_latency = (CableLatency)((in >> 13) & 0xF);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	0b5b      	lsrs	r3, r3, #13
 800d72a:	f003 030f 	and.w	r3, r3, #15
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	7a7b      	ldrb	r3, [r7, #9]
 800d732:	f362 03c6 	bfi	r3, r2, #3, #4
 800d736:	727b      	strb	r3, [r7, #9]
  ret.cable_term = (CableTermType)((in >> 11) & 0x3);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	0adb      	lsrs	r3, r3, #11
 800d73c:	f003 0303 	and.w	r3, r3, #3
 800d740:	b2da      	uxtb	r2, r3
 800d742:	7abb      	ldrb	r3, [r7, #10]
 800d744:	f362 0301 	bfi	r3, r2, #0, #2
 800d748:	72bb      	strb	r3, [r7, #10]
  ret.sstx1_dir_supp = (SsDirectionality)((in >> 10) & 0x1);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	0a9b      	lsrs	r3, r3, #10
 800d74e:	f003 0301 	and.w	r3, r3, #1
 800d752:	b2da      	uxtb	r2, r3
 800d754:	7abb      	ldrb	r3, [r7, #10]
 800d756:	f362 0382 	bfi	r3, r2, #2, #1
 800d75a:	72bb      	strb	r3, [r7, #10]
  ret.sstx2_dir_supp = (SsDirectionality)((in >> 9) & 0x1);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	0a5b      	lsrs	r3, r3, #9
 800d760:	f003 0301 	and.w	r3, r3, #1
 800d764:	b2da      	uxtb	r2, r3
 800d766:	7abb      	ldrb	r3, [r7, #10]
 800d768:	f362 03c3 	bfi	r3, r2, #3, #1
 800d76c:	72bb      	strb	r3, [r7, #10]
  ret.ssrx1_dir_supp = (SsDirectionality)((in >> 8) & 0x1);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	0a1b      	lsrs	r3, r3, #8
 800d772:	f003 0301 	and.w	r3, r3, #1
 800d776:	b2da      	uxtb	r2, r3
 800d778:	7abb      	ldrb	r3, [r7, #10]
 800d77a:	f362 1304 	bfi	r3, r2, #4, #1
 800d77e:	72bb      	strb	r3, [r7, #10]
  ret.ssrx2_dir_supp = (SsDirectionality)((in >> 7) & 0x1);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	09db      	lsrs	r3, r3, #7
 800d784:	f003 0301 	and.w	r3, r3, #1
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	7abb      	ldrb	r3, [r7, #10]
 800d78c:	f362 1345 	bfi	r3, r2, #5, #1
 800d790:	72bb      	strb	r3, [r7, #10]
  ret.vbus_current_handling_cap =
      (VbusCurrentHandlingCapability)((in >> 5) & 0x3);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	095b      	lsrs	r3, r3, #5
 800d796:	f003 0303 	and.w	r3, r3, #3
 800d79a:	b2da      	uxtb	r2, r3
  ret.vbus_current_handling_cap =
 800d79c:	7abb      	ldrb	r3, [r7, #10]
 800d79e:	f362 1387 	bfi	r3, r2, #6, #2
 800d7a2:	72bb      	strb	r3, [r7, #10]
  ret.vbus_thru_cable = (VbusThruCable)((in >> 4) & 0x1);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	091b      	lsrs	r3, r3, #4
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	7afb      	ldrb	r3, [r7, #11]
 800d7b0:	f362 0300 	bfi	r3, r2, #0, #1
 800d7b4:	72fb      	strb	r3, [r7, #11]
  ret.sop2_presence = (Sop2Presence)((in >> 3) & 0x1);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	08db      	lsrs	r3, r3, #3
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	7afb      	ldrb	r3, [r7, #11]
 800d7c2:	f362 0341 	bfi	r3, r2, #1, #1
 800d7c6:	72fb      	strb	r3, [r7, #11]
  ret.usb_ss_supp = (UsbSsSupport)((in >> 0) & 0x7);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f003 0307 	and.w	r3, r3, #7
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	7afb      	ldrb	r3, [r7, #11]
 800d7d2:	f362 0384 	bfi	r3, r2, #2, #3
 800d7d6:	72fb      	strb	r3, [r7, #11]
  return ret;
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	60fb      	str	r3, [r7, #12]
 800d7dc:	2300      	movs	r3, #0
 800d7de:	7b3a      	ldrb	r2, [r7, #12]
 800d7e0:	f362 0307 	bfi	r3, r2, #0, #8
 800d7e4:	7b7a      	ldrb	r2, [r7, #13]
 800d7e6:	f362 230f 	bfi	r3, r2, #8, #8
 800d7ea:	7bba      	ldrb	r2, [r7, #14]
 800d7ec:	f362 4317 	bfi	r3, r2, #16, #8
 800d7f0:	7bfa      	ldrb	r2, [r7, #15]
 800d7f2:	f362 631f 	bfi	r3, r2, #24, #8
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <getAmaVdo>:

AmaVdo getAmaVdo(FSC_U32 in)
{
 800d802:	b480      	push	{r7}
 800d804:	b085      	sub	sp, #20
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  AmaVdo ret;
  ret.cable_hw_version = (in >> 28) & 0xF;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	0f1b      	lsrs	r3, r3, #28
 800d80e:	f003 030f 	and.w	r3, r3, #15
 800d812:	b2da      	uxtb	r2, r3
 800d814:	7a3b      	ldrb	r3, [r7, #8]
 800d816:	f362 0303 	bfi	r3, r2, #0, #4
 800d81a:	723b      	strb	r3, [r7, #8]
  ret.cable_fw_version = (in >> 24) & 0xF;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	0e1b      	lsrs	r3, r3, #24
 800d820:	f003 030f 	and.w	r3, r3, #15
 800d824:	b2da      	uxtb	r2, r3
 800d826:	7a3b      	ldrb	r3, [r7, #8]
 800d828:	f362 1307 	bfi	r3, r2, #4, #4
 800d82c:	723b      	strb	r3, [r7, #8]
  ret.sstx1_dir_supp = (SsDirectionality)((in >> 11) & 0x1);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	0adb      	lsrs	r3, r3, #11
 800d832:	f003 0301 	and.w	r3, r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	7a7b      	ldrb	r3, [r7, #9]
 800d83a:	f362 0300 	bfi	r3, r2, #0, #1
 800d83e:	727b      	strb	r3, [r7, #9]
  ret.sstx2_dir_supp = (SsDirectionality)((in >> 10) & 0x1);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	0a9b      	lsrs	r3, r3, #10
 800d844:	f003 0301 	and.w	r3, r3, #1
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	7a7b      	ldrb	r3, [r7, #9]
 800d84c:	f362 0341 	bfi	r3, r2, #1, #1
 800d850:	727b      	strb	r3, [r7, #9]
  ret.ssrx1_dir_supp = (SsDirectionality)((in >> 9) & 0x1);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	0a5b      	lsrs	r3, r3, #9
 800d856:	f003 0301 	and.w	r3, r3, #1
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	7a7b      	ldrb	r3, [r7, #9]
 800d85e:	f362 0382 	bfi	r3, r2, #2, #1
 800d862:	727b      	strb	r3, [r7, #9]
  ret.ssrx2_dir_supp = (SsDirectionality)((in >> 8) & 0x1);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	0a1b      	lsrs	r3, r3, #8
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	b2da      	uxtb	r2, r3
 800d86e:	7a7b      	ldrb	r3, [r7, #9]
 800d870:	f362 03c3 	bfi	r3, r2, #3, #1
 800d874:	727b      	strb	r3, [r7, #9]
  ret.vconn_full_power = (VConnFullPower)((in >> 5) & 0x7);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	095b      	lsrs	r3, r3, #5
 800d87a:	f003 0307 	and.w	r3, r3, #7
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	7a7b      	ldrb	r3, [r7, #9]
 800d882:	f362 1306 	bfi	r3, r2, #4, #3
 800d886:	727b      	strb	r3, [r7, #9]
  ret.vconn_requirement = (VConnRequirement)((in >> 4) & 0x1);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	091b      	lsrs	r3, r3, #4
 800d88c:	f003 0301 	and.w	r3, r3, #1
 800d890:	b2da      	uxtb	r2, r3
 800d892:	7a7b      	ldrb	r3, [r7, #9]
 800d894:	f362 13c7 	bfi	r3, r2, #7, #1
 800d898:	727b      	strb	r3, [r7, #9]
  ret.vbus_requirement = (VBusRequirement)((in >> 3) & 0x1);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	08db      	lsrs	r3, r3, #3
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	b2da      	uxtb	r2, r3
 800d8a4:	7abb      	ldrb	r3, [r7, #10]
 800d8a6:	f362 0300 	bfi	r3, r2, #0, #1
 800d8aa:	72bb      	strb	r3, [r7, #10]
  ret.usb_ss_supp = (AmaUsbSsSupport)((in >> 0) & 0x7);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f003 0307 	and.w	r3, r3, #7
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	7abb      	ldrb	r3, [r7, #10]
 800d8b6:	f362 0343 	bfi	r3, r2, #1, #3
 800d8ba:	72bb      	strb	r3, [r7, #10]
  return ret;
 800d8bc:	f107 030c 	add.w	r3, r7, #12
 800d8c0:	f107 0208 	add.w	r2, r7, #8
 800d8c4:	6812      	ldr	r2, [r2, #0]
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	8019      	strh	r1, [r3, #0]
 800d8ca:	3302      	adds	r3, #2
 800d8cc:	0c12      	lsrs	r2, r2, #16
 800d8ce:	701a      	strb	r2, [r3, #0]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	7b3a      	ldrb	r2, [r7, #12]
 800d8d4:	f362 0307 	bfi	r3, r2, #0, #8
 800d8d8:	7b7a      	ldrb	r2, [r7, #13]
 800d8da:	f362 230f 	bfi	r3, r2, #8, #8
 800d8de:	7bba      	ldrb	r2, [r7, #14]
 800d8e0:	f362 4317 	bfi	r3, r2, #16, #8
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <getBitsForProductVdo>:

/*  Functions that convert internal VDO representations into bits. */
FSC_U32 getBitsForProductVdo(ProductVdo in)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b085      	sub	sp, #20
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	60bb      	str	r3, [r7, #8]
  tmp = in.usb_product_id;
 800d900:	88bb      	ldrh	r3, [r7, #4]
 800d902:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 16);
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	041b      	lsls	r3, r3, #16
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	60fb      	str	r3, [r7, #12]
  tmp = in.bcd_device;
 800d90e:	88fb      	ldrh	r3, [r7, #6]
 800d910:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	4313      	orrs	r3, r2
 800d918:	60fb      	str	r3, [r7, #12]
  return ret;
 800d91a:	68fb      	ldr	r3, [r7, #12]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <getBitsForCertStatVdo>:

FSC_U32 getBitsForCertStatVdo(CertStatVdo in)
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	60bb      	str	r3, [r7, #8]
  tmp = in.test_id;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d93e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	4313      	orrs	r3, r2
 800d946:	60fb      	str	r3, [r7, #12]
  return ret;
 800d948:	68fb      	ldr	r3, [r7, #12]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <getBitsForCableVdo>:

FSC_U32 getBitsForCableVdo(CableVdo in)
{
 800d956:	b480      	push	{r7}
 800d958:	b085      	sub	sp, #20
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800d962:	2300      	movs	r3, #0
 800d964:	60bb      	str	r3, [r7, #8]
  tmp = in.cable_hw_version;
 800d966:	793b      	ldrb	r3, [r7, #4]
 800d968:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 28);
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	071b      	lsls	r3, r3, #28
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	4313      	orrs	r3, r2
 800d978:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_fw_version;
 800d97a:	793b      	ldrb	r3, [r7, #4]
 800d97c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d980:	b2db      	uxtb	r3, r3
 800d982:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 24);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	061b      	lsls	r3, r3, #24
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_to_type;
 800d98e:	797b      	ldrb	r3, [r7, #5]
 800d990:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d994:	b2db      	uxtb	r3, r3
 800d996:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 18);
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	049b      	lsls	r3, r3, #18
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_to_pr;
 800d9a2:	797b      	ldrb	r3, [r7, #5]
 800d9a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 17);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	045b      	lsls	r3, r3, #17
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_latency;
 800d9b6:	797b      	ldrb	r3, [r7, #5]
 800d9b8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 13);
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	035b      	lsls	r3, r3, #13
 800d9c4:	68fa      	ldr	r2, [r7, #12]
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_term;
 800d9ca:	79bb      	ldrb	r3, [r7, #6]
 800d9cc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 11);
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	02db      	lsls	r3, r3, #11
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	60fb      	str	r3, [r7, #12]
  tmp = in.sstx1_dir_supp;
 800d9de:	79bb      	ldrb	r3, [r7, #6]
 800d9e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 10);
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	029b      	lsls	r3, r3, #10
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	60fb      	str	r3, [r7, #12]
  tmp = in.sstx2_dir_supp;
 800d9f2:	79bb      	ldrb	r3, [r7, #6]
 800d9f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 9);
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	025b      	lsls	r3, r3, #9
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	4313      	orrs	r3, r2
 800da04:	60fb      	str	r3, [r7, #12]
  tmp = in.ssrx1_dir_supp;
 800da06:	79bb      	ldrb	r3, [r7, #6]
 800da08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 8);
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	021b      	lsls	r3, r3, #8
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	4313      	orrs	r3, r2
 800da18:	60fb      	str	r3, [r7, #12]
  tmp = in.ssrx2_dir_supp;
 800da1a:	79bb      	ldrb	r3, [r7, #6]
 800da1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800da20:	b2db      	uxtb	r3, r3
 800da22:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 7);
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	01db      	lsls	r3, r3, #7
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	60fb      	str	r3, [r7, #12]
  tmp = in.vbus_current_handling_cap;
 800da2e:	79bb      	ldrb	r3, [r7, #6]
 800da30:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800da34:	b2db      	uxtb	r3, r3
 800da36:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 5);
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	015b      	lsls	r3, r3, #5
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	4313      	orrs	r3, r2
 800da40:	60fb      	str	r3, [r7, #12]
  tmp = in.vbus_thru_cable;
 800da42:	79fb      	ldrb	r3, [r7, #7]
 800da44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 4);
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	011b      	lsls	r3, r3, #4
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4313      	orrs	r3, r2
 800da54:	60fb      	str	r3, [r7, #12]
  tmp = in.sop2_presence;
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 3);
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	00db      	lsls	r3, r3, #3
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	4313      	orrs	r3, r2
 800da68:	60fb      	str	r3, [r7, #12]
  tmp = in.usb_ss_supp;
 800da6a:	79fb      	ldrb	r3, [r7, #7]
 800da6c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800da70:	b2db      	uxtb	r3, r3
 800da72:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	4313      	orrs	r3, r2
 800da7a:	60fb      	str	r3, [r7, #12]
  return ret;
 800da7c:	68fb      	ldr	r3, [r7, #12]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <getBitsForAmaVdo>:

FSC_U32 getBitsForAmaVdo(AmaVdo in)
{
 800da8a:	b480      	push	{r7}
 800da8c:	b085      	sub	sp, #20
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
  FSC_U32 ret = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
  FSC_U32 tmp = 0;
 800da96:	2300      	movs	r3, #0
 800da98:	60bb      	str	r3, [r7, #8]
  tmp = in.cable_hw_version;
 800da9a:	793b      	ldrb	r3, [r7, #4]
 800da9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 28);
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	071b      	lsls	r3, r3, #28
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	4313      	orrs	r3, r2
 800daac:	60fb      	str	r3, [r7, #12]
  tmp = in.cable_fw_version;
 800daae:	793b      	ldrb	r3, [r7, #4]
 800dab0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 24);
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	061b      	lsls	r3, r3, #24
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]
  tmp = in.sstx1_dir_supp;
 800dac2:	797b      	ldrb	r3, [r7, #5]
 800dac4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 11);
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	02db      	lsls	r3, r3, #11
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	60fb      	str	r3, [r7, #12]
  tmp = in.sstx2_dir_supp;
 800dad6:	797b      	ldrb	r3, [r7, #5]
 800dad8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 10);
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	029b      	lsls	r3, r3, #10
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]
  tmp = in.ssrx1_dir_supp;
 800daea:	797b      	ldrb	r3, [r7, #5]
 800daec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 9);
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	025b      	lsls	r3, r3, #9
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	60fb      	str	r3, [r7, #12]
  tmp = in.ssrx2_dir_supp;
 800dafe:	797b      	ldrb	r3, [r7, #5]
 800db00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800db04:	b2db      	uxtb	r3, r3
 800db06:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 8);
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	021b      	lsls	r3, r3, #8
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	4313      	orrs	r3, r2
 800db10:	60fb      	str	r3, [r7, #12]
  tmp = in.vconn_full_power;
 800db12:	797b      	ldrb	r3, [r7, #5]
 800db14:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 5);
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	015b      	lsls	r3, r3, #5
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	4313      	orrs	r3, r2
 800db24:	60fb      	str	r3, [r7, #12]
  tmp = in.vconn_requirement;
 800db26:	797b      	ldrb	r3, [r7, #5]
 800db28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 4);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	011b      	lsls	r3, r3, #4
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	4313      	orrs	r3, r2
 800db38:	60fb      	str	r3, [r7, #12]
  tmp = in.vbus_requirement;
 800db3a:	79bb      	ldrb	r3, [r7, #6]
 800db3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800db40:	b2db      	uxtb	r3, r3
 800db42:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 3);
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	00db      	lsls	r3, r3, #3
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	60fb      	str	r3, [r7, #12]
  tmp = in.usb_ss_supp;
 800db4e:	79bb      	ldrb	r3, [r7, #6]
 800db50:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800db54:	b2db      	uxtb	r3, r3
 800db56:	60bb      	str	r3, [r7, #8]
  ret |= (tmp << 0);
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	60fb      	str	r3, [r7, #12]
  return ret;
 800db60:	68fb      	ldr	r3, [r7, #12]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <VIF_InitializeSnkCaps>:
    };

    for(i = 0; i < 7; ++i) {src_caps[i].object = gSrc_caps[i].object;}
}
void VIF_InitializeSnkCaps(doDataObject_t *snk_caps)
{
 800db6e:	b480      	push	{r7}
 800db70:	b08b      	sub	sp, #44	; 0x2c
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
    FSC_U8 i;
    doDataObject_t gSnk_caps[7] =
 800db76:	f107 0308 	add.w	r3, r7, #8
 800db7a:	2200      	movs	r2, #0
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	605a      	str	r2, [r3, #4]
 800db80:	609a      	str	r2, [r3, #8]
 800db82:	60da      	str	r2, [r3, #12]
 800db84:	611a      	str	r2, [r3, #16]
 800db86:	615a      	str	r2, [r3, #20]
 800db88:	619a      	str	r2, [r3, #24]
 800db8a:	893b      	ldrh	r3, [r7, #8]
 800db8c:	2264      	movs	r2, #100	; 0x64
 800db8e:	f362 0309 	bfi	r3, r2, #0, #10
 800db92:	813b      	strh	r3, [r7, #8]
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	2264      	movs	r2, #100	; 0x64
 800db98:	f362 2393 	bfi	r3, r2, #10, #10
 800db9c:	60bb      	str	r3, [r7, #8]
 800db9e:	7afb      	ldrb	r3, [r7, #11]
 800dba0:	f043 0304 	orr.w	r3, r3, #4
 800dba4:	72fb      	strb	r3, [r7, #11]
 800dba6:	7afb      	ldrb	r3, [r7, #11]
 800dba8:	f043 0320 	orr.w	r3, r3, #32
 800dbac:	72fb      	strb	r3, [r7, #11]
 800dbae:	89bb      	ldrh	r3, [r7, #12]
 800dbb0:	220a      	movs	r2, #10
 800dbb2:	f362 0309 	bfi	r3, r2, #0, #10
 800dbb6:	81bb      	strh	r3, [r7, #12]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	22b4      	movs	r2, #180	; 0xb4
 800dbbc:	f362 2393 	bfi	r3, r2, #10, #10
 800dbc0:	60fb      	str	r3, [r7, #12]
 800dbc2:	7bfb      	ldrb	r3, [r7, #15]
 800dbc4:	f043 0304 	orr.w	r3, r3, #4
 800dbc8:	73fb      	strb	r3, [r7, #15]
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
 800dbcc:	f043 0320 	orr.w	r3, r3, #32
 800dbd0:	73fb      	strb	r3, [r7, #15]
 800dbd2:	7cfb      	ldrb	r3, [r7, #19]
 800dbd4:	f043 0304 	orr.w	r3, r3, #4
 800dbd8:	74fb      	strb	r3, [r7, #19]
 800dbda:	7cfb      	ldrb	r3, [r7, #19]
 800dbdc:	f043 0320 	orr.w	r3, r3, #32
 800dbe0:	74fb      	strb	r3, [r7, #19]
 800dbe2:	7dfb      	ldrb	r3, [r7, #23]
 800dbe4:	f043 0304 	orr.w	r3, r3, #4
 800dbe8:	75fb      	strb	r3, [r7, #23]
 800dbea:	7dfb      	ldrb	r3, [r7, #23]
 800dbec:	f043 0320 	orr.w	r3, r3, #32
 800dbf0:	75fb      	strb	r3, [r7, #23]
 800dbf2:	7efb      	ldrb	r3, [r7, #27]
 800dbf4:	f043 0304 	orr.w	r3, r3, #4
 800dbf8:	76fb      	strb	r3, [r7, #27]
 800dbfa:	7efb      	ldrb	r3, [r7, #27]
 800dbfc:	f043 0320 	orr.w	r3, r3, #32
 800dc00:	76fb      	strb	r3, [r7, #27]
 800dc02:	7ffb      	ldrb	r3, [r7, #31]
 800dc04:	f043 0304 	orr.w	r3, r3, #4
 800dc08:	77fb      	strb	r3, [r7, #31]
 800dc0a:	7ffb      	ldrb	r3, [r7, #31]
 800dc0c:	f043 0320 	orr.w	r3, r3, #32
 800dc10:	77fb      	strb	r3, [r7, #31]
 800dc12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc16:	f043 0304 	orr.w	r3, r3, #4
 800dc1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc22:	f043 0320 	orr.w	r3, r3, #32
 800dc26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        CREATE_SINK_PDO(5, Snk_PDO_Supply_Type5),
        CREATE_SINK_PDO(6, Snk_PDO_Supply_Type6),
        CREATE_SINK_PDO(7, Snk_PDO_Supply_Type7),
    };

    for(i = 0; i < 7; ++i) {snk_caps[i].object = gSnk_caps[i].object;}
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc30:	e012      	b.n	800dc58 <VIF_InitializeSnkCaps+0xea>
 800dc32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc3a:	0092      	lsls	r2, r2, #2
 800dc3c:	6879      	ldr	r1, [r7, #4]
 800dc3e:	440a      	add	r2, r1
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dc46:	440b      	add	r3, r1
 800dc48:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800dc4c:	6013      	str	r3, [r2, #0]
 800dc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc52:	3301      	adds	r3, #1
 800dc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc5c:	2b06      	cmp	r3, #6
 800dc5e:	d9e8      	bls.n	800dc32 <VIF_InitializeSnkCaps+0xc4>

}
 800dc60:	bf00      	nop
 800dc62:	372c      	adds	r7, #44	; 0x2c
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <__libc_init_array>:
 800dc6c:	b570      	push	{r4, r5, r6, lr}
 800dc6e:	4e0d      	ldr	r6, [pc, #52]	; (800dca4 <__libc_init_array+0x38>)
 800dc70:	4c0d      	ldr	r4, [pc, #52]	; (800dca8 <__libc_init_array+0x3c>)
 800dc72:	1ba4      	subs	r4, r4, r6
 800dc74:	10a4      	asrs	r4, r4, #2
 800dc76:	2500      	movs	r5, #0
 800dc78:	42a5      	cmp	r5, r4
 800dc7a:	d109      	bne.n	800dc90 <__libc_init_array+0x24>
 800dc7c:	4e0b      	ldr	r6, [pc, #44]	; (800dcac <__libc_init_array+0x40>)
 800dc7e:	4c0c      	ldr	r4, [pc, #48]	; (800dcb0 <__libc_init_array+0x44>)
 800dc80:	f000 f820 	bl	800dcc4 <_init>
 800dc84:	1ba4      	subs	r4, r4, r6
 800dc86:	10a4      	asrs	r4, r4, #2
 800dc88:	2500      	movs	r5, #0
 800dc8a:	42a5      	cmp	r5, r4
 800dc8c:	d105      	bne.n	800dc9a <__libc_init_array+0x2e>
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc94:	4798      	blx	r3
 800dc96:	3501      	adds	r5, #1
 800dc98:	e7ee      	b.n	800dc78 <__libc_init_array+0xc>
 800dc9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc9e:	4798      	blx	r3
 800dca0:	3501      	adds	r5, #1
 800dca2:	e7f2      	b.n	800dc8a <__libc_init_array+0x1e>
 800dca4:	0800dd8c 	.word	0x0800dd8c
 800dca8:	0800dd8c 	.word	0x0800dd8c
 800dcac:	0800dd8c 	.word	0x0800dd8c
 800dcb0:	0800dd90 	.word	0x0800dd90

0800dcb4 <memset>:
 800dcb4:	4402      	add	r2, r0
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d100      	bne.n	800dcbe <memset+0xa>
 800dcbc:	4770      	bx	lr
 800dcbe:	f803 1b01 	strb.w	r1, [r3], #1
 800dcc2:	e7f9      	b.n	800dcb8 <memset+0x4>

0800dcc4 <_init>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	bf00      	nop
 800dcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcca:	bc08      	pop	{r3}
 800dccc:	469e      	mov	lr, r3
 800dcce:	4770      	bx	lr

0800dcd0 <_fini>:
 800dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd2:	bf00      	nop
 800dcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcd6:	bc08      	pop	{r3}
 800dcd8:	469e      	mov	lr, r3
 800dcda:	4770      	bx	lr
